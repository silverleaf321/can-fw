
CANaryFirware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c00  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08010ea0  08010ea0  00011ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011358  08011358  000131fc  2**0
                  CONTENTS
  4 .ARM          00000008  08011358  08011358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011360  08011360  000131fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011360  08011360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  24000000  08011368  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000475c  240001fc  08011564  000131fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24004958  08011564  00013958  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e399  00000000  00000000  0001322a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a38  00000000  00000000  000315c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  00035000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155a  00000000  00000000  00036bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044311  00000000  00000000  0003810a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224a1  00000000  00000000  0007c41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b1ded  00000000  00000000  0009e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002506a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008468  00000000  00000000  002506ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00258b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010e88 	.word	0x08010e88

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	08010e88 	.word	0x08010e88

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <cycleBrightness>:
    delayMicro(tcycle);
  }
}

void cycleBrightness()
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	brightness = brightness - 2 == 0 ? 10 : brightness - 2;
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <cycleBrightness+0x28>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d004      	beq.n	80004d2 <cycleBrightness+0x16>
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <cycleBrightness+0x28>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	3b02      	subs	r3, #2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	e000      	b.n	80004d4 <cycleBrightness+0x18>
 80004d2:	230a      	movs	r3, #10
 80004d4:	4a03      	ldr	r2, [pc, #12]	@ (80004e4 <cycleBrightness+0x28>)
 80004d6:	7013      	strb	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	24000008 	.word	0x24000008

080004e8 <HAL_FDCAN_RxFifo0Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// CAN1 Bus callback. Turns off CAN and ADC interrupts for the duration
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	f000 81b1 	beq.w	8000860 <HAL_FDCAN_RxFifo0Callback+0x378>

    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK) {
 80004fe:	4b92      	ldr	r3, [pc, #584]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000500:	4a92      	ldr	r2, [pc, #584]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000502:	2140      	movs	r1, #64	@ 0x40
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f002 ff71 	bl	80033ec <HAL_FDCAN_GetRxMessage>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <HAL_FDCAN_RxFifo0Callback+0x2c>

    	/* Reception Error */
    	Error_Handler();
 8000510:	f001 fe78 	bl	8002204 <Error_Handler>

    }

    //Deactivated Interrupts
    HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE);
 8000514:	2110      	movs	r1, #16
 8000516:	488e      	ldr	r0, [pc, #568]	@ (8000750 <HAL_FDCAN_RxFifo0Callback+0x268>)
 8000518:	f003 f950 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
    HAL_FDCAN_DeactivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 800051c:	2101      	movs	r1, #1
 800051e:	488d      	ldr	r0, [pc, #564]	@ (8000754 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000520:	f003 f94c 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
    HAL_TIM_Base_Stop_IT(&htim16);
 8000524:	488c      	ldr	r0, [pc, #560]	@ (8000758 <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000526:	f00a fa01 	bl	800a92c <HAL_TIM_Base_Stop_IT>

    //Check if SD write buffer will be filled out --> if so write to SD before continuing
    if (sdDataByteCount + 13 >= 15360) {
 800052a:	4b8c      	ldr	r3, [pc, #560]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	330d      	adds	r3, #13
 8000530:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 8000534:	d301      	bcc.n	800053a <HAL_FDCAN_RxFifo0Callback+0x52>

    	sdWrite();
 8000536:	f001 f885 	bl	8001644 <sdWrite>

    }

	//sorts out compound messages of LTC
	if (!(RxHeader1.Identifier == 0x460 && RxData1[0] != 0)) {
 800053a:	4b84      	ldr	r3, [pc, #528]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8000542:	d103      	bne.n	800054c <HAL_FDCAN_RxFifo0Callback+0x64>
 8000544:	4b80      	ldr	r3, [pc, #512]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d16f      	bne.n	800062c <HAL_FDCAN_RxFifo0Callback+0x144>

		curtime = __HAL_TIM_GET_COUNTER(&htim2) / 10;
 800054c:	4b84      	ldr	r3, [pc, #528]	@ (8000760 <HAL_FDCAN_RxFifo0Callback+0x278>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000552:	4a84      	ldr	r2, [pc, #528]	@ (8000764 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 8000554:	fba2 2303 	umull	r2, r3, r2, r3
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	4a83      	ldr	r2, [pc, #524]	@ (8000768 <HAL_FDCAN_RxFifo0Callback+0x280>)
 800055c:	6013      	str	r3, [r2, #0]
		sdData[sdDataByteCount] = (RxHeader1.Identifier >> 8) & 0xFF;
 800055e:	4b7b      	ldr	r3, [pc, #492]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	0a1a      	lsrs	r2, r3, #8
 8000564:	4b7d      	ldr	r3, [pc, #500]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	b2d1      	uxtb	r1, r2
 800056a:	4a80      	ldr	r2, [pc, #512]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 800056c:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+1] = RxHeader1.Identifier & 0xFF;
 800056e:	4b77      	ldr	r3, [pc, #476]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b7a      	ldr	r3, [pc, #488]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	b2d1      	uxtb	r1, r2
 800057a:	4a7c      	ldr	r2, [pc, #496]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 800057c:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+2] = RxData1[0];
 800057e:	4b77      	ldr	r3, [pc, #476]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3302      	adds	r3, #2
 8000584:	4a70      	ldr	r2, [pc, #448]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000586:	7811      	ldrb	r1, [r2, #0]
 8000588:	4a78      	ldr	r2, [pc, #480]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 800058a:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+3] = RxData1[1];
 800058c:	4b73      	ldr	r3, [pc, #460]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3303      	adds	r3, #3
 8000592:	4a6d      	ldr	r2, [pc, #436]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000594:	7851      	ldrb	r1, [r2, #1]
 8000596:	4a75      	ldr	r2, [pc, #468]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 8000598:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+4] = RxData1[2];
 800059a:	4b70      	ldr	r3, [pc, #448]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3304      	adds	r3, #4
 80005a0:	4a69      	ldr	r2, [pc, #420]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80005a2:	7891      	ldrb	r1, [r2, #2]
 80005a4:	4a71      	ldr	r2, [pc, #452]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005a6:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+5] = RxData1[3];
 80005a8:	4b6c      	ldr	r3, [pc, #432]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3305      	adds	r3, #5
 80005ae:	4a66      	ldr	r2, [pc, #408]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80005b0:	78d1      	ldrb	r1, [r2, #3]
 80005b2:	4a6e      	ldr	r2, [pc, #440]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005b4:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+6] = RxData1[4];
 80005b6:	4b69      	ldr	r3, [pc, #420]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3306      	adds	r3, #6
 80005bc:	4a62      	ldr	r2, [pc, #392]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80005be:	7911      	ldrb	r1, [r2, #4]
 80005c0:	4a6a      	ldr	r2, [pc, #424]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005c2:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+7] = RxData1[5];
 80005c4:	4b65      	ldr	r3, [pc, #404]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3307      	adds	r3, #7
 80005ca:	4a5f      	ldr	r2, [pc, #380]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80005cc:	7951      	ldrb	r1, [r2, #5]
 80005ce:	4a67      	ldr	r2, [pc, #412]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005d0:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+8] = RxData1[6];
 80005d2:	4b62      	ldr	r3, [pc, #392]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3308      	adds	r3, #8
 80005d8:	4a5b      	ldr	r2, [pc, #364]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80005da:	7991      	ldrb	r1, [r2, #6]
 80005dc:	4a63      	ldr	r2, [pc, #396]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005de:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+9] = RxData1[7];
 80005e0:	4b5e      	ldr	r3, [pc, #376]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3309      	adds	r3, #9
 80005e6:	4a58      	ldr	r2, [pc, #352]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80005e8:	79d1      	ldrb	r1, [r2, #7]
 80005ea:	4a60      	ldr	r2, [pc, #384]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005ec:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+10] = (curtime >> 16) & 0xFF;
 80005ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000768 <HAL_FDCAN_RxFifo0Callback+0x280>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	0c1a      	lsrs	r2, r3, #16
 80005f4:	4b59      	ldr	r3, [pc, #356]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	330a      	adds	r3, #10
 80005fa:	b2d1      	uxtb	r1, r2
 80005fc:	4a5b      	ldr	r2, [pc, #364]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80005fe:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+11] = (curtime >> 8) & 0xFF;
 8000600:	4b59      	ldr	r3, [pc, #356]	@ (8000768 <HAL_FDCAN_RxFifo0Callback+0x280>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	0a1a      	lsrs	r2, r3, #8
 8000606:	4b55      	ldr	r3, [pc, #340]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	330b      	adds	r3, #11
 800060c:	b2d1      	uxtb	r1, r2
 800060e:	4a57      	ldr	r2, [pc, #348]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 8000610:	54d1      	strb	r1, [r2, r3]
		sdData[sdDataByteCount+12] = curtime & 0xFF;
 8000612:	4b55      	ldr	r3, [pc, #340]	@ (8000768 <HAL_FDCAN_RxFifo0Callback+0x280>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b51      	ldr	r3, [pc, #324]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	330c      	adds	r3, #12
 800061c:	b2d1      	uxtb	r1, r2
 800061e:	4a53      	ldr	r2, [pc, #332]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x284>)
 8000620:	54d1      	strb	r1, [r2, r3]
		sdDataByteCount = sdDataByteCount + 13;
 8000622:	4b4e      	ldr	r3, [pc, #312]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	330d      	adds	r3, #13
 8000628:	4a4c      	ldr	r2, [pc, #304]	@ (800075c <HAL_FDCAN_RxFifo0Callback+0x274>)
 800062a:	6013      	str	r3, [r2, #0]

	}

    //Turn ADC timer back on
	HAL_TIM_Base_Start_IT(&htim16);
 800062c:	484a      	ldr	r0, [pc, #296]	@ (8000758 <HAL_FDCAN_RxFifo0Callback+0x270>)
 800062e:	f00a f905 	bl	800a83c <HAL_TIM_Base_Start_IT>

	//Save updated information for screen purposes
    if (RxHeader1.Identifier == 0x649) {
 8000632:	4b46      	ldr	r3, [pc, #280]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f240 6249 	movw	r2, #1609	@ 0x649
 800063a:	4293      	cmp	r3, r2
 800063c:	d113      	bne.n	8000666 <HAL_FDCAN_RxFifo0Callback+0x17e>

    	xfr_ptr->wtemp = RxData1[0];
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4b4b      	ldr	r3, [pc, #300]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8000644:	801a      	strh	r2, [r3, #0]
    	xfr_ptr->voltage = RxData1[5];
 8000646:	4b40      	ldr	r3, [pc, #256]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000648:	795a      	ldrb	r2, [r3, #5]
 800064a:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 800064c:	80da      	strh	r2, [r3, #6]
    	xfr_ptr->fuelUsed = (RxData1[6] << 8) + RxData1[7];
 800064e:	4b3e      	ldr	r3, [pc, #248]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000650:	799b      	ldrb	r3, [r3, #6]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b29b      	uxth	r3, r3
 8000656:	4a3c      	ldr	r2, [pc, #240]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000658:	79d2      	ldrb	r2, [r2, #7]
 800065a:	4611      	mov	r1, r2
 800065c:	4a44      	ldr	r2, [pc, #272]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 800065e:	440b      	add	r3, r1
 8000660:	b29b      	uxth	r3, r3
 8000662:	8193      	strh	r3, [r2, #12]
 8000664:	e0f2      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x64C) {
 8000666:	4b39      	ldr	r3, [pc, #228]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f240 624c 	movw	r2, #1612	@ 0x64c
 800066e:	4293      	cmp	r3, r2
 8000670:	d10b      	bne.n	800068a <HAL_FDCAN_RxFifo0Callback+0x1a2>

    	xfr_ptr->uptime = (RxData1[2] << 8) + RxData1[3];
 8000672:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29b      	uxth	r3, r3
 800067a:	4a33      	ldr	r2, [pc, #204]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800067c:	78d2      	ldrb	r2, [r2, #3]
 800067e:	4611      	mov	r1, r2
 8000680:	4a3b      	ldr	r2, [pc, #236]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8000682:	440b      	add	r3, r1
 8000684:	b29b      	uxth	r3, r3
 8000686:	8113      	strh	r3, [r2, #8]
 8000688:	e0e0      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x640) {
 800068a:	4b30      	ldr	r3, [pc, #192]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000692:	d10b      	bne.n	80006ac <HAL_FDCAN_RxFifo0Callback+0x1c4>

    	xfr_ptr->rpm = (RxData1[0] << 8) + RxData1[1];
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b29b      	uxth	r3, r3
 800069c:	4a2a      	ldr	r2, [pc, #168]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800069e:	7852      	ldrb	r2, [r2, #1]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a33      	ldr	r2, [pc, #204]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80006a4:	440b      	add	r3, r1
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	8153      	strh	r3, [r2, #10]
 80006aa:	e0cf      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x641) {
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f240 6241 	movw	r2, #1601	@ 0x641
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <HAL_FDCAN_RxFifo0Callback+0x1e8>

    	xfr_ptr->fuelPressure = (RxData1[4] << 8) + RxData1[5];
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80006c2:	7952      	ldrb	r2, [r2, #5]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80006c8:	440b      	add	r3, r1
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	81d3      	strh	r3, [r2, #14]
 80006ce:	e0bd      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x460) {
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 80006d8:	d112      	bne.n	8000700 <HAL_FDCAN_RxFifo0Callback+0x218>

    	xfr_ptr->mix = RxData1[0] == 0 ? (RxData1[1] << 8) + RxData1[2] : xfr_ptr->mix;
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d108      	bne.n	80006f4 <HAL_FDCAN_RxFifo0Callback+0x20c>
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80006ec:	7892      	ldrb	r2, [r2, #2]
 80006ee:	4413      	add	r3, r2
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	e002      	b.n	80006fa <HAL_FDCAN_RxFifo0Callback+0x212>
 80006f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80006f6:	885b      	ldrh	r3, [r3, #2]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80006fc:	8053      	strh	r3, [r2, #2]
 80006fe:	e0a5      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x64D) {
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f240 624d 	movw	r2, #1613	@ 0x64d
 8000708:	4293      	cmp	r3, r2
 800070a:	d108      	bne.n	800071e <HAL_FDCAN_RxFifo0Callback+0x236>

    	xfr_ptr->gear = RxData1[6] & 0b1111;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800070e:	799b      	ldrb	r3, [r3, #6]
 8000710:	461a      	mov	r2, r3
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8000714:	f002 020f 	and.w	r2, r2, #15
 8000718:	b292      	uxth	r2, r2
 800071a:	809a      	strh	r2, [r3, #4]
 800071c:	e096      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x404) {
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f240 4204 	movw	r2, #1028	@ 0x404
 8000726:	4293      	cmp	r3, r2
 8000728:	d104      	bne.n	8000734 <HAL_FDCAN_RxFifo0Callback+0x24c>

    	xfr_ptr->shutdown = RxData1[3];
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 800072c:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800072e:	78d2      	ldrb	r2, [r2, #3]
 8000730:	749a      	strb	r2, [r3, #18]
 8000732:	e08b      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>

    } else if (RxHeader1.Identifier == 0x410) {
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f5b3 6f82 	cmp.w	r3, #1040	@ 0x410
 800073c:	d11a      	bne.n	8000774 <HAL_FDCAN_RxFifo0Callback+0x28c>

    	xfr_ptr->ECUMapState = RxData1[0];
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8000740:	4a01      	ldr	r2, [pc, #4]	@ (8000748 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	761a      	strb	r2, [r3, #24]
 8000746:	e081      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
 8000748:	240006b0 	.word	0x240006b0
 800074c:	24000658 	.word	0x24000658
 8000750:	24000218 	.word	0x24000218
 8000754:	240002b8 	.word	0x240002b8
 8000758:	240005c8 	.word	0x240005c8
 800075c:	240006c0 	.word	0x240006c0
 8000760:	240004e4 	.word	0x240004e4
 8000764:	cccccccd 	.word	0xcccccccd
 8000768:	240042c8 	.word	0x240042c8
 800076c:	240006c8 	.word	0x240006c8
 8000770:	38001000 	.word	0x38001000

    } else if (RxHeader1.Identifier == 0x400) {
 8000774:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800077c:	d102      	bne.n	8000784 <HAL_FDCAN_RxFifo0Callback+0x29c>
    	xbeeTransmit();
 800077e:	f001 fc17 	bl	8001fb0 <xbeeTransmit>
 8000782:	e063      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x404) {
 8000784:	4b38      	ldr	r3, [pc, #224]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f240 4204 	movw	r2, #1028	@ 0x404
 800078c:	4293      	cmp	r3, r2
 800078e:	d102      	bne.n	8000796 <HAL_FDCAN_RxFifo0Callback+0x2ae>
    	xbeeTransmit();
 8000790:	f001 fc0e 	bl	8001fb0 <xbeeTransmit>
 8000794:	e05a      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x460) {
 8000796:	4b34      	ldr	r3, [pc, #208]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 800079e:	d102      	bne.n	80007a6 <HAL_FDCAN_RxFifo0Callback+0x2be>
    	xbeeTransmit();
 80007a0:	f001 fc06 	bl	8001fb0 <xbeeTransmit>
 80007a4:	e052      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x640) {
 80007a6:	4b30      	ldr	r3, [pc, #192]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80007ae:	d102      	bne.n	80007b6 <HAL_FDCAN_RxFifo0Callback+0x2ce>
    	xbeeTransmit();
 80007b0:	f001 fbfe 	bl	8001fb0 <xbeeTransmit>
 80007b4:	e04a      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x641) {
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f240 6241 	movw	r2, #1601	@ 0x641
 80007be:	4293      	cmp	r3, r2
 80007c0:	d102      	bne.n	80007c8 <HAL_FDCAN_RxFifo0Callback+0x2e0>
    	xbeeTransmit();
 80007c2:	f001 fbf5 	bl	8001fb0 <xbeeTransmit>
 80007c6:	e041      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x642) {
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f240 6242 	movw	r2, #1602	@ 0x642
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d102      	bne.n	80007da <HAL_FDCAN_RxFifo0Callback+0x2f2>
    	xbeeTransmit();
 80007d4:	f001 fbec 	bl	8001fb0 <xbeeTransmit>
 80007d8:	e038      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x645) {
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f240 6245 	movw	r2, #1605	@ 0x645
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d102      	bne.n	80007ec <HAL_FDCAN_RxFifo0Callback+0x304>
    	xbeeTransmit();
 80007e6:	f001 fbe3 	bl	8001fb0 <xbeeTransmit>
 80007ea:	e02f      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x648) {
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f5b3 6fc9 	cmp.w	r3, #1608	@ 0x648
 80007f4:	d102      	bne.n	80007fc <HAL_FDCAN_RxFifo0Callback+0x314>
    	xbeeTransmit();
 80007f6:	f001 fbdb 	bl	8001fb0 <xbeeTransmit>
 80007fa:	e027      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x649) {
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f240 6249 	movw	r2, #1609	@ 0x649
 8000804:	4293      	cmp	r3, r2
 8000806:	d102      	bne.n	800080e <HAL_FDCAN_RxFifo0Callback+0x326>
    	xbeeTransmit();
 8000808:	f001 fbd2 	bl	8001fb0 <xbeeTransmit>
 800080c:	e01e      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x64C) {
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f240 624c 	movw	r2, #1612	@ 0x64c
 8000816:	4293      	cmp	r3, r2
 8000818:	d102      	bne.n	8000820 <HAL_FDCAN_RxFifo0Callback+0x338>
    	xbeeTransmit();
 800081a:	f001 fbc9 	bl	8001fb0 <xbeeTransmit>
 800081e:	e015      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x64D) {
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f240 624d 	movw	r2, #1613	@ 0x64d
 8000828:	4293      	cmp	r3, r2
 800082a:	d102      	bne.n	8000832 <HAL_FDCAN_RxFifo0Callback+0x34a>
    	xbeeTransmit();
 800082c:	f001 fbc0 	bl	8001fb0 <xbeeTransmit>
 8000830:	e00c      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x001) {
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d102      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x358>
    	xbeeTransmit();
 800083a:	f001 fbb9 	bl	8001fb0 <xbeeTransmit>
 800083e:	e005      	b.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    } else if (RxHeader1.Identifier == 0x002) {
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_FDCAN_RxFifo0Callback+0x380>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d101      	bne.n	800084c <HAL_FDCAN_RxFifo0Callback+0x364>
    	xbeeTransmit();
 8000848:	f001 fbb2 	bl	8001fb0 <xbeeTransmit>
    }

    //Turn CAN notifications back on
    HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	4806      	ldr	r0, [pc, #24]	@ (800086c <HAL_FDCAN_RxFifo0Callback+0x384>)
 8000852:	f002 ff39 	bl	80036c8 <HAL_FDCAN_ActivateNotification>
    HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x388>)
 800085c:	f002 ff34 	bl	80036c8 <HAL_FDCAN_ActivateNotification>

  }
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000658 	.word	0x24000658
 800086c:	24000218 	.word	0x24000218
 8000870:	240002b8 	.word	0x240002b8

08000874 <HAL_FDCAN_RxFifo1Callback>:

// CAN2 Bus callback. Turns off CAN and ADC interrupts for the duration
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	f003 0310 	and.w	r3, r3, #16
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 80d1 	beq.w	8000a2c <HAL_FDCAN_RxFifo1Callback+0x1b8>

	/* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK) {
 800088a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 800088c:	4a6a      	ldr	r2, [pc, #424]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 800088e:	2141      	movs	r1, #65	@ 0x41
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f002 fdab 	bl	80033ec <HAL_FDCAN_GetRxMessage>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_FDCAN_RxFifo1Callback+0x2c>

    	/* Reception Error */
    	Error_Handler();
 800089c:	f001 fcb2 	bl	8002204 <Error_Handler>
    }

    //Deactivated Interrupts
    HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE);
 80008a0:	2110      	movs	r1, #16
 80008a2:	4866      	ldr	r0, [pc, #408]	@ (8000a3c <HAL_FDCAN_RxFifo1Callback+0x1c8>)
 80008a4:	f002 ff8a 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
    HAL_FDCAN_DeactivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 80008a8:	2101      	movs	r1, #1
 80008aa:	4865      	ldr	r0, [pc, #404]	@ (8000a40 <HAL_FDCAN_RxFifo1Callback+0x1cc>)
 80008ac:	f002 ff86 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
    HAL_TIM_Base_Stop_IT(&htim16);
 80008b0:	4864      	ldr	r0, [pc, #400]	@ (8000a44 <HAL_FDCAN_RxFifo1Callback+0x1d0>)
 80008b2:	f00a f83b 	bl	800a92c <HAL_TIM_Base_Stop_IT>

    //Check if SD write buffer will be filled out --> if so write to SD before continuing
    if (sdDataByteCount + 13 >= 15360) {
 80008b6:	4b64      	ldr	r3, [pc, #400]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	330d      	adds	r3, #13
 80008bc:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 80008c0:	d301      	bcc.n	80008c6 <HAL_FDCAN_RxFifo1Callback+0x52>

    	sdWrite();
 80008c2:	f000 febf 	bl	8001644 <sdWrite>

    }


    // Temp check for tire temps TODO
    if (RxHeader2.Identifier == 0x4C2) {
 80008c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f240 42c2 	movw	r2, #1218	@ 0x4c2
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d104      	bne.n	80008dc <HAL_FDCAN_RxFifo1Callback+0x68>
    	sdDataByteCount = sdDataByteCount;
 80008d2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a5c      	ldr	r2, [pc, #368]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e02a      	b.n	8000932 <HAL_FDCAN_RxFifo1Callback+0xbe>
    }
    else if (RxHeader2.Identifier == 0xA220) {
 80008dc:	4b56      	ldr	r3, [pc, #344]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f24a 2220 	movw	r2, #41504	@ 0xa220
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d104      	bne.n	80008f2 <HAL_FDCAN_RxFifo1Callback+0x7e>
    	sdDataByteCount = sdDataByteCount;
 80008e8:	4b57      	ldr	r3, [pc, #348]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a56      	ldr	r2, [pc, #344]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	e01f      	b.n	8000932 <HAL_FDCAN_RxFifo1Callback+0xbe>
    } else if (RxHeader2.Identifier == 0xA320) {
 80008f2:	4b51      	ldr	r3, [pc, #324]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f24a 3220 	movw	r2, #41760	@ 0xa320
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d104      	bne.n	8000908 <HAL_FDCAN_RxFifo1Callback+0x94>
    	sdDataByteCount = sdDataByteCount;
 80008fe:	4b52      	ldr	r3, [pc, #328]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a51      	ldr	r2, [pc, #324]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e014      	b.n	8000932 <HAL_FDCAN_RxFifo1Callback+0xbe>
    } else if (RxHeader2.Identifier == 0xA420) {
 8000908:	4b4b      	ldr	r3, [pc, #300]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f24a 4220 	movw	r2, #42016	@ 0xa420
 8000910:	4293      	cmp	r3, r2
 8000912:	d104      	bne.n	800091e <HAL_FDCAN_RxFifo1Callback+0xaa>
    	sdDataByteCount = sdDataByteCount;
 8000914:	4b4c      	ldr	r3, [pc, #304]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a4b      	ldr	r2, [pc, #300]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	e009      	b.n	8000932 <HAL_FDCAN_RxFifo1Callback+0xbe>
    }
    else if (RxHeader2.Identifier == 0xA120) {
 800091e:	4b46      	ldr	r3, [pc, #280]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f24a 1220 	movw	r2, #41248	@ 0xa120
 8000926:	4293      	cmp	r3, r2
 8000928:	d103      	bne.n	8000932 <HAL_FDCAN_RxFifo1Callback+0xbe>
        	sdDataByteCount = sdDataByteCount;
 800092a:	4b47      	ldr	r3, [pc, #284]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a46      	ldr	r2, [pc, #280]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000930:	6013      	str	r3, [r2, #0]
    }

	curtime = __HAL_TIM_GET_COUNTER(&htim2) / 10;
 8000932:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <HAL_FDCAN_RxFifo1Callback+0x1d8>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000938:	4a45      	ldr	r2, [pc, #276]	@ (8000a50 <HAL_FDCAN_RxFifo1Callback+0x1dc>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	4a44      	ldr	r2, [pc, #272]	@ (8000a54 <HAL_FDCAN_RxFifo1Callback+0x1e0>)
 8000942:	6013      	str	r3, [r2, #0]
	sdData[sdDataByteCount] = (RxHeader2.Identifier >> 8) & 0xFF;
 8000944:	4b3c      	ldr	r3, [pc, #240]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	0a1a      	lsrs	r2, r3, #8
 800094a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	b2d1      	uxtb	r1, r2
 8000950:	4a41      	ldr	r2, [pc, #260]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 8000952:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+1] = RxHeader2.Identifier & 0xFF;
 8000954:	4b38      	ldr	r3, [pc, #224]	@ (8000a38 <HAL_FDCAN_RxFifo1Callback+0x1c4>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	b2d1      	uxtb	r1, r2
 8000960:	4a3d      	ldr	r2, [pc, #244]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 8000962:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+2] = RxData2[0];
 8000964:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3302      	adds	r3, #2
 800096a:	4a32      	ldr	r2, [pc, #200]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 800096c:	7811      	ldrb	r1, [r2, #0]
 800096e:	4a3a      	ldr	r2, [pc, #232]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 8000970:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+3] = RxData2[1];
 8000972:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3303      	adds	r3, #3
 8000978:	4a2e      	ldr	r2, [pc, #184]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 800097a:	7851      	ldrb	r1, [r2, #1]
 800097c:	4a36      	ldr	r2, [pc, #216]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 800097e:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+4] = RxData2[2];
 8000980:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3304      	adds	r3, #4
 8000986:	4a2b      	ldr	r2, [pc, #172]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 8000988:	7891      	ldrb	r1, [r2, #2]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 800098c:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+5] = RxData2[3];
 800098e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3305      	adds	r3, #5
 8000994:	4a27      	ldr	r2, [pc, #156]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 8000996:	78d1      	ldrb	r1, [r2, #3]
 8000998:	4a2f      	ldr	r2, [pc, #188]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 800099a:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+6] = RxData2[4];
 800099c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3306      	adds	r3, #6
 80009a2:	4a24      	ldr	r2, [pc, #144]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 80009a4:	7911      	ldrb	r1, [r2, #4]
 80009a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 80009a8:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+7] = RxData2[5];
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3307      	adds	r3, #7
 80009b0:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 80009b2:	7951      	ldrb	r1, [r2, #5]
 80009b4:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 80009b6:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+8] = RxData2[6];
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3308      	adds	r3, #8
 80009be:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 80009c0:	7991      	ldrb	r1, [r2, #6]
 80009c2:	4a25      	ldr	r2, [pc, #148]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 80009c4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+9] = RxData2[7];
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3309      	adds	r3, #9
 80009cc:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <HAL_FDCAN_RxFifo1Callback+0x1c0>)
 80009ce:	79d1      	ldrb	r1, [r2, #7]
 80009d0:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 80009d2:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+10] = (curtime >> 16) & 0xFF;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <HAL_FDCAN_RxFifo1Callback+0x1e0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0c1a      	lsrs	r2, r3, #16
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	330a      	adds	r3, #10
 80009e0:	b2d1      	uxtb	r1, r2
 80009e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 80009e4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+11] = (curtime >> 8) & 0xFF;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <HAL_FDCAN_RxFifo1Callback+0x1e0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	0a1a      	lsrs	r2, r3, #8
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	330b      	adds	r3, #11
 80009f2:	b2d1      	uxtb	r1, r2
 80009f4:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 80009f6:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+12] = curtime & 0xFF;
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_FDCAN_RxFifo1Callback+0x1e0>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	330c      	adds	r3, #12
 8000a02:	b2d1      	uxtb	r1, r2
 8000a04:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <HAL_FDCAN_RxFifo1Callback+0x1e4>)
 8000a06:	54d1      	strb	r1, [r2, r3]
	sdDataByteCount = sdDataByteCount + 13;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	330d      	adds	r3, #13
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <HAL_FDCAN_RxFifo1Callback+0x1d4>)
 8000a10:	6013      	str	r3, [r2, #0]

    //Turn ADC timer back on, turn CAN notifications back on
    HAL_TIM_Base_Start_IT(&htim16);
 8000a12:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <HAL_FDCAN_RxFifo1Callback+0x1d0>)
 8000a14:	f009 ff12 	bl	800a83c <HAL_TIM_Base_Start_IT>
    HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <HAL_FDCAN_RxFifo1Callback+0x1c8>)
 8000a1e:	f002 fe53 	bl	80036c8 <HAL_FDCAN_ActivateNotification>
    HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2101      	movs	r1, #1
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <HAL_FDCAN_RxFifo1Callback+0x1cc>)
 8000a28:	f002 fe4e 	bl	80036c8 <HAL_FDCAN_ActivateNotification>

  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240006b8 	.word	0x240006b8
 8000a38:	24000680 	.word	0x24000680
 8000a3c:	24000218 	.word	0x24000218
 8000a40:	240002b8 	.word	0x240002b8
 8000a44:	240005c8 	.word	0x240005c8
 8000a48:	240006c0 	.word	0x240006c0
 8000a4c:	240004e4 	.word	0x240004e4
 8000a50:	cccccccd 	.word	0xcccccccd
 8000a54:	240042c8 	.word	0x240042c8
 8000a58:	240006c8 	.word	0x240006c8

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sdDataByteCount = 0;
 8000a62:	4b92      	ldr	r3, [pc, #584]	@ (8000cac <main+0x250>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
	xfr_ptr->sdInitialized = 0;
 8000a68:	4b91      	ldr	r3, [pc, #580]	@ (8000cb0 <main+0x254>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	74da      	strb	r2, [r3, #19]
	xfr_ptr->sdPresent = 0;
 8000a6e:	4b90      	ldr	r3, [pc, #576]	@ (8000cb0 <main+0x254>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	751a      	strb	r2, [r3, #20]
	xfr_ptr->loggingStatus = 0;
 8000a74:	4b8e      	ldr	r3, [pc, #568]	@ (8000cb0 <main+0x254>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	755a      	strb	r2, [r3, #21]
	xfr_ptr->wtemp = 0;
 8000a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8000cb0 <main+0x254>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	801a      	strh	r2, [r3, #0]
	xfr_ptr->mix = 0;
 8000a80:	4b8b      	ldr	r3, [pc, #556]	@ (8000cb0 <main+0x254>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	805a      	strh	r2, [r3, #2]
	xfr_ptr->gear = 0;
 8000a86:	4b8a      	ldr	r3, [pc, #552]	@ (8000cb0 <main+0x254>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	809a      	strh	r2, [r3, #4]
	xfr_ptr->voltage = 0;
 8000a8c:	4b88      	ldr	r3, [pc, #544]	@ (8000cb0 <main+0x254>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	80da      	strh	r2, [r3, #6]
	xfr_ptr->uptime = 0;
 8000a92:	4b87      	ldr	r3, [pc, #540]	@ (8000cb0 <main+0x254>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	811a      	strh	r2, [r3, #8]
	xfr_ptr->rpm = 0;
 8000a98:	4b85      	ldr	r3, [pc, #532]	@ (8000cb0 <main+0x254>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	815a      	strh	r2, [r3, #10]
	xfr_ptr->fuelUsed = 0;
 8000a9e:	4b84      	ldr	r3, [pc, #528]	@ (8000cb0 <main+0x254>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	819a      	strh	r2, [r3, #12]
	xfr_ptr->fuelPressure = 0;
 8000aa4:	4b82      	ldr	r3, [pc, #520]	@ (8000cb0 <main+0x254>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	81da      	strh	r2, [r3, #14]
	xfr_ptr->shiftingPressure = 0;
 8000aaa:	4b81      	ldr	r3, [pc, #516]	@ (8000cb0 <main+0x254>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	821a      	strh	r2, [r3, #16]
	xfr_ptr->shutdown = 0;
 8000ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8000cb0 <main+0x254>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	749a      	strb	r2, [r3, #18]
	xfr_ptr->logNumber = 0;
 8000ab6:	4b7e      	ldr	r3, [pc, #504]	@ (8000cb0 <main+0x254>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	759a      	strb	r2, [r3, #22]
	xfr_ptr->flag = 0;
 8000abc:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb0 <main+0x254>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	75da      	strb	r2, [r3, #23]
	hiya = 0;
 8000ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb4 <main+0x258>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	hiya2 = 0;
 8000ac8:	4b7b      	ldr	r3, [pc, #492]	@ (8000cb8 <main+0x25c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	debounce = 0;
 8000ace:	4b7b      	ldr	r3, [pc, #492]	@ (8000cbc <main+0x260>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	engineStartNumber = 0;
 8000ad4:	4b7a      	ldr	r3, [pc, #488]	@ (8000cc0 <main+0x264>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	nextStartTime = 0;
 8000ada:	4b7a      	ldr	r3, [pc, #488]	@ (8000cc4 <main+0x268>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
	radFanStatus = 0;
 8000ae0:	4b79      	ldr	r3, [pc, #484]	@ (8000cc8 <main+0x26c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aea:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000aec:	bf00      	nop
 8000aee:	4b77      	ldr	r3, [pc, #476]	@ (8000ccc <main+0x270>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d004      	beq.n	8000b04 <main+0xa8>
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	60fa      	str	r2, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dcf4      	bgt.n	8000aee <main+0x92>
  if ( timeout < 0 )
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da01      	bge.n	8000b0e <main+0xb2>
  {
  Error_Handler();
 8000b0a:	f001 fb7b 	bl	8002204 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f001 ff93 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f8f1 	bl	8000cf8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b16:	4b6d      	ldr	r3, [pc, #436]	@ (8000ccc <main+0x270>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8000ccc <main+0x270>)
 8000b1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b69      	ldr	r3, [pc, #420]	@ (8000ccc <main+0x270>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f003 fd9b 	bl	8004670 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f003 fdb1 	bl	80046a4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b46:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b48:	bf00      	nop
 8000b4a:	4b60      	ldr	r3, [pc, #384]	@ (8000ccc <main+0x270>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d104      	bne.n	8000b60 <main+0x104>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	60fa      	str	r2, [r7, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dcf4      	bgt.n	8000b4a <main+0xee>
if ( timeout < 0 )
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da01      	bge.n	8000b6a <main+0x10e>
{
Error_Handler();
 8000b66:	f001 fb4d 	bl	8002204 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 fc4d 	bl	8001408 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b6e:	f000 fa85 	bl	800107c <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 8000b72:	f000 fb25 	bl	80011c0 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000b76:	f00b f8f5 	bl	800bd64 <MX_FATFS_Init>
  MX_TIM6_Init();
 8000b7a:	f000 fbc5 	bl	8001308 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000b7e:	f000 fb75 	bl	800126c <MX_TIM2_Init>
  MX_FDCAN2_Init();
 8000b82:	f000 f9f1 	bl	8000f68 <MX_FDCAN2_Init>
  MX_FDCAN1_Init();
 8000b86:	f000 f965 	bl	8000e54 <MX_FDCAN1_Init>
  MX_TIM16_Init();
 8000b8a:	f000 fc17 	bl	80013bc <MX_TIM16_Init>
  MX_TIM14_Init();
 8000b8e:	f000 fbf1 	bl	8001374 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000b92:	f000 fabf 	bl	8001114 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Timer for log timestamp (in 0.1ms)
  HAL_TIM_Base_Start(&htim2);
 8000b96:	484e      	ldr	r0, [pc, #312]	@ (8000cd0 <main+0x274>)
 8000b98:	f009 fde0 	bl	800a75c <HAL_TIM_Base_Start>

  // Timer for blocking microsecond delays
  HAL_TIM_Base_Start(&htim6);
 8000b9c:	484d      	ldr	r0, [pc, #308]	@ (8000cd4 <main+0x278>)
 8000b9e:	f009 fddd 	bl	800a75c <HAL_TIM_Base_Start>

  // ADC SPI CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba8:	484b      	ldr	r0, [pc, #300]	@ (8000cd8 <main+0x27c>)
 8000baa:	f003 fd2d 	bl	8004608 <HAL_GPIO_WritePin>

  // Initialize the first file to be written to
  setCurrentFile();
 8000bae:	f000 fdb3 	bl	8001718 <setCurrentFile>

  // Sets the log number to be displayed on screen
  char fileNum[5];
  fileNum[0] = fileName[0];
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cdc <main+0x280>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	713b      	strb	r3, [r7, #4]
  fileNum[1] = fileName[1];
 8000bb8:	4b48      	ldr	r3, [pc, #288]	@ (8000cdc <main+0x280>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	717b      	strb	r3, [r7, #5]
  fileNum[2] = fileName[2];
 8000bbe:	4b47      	ldr	r3, [pc, #284]	@ (8000cdc <main+0x280>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	71bb      	strb	r3, [r7, #6]
  fileNum[3] = fileName[3];
 8000bc4:	4b45      	ldr	r3, [pc, #276]	@ (8000cdc <main+0x280>)
 8000bc6:	78db      	ldrb	r3, [r3, #3]
 8000bc8:	71fb      	strb	r3, [r7, #7]
  fileNum[4] = '\0';
 8000bca:	2300      	movs	r3, #0
 8000bcc:	723b      	strb	r3, [r7, #8]
  xfr_ptr->logNumber = atoi(fileNum);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00d fce0 	bl	800e596 <atoi>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <main+0x254>)
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	759a      	strb	r2, [r3, #22]

  adcInit();
 8000bde:	f000 fe0b 	bl	80017f8 <adcInit>

  // Timer for ADC read interrupts
  HAL_TIM_Base_Start_IT(&htim16);
 8000be2:	483f      	ldr	r0, [pc, #252]	@ (8000ce0 <main+0x284>)
 8000be4:	f009 fe2a 	bl	800a83c <HAL_TIM_Base_Start_IT>

  // FDCAN responsible for CAN1 Bus
  HAL_FDCAN_Start(&hfdcan2);
 8000be8:	483e      	ldr	r0, [pc, #248]	@ (8000ce4 <main+0x288>)
 8000bea:	f002 fb78 	bl	80032de <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	483c      	ldr	r0, [pc, #240]	@ (8000ce4 <main+0x288>)
 8000bf4:	f002 fd68 	bl	80036c8 <HAL_FDCAN_ActivateNotification>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x1a6>
  {
	  Error_Handler();
 8000bfe:	f001 fb01 	bl	8002204 <Error_Handler>
  }

  // FDCAN responsible for CAN2 Bus
  HAL_FDCAN_Start(&hfdcan1);
 8000c02:	4839      	ldr	r0, [pc, #228]	@ (8000ce8 <main+0x28c>)
 8000c04:	f002 fb6b 	bl	80032de <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4836      	ldr	r0, [pc, #216]	@ (8000ce8 <main+0x28c>)
 8000c0e:	f002 fd5b 	bl	80036c8 <HAL_FDCAN_ActivateNotification>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <main+0x1c0>
  {
	  Error_Handler();
 8000c18:	f001 faf4 	bl	8002204 <Error_Handler>
  }

  //configure Tx message for CAN
  CANTxData[0] = 0;
 8000c1c:	4b33      	ldr	r3, [pc, #204]	@ (8000cec <main+0x290>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
  CANTxData[1] = 0;
 8000c22:	4b32      	ldr	r3, [pc, #200]	@ (8000cec <main+0x290>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	705a      	strb	r2, [r3, #1]
  CANTxData[2] = 0;
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <main+0x290>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	709a      	strb	r2, [r3, #2]
  CANTxData[3] = 0;
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <main+0x290>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	70da      	strb	r2, [r3, #3]
  CANTxData[4] = 0;
 8000c34:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <main+0x290>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	711a      	strb	r2, [r3, #4]
  CANTxData[5] = 0;
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <main+0x290>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	715a      	strb	r2, [r3, #5]
  CANTxData[6] = 0;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	@ (8000cec <main+0x290>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	719a      	strb	r2, [r3, #6]
  CANTxData[7] = 0;
 8000c46:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <main+0x290>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	71da      	strb	r2, [r3, #7]

  radFanStatus = 0;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <main+0x26c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  mapStatus = 0;
 8000c52:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <main+0x294>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
//		  toggleRadfan();
//	  } else if (xfr_ptr->wtemp < 108 && radFanStatus == 1) {
//		  toggleRadfan();
//	  }

	  if (!xfr_ptr->sdInitialized) {
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <main+0x254>)
 8000c5a:	7cdb      	ldrb	r3, [r3, #19]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <main+0x20c>
		  MX_SDMMC1_SD_Init();
 8000c62:	f000 fa0b 	bl	800107c <MX_SDMMC1_SD_Init>
 8000c66:	e00b      	b.n	8000c80 <main+0x224>
	  } else {
		  xfr_ptr->sdPresent = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) ? false : true;
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4822      	ldr	r0, [pc, #136]	@ (8000cf4 <main+0x298>)
 8000c6c:	f003 fcb4 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <main+0x254>)
 8000c7e:	751a      	strb	r2, [r3, #20]
//	  if (xfr_ptr->sdPresent == false) {
//		  xfr_ptr->sdInitialized = false;
//	  }

	  // Temp way to communicate button interrupts between cores
	  if (xfr_ptr->flag == 1) {
 8000c80:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <main+0x254>)
 8000c82:	7ddb      	ldrb	r3, [r3, #23]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d105      	bne.n	8000c96 <main+0x23a>
		  toggleMap();
 8000c8a:	f001 f8a5 	bl	8001dd8 <toggleMap>
		  xfr_ptr->flag = 0;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <main+0x254>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	75da      	strb	r2, [r3, #23]
 8000c94:	e7e0      	b.n	8000c58 <main+0x1fc>
	  } else if (xfr_ptr->flag == 2) {
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <main+0x254>)
 8000c98:	7ddb      	ldrb	r3, [r3, #23]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d1db      	bne.n	8000c58 <main+0x1fc>
		  dataFlag();
 8000ca0:	f001 f8ee 	bl	8001e80 <dataFlag>
		  xfr_ptr->flag = 0;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	@ (8000cb0 <main+0x254>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	75da      	strb	r2, [r3, #23]
	  if (!xfr_ptr->sdInitialized) {
 8000caa:	e7d5      	b.n	8000c58 <main+0x1fc>
 8000cac:	240006c0 	.word	0x240006c0
 8000cb0:	38001000 	.word	0x38001000
 8000cb4:	240042d2 	.word	0x240042d2
 8000cb8:	240042d3 	.word	0x240042d3
 8000cbc:	240042d4 	.word	0x240042d4
 8000cc0:	240042d5 	.word	0x240042d5
 8000cc4:	240042cc 	.word	0x240042cc
 8000cc8:	240042d0 	.word	0x240042d0
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	240004e4 	.word	0x240004e4
 8000cd4:	24000530 	.word	0x24000530
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	2400000c 	.word	0x2400000c
 8000ce0:	240005c8 	.word	0x240005c8
 8000ce4:	240002b8 	.word	0x240002b8
 8000ce8:	24000218 	.word	0x24000218
 8000cec:	240006a8 	.word	0x240006a8
 8000cf0:	240042d1 	.word	0x240042d1
 8000cf4:	58020c00 	.word	0x58020c00

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09e      	sub	sp, #120	@ 0x78
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d02:	224c      	movs	r2, #76	@ 0x4c
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00e fa0b 	bl	800f122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2220      	movs	r2, #32
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f00e fa04 	bl	800f122 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f003 fcd6 	bl	80046cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	4b48      	ldr	r3, [pc, #288]	@ (8000e48 <SystemClock_Config+0x150>)
 8000d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d28:	4a47      	ldr	r2, [pc, #284]	@ (8000e48 <SystemClock_Config+0x150>)
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d30:	4b45      	ldr	r3, [pc, #276]	@ (8000e48 <SystemClock_Config+0x150>)
 8000d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b44      	ldr	r3, [pc, #272]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a43      	ldr	r2, [pc, #268]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b41      	ldr	r3, [pc, #260]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d52:	bf00      	nop
 8000d54:	4b3d      	ldr	r3, [pc, #244]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d60:	d1f8      	bne.n	8000d54 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <SystemClock_Config+0x158>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d68:	4a39      	ldr	r2, [pc, #228]	@ (8000e50 <SystemClock_Config+0x158>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d72:	4b37      	ldr	r3, [pc, #220]	@ (8000e50 <SystemClock_Config+0x158>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a30      	ldr	r2, [pc, #192]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <SystemClock_Config+0x154>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <SystemClock_Config+0x150>)
 8000d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e48 <SystemClock_Config+0x150>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000da6:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <SystemClock_Config+0x150>)
 8000da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000db2:	bf00      	nop
 8000db4:	4b25      	ldr	r3, [pc, #148]	@ (8000e4c <SystemClock_Config+0x154>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dc0:	d1f8      	bne.n	8000db4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000dd8:	2378      	movs	r3, #120	@ 0x78
 8000dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000de0:	2308      	movs	r3, #8
 8000de2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000de8:	230c      	movs	r3, #12
 8000dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fcc1 	bl	8004780 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e04:	f001 f9fe 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	233f      	movs	r3, #63	@ 0x3f
 8000e0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e14:	2308      	movs	r3, #8
 8000e16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e26:	2340      	movs	r3, #64	@ 0x40
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 f8ff 	bl	8005034 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e3c:	f001 f9e2 	bl	8002204 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3778      	adds	r7, #120	@ 0x78
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58000400 	.word	0x58000400
 8000e4c:	58024800 	.word	0x58024800
 8000e50:	58024400 	.word	0x58024400

08000e54 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e5a:	4b41      	ldr	r3, [pc, #260]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e5c:	4a41      	ldr	r2, [pc, #260]	@ (8000f64 <MX_FDCAN1_Init+0x110>)
 8000e5e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e60:	4b3f      	ldr	r3, [pc, #252]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e66:	4b3e      	ldr	r3, [pc, #248]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e72:	4b3b      	ldr	r3, [pc, #236]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e78:	4b39      	ldr	r3, [pc, #228]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e7e:	4b38      	ldr	r3, [pc, #224]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000e84:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 117;
 8000e8a:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e8c:	2275      	movs	r2, #117	@ 0x75
 8000e8e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e90:	4b33      	ldr	r3, [pc, #204]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 8000e96:	4b32      	ldr	r3, [pc, #200]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e98:	2208      	movs	r2, #8
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 8000e9c:	4b30      	ldr	r3, [pc, #192]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 7;
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000eba:	4b29      	ldr	r3, [pc, #164]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000ec0:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ec8:	2204      	movs	r2, #4
 8000eca:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000efc:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f02:	4817      	ldr	r0, [pc, #92]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000f04:	f001 ff6a 	bl	8002ddc <HAL_FDCAN_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000f0e:	f001 f979 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  	FDCAN_FilterTypeDef sFilterConfig;

	//sFilterConfig.IdType = FDCAN_EXTENDED_ID;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
	//change to allow all, use to test both CAN busses
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x400;
 8000f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f26:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x640;
 8000f28:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8000f2c:	617b      	str	r3, [r7, #20]
	//sFilterConfig.FilterID2 = 0xA421;
	sFilterConfig.RxBufferIndex = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000f38:	f002 f92e 	bl	8003198 <HAL_FDCAN_ConfigFilter>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_FDCAN1_Init+0xf2>
	Error_Handler();
 8000f42:	f001 f95f 	bl	8002204 <Error_Handler>
	}

	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000f46:	2301      	movs	r3, #1
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <MX_FDCAN1_Init+0x10c>)
 8000f52:	f002 f997 	bl	8003284 <HAL_FDCAN_ConfigGlobalFilter>

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	24000218 	.word	0x24000218
 8000f64:	4000a000 	.word	0x4000a000

08000f68 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f6e:	4b41      	ldr	r3, [pc, #260]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f70:	4a41      	ldr	r2, [pc, #260]	@ (8001078 <MX_FDCAN2_Init+0x110>)
 8000f72:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f74:	4b3f      	ldr	r3, [pc, #252]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f80:	4b3c      	ldr	r3, [pc, #240]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 8000f98:	4b36      	ldr	r3, [pc, #216]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 117;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fa0:	2275      	movs	r2, #117	@ 0x75
 8000fa2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000fa4:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 8;
 8000faa:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 7;
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 7;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 7;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 40;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fc4:	2228      	movs	r2, #40	@ 0x28
 8000fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000fce:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000fec:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8001000:	2200      	movs	r2, #0
 8001002:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8001006:	2201      	movs	r2, #1
 8001008:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 800100c:	2200      	movs	r2, #0
 800100e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8001012:	2204      	movs	r2, #4
 8001014:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001016:	4817      	ldr	r0, [pc, #92]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8001018:	f001 fee0 	bl	8002ddc <HAL_FDCAN_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001022:	f001 f8ef 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  //change to allow all, use to test both CAN busses
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x400;
 8001036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x64D;
 800103c:	f240 634d 	movw	r3, #1613	@ 0x64d
 8001040:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	480a      	ldr	r0, [pc, #40]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 800104c:	f002 f8a4 	bl	8003198 <HAL_FDCAN_ConfigFilter>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_FDCAN2_Init+0xf2>
	  Error_Handler();
 8001056:	f001 f8d5 	bl	8002204 <Error_Handler>
  }

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800105a:	2301      	movs	r3, #1
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	2202      	movs	r2, #2
 8001062:	2102      	movs	r1, #2
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <MX_FDCAN2_Init+0x10c>)
 8001066:	f002 f90d 	bl	8003284 <HAL_FDCAN_ConfigGlobalFilter>

  /* USER CODE END FDCAN2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	240002b8 	.word	0x240002b8
 8001078:	4000a400 	.word	0x4000a400

0800107c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDMMC1_Init 0 */
  if (xfr_ptr->sdInitialized)
 8001080:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <MX_SDMMC1_SD_Init+0x88>)
 8001082:	7cdb      	ldrb	r3, [r3, #19]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00c      	beq.n	80010a4 <MX_SDMMC1_SD_Init+0x28>
  {
	  xfr_ptr->sdPresent = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) ? false : true;
 800108a:	2102      	movs	r1, #2
 800108c:	481e      	ldr	r0, [pc, #120]	@ (8001108 <MX_SDMMC1_SD_Init+0x8c>)
 800108e:	f003 faa3 	bl	80045d8 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf0c      	ite	eq
 8001098:	2301      	moveq	r3, #1
 800109a:	2300      	movne	r3, #0
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_SDMMC1_SD_Init+0x88>)
 80010a0:	751a      	strb	r2, [r3, #20]
	  return;
 80010a2:	e02e      	b.n	8001102 <MX_SDMMC1_SD_Init+0x86>
  }

  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))
 80010a4:	2102      	movs	r1, #2
 80010a6:	4818      	ldr	r0, [pc, #96]	@ (8001108 <MX_SDMMC1_SD_Init+0x8c>)
 80010a8:	f003 fa96 	bl	80045d8 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <MX_SDMMC1_SD_Init+0x44>
  {
	  xfr_ptr->sdInitialized = false;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SDMMC1_SD_Init+0x88>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	74da      	strb	r2, [r3, #19]
	  xfr_ptr->sdPresent = false;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SDMMC1_SD_Init+0x88>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	751a      	strb	r2, [r3, #20]
	  return;
 80010be:	e020      	b.n	8001102 <MX_SDMMC1_SD_Init+0x86>
  }

  xfr_ptr->sdInitialized = true;
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_SDMMC1_SD_Init+0x88>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	74da      	strb	r2, [r3, #19]
  xfr_ptr->sdPresent = true;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SDMMC1_SD_Init+0x88>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	751a      	strb	r2, [r3, #20]
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <MX_SDMMC1_SD_Init+0x94>)
 80010d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <MX_SDMMC1_SD_Init+0x90>)
 80010f4:	f007 f852 	bl	800819c <HAL_SD_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_SDMMC1_SD_Init+0x86>
  {
    Error_Handler();
 80010fe:	f001 f881 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001102:	bd80      	pop	{r7, pc}
 8001104:	38001000 	.word	0x38001000
 8001108:	58020c00 	.word	0x58020c00
 800110c:	24000358 	.word	0x24000358
 8001110:	52007000 	.word	0x52007000

08001114 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800111a:	4a28      	ldr	r2, [pc, #160]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001120:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800112e:	2207      	movs	r2, #7
 8001130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001140:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001144:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001148:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800114c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_SPI1_Init+0xa4>)
 80011a4:	f008 fc5e 	bl	8009a64 <HAL_SPI_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011ae:	f001 f829 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	240003d4 	.word	0x240003d4
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011c6:	4a28      	ldr	r2, [pc, #160]	@ (8001268 <MX_SPI4_Init+0xa8>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011d0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011da:	2207      	movs	r2, #7
 80011dc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011f0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <MX_SPI4_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_SPI4_Init+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001214:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_SPI4_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800122c:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <MX_SPI4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_SPI4_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_SPI4_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_SPI4_Init+0xa4>)
 8001252:	f008 fc07 	bl	8009a64 <HAL_SPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 800125c:	f000 ffd2 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2400045c 	.word	0x2400045c
 8001268:	40013400 	.word	0x40013400

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <MX_TIM2_Init+0x98>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <MX_TIM2_Init+0x98>)
 8001294:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_TIM2_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012a0:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b4:	4813      	ldr	r0, [pc, #76]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012b6:	f009 f9fa 	bl	800a6ae <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 ffa0 	bl	8002204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012d2:	f009 fc79 	bl	800abc8 <HAL_TIM_ConfigClockSource>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012dc:	f000 ff92 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012ee:	f009 fec3 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 ff84 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240004e4 	.word	0x240004e4

08001308 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_TIM6_Init+0x64>)
 800131a:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <MX_TIM6_Init+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <MX_TIM6_Init+0x64>)
 8001320:	22ef      	movs	r2, #239	@ 0xef
 8001322:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_TIM6_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_TIM6_Init+0x64>)
 800132c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001330:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_TIM6_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <MX_TIM6_Init+0x64>)
 800133a:	f009 f9b8 	bl	800a6ae <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001344:	f000 ff5e 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_TIM6_Init+0x64>)
 8001356:	f009 fe8f 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 ff50 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24000530 	.word	0x24000530
 8001370:	40001000 	.word	0x40001000

08001374 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_TIM14_Init+0x40>)
 800137a:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <MX_TIM14_Init+0x44>)
 800137c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 24000-1;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <MX_TIM14_Init+0x40>)
 8001380:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001384:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_TIM14_Init+0x40>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000-1;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_TIM14_Init+0x40>)
 800138e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001392:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <MX_TIM14_Init+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_TIM14_Init+0x40>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_TIM14_Init+0x40>)
 80013a2:	f009 f984 	bl	800a6ae <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80013ac:	f000 ff2a 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2400057c 	.word	0x2400057c
 80013b8:	40002000 	.word	0x40002000

080013bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013c2:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <MX_TIM16_Init+0x48>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013c8:	22ef      	movs	r2, #239	@ 0xef
 80013ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_TIM16_Init+0x44>)
 80013ee:	f009 f95e 	bl	800a6ae <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80013f8:	f000 ff04 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	240005c8 	.word	0x240005c8
 8001404:	40014400 	.word	0x40014400

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001424:	4a3a      	ldr	r2, [pc, #232]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142e:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143c:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <MX_GPIO_Init+0x108>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	4a33      	ldr	r2, [pc, #204]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144c:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <MX_GPIO_Init+0x108>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <MX_GPIO_Init+0x108>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001460:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <MX_GPIO_Init+0x108>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001478:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <MX_GPIO_Init+0x108>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147e:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_GPIO_Init+0x108>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_GPIO_Init+0x108>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149c:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <MX_GPIO_Init+0x108>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_GPIO_Init+0x108>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ba:	4816      	ldr	r0, [pc, #88]	@ (8001514 <MX_GPIO_Init+0x10c>)
 80014bc:	f003 f8a4 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480e      	ldr	r0, [pc, #56]	@ (8001514 <MX_GPIO_Init+0x10c>)
 80014da:	f002 fecd 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014de:	2302      	movs	r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014e2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <MX_GPIO_Init+0x110>)
 80014f4:	f002 fec0 	bl	8004278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	210f      	movs	r1, #15
 80014fc:	2007      	movs	r0, #7
 80014fe:	f001 fc38 	bl	8002d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001502:	2007      	movs	r0, #7
 8001504:	f001 fc4f 	bl	8002da6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	58024400 	.word	0x58024400
 8001514:	58021000 	.word	0x58021000
 8001518:	58020c00 	.word	0x58020c00

0800151c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7 && debounce == 0) {
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b80      	cmp	r3, #128	@ 0x80
 800152a:	d106      	bne.n	800153a <HAL_GPIO_EXTI_Callback+0x1e>
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x6c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <HAL_GPIO_EXTI_Callback+0x1e>
		cycleBrightness();
 8001534:	f7fe ffc2 	bl	80004bc <cycleBrightness>
    if (GPIO_Pin == GPIO_PIN_7 && debounce == 0) {
 8001538:	e021      	b.n	800157e <HAL_GPIO_EXTI_Callback+0x62>
    	//debounce = 1;
    	//HAL_TIM_Base_Start_IT(&htim5);
    } else if (GPIO_Pin == GPIO_PIN_8 && debounce == 0) {
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001540:	d103      	bne.n	800154a <HAL_GPIO_EXTI_Callback+0x2e>
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_GPIO_EXTI_Callback+0x62>
    	//debounce = 1;
    	//HAL_TIM_Base_Start_IT(&htim5);
    } else if (GPIO_Pin == GPIO_PIN_12) {
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001550:	d103      	bne.n	800155a <HAL_GPIO_EXTI_Callback+0x3e>
    	hiya = 12;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_GPIO_EXTI_Callback+0x70>)
 8001554:	220c      	movs	r2, #12
 8001556:	701a      	strb	r2, [r3, #0]
    	cycleBrightness();
    	hiya = 13;
    } else if (GPIO_Pin == GPIO_PIN_14) {
    	hiya = 14;
    }
}
 8001558:	e011      	b.n	800157e <HAL_GPIO_EXTI_Callback+0x62>
    } else if (GPIO_Pin == GPIO_PIN_13) {
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001560:	d105      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0x52>
    	cycleBrightness();
 8001562:	f7fe ffab 	bl	80004bc <cycleBrightness>
    	hiya = 13;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_GPIO_EXTI_Callback+0x70>)
 8001568:	220d      	movs	r2, #13
 800156a:	701a      	strb	r2, [r3, #0]
}
 800156c:	e007      	b.n	800157e <HAL_GPIO_EXTI_Callback+0x62>
    } else if (GPIO_Pin == GPIO_PIN_14) {
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001574:	d103      	bne.n	800157e <HAL_GPIO_EXTI_Callback+0x62>
    	hiya = 14;
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_GPIO_EXTI_Callback+0x70>)
 8001578:	220e      	movs	r2, #14
 800157a:	701a      	strb	r2, [r3, #0]
}
 800157c:	e7ff      	b.n	800157e <HAL_GPIO_EXTI_Callback+0x62>
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240042d4 	.word	0x240042d4
 800158c:	240042d2 	.word	0x240042d2

08001590 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

	// ADC read timer
	if (htim == &htim16) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a17      	ldr	r2, [pc, #92]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d102      	bne.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		adcRead();
 80015a0:	f000 f986 	bl	80018b0 <adcRead>
		return;
 80015a4:	e024      	b.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x60>
	}

	// Timer for 5 sec after engine off
	if (htim == &htim14) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d120      	bne.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x60>

		// Engine has restarted so we ignore the 5sec timeout
		if (xfr_ptr->rpm >= 1000) {
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80015b0:	895b      	ldrh	r3, [r3, #10]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b8:	d306      	bcc.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0x38>
			// Stop the timer interrupts
			HAL_TIM_Base_Stop_IT(&htim14);
 80015ba:	4810      	ldr	r0, [pc, #64]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015bc:	f009 f9b6 	bl	800a92c <HAL_TIM_Base_Stop_IT>
			// Set logging to on
			xfr_ptr->loggingStatus = 1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	755a      	strb	r2, [r3, #21]
			return;
 80015c6:	e013      	b.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		// Set logging to off
		xfr_ptr->loggingStatus = 0;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	755a      	strb	r2, [r3, #21]

		// Increment engine start number
		engineStartNumber += 1;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015d8:	701a      	strb	r2, [r3, #0]

		// Set time of next engine start
		nextStartTime = __HAL_TIM_GET_COUNTER(&htim2) + 150000;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80015e2:	4413      	add	r3, r2
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80015e6:	6013      	str	r3, [r2, #0]

		// Stop the timer interrupts
		HAL_TIM_Base_Stop_IT(&htim14);
 80015e8:	4804      	ldr	r0, [pc, #16]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015ea:	f009 f99f 	bl	800a92c <HAL_TIM_Base_Stop_IT>
		return;
 80015ee:	bf00      	nop
	}
}
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	240005c8 	.word	0x240005c8
 80015fc:	2400057c 	.word	0x2400057c
 8001600:	38001000 	.word	0x38001000
 8001604:	240042d5 	.word	0x240042d5
 8001608:	240004e4 	.word	0x240004e4
 800160c:	000249f0 	.word	0x000249f0
 8001610:	240042cc 	.word	0x240042cc

08001614 <delayMicro>:

// Delays the inputed number of Microseconds
void delayMicro(int microSeconds)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <delayMicro+0x2c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < microSeconds);
 8001624:	bf00      	nop
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <delayMicro+0x2c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3f9      	bcc.n	8001626 <delayMicro+0x12>
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	24000530 	.word	0x24000530

08001644 <sdWrite>:
}

// Flushes data buffer to SD
// TODO remove rpm based logging
// TODO use DMA
void sdWrite() {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

	// Ensures SD Card is present. Resets write buffer if not
	if (!(xfr_ptr->sdPresent && xfr_ptr->sdInitialized)) {
 800164a:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <sdWrite+0xb8>)
 800164c:	7d1b      	ldrb	r3, [r3, #20]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <sdWrite+0x1a>
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <sdWrite+0xb8>)
 8001656:	7cdb      	ldrb	r3, [r3, #19]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <sdWrite+0x22>
		sdDataByteCount = 0;
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <sdWrite+0xbc>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
		return;
 8001664:	e046      	b.n	80016f4 <sdWrite+0xb0>
	}

	if (RPMLOGGING == 0) {

		// No RPM based logging so we always log data
		xfr_ptr->loggingStatus = 1;
 8001666:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <sdWrite+0xb8>)
 8001668:	2201      	movs	r2, #1
 800166a:	755a      	strb	r2, [r3, #21]
		}
		return;
	}

	// Ensures the buffer written is on a 32byte boundary
	uint8_t overflowAmount = sdDataByteCount % 32;
 800166c:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <sdWrite+0xbc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	71bb      	strb	r3, [r7, #6]
	sdDataWriteCount = sdDataByteCount - overflowAmount;
 8001678:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <sdWrite+0xbc>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a20      	ldr	r2, [pc, #128]	@ (8001704 <sdWrite+0xc0>)
 8001682:	6013      	str	r3, [r2, #0]

	// Write to SD
	res = f_write(&SDFile, sdData, sdDataWriteCount, (void *)&byteswritten);
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <sdWrite+0xc0>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <sdWrite+0xc4>)
 800168a:	4920      	ldr	r1, [pc, #128]	@ (800170c <sdWrite+0xc8>)
 800168c:	4820      	ldr	r0, [pc, #128]	@ (8001710 <sdWrite+0xcc>)
 800168e:	f00c fcfb 	bl	800e088 <f_write>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <sdWrite+0xd0>)
 8001698:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <sdWrite+0xd0>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <sdWrite+0x66>
		sdDataByteCount = 0;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <sdWrite+0xbc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
		return;
 80016a8:	e024      	b.n	80016f4 <sdWrite+0xb0>
	//TODO remove when 5V drop detection active
	//TODO check if sd card is full and display warning

	// Sync to ensure data is saved
	// TODO should be on a timer not every time
	res = f_sync(&SDFile);
 80016aa:	4819      	ldr	r0, [pc, #100]	@ (8001710 <sdWrite+0xcc>)
 80016ac:	f00c fe61 	bl	800e372 <f_sync>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <sdWrite+0xd0>)
 80016b6:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <sdWrite+0xd0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <sdWrite+0x84>
		sdDataByteCount = 0;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <sdWrite+0xbc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
		return;
 80016c6:	e015      	b.n	80016f4 <sdWrite+0xb0>
	}

	// Sets beginning of next buffer to hold contents of the overflowed data
	uint8_t i;
	for (i = 0; i < overflowAmount; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	e00b      	b.n	80016e6 <sdWrite+0xa2>
		sdData[i] = sdData[sdDataWriteCount+i];
 80016ce:	79fa      	ldrb	r2, [r7, #7]
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <sdWrite+0xc0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	441a      	add	r2, r3
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <sdWrite+0xc8>)
 80016da:	5c89      	ldrb	r1, [r1, r2]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <sdWrite+0xc8>)
 80016de:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < overflowAmount; i++) {
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3301      	adds	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3ef      	bcc.n	80016ce <sdWrite+0x8a>
	}
	sdDataByteCount = overflowAmount;
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	4a03      	ldr	r2, [pc, #12]	@ (8001700 <sdWrite+0xbc>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	38001000 	.word	0x38001000
 8001700:	240006c0 	.word	0x240006c0
 8001704:	240006c4 	.word	0x240006c4
 8001708:	24000630 	.word	0x24000630
 800170c:	240006c8 	.word	0x240006c8
 8001710:	240045a0 	.word	0x240045a0
 8001714:	24000614 	.word	0x24000614

08001718 <setCurrentFile>:

// Sets the current file on startup
void setCurrentFile() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

	// Ensures that SD card is present and initialized
	if (!(xfr_ptr->sdPresent && xfr_ptr->sdInitialized)) {
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <setCurrentFile+0x54>)
 800171e:	7d1b      	ldrb	r3, [r3, #20]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01e      	beq.n	8001764 <setCurrentFile+0x4c>
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <setCurrentFile+0x54>)
 8001728:	7cdb      	ldrb	r3, [r3, #19]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d019      	beq.n	8001764 <setCurrentFile+0x4c>
		return;
	}

	// Mount file system for startup
	if(f_mount(&SDFatFS, "", 0) != FR_OK) {
 8001730:	2200      	movs	r2, #0
 8001732:	490f      	ldr	r1, [pc, #60]	@ (8001770 <setCurrentFile+0x58>)
 8001734:	480f      	ldr	r0, [pc, #60]	@ (8001774 <setCurrentFile+0x5c>)
 8001736:	f00c faa7 	bl	800dc88 <f_mount>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d113      	bne.n	8001768 <setCurrentFile+0x50>
		return;
	} else {
		// Find first available file number
		// TODO use a config file to save this instead?
		while (f_stat(fileName, &fno) != FR_NO_FILE) {
 8001740:	e001      	b.n	8001746 <setCurrentFile+0x2e>
			incrementFileNumber();
 8001742:	f000 f81f 	bl	8001784 <incrementFileNumber>
		while (f_stat(fileName, &fno) != FR_NO_FILE) {
 8001746:	490c      	ldr	r1, [pc, #48]	@ (8001778 <setCurrentFile+0x60>)
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <setCurrentFile+0x64>)
 800174a:	f00c fe90 	bl	800e46e <f_stat>
 800174e:	4603      	mov	r3, r0
 8001750:	2b04      	cmp	r3, #4
 8001752:	d1f6      	bne.n	8001742 <setCurrentFile+0x2a>
		}
	}

	// Open file
	if(f_open(&SDFile, fileName, FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) {
 8001754:	2212      	movs	r2, #18
 8001756:	4909      	ldr	r1, [pc, #36]	@ (800177c <setCurrentFile+0x64>)
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <setCurrentFile+0x68>)
 800175a:	f00c fadb 	bl	800dd14 <f_open>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	e002      	b.n	800176a <setCurrentFile+0x52>
		return;
 8001764:	bf00      	nop
 8001766:	e000      	b.n	800176a <setCurrentFile+0x52>
		return;
 8001768:	bf00      	nop
		return;
	}
}
 800176a:	bd80      	pop	{r7, pc}
 800176c:	38001000 	.word	0x38001000
 8001770:	08010ea0 	.word	0x08010ea0
 8001774:	24004370 	.word	0x24004370
 8001778:	24000618 	.word	0x24000618
 800177c:	2400000c 	.word	0x2400000c
 8001780:	240045a0 	.word	0x240045a0

08001784 <incrementFileNumber>:

// Increments fileName to next number
void incrementFileNumber() {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	if (fileName[3] == 57) {
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <incrementFileNumber+0x70>)
 800178a:	78db      	ldrb	r3, [r3, #3]
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d125      	bne.n	80017dc <incrementFileNumber+0x58>
		fileName[3] = 48;
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <incrementFileNumber+0x70>)
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	70da      	strb	r2, [r3, #3]
		if (fileName[2] == 57) {
 8001796:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <incrementFileNumber+0x70>)
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	2b39      	cmp	r3, #57	@ 0x39
 800179c:	d117      	bne.n	80017ce <incrementFileNumber+0x4a>
			fileName[2] = 48;
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <incrementFileNumber+0x70>)
 80017a0:	2230      	movs	r2, #48	@ 0x30
 80017a2:	709a      	strb	r2, [r3, #2]
			if (fileName[1] == 57) {
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <incrementFileNumber+0x70>)
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	2b39      	cmp	r3, #57	@ 0x39
 80017aa:	d109      	bne.n	80017c0 <incrementFileNumber+0x3c>
				fileName[1] = 48;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <incrementFileNumber+0x70>)
 80017ae:	2230      	movs	r2, #48	@ 0x30
 80017b0:	705a      	strb	r2, [r3, #1]
				fileName[0]++;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <incrementFileNumber+0x70>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <incrementFileNumber+0x70>)
 80017bc:	701a      	strb	r2, [r3, #0]
			  fileName[2]++;
		}
	} else {
		fileName[3]++;
	}
}
 80017be:	e013      	b.n	80017e8 <incrementFileNumber+0x64>
				fileName[1]++;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <incrementFileNumber+0x70>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <incrementFileNumber+0x70>)
 80017ca:	705a      	strb	r2, [r3, #1]
}
 80017cc:	e00c      	b.n	80017e8 <incrementFileNumber+0x64>
			  fileName[2]++;
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <incrementFileNumber+0x70>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <incrementFileNumber+0x70>)
 80017d8:	709a      	strb	r2, [r3, #2]
}
 80017da:	e005      	b.n	80017e8 <incrementFileNumber+0x64>
		fileName[3]++;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <incrementFileNumber+0x70>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <incrementFileNumber+0x70>)
 80017e6:	70da      	strb	r2, [r3, #3]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2400000c 	.word	0x2400000c

080017f8 <adcInit>:

// Initializes ADC to manual mode
// TODO change to averaging mode
void adcInit() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af02      	add	r7, sp, #8
	//seq start 0x10, 0b00010001

	char tx_buf[20];
	char rx_buf[20];

	tx_buf[0] = 0x8; // Write CMD
 80017fe:	2308      	movs	r3, #8
 8001800:	753b      	strb	r3, [r7, #20]
	tx_buf[1] = 0x1; // Address
 8001802:	2301      	movs	r3, #1
 8001804:	757b      	strb	r3, [r7, #21]
	tx_buf[2] = 0b00000010; // Data
 8001806:	2302      	movs	r3, #2
 8001808:	75bb      	strb	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001810:	4825      	ldr	r0, [pc, #148]	@ (80018a8 <adcInit+0xb0>)
 8001812:	f002 fef9 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001816:	463a      	mov	r2, r7
 8001818:	f107 0114 	add.w	r1, r7, #20
 800181c:	2364      	movs	r3, #100	@ 0x64
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2303      	movs	r3, #3
 8001822:	4822      	ldr	r0, [pc, #136]	@ (80018ac <adcInit+0xb4>)
 8001824:	f008 fc3e 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800182e:	481e      	ldr	r0, [pc, #120]	@ (80018a8 <adcInit+0xb0>)
 8001830:	f002 feea 	bl	8004608 <HAL_GPIO_WritePin>

	// Append 4-bit channel ID
	tx_buf[0] = 0x8; // Write CMD
 8001834:	2308      	movs	r3, #8
 8001836:	753b      	strb	r3, [r7, #20]
	tx_buf[1] = 0x2; // Address
 8001838:	2302      	movs	r3, #2
 800183a:	757b      	strb	r3, [r7, #21]
	tx_buf[2] = 0b00010000; // Data
 800183c:	2310      	movs	r3, #16
 800183e:	75bb      	strb	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001846:	4818      	ldr	r0, [pc, #96]	@ (80018a8 <adcInit+0xb0>)
 8001848:	f002 fede 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 800184c:	463a      	mov	r2, r7
 800184e:	f107 0114 	add.w	r1, r7, #20
 8001852:	2364      	movs	r3, #100	@ 0x64
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2303      	movs	r3, #3
 8001858:	4814      	ldr	r0, [pc, #80]	@ (80018ac <adcInit+0xb4>)
 800185a:	f008 fc23 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001864:	4810      	ldr	r0, [pc, #64]	@ (80018a8 <adcInit+0xb0>)
 8001866:	f002 fecf 	bl	8004608 <HAL_GPIO_WritePin>

	tx_buf[0] = 0x8; // Write CMD
 800186a:	2308      	movs	r3, #8
 800186c:	753b      	strb	r3, [r7, #20]
	tx_buf[1] = 0x11; // Address
 800186e:	2311      	movs	r3, #17
 8001870:	757b      	strb	r3, [r7, #21]
	tx_buf[2] = 0b00000000; // Data
 8001872:	2300      	movs	r3, #0
 8001874:	75bb      	strb	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187c:	480a      	ldr	r0, [pc, #40]	@ (80018a8 <adcInit+0xb0>)
 800187e:	f002 fec3 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001882:	463a      	mov	r2, r7
 8001884:	f107 0114 	add.w	r1, r7, #20
 8001888:	2364      	movs	r3, #100	@ 0x64
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2303      	movs	r3, #3
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <adcInit+0xb4>)
 8001890:	f008 fc08 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189a:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <adcInit+0xb0>)
 800189c:	f002 feb4 	bl	8004608 <HAL_GPIO_WritePin>

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58021000 	.word	0x58021000
 80018ac:	2400045c 	.word	0x2400045c

080018b0 <adcRead>:

// Reads ADC inputs 0-7, Turns off CAN and ADC interrupts for the duration
void adcRead() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af02      	add	r7, sp, #8
	HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE);
 80018b6:	2110      	movs	r1, #16
 80018b8:	48b1      	ldr	r0, [pc, #708]	@ (8001b80 <adcRead+0x2d0>)
 80018ba:	f001 ff7f 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
	HAL_FDCAN_DeactivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 80018be:	2101      	movs	r1, #1
 80018c0:	48b0      	ldr	r0, [pc, #704]	@ (8001b84 <adcRead+0x2d4>)
 80018c2:	f001 ff7b 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
	HAL_TIM_Base_Stop_IT(&htim16);
 80018c6:	48b0      	ldr	r0, [pc, #704]	@ (8001b88 <adcRead+0x2d8>)
 80018c8:	f009 f830 	bl	800a92c <HAL_TIM_Base_Stop_IT>
	char tx_buf[3];
	char rx_buf[3];
	uint16_t curdata;

	// Check if buffer needs to be cleared
	if (sdDataByteCount + 26 >= 15360)
 80018cc:	4baf      	ldr	r3, [pc, #700]	@ (8001b8c <adcRead+0x2dc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	331a      	adds	r3, #26
 80018d2:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 80018d6:	d301      	bcc.n	80018dc <adcRead+0x2c>
	{
		sdWrite();
 80018d8:	f7ff feb4 	bl	8001644 <sdWrite>
	}

	// ID of first message 0x01
	sdData[sdDataByteCount] = 0x00;
 80018dc:	4bab      	ldr	r3, [pc, #684]	@ (8001b8c <adcRead+0x2dc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4aab      	ldr	r2, [pc, #684]	@ (8001b90 <adcRead+0x2e0>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+1] = 0x01;
 80018e6:	4ba9      	ldr	r3, [pc, #676]	@ (8001b8c <adcRead+0x2dc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4aa8      	ldr	r2, [pc, #672]	@ (8001b90 <adcRead+0x2e0>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	54d1      	strb	r1, [r2, r3]

	// Setting output of ADC to be channel 2 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 80018f2:	2308      	movs	r3, #8
 80018f4:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 80018f6:	2311      	movs	r3, #17
 80018f8:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x02; //data
 80018fa:	2302      	movs	r3, #2
 80018fc:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001904:	48a3      	ldr	r0, [pc, #652]	@ (8001b94 <adcRead+0x2e4>)
 8001906:	f002 fe7f 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 800190a:	1d3a      	adds	r2, r7, #4
 800190c:	f107 0108 	add.w	r1, r7, #8
 8001910:	2364      	movs	r3, #100	@ 0x64
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2303      	movs	r3, #3
 8001916:	48a0      	ldr	r0, [pc, #640]	@ (8001b98 <adcRead+0x2e8>)
 8001918:	f008 fbc4 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001922:	489c      	ldr	r0, [pc, #624]	@ (8001b94 <adcRead+0x2e4>)
 8001924:	f002 fe70 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001928:	793b      	ldrb	r3, [r7, #4]
 800192a:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	4413      	add	r3, r2
 800193e:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 0
	sdData[sdDataByteCount+2] = (curdata>>8) & 0xFF;
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b91      	ldr	r3, [pc, #580]	@ (8001b8c <adcRead+0x2dc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3302      	adds	r3, #2
 800194c:	b2d1      	uxtb	r1, r2
 800194e:	4a90      	ldr	r2, [pc, #576]	@ (8001b90 <adcRead+0x2e0>)
 8001950:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+3] = curdata & 0xFF;
 8001952:	4b8e      	ldr	r3, [pc, #568]	@ (8001b8c <adcRead+0x2dc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3303      	adds	r3, #3
 8001958:	89fa      	ldrh	r2, [r7, #14]
 800195a:	b2d1      	uxtb	r1, r2
 800195c:	4a8c      	ldr	r2, [pc, #560]	@ (8001b90 <adcRead+0x2e0>)
 800195e:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff fe57 	bl	8001614 <delayMicro>

	// Setting output of ADC to be channel 3 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 8001966:	2308      	movs	r3, #8
 8001968:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 800196a:	2311      	movs	r3, #17
 800196c:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x03; //data
 800196e:	2303      	movs	r3, #3
 8001970:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001978:	4886      	ldr	r0, [pc, #536]	@ (8001b94 <adcRead+0x2e4>)
 800197a:	f002 fe45 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 800197e:	1d3a      	adds	r2, r7, #4
 8001980:	f107 0108 	add.w	r1, r7, #8
 8001984:	2364      	movs	r3, #100	@ 0x64
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2303      	movs	r3, #3
 800198a:	4883      	ldr	r0, [pc, #524]	@ (8001b98 <adcRead+0x2e8>)
 800198c:	f008 fb8a 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001996:	487f      	ldr	r0, [pc, #508]	@ (8001b94 <adcRead+0x2e4>)
 8001998:	f002 fe36 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	4413      	add	r3, r2
 80019b2:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 1
	sdData[sdDataByteCount+4] = (curdata>>8) & 0xFF;
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b74      	ldr	r3, [pc, #464]	@ (8001b8c <adcRead+0x2dc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3304      	adds	r3, #4
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	4a73      	ldr	r2, [pc, #460]	@ (8001b90 <adcRead+0x2e0>)
 80019c4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+5] = curdata & 0xFF;
 80019c6:	4b71      	ldr	r3, [pc, #452]	@ (8001b8c <adcRead+0x2dc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3305      	adds	r3, #5
 80019cc:	89fa      	ldrh	r2, [r7, #14]
 80019ce:	b2d1      	uxtb	r1, r2
 80019d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001b90 <adcRead+0x2e0>)
 80019d2:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fe1d 	bl	8001614 <delayMicro>

	// Setting output of ADC to be channel 4 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 80019da:	2308      	movs	r3, #8
 80019dc:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 80019de:	2311      	movs	r3, #17
 80019e0:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04; //data
 80019e2:	2304      	movs	r3, #4
 80019e4:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ec:	4869      	ldr	r0, [pc, #420]	@ (8001b94 <adcRead+0x2e4>)
 80019ee:	f002 fe0b 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 80019f2:	1d3a      	adds	r2, r7, #4
 80019f4:	f107 0108 	add.w	r1, r7, #8
 80019f8:	2364      	movs	r3, #100	@ 0x64
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2303      	movs	r3, #3
 80019fe:	4866      	ldr	r0, [pc, #408]	@ (8001b98 <adcRead+0x2e8>)
 8001a00:	f008 fb50 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a0a:	4862      	ldr	r0, [pc, #392]	@ (8001b94 <adcRead+0x2e4>)
 8001a0c:	f002 fdfc 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001a10:	793b      	ldrb	r3, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001a1a:	797b      	ldrb	r3, [r7, #5]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	4413      	add	r3, r2
 8001a26:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 2
	sdData[sdDataByteCount+6] = (curdata>>8) & 0xFF;
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b57      	ldr	r3, [pc, #348]	@ (8001b8c <adcRead+0x2dc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3306      	adds	r3, #6
 8001a34:	b2d1      	uxtb	r1, r2
 8001a36:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <adcRead+0x2e0>)
 8001a38:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+7] = curdata & 0xFF;
 8001a3a:	4b54      	ldr	r3, [pc, #336]	@ (8001b8c <adcRead+0x2dc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3307      	adds	r3, #7
 8001a40:	89fa      	ldrh	r2, [r7, #14]
 8001a42:	b2d1      	uxtb	r1, r2
 8001a44:	4a52      	ldr	r2, [pc, #328]	@ (8001b90 <adcRead+0x2e0>)
 8001a46:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff fde3 	bl	8001614 <delayMicro>

	// Setting output of ADC to be channel 5 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 8001a4e:	2308      	movs	r3, #8
 8001a50:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 8001a52:	2311      	movs	r3, #17
 8001a54:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x05; //data
 8001a56:	2305      	movs	r3, #5
 8001a58:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a60:	484c      	ldr	r0, [pc, #304]	@ (8001b94 <adcRead+0x2e4>)
 8001a62:	f002 fdd1 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001a66:	1d3a      	adds	r2, r7, #4
 8001a68:	f107 0108 	add.w	r1, r7, #8
 8001a6c:	2364      	movs	r3, #100	@ 0x64
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2303      	movs	r3, #3
 8001a72:	4849      	ldr	r0, [pc, #292]	@ (8001b98 <adcRead+0x2e8>)
 8001a74:	f008 fb16 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a7e:	4845      	ldr	r0, [pc, #276]	@ (8001b94 <adcRead+0x2e4>)
 8001a80:	f002 fdc2 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001a84:	793b      	ldrb	r3, [r7, #4]
 8001a86:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001a8e:	797b      	ldrb	r3, [r7, #5]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	4413      	add	r3, r2
 8001a9a:	81fb      	strh	r3, [r7, #14]

	xfr_ptr->shiftingPressure = (rx_buf[0] << 4) + (rx_buf[1]>>4);
 8001a9c:	793b      	ldrb	r3, [r7, #4]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	797a      	ldrb	r2, [r7, #5]
 8001aa4:	0912      	lsrs	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8001b9c <adcRead+0x2ec>)
 8001aac:	440b      	add	r3, r1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	8213      	strh	r3, [r2, #16]

	// Data for analog input 3
	sdData[sdDataByteCount+8] = (curdata>>8) & 0xFF;
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <adcRead+0x2dc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3308      	adds	r3, #8
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	4a33      	ldr	r2, [pc, #204]	@ (8001b90 <adcRead+0x2e0>)
 8001ac2:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+9] = curdata & 0xFF;
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <adcRead+0x2dc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3309      	adds	r3, #9
 8001aca:	89fa      	ldrh	r2, [r7, #14]
 8001acc:	b2d1      	uxtb	r1, r2
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <adcRead+0x2e0>)
 8001ad0:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff fd9e 	bl	8001614 <delayMicro>

	// Time stamp
	curtime = __HAL_TIM_GET_COUNTER(&htim2) / 10;
 8001ad8:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <adcRead+0x2f0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	4a31      	ldr	r2, [pc, #196]	@ (8001ba4 <adcRead+0x2f4>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <adcRead+0x2f8>)
 8001ae8:	6013      	str	r3, [r2, #0]
	sdData[sdDataByteCount+10] = (curtime >> 16) & 0xFF;
 8001aea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba8 <adcRead+0x2f8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0c1a      	lsrs	r2, r3, #16
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <adcRead+0x2dc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	330a      	adds	r3, #10
 8001af6:	b2d1      	uxtb	r1, r2
 8001af8:	4a25      	ldr	r2, [pc, #148]	@ (8001b90 <adcRead+0x2e0>)
 8001afa:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+11] = (curtime >> 8) & 0xFF;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <adcRead+0x2f8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0a1a      	lsrs	r2, r3, #8
 8001b02:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <adcRead+0x2dc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	330b      	adds	r3, #11
 8001b08:	b2d1      	uxtb	r1, r2
 8001b0a:	4a21      	ldr	r2, [pc, #132]	@ (8001b90 <adcRead+0x2e0>)
 8001b0c:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+12] = curtime & 0xFF;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <adcRead+0x2f8>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <adcRead+0x2dc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	330c      	adds	r3, #12
 8001b18:	b2d1      	uxtb	r1, r2
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b90 <adcRead+0x2e0>)
 8001b1c:	54d1      	strb	r1, [r2, r3]

	// Increment buffer byte count
	sdDataByteCount = sdDataByteCount + 13;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <adcRead+0x2dc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	330d      	adds	r3, #13
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <adcRead+0x2dc>)
 8001b26:	6013      	str	r3, [r2, #0]

	// ID of second message 0x02
	sdData[sdDataByteCount] = 0x00;
 8001b28:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <adcRead+0x2dc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <adcRead+0x2e0>)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+1] = 0x02;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <adcRead+0x2dc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a15      	ldr	r2, [pc, #84]	@ (8001b90 <adcRead+0x2e0>)
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	54d1      	strb	r1, [r2, r3]

	// Setting output of ADC to be channel 6 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 8001b3e:	2308      	movs	r3, #8
 8001b40:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 8001b42:	2311      	movs	r3, #17
 8001b44:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x06; //data
 8001b46:	2306      	movs	r3, #6
 8001b48:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b50:	4810      	ldr	r0, [pc, #64]	@ (8001b94 <adcRead+0x2e4>)
 8001b52:	f002 fd59 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001b56:	1d3a      	adds	r2, r7, #4
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	2364      	movs	r3, #100	@ 0x64
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2303      	movs	r3, #3
 8001b62:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <adcRead+0x2e8>)
 8001b64:	f008 fa9e 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6e:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <adcRead+0x2e4>)
 8001b70:	f002 fd4a 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001b74:	793b      	ldrb	r3, [r7, #4]
 8001b76:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	e016      	b.n	8001bac <adcRead+0x2fc>
 8001b7e:	bf00      	nop
 8001b80:	24000218 	.word	0x24000218
 8001b84:	240002b8 	.word	0x240002b8
 8001b88:	240005c8 	.word	0x240005c8
 8001b8c:	240006c0 	.word	0x240006c0
 8001b90:	240006c8 	.word	0x240006c8
 8001b94:	58021000 	.word	0x58021000
 8001b98:	2400045c 	.word	0x2400045c
 8001b9c:	38001000 	.word	0x38001000
 8001ba0:	240004e4 	.word	0x240004e4
 8001ba4:	cccccccd 	.word	0xcccccccd
 8001ba8:	240042c8 	.word	0x240042c8
 8001bac:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001bae:	797b      	ldrb	r3, [r7, #5]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	4413      	add	r3, r2
 8001bba:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 4
	sdData[sdDataByteCount+2] = (curdata>>8) & 0xFF;
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b7b      	ldr	r3, [pc, #492]	@ (8001db0 <adcRead+0x500>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	b2d1      	uxtb	r1, r2
 8001bca:	4a7a      	ldr	r2, [pc, #488]	@ (8001db4 <adcRead+0x504>)
 8001bcc:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+3] = curdata & 0xFF;
 8001bce:	4b78      	ldr	r3, [pc, #480]	@ (8001db0 <adcRead+0x500>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	89fa      	ldrh	r2, [r7, #14]
 8001bd6:	b2d1      	uxtb	r1, r2
 8001bd8:	4a76      	ldr	r2, [pc, #472]	@ (8001db4 <adcRead+0x504>)
 8001bda:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fd19 	bl	8001614 <delayMicro>

	// Setting output of ADC to be channel 7 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 8001be2:	2308      	movs	r3, #8
 8001be4:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 8001be6:	2311      	movs	r3, #17
 8001be8:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x07; //data
 8001bea:	2307      	movs	r3, #7
 8001bec:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bf4:	4870      	ldr	r0, [pc, #448]	@ (8001db8 <adcRead+0x508>)
 8001bf6:	f002 fd07 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001bfa:	1d3a      	adds	r2, r7, #4
 8001bfc:	f107 0108 	add.w	r1, r7, #8
 8001c00:	2364      	movs	r3, #100	@ 0x64
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2303      	movs	r3, #3
 8001c06:	486d      	ldr	r0, [pc, #436]	@ (8001dbc <adcRead+0x50c>)
 8001c08:	f008 fa4c 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c12:	4869      	ldr	r0, [pc, #420]	@ (8001db8 <adcRead+0x508>)
 8001c14:	f002 fcf8 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001c18:	793b      	ldrb	r3, [r7, #4]
 8001c1a:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001c22:	797b      	ldrb	r3, [r7, #5]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 5
	sdData[sdDataByteCount+4] = (curdata>>8) & 0xFF;
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b5e      	ldr	r3, [pc, #376]	@ (8001db0 <adcRead+0x500>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	b2d1      	uxtb	r1, r2
 8001c3e:	4a5d      	ldr	r2, [pc, #372]	@ (8001db4 <adcRead+0x504>)
 8001c40:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+5] = curdata & 0xFF;
 8001c42:	4b5b      	ldr	r3, [pc, #364]	@ (8001db0 <adcRead+0x500>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3305      	adds	r3, #5
 8001c48:	89fa      	ldrh	r2, [r7, #14]
 8001c4a:	b2d1      	uxtb	r1, r2
 8001c4c:	4a59      	ldr	r2, [pc, #356]	@ (8001db4 <adcRead+0x504>)
 8001c4e:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff fcdf 	bl	8001614 <delayMicro>

	// Setting output of ADC to be channel 0 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 8001c56:	2308      	movs	r3, #8
 8001c58:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 8001c5a:	2311      	movs	r3, #17
 8001c5c:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x00; //data
 8001c5e:	2300      	movs	r3, #0
 8001c60:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c68:	4853      	ldr	r0, [pc, #332]	@ (8001db8 <adcRead+0x508>)
 8001c6a:	f002 fccd 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001c6e:	1d3a      	adds	r2, r7, #4
 8001c70:	f107 0108 	add.w	r1, r7, #8
 8001c74:	2364      	movs	r3, #100	@ 0x64
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2303      	movs	r3, #3
 8001c7a:	4850      	ldr	r0, [pc, #320]	@ (8001dbc <adcRead+0x50c>)
 8001c7c:	f008 fa12 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c86:	484c      	ldr	r0, [pc, #304]	@ (8001db8 <adcRead+0x508>)
 8001c88:	f002 fcbe 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001c8c:	793b      	ldrb	r3, [r7, #4]
 8001c8e:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001c96:	797b      	ldrb	r3, [r7, #5]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 6
	sdData[sdDataByteCount+6] = (curdata>>8) & 0xFF;
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b41      	ldr	r3, [pc, #260]	@ (8001db0 <adcRead+0x500>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3306      	adds	r3, #6
 8001cb0:	b2d1      	uxtb	r1, r2
 8001cb2:	4a40      	ldr	r2, [pc, #256]	@ (8001db4 <adcRead+0x504>)
 8001cb4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+7] = curdata & 0xFF;
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001db0 <adcRead+0x500>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	89fa      	ldrh	r2, [r7, #14]
 8001cbe:	b2d1      	uxtb	r1, r2
 8001cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001db4 <adcRead+0x504>)
 8001cc2:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff fca5 	bl	8001614 <delayMicro>

	// Setting output of ADC to be channel 1 in 2 read cycles
	tx_buf[0] = 0x08; //write cmd
 8001cca:	2308      	movs	r3, #8
 8001ccc:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x11; //address MANUAL_CHID
 8001cce:	2311      	movs	r3, #17
 8001cd0:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x01; //data
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cdc:	4836      	ldr	r0, [pc, #216]	@ (8001db8 <adcRead+0x508>)
 8001cde:	f002 fc93 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)tx_buf, (uint8_t *)rx_buf, 3, 100);
 8001ce2:	1d3a      	adds	r2, r7, #4
 8001ce4:	f107 0108 	add.w	r1, r7, #8
 8001ce8:	2364      	movs	r3, #100	@ 0x64
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2303      	movs	r3, #3
 8001cee:	4833      	ldr	r0, [pc, #204]	@ (8001dbc <adcRead+0x50c>)
 8001cf0:	f008 f9d8 	bl	800a0a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cfa:	482f      	ldr	r0, [pc, #188]	@ (8001db8 <adcRead+0x508>)
 8001cfc:	f002 fc84 	bl	8004608 <HAL_GPIO_WritePin>

	curdata = rx_buf[0];
 8001d00:	793b      	ldrb	r3, [r7, #4]
 8001d02:	81fb      	strh	r3, [r7, #14]
	curdata = curdata << 4;
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	81fb      	strh	r3, [r7, #14]
	curdata = curdata + (rx_buf[1] >> 4);
 8001d0a:	797b      	ldrb	r3, [r7, #5]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	89fb      	ldrh	r3, [r7, #14]
 8001d14:	4413      	add	r3, r2
 8001d16:	81fb      	strh	r3, [r7, #14]

	// Data for analog input 7
	sdData[sdDataByteCount+8] = (curdata>>8) & 0xFF;
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <adcRead+0x500>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3308      	adds	r3, #8
 8001d24:	b2d1      	uxtb	r1, r2
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <adcRead+0x504>)
 8001d28:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+9] = curdata & 0xFF;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <adcRead+0x500>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3309      	adds	r3, #9
 8001d30:	89fa      	ldrh	r2, [r7, #14]
 8001d32:	b2d1      	uxtb	r1, r2
 8001d34:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <adcRead+0x504>)
 8001d36:	54d1      	strb	r1, [r2, r3]

	// Delay for ADC timing purposes
	delayMicro(1);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff fc6b 	bl	8001614 <delayMicro>

	// Time stamp
	curtime = __HAL_TIM_GET_COUNTER(&htim2) / 10;
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <adcRead+0x510>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <adcRead+0x514>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc8 <adcRead+0x518>)
 8001d4e:	6013      	str	r3, [r2, #0]
	sdData[sdDataByteCount+10] = (curtime >> 16) & 0xFF;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <adcRead+0x518>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0c1a      	lsrs	r2, r3, #16
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <adcRead+0x500>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	330a      	adds	r3, #10
 8001d5c:	b2d1      	uxtb	r1, r2
 8001d5e:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <adcRead+0x504>)
 8001d60:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+11] = (curtime >> 8) & 0xFF;
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <adcRead+0x518>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0a1a      	lsrs	r2, r3, #8
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <adcRead+0x500>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	330b      	adds	r3, #11
 8001d6e:	b2d1      	uxtb	r1, r2
 8001d70:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <adcRead+0x504>)
 8001d72:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+12] = curtime & 0xFF;
 8001d74:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <adcRead+0x518>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <adcRead+0x500>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	b2d1      	uxtb	r1, r2
 8001d80:	4a0c      	ldr	r2, [pc, #48]	@ (8001db4 <adcRead+0x504>)
 8001d82:	54d1      	strb	r1, [r2, r3]

	// Increment buffer byte count
	sdDataByteCount = sdDataByteCount + 13;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <adcRead+0x500>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	330d      	adds	r3, #13
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <adcRead+0x500>)
 8001d8c:	6013      	str	r3, [r2, #0]

	// Re-enable Interrupts
	HAL_TIM_Base_Start_IT(&htim16);
 8001d8e:	480f      	ldr	r0, [pc, #60]	@ (8001dcc <adcRead+0x51c>)
 8001d90:	f008 fd54 	bl	800a83c <HAL_TIM_Base_Start_IT>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2110      	movs	r1, #16
 8001d98:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <adcRead+0x520>)
 8001d9a:	f001 fc95 	bl	80036c8 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2101      	movs	r1, #1
 8001da2:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <adcRead+0x524>)
 8001da4:	f001 fc90 	bl	80036c8 <HAL_FDCAN_ActivateNotification>

}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	240006c0 	.word	0x240006c0
 8001db4:	240006c8 	.word	0x240006c8
 8001db8:	58021000 	.word	0x58021000
 8001dbc:	2400045c 	.word	0x2400045c
 8001dc0:	240004e4 	.word	0x240004e4
 8001dc4:	cccccccd 	.word	0xcccccccd
 8001dc8:	240042c8 	.word	0x240042c8
 8001dcc:	240005c8 	.word	0x240005c8
 8001dd0:	24000218 	.word	0x24000218
 8001dd4:	240002b8 	.word	0x240002b8

08001dd8 <toggleMap>:

// Requests to change ECU Map
// TODO not fully functional
void toggleMap() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	// Configure TX Header
	TxHeader.Identifier = 0x409;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <toggleMap+0x98>)
 8001dde:	f240 4209 	movw	r2, #1033	@ 0x409
 8001de2:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <toggleMap+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <toggleMap+0x98>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <toggleMap+0x98>)
 8001df2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001df6:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <toggleMap+0x98>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <toggleMap+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <toggleMap+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <toggleMap+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <toggleMap+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]

	//configure Tx message for CAN

	mapStatus = mapStatus ^ 1;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <toggleMap+0x9c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f083 0301 	eor.w	r3, r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <toggleMap+0x9c>)
 8001e22:	701a      	strb	r2, [r3, #0]

	CANTxData[0] = mapStatus;
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <toggleMap+0x9c>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <toggleMap+0xa0>)
 8001e2a:	701a      	strb	r2, [r3, #0]
	CANTxData[1] = 0;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <toggleMap+0xa0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
	CANTxData[2] = 0;
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <toggleMap+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	709a      	strb	r2, [r3, #2]
	CANTxData[3] = 0;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <toggleMap+0xa0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	70da      	strb	r2, [r3, #3]
	CANTxData[4] = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <toggleMap+0xa0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	711a      	strb	r2, [r3, #4]
	CANTxData[5] = 0;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <toggleMap+0xa0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	715a      	strb	r2, [r3, #5]
	CANTxData[6] = 0;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <toggleMap+0xa0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	719a      	strb	r2, [r3, #6]
	CANTxData[7] = 0;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <toggleMap+0xa0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	71da      	strb	r2, [r3, #7]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, CANTxData)!= HAL_OK) {
 8001e56:	4a08      	ldr	r2, [pc, #32]	@ (8001e78 <toggleMap+0xa0>)
 8001e58:	4905      	ldr	r1, [pc, #20]	@ (8001e70 <toggleMap+0x98>)
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <toggleMap+0xa4>)
 8001e5c:	f001 fa6a 	bl	8003334 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <toggleMap+0x92>
	  Error_Handler();
 8001e66:	f000 f9cd 	bl	8002204 <Error_Handler>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	24000634 	.word	0x24000634
 8001e74:	240042d1 	.word	0x240042d1
 8001e78:	240006a8 	.word	0x240006a8
 8001e7c:	240002b8 	.word	0x240002b8

08001e80 <dataFlag>:
	  Error_Handler();
	}
}

// Writes a flag to SD
void dataFlag() {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	//Deactivated Interrupts
	HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE);
 8001e84:	2110      	movs	r1, #16
 8001e86:	4842      	ldr	r0, [pc, #264]	@ (8001f90 <dataFlag+0x110>)
 8001e88:	f001 fc98 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
	HAL_FDCAN_DeactivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4841      	ldr	r0, [pc, #260]	@ (8001f94 <dataFlag+0x114>)
 8001e90:	f001 fc94 	bl	80037bc <HAL_FDCAN_DeactivateNotification>
	HAL_TIM_Base_Stop_IT(&htim16);
 8001e94:	4840      	ldr	r0, [pc, #256]	@ (8001f98 <dataFlag+0x118>)
 8001e96:	f008 fd49 	bl	800a92c <HAL_TIM_Base_Stop_IT>

	//Check if SD write buffer will be filled out --> if so write to SD before continuing
	if (sdDataByteCount + 13 >= 15360) {
 8001e9a:	4b40      	ldr	r3, [pc, #256]	@ (8001f9c <dataFlag+0x11c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	330d      	adds	r3, #13
 8001ea0:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 8001ea4:	d301      	bcc.n	8001eaa <dataFlag+0x2a>

		sdWrite();
 8001ea6:	f7ff fbcd 	bl	8001644 <sdWrite>

	}

	curtime = __HAL_TIM_GET_COUNTER(&htim2) / 10;
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <dataFlag+0x120>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa4 <dataFlag+0x124>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa8 <dataFlag+0x128>)
 8001eba:	6013      	str	r3, [r2, #0]
	sdData[sdDataByteCount] = 0x00;
 8001ebc:	4b37      	ldr	r3, [pc, #220]	@ (8001f9c <dataFlag+0x11c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	@ (8001fac <dataFlag+0x12c>)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+1] = 0x10;
 8001ec6:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <dataFlag+0x11c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a37      	ldr	r2, [pc, #220]	@ (8001fac <dataFlag+0x12c>)
 8001ece:	2110      	movs	r1, #16
 8001ed0:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+2] = 1;
 8001ed2:	4b32      	ldr	r3, [pc, #200]	@ (8001f9c <dataFlag+0x11c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	4a34      	ldr	r2, [pc, #208]	@ (8001fac <dataFlag+0x12c>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+3] = 0;
 8001ede:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <dataFlag+0x11c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3303      	adds	r3, #3
 8001ee4:	4a31      	ldr	r2, [pc, #196]	@ (8001fac <dataFlag+0x12c>)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+4] = 0;
 8001eea:	4b2c      	ldr	r3, [pc, #176]	@ (8001f9c <dataFlag+0x11c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8001fac <dataFlag+0x12c>)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+5] = 0;
 8001ef6:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <dataFlag+0x11c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3305      	adds	r3, #5
 8001efc:	4a2b      	ldr	r2, [pc, #172]	@ (8001fac <dataFlag+0x12c>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+6] = 0;
 8001f02:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <dataFlag+0x11c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3306      	adds	r3, #6
 8001f08:	4a28      	ldr	r2, [pc, #160]	@ (8001fac <dataFlag+0x12c>)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+7] = 0;
 8001f0e:	4b23      	ldr	r3, [pc, #140]	@ (8001f9c <dataFlag+0x11c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3307      	adds	r3, #7
 8001f14:	4a25      	ldr	r2, [pc, #148]	@ (8001fac <dataFlag+0x12c>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+8] = 0;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <dataFlag+0x11c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	4a22      	ldr	r2, [pc, #136]	@ (8001fac <dataFlag+0x12c>)
 8001f22:	2100      	movs	r1, #0
 8001f24:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+9] = 0;
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <dataFlag+0x11c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3309      	adds	r3, #9
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <dataFlag+0x12c>)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+10] = (curtime >> 16) & 0xFF;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <dataFlag+0x128>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0c1a      	lsrs	r2, r3, #16
 8001f38:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <dataFlag+0x11c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	330a      	adds	r3, #10
 8001f3e:	b2d1      	uxtb	r1, r2
 8001f40:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <dataFlag+0x12c>)
 8001f42:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+11] = (curtime >> 8) & 0xFF;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <dataFlag+0x128>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0a1a      	lsrs	r2, r3, #8
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <dataFlag+0x11c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	330b      	adds	r3, #11
 8001f50:	b2d1      	uxtb	r1, r2
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <dataFlag+0x12c>)
 8001f54:	54d1      	strb	r1, [r2, r3]
	sdData[sdDataByteCount+12] = curtime & 0xFF;
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <dataFlag+0x128>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <dataFlag+0x11c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	b2d1      	uxtb	r1, r2
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <dataFlag+0x12c>)
 8001f64:	54d1      	strb	r1, [r2, r3]
	sdDataByteCount = sdDataByteCount + 13;
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <dataFlag+0x11c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330d      	adds	r3, #13
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f9c <dataFlag+0x11c>)
 8001f6e:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim16);
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <dataFlag+0x118>)
 8001f72:	f008 fc63 	bl	800a83c <HAL_TIM_Base_Start_IT>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2110      	movs	r1, #16
 8001f7a:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <dataFlag+0x110>)
 8001f7c:	f001 fba4 	bl	80036c8 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2101      	movs	r1, #1
 8001f84:	4803      	ldr	r0, [pc, #12]	@ (8001f94 <dataFlag+0x114>)
 8001f86:	f001 fb9f 	bl	80036c8 <HAL_FDCAN_ActivateNotification>

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	24000218 	.word	0x24000218
 8001f94:	240002b8 	.word	0x240002b8
 8001f98:	240005c8 	.word	0x240005c8
 8001f9c:	240006c0 	.word	0x240006c0
 8001fa0:	240004e4 	.word	0x240004e4
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	240042c8 	.word	0x240042c8
 8001fac:	240006c8 	.word	0x240006c8

08001fb0 <xbeeTransmit>:
static void xbeeTransmit() {
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
    if (bufferDataByteCount + 13 >= 128) {
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8002128 <xbeeTransmit+0x178>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	330d      	adds	r3, #13
 8001fbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fc0:	d93d      	bls.n	800203e <xbeeTransmit+0x8e>
 8001fc2:	466b      	mov	r3, sp
 8001fc4:	4698      	mov	r8, r3
      uint8_t newFrame[bufferDataByteCount + 18];
 8001fc6:	4b58      	ldr	r3, [pc, #352]	@ (8002128 <xbeeTransmit+0x178>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f103 0612 	add.w	r6, r3, #18
 8001fce:	4633      	mov	r3, r6
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4634      	mov	r4, r6
 8001fd8:	461d      	mov	r5, r3
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	00eb      	lsls	r3, r5, #3
 8001fe4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe8:	00e2      	lsls	r2, r4, #3
 8001fea:	2300      	movs	r3, #0
 8001fec:	4630      	mov	r0, r6
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	00cb      	lsls	r3, r1, #3
 8001ffa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ffe:	00c2      	lsls	r2, r0, #3
 8002000:	1df3      	adds	r3, r6, #7
 8002002:	08db      	lsrs	r3, r3, #3
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	ebad 0d03 	sub.w	sp, sp, r3
 800200a:	466b      	mov	r3, sp
 800200c:	3300      	adds	r3, #0
 800200e:	603b      	str	r3, [r7, #0]
      frameCreator(newFrame);
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f000 f89b 	bl	800214c <frameCreator>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2110      	movs	r1, #16
 800201a:	4844      	ldr	r0, [pc, #272]	@ (800212c <xbeeTransmit+0x17c>)
 800201c:	f002 faf4 	bl	8004608 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi1, newFrame, sizeof(newFrame), 100);
 8002020:	b2b2      	uxth	r2, r6
 8002022:	2364      	movs	r3, #100	@ 0x64
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	4842      	ldr	r0, [pc, #264]	@ (8002130 <xbeeTransmit+0x180>)
 8002028:	f007 fe40 	bl	8009cac <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	2110      	movs	r1, #16
 8002030:	483e      	ldr	r0, [pc, #248]	@ (800212c <xbeeTransmit+0x17c>)
 8002032:	f002 fae9 	bl	8004608 <HAL_GPIO_WritePin>
      bufferDataByteCount = 0;
 8002036:	4b3c      	ldr	r3, [pc, #240]	@ (8002128 <xbeeTransmit+0x178>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	46c5      	mov	sp, r8
    }
    curtime = __HAL_TIM_GET_COUNTER(&htim2) / 10;
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <xbeeTransmit+0x184>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	4a3c      	ldr	r2, [pc, #240]	@ (8002138 <xbeeTransmit+0x188>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	4a3b      	ldr	r2, [pc, #236]	@ (800213c <xbeeTransmit+0x18c>)
 800204e:	6013      	str	r3, [r2, #0]
    bufferData[bufferDataByteCount] = (RxHeader1.Identifier >> 8) & 0xFF;
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <xbeeTransmit+0x190>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0a1a      	lsrs	r2, r3, #8
 8002056:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <xbeeTransmit+0x178>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b2d1      	uxtb	r1, r2
 800205c:	4a39      	ldr	r2, [pc, #228]	@ (8002144 <xbeeTransmit+0x194>)
 800205e:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+1] = RxHeader1.Identifier & 0xFF;
 8002060:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <xbeeTransmit+0x190>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b30      	ldr	r3, [pc, #192]	@ (8002128 <xbeeTransmit+0x178>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	b2d1      	uxtb	r1, r2
 800206c:	4a35      	ldr	r2, [pc, #212]	@ (8002144 <xbeeTransmit+0x194>)
 800206e:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+2] = RxData1[0];
 8002070:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <xbeeTransmit+0x178>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3302      	adds	r3, #2
 8002076:	4a34      	ldr	r2, [pc, #208]	@ (8002148 <xbeeTransmit+0x198>)
 8002078:	7811      	ldrb	r1, [r2, #0]
 800207a:	4a32      	ldr	r2, [pc, #200]	@ (8002144 <xbeeTransmit+0x194>)
 800207c:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+3] = RxData1[1];
 800207e:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <xbeeTransmit+0x178>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3303      	adds	r3, #3
 8002084:	4a30      	ldr	r2, [pc, #192]	@ (8002148 <xbeeTransmit+0x198>)
 8002086:	7851      	ldrb	r1, [r2, #1]
 8002088:	4a2e      	ldr	r2, [pc, #184]	@ (8002144 <xbeeTransmit+0x194>)
 800208a:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+4] = RxData1[2];
 800208c:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <xbeeTransmit+0x178>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3304      	adds	r3, #4
 8002092:	4a2d      	ldr	r2, [pc, #180]	@ (8002148 <xbeeTransmit+0x198>)
 8002094:	7891      	ldrb	r1, [r2, #2]
 8002096:	4a2b      	ldr	r2, [pc, #172]	@ (8002144 <xbeeTransmit+0x194>)
 8002098:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+5] = RxData1[3];
 800209a:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <xbeeTransmit+0x178>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3305      	adds	r3, #5
 80020a0:	4a29      	ldr	r2, [pc, #164]	@ (8002148 <xbeeTransmit+0x198>)
 80020a2:	78d1      	ldrb	r1, [r2, #3]
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <xbeeTransmit+0x194>)
 80020a6:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+6] = RxData1[4];
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <xbeeTransmit+0x178>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3306      	adds	r3, #6
 80020ae:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <xbeeTransmit+0x198>)
 80020b0:	7911      	ldrb	r1, [r2, #4]
 80020b2:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <xbeeTransmit+0x194>)
 80020b4:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+7] = RxData1[5];
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <xbeeTransmit+0x178>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3307      	adds	r3, #7
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <xbeeTransmit+0x198>)
 80020be:	7951      	ldrb	r1, [r2, #5]
 80020c0:	4a20      	ldr	r2, [pc, #128]	@ (8002144 <xbeeTransmit+0x194>)
 80020c2:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+8] = RxData1[6];
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <xbeeTransmit+0x178>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3308      	adds	r3, #8
 80020ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <xbeeTransmit+0x198>)
 80020cc:	7991      	ldrb	r1, [r2, #6]
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <xbeeTransmit+0x194>)
 80020d0:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+9] = RxData1[7];
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <xbeeTransmit+0x178>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3309      	adds	r3, #9
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <xbeeTransmit+0x198>)
 80020da:	79d1      	ldrb	r1, [r2, #7]
 80020dc:	4a19      	ldr	r2, [pc, #100]	@ (8002144 <xbeeTransmit+0x194>)
 80020de:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+10] = (curtime >> 16) & 0xFF;
 80020e0:	4b16      	ldr	r3, [pc, #88]	@ (800213c <xbeeTransmit+0x18c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0c1a      	lsrs	r2, r3, #16
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <xbeeTransmit+0x178>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330a      	adds	r3, #10
 80020ec:	b2d1      	uxtb	r1, r2
 80020ee:	4a15      	ldr	r2, [pc, #84]	@ (8002144 <xbeeTransmit+0x194>)
 80020f0:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+11] = (curtime >> 8) & 0xFF;
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <xbeeTransmit+0x18c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0a1a      	lsrs	r2, r3, #8
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <xbeeTransmit+0x178>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	330b      	adds	r3, #11
 80020fe:	b2d1      	uxtb	r1, r2
 8002100:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <xbeeTransmit+0x194>)
 8002102:	54d1      	strb	r1, [r2, r3]
    bufferData[bufferDataByteCount+12] = curtime & 0xFF;
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <xbeeTransmit+0x18c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <xbeeTransmit+0x178>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	330c      	adds	r3, #12
 800210e:	b2d1      	uxtb	r1, r2
 8002110:	4a0c      	ldr	r2, [pc, #48]	@ (8002144 <xbeeTransmit+0x194>)
 8002112:	54d1      	strb	r1, [r2, r3]
    bufferDataByteCount = bufferDataByteCount + 13;
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <xbeeTransmit+0x178>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	330d      	adds	r3, #13
 800211a:	4a03      	ldr	r2, [pc, #12]	@ (8002128 <xbeeTransmit+0x178>)
 800211c:	6013      	str	r3, [r2, #0]
  }
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002128:	24004358 	.word	0x24004358
 800212c:	58020000 	.word	0x58020000
 8002130:	240003d4 	.word	0x240003d4
 8002134:	240004e4 	.word	0x240004e4
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	240042c8 	.word	0x240042c8
 8002140:	24000658 	.word	0x24000658
 8002144:	240042d8 	.word	0x240042d8
 8002148:	240006b0 	.word	0x240006b0

0800214c <frameCreator>:

  static void frameCreator(uint8_t *newFrame) {
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    uint8_t sum = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	75fb      	strb	r3, [r7, #23]
    newFrame[0] = 0x7E;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	227e      	movs	r2, #126	@ 0x7e
 800215c:	701a      	strb	r2, [r3, #0]
    newFrame[1] = 0x00;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3301      	adds	r3, #1
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    newFrame[2] = bufferDataByteCount;
 8002166:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <frameCreator+0xac>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3302      	adds	r3, #2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]
    for (int i = 3; i < 17; i++) {
 8002172:	2303      	movs	r3, #3
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e011      	b.n	800219c <frameCreator+0x50>
      newFrame[i] = frame[i];
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	491f      	ldr	r1, [pc, #124]	@ (80021fc <frameCreator+0xb0>)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	440a      	add	r2, r1
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	701a      	strb	r2, [r3, #0]
      sum += frame[i];
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <frameCreator+0xb0>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	4413      	add	r3, r2
 8002194:	75fb      	strb	r3, [r7, #23]
    for (int i = 3; i < 17; i++) {
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	3301      	adds	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b10      	cmp	r3, #16
 80021a0:	ddea      	ble.n	8002178 <frameCreator+0x2c>
    }
    for (int i = 0; i < (int) bufferDataByteCount; i++) {
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e012      	b.n	80021ce <frameCreator+0x82>
      newFrame[i + 17] = bufferData[i];
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3311      	adds	r3, #17
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	4913      	ldr	r1, [pc, #76]	@ (8002200 <frameCreator+0xb4>)
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	440a      	add	r2, r1
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	701a      	strb	r2, [r3, #0]
      sum += bufferData[i];
 80021ba:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <frameCreator+0xb4>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	4413      	add	r3, r2
 80021c6:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < (int) bufferDataByteCount; i++) {
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <frameCreator+0xac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4293      	cmp	r3, r2
 80021d8:	dbe6      	blt.n	80021a8 <frameCreator+0x5c>
    }
    newFrame[bufferDataByteCount + 17] = 255 - (sum & 0xFF);
 80021da:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <frameCreator+0xac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3311      	adds	r3, #17
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	7dfa      	ldrb	r2, [r7, #23]
 80021e6:	43d2      	mvns	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	701a      	strb	r2, [r3, #0]
  }
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	24004358 	.word	0x24004358
 80021fc:	24000018 	.word	0x24000018
 8002200:	240042d8 	.word	0x240042d8

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <Error_Handler+0x8>

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_MspInit+0x30>)
 8002218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221c:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_MspInit+0x30>)
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_MspInit+0x30>)
 8002228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	58024400 	.word	0x58024400

08002244 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0be      	sub	sp, #248	@ 0xf8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	22c8      	movs	r2, #200	@ 0xc8
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f00c ff5c 	bl	800f122 <memset>
  if(hfdcan->Instance==FDCAN1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5f      	ldr	r2, [pc, #380]	@ (80023ec <HAL_FDCAN_MspInit+0x1a8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d159      	bne.n	8002328 <HAL_FDCAN_MspInit+0xe4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002274:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002280:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fa47 	bl	8005720 <HAL_RCCEx_PeriphCLKConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002298:	f7ff ffb4 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <HAL_FDCAN_MspInit+0x1ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a53      	ldr	r2, [pc, #332]	@ (80023f0 <HAL_FDCAN_MspInit+0x1ac>)
 80022a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80022a6:	4b52      	ldr	r3, [pc, #328]	@ (80023f0 <HAL_FDCAN_MspInit+0x1ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10e      	bne.n	80022cc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80022ae:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 80022b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022b4:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ba:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80022be:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 80022c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b49      	ldr	r3, [pc, #292]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	4a48      	ldr	r2, [pc, #288]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022dc:	4b45      	ldr	r3, [pc, #276]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022ea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002304:	2309      	movs	r3, #9
 8002306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800230e:	4619      	mov	r1, r3
 8002310:	4839      	ldr	r0, [pc, #228]	@ (80023f8 <HAL_FDCAN_MspInit+0x1b4>)
 8002312:	f001 ffb1 	bl	8004278 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 14, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210e      	movs	r1, #14
 800231a:	2013      	movs	r0, #19
 800231c:	f000 fd29 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002320:	2013      	movs	r0, #19
 8002322:	f000 fd40 	bl	8002da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002326:	e05d      	b.n	80023e4 <HAL_FDCAN_MspInit+0x1a0>
  else if(hfdcan->Instance==FDCAN2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a33      	ldr	r2, [pc, #204]	@ (80023fc <HAL_FDCAN_MspInit+0x1b8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d158      	bne.n	80023e4 <HAL_FDCAN_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002332:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800233e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f9e8 	bl	8005720 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_FDCAN_MspInit+0x116>
      Error_Handler();
 8002356:	f7ff ff55 	bl	8002204 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800235a:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <HAL_FDCAN_MspInit+0x1ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <HAL_FDCAN_MspInit+0x1ac>)
 8002362:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <HAL_FDCAN_MspInit+0x1ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10e      	bne.n	800238a <HAL_FDCAN_MspInit+0x146>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800236c:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 800236e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002372:	4a20      	ldr	r2, [pc, #128]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002378:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800237c:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 800237e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002390:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_FDCAN_MspInit+0x1b0>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80023ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80023c2:	2309      	movs	r3, #9
 80023c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80023cc:	4619      	mov	r1, r3
 80023ce:	480c      	ldr	r0, [pc, #48]	@ (8002400 <HAL_FDCAN_MspInit+0x1bc>)
 80023d0:	f001 ff52 	bl	8004278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 13, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	210d      	movs	r1, #13
 80023d8:	2014      	movs	r0, #20
 80023da:	f000 fcca 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80023de:	2014      	movs	r0, #20
 80023e0:	f000 fce1 	bl	8002da6 <HAL_NVIC_EnableIRQ>
}
 80023e4:	bf00      	nop
 80023e6:	37f8      	adds	r7, #248	@ 0xf8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	4000a000 	.word	0x4000a000
 80023f0:	2400435c 	.word	0x2400435c
 80023f4:	58024400 	.word	0x58024400
 80023f8:	58020000 	.word	0x58020000
 80023fc:	4000a400 	.word	0x4000a400
 8002400:	58020400 	.word	0x58020400

08002404 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0be      	sub	sp, #248	@ 0xf8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800241c:	f107 0318 	add.w	r3, r7, #24
 8002420:	22c8      	movs	r2, #200	@ 0xc8
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f00c fe7c 	bl	800f122 <memset>
  if(hsd->Instance==SDMMC1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a3c      	ldr	r2, [pc, #240]	@ (8002520 <HAL_SD_MspInit+0x11c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d171      	bne.n	8002518 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002434:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002440:	2300      	movs	r3, #0
 8002442:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002444:	f107 0318 	add.w	r3, r7, #24
 8002448:	4618      	mov	r0, r3
 800244a:	f003 f969 	bl	8005720 <HAL_RCCEx_PeriphCLKConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002454:	f7ff fed6 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002458:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <HAL_SD_MspInit+0x120>)
 800245a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800245e:	4a31      	ldr	r2, [pc, #196]	@ (8002524 <HAL_SD_MspInit+0x120>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002468:	4b2e      	ldr	r3, [pc, #184]	@ (8002524 <HAL_SD_MspInit+0x120>)
 800246a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800246e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <HAL_SD_MspInit+0x120>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247c:	4a29      	ldr	r2, [pc, #164]	@ (8002524 <HAL_SD_MspInit+0x120>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002486:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <HAL_SD_MspInit+0x120>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002494:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <HAL_SD_MspInit+0x120>)
 8002496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249a:	4a22      	ldr	r2, [pc, #136]	@ (8002524 <HAL_SD_MspInit+0x120>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <HAL_SD_MspInit+0x120>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024b2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80024b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80024cc:	230c      	movs	r3, #12
 80024ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <HAL_SD_MspInit+0x124>)
 80024da:	f001 fecd 	bl	8004278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024de:	2304      	movs	r3, #4
 80024e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80024f6:	230c      	movs	r3, #12
 80024f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002500:	4619      	mov	r1, r3
 8002502:	480a      	ldr	r0, [pc, #40]	@ (800252c <HAL_SD_MspInit+0x128>)
 8002504:	f001 feb8 	bl	8004278 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 9, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2109      	movs	r1, #9
 800250c:	2031      	movs	r0, #49	@ 0x31
 800250e:	f000 fc30 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002512:	2031      	movs	r0, #49	@ 0x31
 8002514:	f000 fc47 	bl	8002da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002518:	bf00      	nop
 800251a:	37f8      	adds	r7, #248	@ 0xf8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	52007000 	.word	0x52007000
 8002524:	58024400 	.word	0x58024400
 8002528:	58020800 	.word	0x58020800
 800252c:	58020c00 	.word	0x58020c00

08002530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b0be      	sub	sp, #248	@ 0xf8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002548:	f107 0318 	add.w	r3, r7, #24
 800254c:	22c8      	movs	r2, #200	@ 0xc8
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f00c fde6 	bl	800f122 <memset>
  if(hspi->Instance==SPI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a4c      	ldr	r2, [pc, #304]	@ (800268c <HAL_SPI_MspInit+0x15c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d145      	bne.n	80025ec <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002560:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800256c:	2300      	movs	r3, #0
 800256e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	4618      	mov	r0, r3
 8002576:	f003 f8d3 	bl	8005720 <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002580:	f7ff fe40 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002584:	4b42      	ldr	r3, [pc, #264]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 8002586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258a:	4a41      	ldr	r2, [pc, #260]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 800258c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002590:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002594:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 8002596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a8:	4a39      	ldr	r2, [pc, #228]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b2:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025c0:	23e0      	movs	r3, #224	@ 0xe0
 80025c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d8:	2305      	movs	r3, #5
 80025da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025e2:	4619      	mov	r1, r3
 80025e4:	482b      	ldr	r0, [pc, #172]	@ (8002694 <HAL_SPI_MspInit+0x164>)
 80025e6:	f001 fe47 	bl	8004278 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80025ea:	e04b      	b.n	8002684 <HAL_SPI_MspInit+0x154>
  else if(hspi->Instance==SPI4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <HAL_SPI_MspInit+0x168>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d146      	bne.n	8002684 <HAL_SPI_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80025f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	4618      	mov	r0, r3
 800260e:	f003 f887 	bl	8005720 <HAL_RCCEx_PeriphCLKConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002618:	f7ff fdf4 	bl	8002204 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800261c:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 800261e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 8002624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002628:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 800262e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002640:	4a13      	ldr	r2, [pc, #76]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_SPI_MspInit+0x160>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002658:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800265c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002672:	2305      	movs	r3, #5
 8002674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002678:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800267c:	4619      	mov	r1, r3
 800267e:	4807      	ldr	r0, [pc, #28]	@ (800269c <HAL_SPI_MspInit+0x16c>)
 8002680:	f001 fdfa 	bl	8004278 <HAL_GPIO_Init>
}
 8002684:	bf00      	nop
 8002686:	37f8      	adds	r7, #248	@ 0xf8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40013000 	.word	0x40013000
 8002690:	58024400 	.word	0x58024400
 8002694:	58020000 	.word	0x58020000
 8002698:	40013400 	.word	0x40013400
 800269c:	58021000 	.word	0x58021000

080026a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b0:	d10f      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026b2:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 80026b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 80026c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80026d0:	e04d      	b.n	800276e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM6)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a29      	ldr	r2, [pc, #164]	@ (800277c <HAL_TIM_Base_MspInit+0xdc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10f      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026dc:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	4a25      	ldr	r2, [pc, #148]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ec:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
}
 80026fa:	e038      	b.n	800276e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM14)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <HAL_TIM_Base_MspInit+0xe0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d117      	bne.n	8002736 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 8002708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800270c:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002712:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002716:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 8002718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	202d      	movs	r0, #45	@ 0x2d
 800272a:	f000 fb22 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800272e:	202d      	movs	r0, #45	@ 0x2d
 8002730:	f000 fb39 	bl	8002da6 <HAL_NVIC_EnableIRQ>
}
 8002734:	e01b      	b.n	800276e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM16)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <HAL_TIM_Base_MspInit+0xe4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d116      	bne.n	800276e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 8002742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002746:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 8002748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 8002752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 15, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	210f      	movs	r1, #15
 8002762:	2075      	movs	r0, #117	@ 0x75
 8002764:	f000 fb05 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002768:	2075      	movs	r0, #117	@ 0x75
 800276a:	f000 fb1c 	bl	8002da6 <HAL_NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	58024400 	.word	0x58024400
 800277c:	40001000 	.word	0x40001000
 8002780:	40002000 	.word	0x40002000
 8002784:	40014400 	.word	0x40014400

08002788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <NMI_Handler+0x4>

08002790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <MemManage_Handler+0x4>

080027a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <BusFault_Handler+0x4>

080027a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <UsageFault_Handler+0x4>

080027b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027de:	f000 f99d 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80027ea:	2002      	movs	r0, #2
 80027ec:	f001 ff25 	bl	800463a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <FDCAN1_IT0_IRQHandler+0x10>)
 80027fa:	f001 f84d 	bl	8003898 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	24000218 	.word	0x24000218

08002808 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <FDCAN2_IT0_IRQHandler+0x10>)
 800280e:	f001 f843 	bl	8003898 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	240002b8 	.word	0x240002b8

0800281c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002822:	f008 f8b2 	bl	800a98a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2400057c 	.word	0x2400057c

08002830 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <SDMMC1_IRQHandler+0x10>)
 8002836:	f005 ff21 	bl	800867c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	24000358 	.word	0x24000358

08002844 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <TIM16_IRQHandler+0x10>)
 800284a:	f008 f89e 	bl	800a98a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	240005c8 	.word	0x240005c8

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_kill>:

int _kill(int pid, int sig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002872:	f00c fca9 	bl	800f1c8 <__errno>
 8002876:	4603      	mov	r3, r0
 8002878:	2216      	movs	r2, #22
 800287a:	601a      	str	r2, [r3, #0]
  return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_exit>:

void _exit (int status)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ffe7 	bl	8002868 <_kill>
  while (1) {}    /* Make sure we hang here */
 800289a:	bf00      	nop
 800289c:	e7fd      	b.n	800289a <_exit+0x12>

0800289e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e00a      	b.n	80028c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b0:	f3af 8000 	nop.w
 80028b4:	4601      	mov	r1, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	dbf0      	blt.n	80028b0 <_read+0x12>
  }

  return len;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e009      	b.n	80028fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	60ba      	str	r2, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	dbf1      	blt.n	80028ea <_write+0x12>
  }
  return len;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_close>:

int _close(int file)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002938:	605a      	str	r2, [r3, #4]
  return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_isatty>:

int _isatty(int file)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f00c fc0e 	bl	800f1c8 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	24080000 	.word	0x24080000
 80029d8:	00000800 	.word	0x00000800
 80029dc:	24004360 	.word	0x24004360
 80029e0:	24004958 	.word	0x24004958

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029e8:	f7fd fcd2 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ec:	480c      	ldr	r0, [pc, #48]	@ (8002a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ee:	490d      	ldr	r1, [pc, #52]	@ (8002a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f4:	e002      	b.n	80029fc <LoopCopyDataInit>

080029f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fa:	3304      	adds	r3, #4

080029fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a00:	d3f9      	bcc.n	80029f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a04:	4c0a      	ldr	r4, [pc, #40]	@ (8002a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a08:	e001      	b.n	8002a0e <LoopFillZerobss>

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a0c:	3204      	adds	r2, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a12:	f00c fbdf 	bl	800f1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fe f821 	bl	8000a5c <main>
  bx  lr
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a24:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8002a28:	08011368 	.word	0x08011368
  ldr r2, =_sbss
 8002a2c:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8002a30:	24004958 	.word	0x24004958

08002a34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC3_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3e:	2003      	movs	r0, #3
 8002a40:	f000 f98c 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a44:	f002 fcac 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_Init+0x68>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	4913      	ldr	r1, [pc, #76]	@ (8002aa4 <HAL_Init+0x6c>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a62:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_Init+0x68>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa4 <HAL_Init+0x6c>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa8 <HAL_Init+0x70>)
 8002a7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <HAL_Init+0x74>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a82:	200a      	movs	r0, #10
 8002a84:	f000 f814 	bl	8002ab0 <HAL_InitTick>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e002      	b.n	8002a98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a92:	f7ff fbbd 	bl	8002210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	08010f34 	.word	0x08010f34
 8002aa8:	24000004 	.word	0x24000004
 8002aac:	24000000 	.word	0x24000000

08002ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ab8:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_InitTick+0x60>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e021      	b.n	8002b08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <HAL_InitTick+0x64>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_InitTick+0x60>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f971 	bl	8002dc2 <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00e      	b.n	8002b08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d80a      	bhi.n	8002b06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f000 f93b 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002afc:	4a06      	ldr	r2, [pc, #24]	@ (8002b18 <HAL_InitTick+0x68>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	24000030 	.word	0x24000030
 8002b14:	24000000 	.word	0x24000000
 8002b18:	2400002c 	.word	0x2400002c

08002b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_IncTick+0x20>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_IncTick+0x24>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <HAL_IncTick+0x24>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	24000030 	.word	0x24000030
 8002b40:	24004364 	.word	0x24004364

08002b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return uwTick;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_GetTick+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	24004364 	.word	0x24004364

08002b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b64:	f7ff ffee 	bl	8002b44 <HAL_GetTick>
 8002b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d005      	beq.n	8002b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_Delay+0x44>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b82:	bf00      	nop
 8002b84:	f7ff ffde 	bl	8002b44 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d8f7      	bhi.n	8002b84 <HAL_Delay+0x28>
  {
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	24000030 	.word	0x24000030

08002ba4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	@ (8002bb8 <HAL_GetREVID+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0c1b      	lsrs	r3, r3, #16
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	5c001000 	.word	0x5c001000

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x40>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x40>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	05fa0000 	.word	0x05fa0000

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	@ (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	@ (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	@ (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f7ff ff8e 	bl	8002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff29 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff40 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff90 	bl	8002cb0 <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5f 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff33 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ffa4 	bl	8002d18 <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b098      	sub	sp, #96	@ 0x60
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002de4:	4a84      	ldr	r2, [pc, #528]	@ (8002ff8 <HAL_FDCAN_Init+0x21c>)
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	4611      	mov	r1, r2
 8002dec:	224c      	movs	r2, #76	@ 0x4c
 8002dee:	4618      	mov	r0, r3
 8002df0:	f00c fa17 	bl	800f222 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1c6      	b.n	800318c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7e      	ldr	r2, [pc, #504]	@ (8002ffc <HAL_FDCAN_Init+0x220>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d106      	bne.n	8002e16 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fa0a 	bl	8002244 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0210 	bic.w	r2, r2, #16
 8002e3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e40:	f7ff fe80 	bl	8002b44 <HAL_GetTick>
 8002e44:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e46:	e014      	b.n	8002e72 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e48:	f7ff fe7c 	bl	8002b44 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b0a      	cmp	r3, #10
 8002e54:	d90d      	bls.n	8002e72 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2203      	movs	r2, #3
 8002e6a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e18c      	b.n	800318c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d0e3      	beq.n	8002e48 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7ff fe58 	bl	8002b44 <HAL_GetTick>
 8002e94:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e96:	e014      	b.n	8002ec2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e98:	f7ff fe54 	bl	8002b44 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b0a      	cmp	r3, #10
 8002ea4:	d90d      	bls.n	8002ec2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e164      	b.n	800318c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0e3      	beq.n	8002e98 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0202 	orr.w	r2, r2, #2
 8002ede:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7c1b      	ldrb	r3, [r3, #16]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d108      	bne.n	8002efa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef6:	619a      	str	r2, [r3, #24]
 8002ef8:	e007      	b.n	8002f0a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f08:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7c5b      	ldrb	r3, [r3, #17]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f20:	619a      	str	r2, [r3, #24]
 8002f22:	e007      	b.n	8002f34 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f32:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7c9b      	ldrb	r3, [r3, #18]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f4a:	619a      	str	r2, [r3, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f5c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002f82:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0210 	bic.w	r2, r2, #16
 8002f92:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d108      	bne.n	8002fae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	e030      	b.n	8003010 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02c      	beq.n	8003010 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d020      	beq.n	8003000 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fcc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0210 	orr.w	r2, r2, #16
 8002fdc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d114      	bne.n	8003010 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	619a      	str	r2, [r3, #24]
 8002ff6:	e00b      	b.n	8003010 <HAL_FDCAN_Init+0x234>
 8002ff8:	08010ea4 	.word	0x08010ea4
 8002ffc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0220 	orr.w	r2, r2, #32
 800300e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	3b01      	subs	r3, #1
 8003016:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	3b01      	subs	r3, #1
 800301e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003020:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003028:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	3b01      	subs	r3, #1
 8003032:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003038:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800303a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003044:	d115      	bne.n	8003072 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	3b01      	subs	r3, #1
 8003052:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003054:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800305e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	3b01      	subs	r3, #1
 8003068:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800306e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003070:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003098:	4413      	add	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d011      	beq.n	80030c2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80030a6:	f023 0107 	bic.w	r1, r3, #7
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3360      	adds	r3, #96	@ 0x60
 80030b2:	443b      	add	r3, r7
 80030b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d011      	beq.n	80030ee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80030d2:	f023 0107 	bic.w	r1, r3, #7
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3360      	adds	r3, #96	@ 0x60
 80030de:	443b      	add	r3, r7
 80030e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80030fe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3360      	adds	r3, #96	@ 0x60
 800310a:	443b      	add	r3, r7
 800310c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003110:	011a      	lsls	r2, r3, #4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003120:	2b00      	cmp	r3, #0
 8003122:	d012      	beq.n	800314a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800312c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	3360      	adds	r3, #96	@ 0x60
 8003138:	443b      	add	r3, r7
 800313a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_FDCAN_Init+0x3b8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d107      	bne.n	8003164 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f022 0203 	bic.w	r2, r2, #3
 8003162:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fe77 	bl	8003e70 <FDCAN_CalcultateRamBlockAddresses>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003188:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800318c:	4618      	mov	r0, r3
 800318e:	3760      	adds	r7, #96	@ 0x60
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	4000a000 	.word	0x4000a000

08003198 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80031a8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d002      	beq.n	80031b6 <HAL_FDCAN_ConfigFilter+0x1e>
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d157      	bne.n	8003266 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d12b      	bne.n	8003216 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b07      	cmp	r3, #7
 80031c4:	d10d      	bne.n	80031e2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80031d2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031d8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80031da:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e00e      	b.n	8003200 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031ee:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80031f6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e025      	b.n	8003262 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	075a      	lsls	r2, r3, #29
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b07      	cmp	r3, #7
 800322a:	d103      	bne.n	8003234 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e006      	b.n	8003242 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	079a      	lsls	r2, r3, #30
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3304      	adds	r3, #4
 800325a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e008      	b.n	8003278 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800326c:	f043 0202 	orr.w	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d110      	bne.n	80032c0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80032a6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80032ac:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80032b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e008      	b.n	80032d2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032c6:	f043 0204 	orr.w	r2, r3, #4
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d111      	bne.n	8003316 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e008      	b.n	8003328 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d141      	bne.n	80033d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003354:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e038      	b.n	80033e2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003386:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e026      	b.n	80033e2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fee6 	bl	800417c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80033c0:	2201      	movs	r2, #1
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e008      	b.n	80033e2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033d6:	f043 0208 	orr.w	r2, r3, #8
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b08b      	sub	sp, #44	@ 0x2c
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003404:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003406:	7efb      	ldrb	r3, [r7, #27]
 8003408:	2b02      	cmp	r3, #2
 800340a:	f040 814b 	bne.w	80036a4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d14d      	bne.n	80034b0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800341c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e13e      	b.n	80036b6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800344e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e12c      	b.n	80036b6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003464:	0e1b      	lsrs	r3, r3, #24
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10b      	bne.n	8003486 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003476:	0fdb      	lsrs	r3, r3, #31
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003480:	d101      	bne.n	8003486 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	69f9      	ldr	r1, [r7, #28]
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ae:	e069      	b.n	8003584 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b41      	cmp	r3, #65	@ 0x41
 80034b4:	d14d      	bne.n	8003552 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0ed      	b.n	80036b6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0db      	b.n	80036b6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003506:	0e1b      	lsrs	r3, r3, #24
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10b      	bne.n	8003528 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003518:	0fdb      	lsrs	r3, r3, #31
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003522:	d101      	bne.n	8003528 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003524:	2301      	movs	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003544:	69f9      	ldr	r1, [r7, #28]
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003550:	e018      	b.n	8003584 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	d309      	bcc.n	8003570 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0a2      	b.n	80036b6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0c9b      	lsrs	r3, r3, #18
 800359e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e005      	b.n	80035b4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	3304      	adds	r3, #4
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e1b      	lsrs	r3, r3, #24
 8003606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	0fda      	lsrs	r2, r3, #31
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	3304      	adds	r3, #4
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	e00a      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	441a      	add	r2, r3
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	440b      	add	r3, r1
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	3301      	adds	r3, #1
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	461a      	mov	r2, r3
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	4293      	cmp	r3, r2
 800364e:	d3eb      	bcc.n	8003628 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d105      	bne.n	8003662 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003660:	e01e      	b.n	80036a0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b41      	cmp	r3, #65	@ 0x41
 8003666:	d105      	bne.n	8003674 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003672:	e015      	b.n	80036a0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b1f      	cmp	r3, #31
 8003678:	d808      	bhi.n	800368c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2101      	movs	r1, #1
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800368a:	e009      	b.n	80036a0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 021f 	and.w	r2, r3, #31
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f202 	lsl.w	r2, r1, r2
 800369c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e008      	b.n	80036b6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036aa:	f043 0208 	orr.w	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	372c      	adds	r7, #44	@ 0x2c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	08010f44 	.word	0x08010f44

080036c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80036da:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d002      	beq.n	80036e8 <HAL_FDCAN_ActivateNotification+0x20>
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d155      	bne.n	8003794 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003706:	e014      	b.n	8003732 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d108      	bne.n	800372a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0202 	orr.w	r2, r2, #2
 8003726:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003728:	e003      	b.n	8003732 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2203      	movs	r2, #3
 8003730:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	430a      	orrs	r2, r1
 800374c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	430a      	orrs	r2, r1
 800376a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <HAL_FDCAN_ActivateNotification+0xec>)
 8003778:	4013      	ands	r3, r2
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	430b      	orrs	r3, r1
 8003780:	6553      	str	r3, [r2, #84]	@ 0x54
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	0f9b      	lsrs	r3, r3, #30
 800378a:	490b      	ldr	r1, [pc, #44]	@ (80037b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e008      	b.n	80037a6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	3fcfffff 	.word	0x3fcfffff
 80037b8:	4000a800 	.word	0x4000a800

080037bc <HAL_FDCAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg FDCAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeactivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t InactiveITs)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t ITLineSelection;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80037cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(InactiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d002      	beq.n	80037da <HAL_FDCAN_DeactivateNotification+0x1e>
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d14b      	bne.n	8003872 <HAL_FDCAN_DeactivateNotification+0xb6>
  {
    /* Disable the selected interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, InactiveITs);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_FDCAN_DeactivateNotification+0xd4>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80037f0:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <HAL_FDCAN_DeactivateNotification+0xd8>)
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	0f9b      	lsrs	r3, r3, #30
 80037f8:	43db      	mvns	r3, r3
 80037fa:	4926      	ldr	r1, [pc, #152]	@ (8003894 <HAL_FDCAN_DeactivateNotification+0xd8>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	614b      	str	r3, [r1, #20]

    if ((InactiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_FDCAN_DeactivateNotification+0x58>
    {
      /* Disable Tx Buffer Transmission Interrupts */
      CLEAR_REG(hfdcan->Instance->TXBTIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((InactiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_FDCAN_DeactivateNotification+0x6c>
    {
      /* Disable Tx Buffer Cancellation Finished Interrupt */
      CLEAR_REG(hfdcan->Instance->TXBCIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    ITLineSelection = hfdcan->Instance->ILS;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	60bb      	str	r3, [r7, #8]

    if ((hfdcan->Instance->IE | ITLineSelection) == ITLineSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_FDCAN_DeactivateNotification+0x94>
    {
      /* Disable Interrupt line 0 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((hfdcan->Instance->IE & ITLineSelection) == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d107      	bne.n	800386e <HAL_FDCAN_DeactivateNotification+0xb2>
    {
      /* Disable Interrupt line 1 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0202 	bic.w	r2, r2, #2
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e008      	b.n	8003884 <HAL_FDCAN_DeactivateNotification+0xc8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003878:	f043 0202 	orr.w	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	3fcfffff 	.word	0x3fcfffff
 8003894:	4000a800 	.word	0x4000a800

08003898 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b096      	sub	sp, #88	@ 0x58
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80038a0:	4b95      	ldr	r3, [pc, #596]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	079b      	lsls	r3, r3, #30
 80038a6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80038a8:	4b93      	ldr	r3, [pc, #588]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	079b      	lsls	r3, r3, #30
 80038ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038b0:	4013      	ands	r3, r2
 80038b2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80038c8:	4013      	ands	r3, r2
 80038ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e0:	4013      	ands	r3, r2
 80038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f8:	4013      	ands	r3, r2
 80038fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003902:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003906:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003910:	4013      	ands	r3, r2
 8003912:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800391e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003928:	4013      	ands	r3, r2
 800392a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00f      	beq.n	8003966 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003958:	651a      	str	r2, [r3, #80]	@ 0x50
 800395a:	4b67      	ldr	r3, [pc, #412]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa39 	bl	8003dd8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01c      	beq.n	80039aa <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003982:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800398c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800398e:	4013      	ands	r3, r2
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800399a:	651a      	str	r2, [r3, #80]	@ 0x50
 800399c:	4b56      	ldr	r3, [pc, #344]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80039a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f9ee 	bl	8003d86 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b6:	4b51      	ldr	r3, [pc, #324]	@ (8003afc <HAL_FDCAN_IRQHandler+0x264>)
 80039b8:	400b      	ands	r3, r1
 80039ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80039bc:	4a4e      	ldr	r2, [pc, #312]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	0f9b      	lsrs	r3, r3, #30
 80039c2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80039c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9b2 	bl	8003d30 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80039cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039d8:	4b48      	ldr	r3, [pc, #288]	@ (8003afc <HAL_FDCAN_IRQHandler+0x264>)
 80039da:	400b      	ands	r3, r1
 80039dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80039de:	4a46      	ldr	r2, [pc, #280]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 80039e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e2:	0f9b      	lsrs	r3, r3, #30
 80039e4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80039e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f9ac 	bl	8003d46 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80039ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80039fa:	4b40      	ldr	r3, [pc, #256]	@ (8003afc <HAL_FDCAN_IRQHandler+0x264>)
 80039fc:	400b      	ands	r3, r1
 80039fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a00:	4a3d      	ldr	r2, [pc, #244]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 8003a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a04:	0f9b      	lsrs	r3, r3, #30
 8003a06:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003a08:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fc fd6c 	bl	80004e8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a1c:	4b37      	ldr	r3, [pc, #220]	@ (8003afc <HAL_FDCAN_IRQHandler+0x264>)
 8003a1e:	400b      	ands	r3, r1
 8003a20:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a22:	4a35      	ldr	r2, [pc, #212]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 8003a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a26:	0f9b      	lsrs	r3, r3, #30
 8003a28:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003a2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fc ff21 	bl	8000874 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00f      	beq.n	8003a5c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a50:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f980 	bl	8003d5c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01c      	beq.n	8003aa0 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d017      	beq.n	8003aa0 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a78:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a84:	4013      	ands	r3, r2
 8003a86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a90:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a92:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f968 	bl	8003d70 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00f      	beq.n	8003aca <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003abc:	651a      	str	r2, [r3, #80]	@ 0x50
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f969 	bl	8003d9c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d010      	beq.n	8003b00 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ae6:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_FDCAN_IRQHandler+0x260>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f95e 	bl	8003db0 <HAL_FDCAN_TimestampWraparoundCallback>
 8003af4:	e004      	b.n	8003b00 <HAL_FDCAN_IRQHandler+0x268>
 8003af6:	bf00      	nop
 8003af8:	4000a800 	.word	0x4000a800
 8003afc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b1e:	4b81      	ldr	r3, [pc, #516]	@ (8003d24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f94d 	bl	8003dc4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d014      	beq.n	8003b5e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00f      	beq.n	8003b5e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b46:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b48:	4b76      	ldr	r3, [pc, #472]	@ (8003d24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d28 <HAL_FDCAN_IRQHandler+0x490>)
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b70:	4a6c      	ldr	r2, [pc, #432]	@ (8003d24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b74:	0f9b      	lsrs	r3, r3, #30
 8003b76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f940 	bl	8003e00 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b8c:	4b66      	ldr	r3, [pc, #408]	@ (8003d28 <HAL_FDCAN_IRQHandler+0x490>)
 8003b8e:	400b      	ands	r3, r1
 8003b90:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b92:	4a64      	ldr	r2, [pc, #400]	@ (8003d24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b96:	0f9b      	lsrs	r3, r3, #30
 8003b98:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5f      	ldr	r2, [pc, #380]	@ (8003d2c <HAL_FDCAN_IRQHandler+0x494>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f040 80aa 	bne.w	8003d0a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80a2 	beq.w	8003d0a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bda:	4013      	ands	r3, r2
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003be8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8003c18:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	4013      	ands	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8003c30:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003c5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8d9 	bl	8003e16 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c70:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8d9 	bl	8003e2c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d019      	beq.n	8003cb8 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d014      	beq.n	8003cb8 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2240      	movs	r2, #64	@ 0x40
 8003cac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	6939      	ldr	r1, [r7, #16]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8c5 	bl	8003e42 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003cc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8c6 	bl	8003e5a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f869 	bl	8003dec <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3758      	adds	r7, #88	@ 0x58
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	4000a800 	.word	0x4000a800
 8003d28:	3fcfffff 	.word	0x3fcfffff
 8003d2c:	4000a000 	.word	0x4000a000

08003d30 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e86:	4ba7      	ldr	r3, [pc, #668]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	0091      	lsls	r1, r2, #2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	041a      	lsls	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ec6:	4b97      	ldr	r3, [pc, #604]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0091      	lsls	r1, r2, #2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4413      	add	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003f08:	4b86      	ldr	r3, [pc, #536]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	0091      	lsls	r1, r2, #2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f22:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	041a      	lsls	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f50:	4b74      	ldr	r3, [pc, #464]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	0091      	lsls	r1, r2, #2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f6a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	041a      	lsls	r2, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003f98:	4b62      	ldr	r3, [pc, #392]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	0091      	lsls	r1, r2, #2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003fc4:	4b57      	ldr	r3, [pc, #348]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	0091      	lsls	r1, r2, #2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fde:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	041a      	lsls	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004008:	4013      	ands	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0091      	lsls	r1, r2, #2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	430b      	orrs	r3, r1
 8004014:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004020:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800403c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004044:	061a      	lsls	r2, r3, #24
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004054:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004056:	4413      	add	r3, r2
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	441a      	add	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	4a04      	ldr	r2, [pc, #16]	@ (800412c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d915      	bls.n	800414c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004120:	e006      	b.n	8004130 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004122:	bf00      	nop
 8004124:	ffff0003 	.word	0xffff0003
 8004128:	10002b00 	.word	0x10002b00
 800412c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2203      	movs	r2, #3
 8004144:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e010      	b.n	800416e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e005      	b.n	8004160 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	429a      	cmp	r2, r3
 800416a:	d3f3      	bcc.n	8004154 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop

0800417c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	@ 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800419a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e00a      	b.n	80041be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80041b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80041b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80041b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80041c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80041ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80041d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3304      	adds	r3, #4
 80041fe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	3304      	adds	r3, #4
 800420a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e020      	b.n	8004254 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	3303      	adds	r3, #3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3302      	adds	r3, #2
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	440b      	add	r3, r1
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800422a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3301      	adds	r3, #1
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	440b      	add	r3, r1
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004238:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	440a      	add	r2, r1
 8004240:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004242:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	3304      	adds	r3, #4
 800424c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	3304      	adds	r3, #4
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	4a06      	ldr	r2, [pc, #24]	@ (8004274 <FDCAN_CopyMessageToRAM+0xf8>)
 800425c:	5cd3      	ldrb	r3, [r2, r3]
 800425e:	461a      	mov	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4293      	cmp	r3, r2
 8004264:	d3d5      	bcc.n	8004212 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	3724      	adds	r7, #36	@ 0x24
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	08010f44 	.word	0x08010f44

08004278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	@ 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004286:	4b89      	ldr	r3, [pc, #548]	@ (80044ac <HAL_GPIO_Init+0x234>)
 8004288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800428a:	e194      	b.n	80045b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8186 	beq.w	80045b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_GPIO_Init+0x44>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d130      	bne.n	800431e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f2:	2201      	movs	r2, #1
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0201 	and.w	r2, r3, #1
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b03      	cmp	r3, #3
 8004328:	d017      	beq.n	800435a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d123      	bne.n	80043ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	08da      	lsrs	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3208      	adds	r2, #8
 80043a8:	69b9      	ldr	r1, [r7, #24]
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80e0 	beq.w	80045b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f0:	4b2f      	ldr	r3, [pc, #188]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 80043f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043f6:	4a2e      	ldr	r2, [pc, #184]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004400:	4b2b      	ldr	r3, [pc, #172]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 8004402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440e:	4a29      	ldr	r2, [pc, #164]	@ (80044b4 <HAL_GPIO_Init+0x23c>)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <HAL_GPIO_Init+0x240>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d052      	beq.n	80044e0 <HAL_GPIO_Init+0x268>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_GPIO_Init+0x244>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_GPIO_Init+0x22e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_GPIO_Init+0x248>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02b      	beq.n	80044a2 <HAL_GPIO_Init+0x22a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <HAL_GPIO_Init+0x24c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d025      	beq.n	800449e <HAL_GPIO_Init+0x226>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <HAL_GPIO_Init+0x250>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <HAL_GPIO_Init+0x222>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <HAL_GPIO_Init+0x254>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d019      	beq.n	8004496 <HAL_GPIO_Init+0x21e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <HAL_GPIO_Init+0x258>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_GPIO_Init+0x21a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_GPIO_Init+0x25c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00d      	beq.n	800448e <HAL_GPIO_Init+0x216>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <HAL_GPIO_Init+0x260>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_GPIO_Init+0x212>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <HAL_GPIO_Init+0x264>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_GPIO_Init+0x20e>
 8004482:	2309      	movs	r3, #9
 8004484:	e02d      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004486:	230a      	movs	r3, #10
 8004488:	e02b      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800448a:	2308      	movs	r3, #8
 800448c:	e029      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800448e:	2307      	movs	r3, #7
 8004490:	e027      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004492:	2306      	movs	r3, #6
 8004494:	e025      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004496:	2305      	movs	r3, #5
 8004498:	e023      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800449a:	2304      	movs	r3, #4
 800449c:	e021      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800449e:	2303      	movs	r3, #3
 80044a0:	e01f      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e01d      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e01b      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044aa:	bf00      	nop
 80044ac:	58000080 	.word	0x58000080
 80044b0:	58024400 	.word	0x58024400
 80044b4:	58000400 	.word	0x58000400
 80044b8:	58020000 	.word	0x58020000
 80044bc:	58020400 	.word	0x58020400
 80044c0:	58020800 	.word	0x58020800
 80044c4:	58020c00 	.word	0x58020c00
 80044c8:	58021000 	.word	0x58021000
 80044cc:	58021400 	.word	0x58021400
 80044d0:	58021800 	.word	0x58021800
 80044d4:	58021c00 	.word	0x58021c00
 80044d8:	58022000 	.word	0x58022000
 80044dc:	58022400 	.word	0x58022400
 80044e0:	2300      	movs	r3, #0
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	f002 0203 	and.w	r2, r2, #3
 80044e8:	0092      	lsls	r2, r2, #2
 80044ea:	4093      	lsls	r3, r2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f2:	4938      	ldr	r1, [pc, #224]	@ (80045d4 <HAL_GPIO_Init+0x35c>)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f ae63 	bne.w	800428c <HAL_GPIO_Init+0x14>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	3724      	adds	r7, #36	@ 0x24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	58000400 	.word	0x58000400

080045d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e001      	b.n	80045fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
 8004614:	4613      	mov	r3, r2
 8004616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004618:	787b      	ldrb	r3, [r7, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004624:	e003      	b.n	800462e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004626:	887b      	ldrh	r3, [r7, #2]
 8004628:	041a      	lsls	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	619a      	str	r2, [r3, #24]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004648:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004654:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fc ff5b 	bl	800151c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004678:	4a08      	ldr	r2, [pc, #32]	@ (800469c <HAL_HSEM_FastTake+0x2c>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3320      	adds	r3, #32
 800467e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004682:	4a07      	ldr	r2, [pc, #28]	@ (80046a0 <HAL_HSEM_FastTake+0x30>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	58026400 	.word	0x58026400
 80046a0:	80000300 	.word	0x80000300

080046a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80046ae:	4906      	ldr	r1, [pc, #24]	@ (80046c8 <HAL_HSEM_Release+0x24>)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	58026400 	.word	0x58026400

080046cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80046d4:	4b29      	ldr	r3, [pc, #164]	@ (800477c <HAL_PWREx_ConfigSupply+0xb0>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d00a      	beq.n	80046f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046e0:	4b26      	ldr	r3, [pc, #152]	@ (800477c <HAL_PWREx_ConfigSupply+0xb0>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e040      	b.n	8004774 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e03e      	b.n	8004774 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046f6:	4b21      	ldr	r3, [pc, #132]	@ (800477c <HAL_PWREx_ConfigSupply+0xb0>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80046fe:	491f      	ldr	r1, [pc, #124]	@ (800477c <HAL_PWREx_ConfigSupply+0xb0>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4313      	orrs	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004706:	f7fe fa1d 	bl	8002b44 <HAL_GetTick>
 800470a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800470c:	e009      	b.n	8004722 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800470e:	f7fe fa19 	bl	8002b44 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800471c:	d901      	bls.n	8004722 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e028      	b.n	8004774 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004722:	4b16      	ldr	r3, [pc, #88]	@ (800477c <HAL_PWREx_ConfigSupply+0xb0>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472e:	d1ee      	bne.n	800470e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b1e      	cmp	r3, #30
 8004734:	d008      	beq.n	8004748 <HAL_PWREx_ConfigSupply+0x7c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b2e      	cmp	r3, #46	@ 0x2e
 800473a:	d005      	beq.n	8004748 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b1d      	cmp	r3, #29
 8004740:	d002      	beq.n	8004748 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b2d      	cmp	r3, #45	@ 0x2d
 8004746:	d114      	bne.n	8004772 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004748:	f7fe f9fc 	bl	8002b44 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800474e:	e009      	b.n	8004764 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004750:	f7fe f9f8 	bl	8002b44 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800475e:	d901      	bls.n	8004764 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e007      	b.n	8004774 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_PWREx_ConfigSupply+0xb0>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004770:	d1ee      	bne.n	8004750 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	58024800 	.word	0x58024800

08004780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	@ 0x30
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f000 bc48 	b.w	8005024 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8088 	beq.w	80048b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a2:	4b99      	ldr	r3, [pc, #612]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ac:	4b96      	ldr	r3, [pc, #600]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d007      	beq.n	80047c8 <HAL_RCC_OscConfig+0x48>
 80047b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ba:	2b18      	cmp	r3, #24
 80047bc:	d111      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d06d      	beq.n	80048b0 <HAL_RCC_OscConfig+0x130>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d169      	bne.n	80048b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f000 bc21 	b.w	8005024 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x7a>
 80047ec:	4b86      	ldr	r3, [pc, #536]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a85      	ldr	r2, [pc, #532]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e02e      	b.n	8004858 <HAL_RCC_OscConfig+0xd8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x9c>
 8004802:	4b81      	ldr	r3, [pc, #516]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a80      	ldr	r2, [pc, #512]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7d      	ldr	r2, [pc, #500]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xd8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0xc0>
 8004826:	4b78      	ldr	r3, [pc, #480]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a77      	ldr	r2, [pc, #476]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b75      	ldr	r3, [pc, #468]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a74      	ldr	r2, [pc, #464]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xd8>
 8004840:	4b71      	ldr	r3, [pc, #452]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a70      	ldr	r2, [pc, #448]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b6e      	ldr	r3, [pc, #440]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6d      	ldr	r2, [pc, #436]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fe f970 	bl	8002b44 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fe f96c 	bl	8002b44 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e3d4      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800487a:	4b63      	ldr	r3, [pc, #396]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xe8>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fe f95c 	bl	8002b44 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe f958 	bl	8002b44 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e3c0      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048a2:	4b59      	ldr	r3, [pc, #356]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x110>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80ca 	beq.w	8004a54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c0:	4b51      	ldr	r3, [pc, #324]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <HAL_RCC_OscConfig+0x166>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	2b18      	cmp	r3, #24
 80048da:	d156      	bne.n	800498a <HAL_RCC_OscConfig+0x20a>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d151      	bne.n	800498a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e6:	4b48      	ldr	r3, [pc, #288]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_RCC_OscConfig+0x17e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e392      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048fe:	4b42      	ldr	r3, [pc, #264]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0219 	bic.w	r2, r3, #25
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	493f      	ldr	r1, [pc, #252]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe f918 	bl	8002b44 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004918:	f7fe f914 	bl	8002b44 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e37c      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492a:	4b37      	ldr	r3, [pc, #220]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	f7fe f935 	bl	8002ba4 <HAL_GetREVID>
 800493a:	4603      	mov	r3, r0
 800493c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004940:	4293      	cmp	r3, r2
 8004942:	d817      	bhi.n	8004974 <HAL_RCC_OscConfig+0x1f4>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d108      	bne.n	800495e <HAL_RCC_OscConfig+0x1de>
 800494c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004954:	4a2c      	ldr	r2, [pc, #176]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800495c:	e07a      	b.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	4926      	ldr	r1, [pc, #152]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004972:	e06f      	b.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004974:	4b24      	ldr	r3, [pc, #144]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	4921      	ldr	r1, [pc, #132]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004988:	e064      	b.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d047      	beq.n	8004a22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004992:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0219 	bic.w	r2, r3, #25
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	491a      	ldr	r1, [pc, #104]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fe f8ce 	bl	8002b44 <HAL_GetTick>
 80049a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ac:	f7fe f8ca 	bl	8002b44 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e332      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049be:	4b12      	ldr	r3, [pc, #72]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ca:	f7fe f8eb 	bl	8002ba4 <HAL_GetREVID>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d819      	bhi.n	8004a0c <HAL_RCC_OscConfig+0x28c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b40      	cmp	r3, #64	@ 0x40
 80049de:	d108      	bne.n	80049f2 <HAL_RCC_OscConfig+0x272>
 80049e0:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80049e8:	4a07      	ldr	r2, [pc, #28]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ee:	6053      	str	r3, [r2, #4]
 80049f0:	e030      	b.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	031b      	lsls	r3, r3, #12
 8004a00:	4901      	ldr	r1, [pc, #4]	@ (8004a08 <HAL_RCC_OscConfig+0x288>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
 8004a06:	e025      	b.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	4b9a      	ldr	r3, [pc, #616]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	4997      	ldr	r1, [pc, #604]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
 8004a20:	e018      	b.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a22:	4b95      	ldr	r3, [pc, #596]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a94      	ldr	r2, [pc, #592]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fe f889 	bl	8002b44 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a36:	f7fe f885 	bl	8002b44 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e2ed      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a48:	4b8b      	ldr	r3, [pc, #556]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a9 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	4b85      	ldr	r3, [pc, #532]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a6c:	4b82      	ldr	r3, [pc, #520]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_OscConfig+0x308>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b18      	cmp	r3, #24
 8004a7c:	d13a      	bne.n	8004af4 <HAL_RCC_OscConfig+0x374>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d135      	bne.n	8004af4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a88:	4b7b      	ldr	r3, [pc, #492]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x320>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2b80      	cmp	r3, #128	@ 0x80
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e2c1      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aa0:	f7fe f880 	bl	8002ba4 <HAL_GetREVID>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d817      	bhi.n	8004ade <HAL_RCC_OscConfig+0x35e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x348>
 8004ab6:	4b70      	ldr	r3, [pc, #448]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004abe:	4a6e      	ldr	r2, [pc, #440]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ac4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ac6:	e075      	b.n	8004bb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	069b      	lsls	r3, r3, #26
 8004ad6:	4968      	ldr	r1, [pc, #416]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004adc:	e06a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ade:	4b66      	ldr	r3, [pc, #408]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	061b      	lsls	r3, r3, #24
 8004aec:	4962      	ldr	r1, [pc, #392]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004af2:	e05f      	b.n	8004bb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d042      	beq.n	8004b82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004afc:	4b5e      	ldr	r3, [pc, #376]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5d      	ldr	r2, [pc, #372]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fe f81c 	bl	8002b44 <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b10:	f7fe f818 	bl	8002b44 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e280      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b22:	4b55      	ldr	r3, [pc, #340]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b2e:	f7fe f839 	bl	8002ba4 <HAL_GetREVID>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d817      	bhi.n	8004b6c <HAL_RCC_OscConfig+0x3ec>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d108      	bne.n	8004b56 <HAL_RCC_OscConfig+0x3d6>
 8004b44:	4b4c      	ldr	r3, [pc, #304]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b52:	6053      	str	r3, [r2, #4]
 8004b54:	e02e      	b.n	8004bb4 <HAL_RCC_OscConfig+0x434>
 8004b56:	4b48      	ldr	r3, [pc, #288]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	069b      	lsls	r3, r3, #26
 8004b64:	4944      	ldr	r1, [pc, #272]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	604b      	str	r3, [r1, #4]
 8004b6a:	e023      	b.n	8004bb4 <HAL_RCC_OscConfig+0x434>
 8004b6c:	4b42      	ldr	r3, [pc, #264]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	493f      	ldr	r1, [pc, #252]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
 8004b80:	e018      	b.n	8004bb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b82:	4b3d      	ldr	r3, [pc, #244]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3c      	ldr	r2, [pc, #240]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fd ffd9 	bl	8002b44 <HAL_GetTick>
 8004b92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b96:	f7fd ffd5 	bl	8002b44 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e23d      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ba8:	4b33      	ldr	r3, [pc, #204]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d036      	beq.n	8004c2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fd ffb6 	bl	8002b44 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bdc:	f7fd ffb2 	bl	8002b44 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e21a      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bee:	4b22      	ldr	r3, [pc, #136]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x45c>
 8004bfa:	e018      	b.n	8004c2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c00:	4a1d      	ldr	r2, [pc, #116]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fd ff9c 	bl	8002b44 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fd ff98 	bl	8002b44 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e200      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d039      	beq.n	8004cae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01c      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a0c      	ldr	r2, [pc, #48]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c4e:	f7fd ff79 	bl	8002b44 <HAL_GetTick>
 8004c52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c56:	f7fd ff75 	bl	8002b44 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e1dd      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <HAL_RCC_OscConfig+0x4f8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x4d6>
 8004c74:	e01b      	b.n	8004cae <HAL_RCC_OscConfig+0x52e>
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c7c:	4b9b      	ldr	r3, [pc, #620]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a9a      	ldr	r2, [pc, #616]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004c82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c88:	f7fd ff5c 	bl	8002b44 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c90:	f7fd ff58 	bl	8002b44 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1c0      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ca2:	4b92      	ldr	r3, [pc, #584]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8081 	beq.w	8004dbe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8004ef0 <HAL_RCC_OscConfig+0x770>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a8b      	ldr	r2, [pc, #556]	@ (8004ef0 <HAL_RCC_OscConfig+0x770>)
 8004cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cc8:	f7fd ff3c 	bl	8002b44 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd0:	f7fd ff38 	bl	8002b44 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	@ 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1a0      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ce2:	4b83      	ldr	r3, [pc, #524]	@ (8004ef0 <HAL_RCC_OscConfig+0x770>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCC_OscConfig+0x584>
 8004cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d02:	e02d      	b.n	8004d60 <HAL_RCC_OscConfig+0x5e0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10c      	bne.n	8004d26 <HAL_RCC_OscConfig+0x5a6>
 8004d0c:	4b77      	ldr	r3, [pc, #476]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d10:	4a76      	ldr	r2, [pc, #472]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d18:	4b74      	ldr	r3, [pc, #464]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	4a73      	ldr	r2, [pc, #460]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d1e:	f023 0304 	bic.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d24:	e01c      	b.n	8004d60 <HAL_RCC_OscConfig+0x5e0>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x5c8>
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	4a6e      	ldr	r2, [pc, #440]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	4a6b      	ldr	r2, [pc, #428]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d46:	e00b      	b.n	8004d60 <HAL_RCC_OscConfig+0x5e0>
 8004d48:	4b68      	ldr	r3, [pc, #416]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	4a67      	ldr	r2, [pc, #412]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d54:	4b65      	ldr	r3, [pc, #404]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	4a64      	ldr	r2, [pc, #400]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d5a:	f023 0304 	bic.w	r3, r3, #4
 8004d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fd feec 	bl	8002b44 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fd fee8 	bl	8002b44 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e14e      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d86:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0ee      	beq.n	8004d70 <HAL_RCC_OscConfig+0x5f0>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fd fed6 	bl	8002b44 <HAL_GetTick>
 8004d98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fed2 	bl	8002b44 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e138      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004db2:	4b4e      	ldr	r3, [pc, #312]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 812d 	beq.w	8005022 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004dc8:	4b48      	ldr	r3, [pc, #288]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dd0:	2b18      	cmp	r3, #24
 8004dd2:	f000 80bd 	beq.w	8004f50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	f040 809e 	bne.w	8004f1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b42      	ldr	r3, [pc, #264]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a41      	ldr	r2, [pc, #260]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fd feaa 	bl	8002b44 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fd fea6 	bl	8002b44 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e10e      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e06:	4b39      	ldr	r3, [pc, #228]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e12:	4b36      	ldr	r3, [pc, #216]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e16:	4b37      	ldr	r3, [pc, #220]	@ (8004ef4 <HAL_RCC_OscConfig+0x774>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	430a      	orrs	r2, r1
 8004e26:	4931      	ldr	r1, [pc, #196]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	3b01      	subs	r3, #1
 8004e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e54:	3b01      	subs	r3, #1
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e5c:	4923      	ldr	r1, [pc, #140]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e62:	4b22      	ldr	r3, [pc, #136]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	4a21      	ldr	r2, [pc, #132]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e72:	4b21      	ldr	r3, [pc, #132]	@ (8004ef8 <HAL_RCC_OscConfig+0x778>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e7a:	00d2      	lsls	r2, r2, #3
 8004e7c:	491b      	ldr	r1, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e82:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	f023 020c 	bic.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	4917      	ldr	r1, [pc, #92]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e94:	4b15      	ldr	r3, [pc, #84]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	f023 0202 	bic.w	r2, r3, #2
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea0:	4912      	ldr	r1, [pc, #72]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ea6:	4b11      	ldr	r3, [pc, #68]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a10      	ldr	r2, [pc, #64]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004eca:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	4a07      	ldr	r2, [pc, #28]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed6:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <HAL_RCC_OscConfig+0x76c>)
 8004edc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fd fe2f 	bl	8002b44 <HAL_GetTick>
 8004ee6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ee8:	e011      	b.n	8004f0e <HAL_RCC_OscConfig+0x78e>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	58024800 	.word	0x58024800
 8004ef4:	fffffc0c 	.word	0xfffffc0c
 8004ef8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fd fe22 	bl	8002b44 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e08a      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f0e:	4b47      	ldr	r3, [pc, #284]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x77c>
 8004f1a:	e082      	b.n	8005022 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1c:	4b43      	ldr	r3, [pc, #268]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a42      	ldr	r2, [pc, #264]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd fe0c 	bl	8002b44 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fd fe08 	bl	8002b44 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e070      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f42:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x7b0>
 8004f4e:	e068      	b.n	8005022 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f50:	4b36      	ldr	r3, [pc, #216]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f56:	4b35      	ldr	r3, [pc, #212]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d031      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0203 	and.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d12a      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d122      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d11a      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	0a5b      	lsrs	r3, r3, #9
 8004f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d111      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d108      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	0e1b      	lsrs	r3, r3, #24
 8004fba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e02b      	b.n	8005024 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004fcc:	4b17      	ldr	r3, [pc, #92]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd0:	08db      	lsrs	r3, r3, #3
 8004fd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fd6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d01f      	beq.n	8005022 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004fe2:	4b12      	ldr	r3, [pc, #72]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a11      	ldr	r2, [pc, #68]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fee:	f7fd fda9 	bl	8002b44 <HAL_GetTick>
 8004ff2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ff4:	bf00      	nop
 8004ff6:	f7fd fda5 	bl	8002b44 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d0f9      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8005004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005006:	4b0a      	ldr	r3, [pc, #40]	@ (8005030 <HAL_RCC_OscConfig+0x8b0>)
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800500e:	00d2      	lsls	r2, r2, #3
 8005010:	4906      	ldr	r1, [pc, #24]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8005012:	4313      	orrs	r3, r2
 8005014:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	4a04      	ldr	r2, [pc, #16]	@ (800502c <HAL_RCC_OscConfig+0x8ac>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3730      	adds	r7, #48	@ 0x30
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	58024400 	.word	0x58024400
 8005030:	ffff0007 	.word	0xffff0007

08005034 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e19c      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005048:	4b8a      	ldr	r3, [pc, #552]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d910      	bls.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b87      	ldr	r3, [pc, #540]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 020f 	bic.w	r2, r3, #15
 800505e:	4985      	ldr	r1, [pc, #532]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b83      	ldr	r3, [pc, #524]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e184      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	4b7b      	ldr	r3, [pc, #492]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005090:	429a      	cmp	r2, r3
 8005092:	d908      	bls.n	80050a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005094:	4b78      	ldr	r3, [pc, #480]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	4975      	ldr	r1, [pc, #468]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	4b70      	ldr	r3, [pc, #448]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050be:	429a      	cmp	r2, r3
 80050c0:	d908      	bls.n	80050d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	496a      	ldr	r1, [pc, #424]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	4b64      	ldr	r3, [pc, #400]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d908      	bls.n	8005102 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050f0:	4b61      	ldr	r3, [pc, #388]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	495e      	ldr	r1, [pc, #376]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69da      	ldr	r2, [r3, #28]
 8005112:	4b59      	ldr	r3, [pc, #356]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800511a:	429a      	cmp	r2, r3
 800511c:	d908      	bls.n	8005130 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800511e:	4b56      	ldr	r3, [pc, #344]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4953      	ldr	r1, [pc, #332]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 800512c:	4313      	orrs	r3, r2
 800512e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	4b4d      	ldr	r3, [pc, #308]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	429a      	cmp	r2, r3
 800514a:	d908      	bls.n	800515e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	4b4a      	ldr	r3, [pc, #296]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f023 020f 	bic.w	r2, r3, #15
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4947      	ldr	r1, [pc, #284]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 800515a:	4313      	orrs	r3, r2
 800515c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d055      	beq.n	8005216 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800516a:	4b43      	ldr	r3, [pc, #268]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4940      	ldr	r1, [pc, #256]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005178:	4313      	orrs	r3, r2
 800517a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d107      	bne.n	8005194 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005184:	4b3c      	ldr	r3, [pc, #240]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d121      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0f6      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d107      	bne.n	80051ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800519c:	4b36      	ldr	r3, [pc, #216]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d115      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0ea      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051b4:	4b30      	ldr	r3, [pc, #192]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0de      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0d6      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051d4:	4b28      	ldr	r3, [pc, #160]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f023 0207 	bic.w	r2, r3, #7
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4925      	ldr	r1, [pc, #148]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e6:	f7fd fcad 	bl	8002b44 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ec:	e00a      	b.n	8005204 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ee:	f7fd fca9 	bl	8002b44 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0be      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005204:	4b1c      	ldr	r3, [pc, #112]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	429a      	cmp	r2, r3
 8005214:	d1eb      	bne.n	80051ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	429a      	cmp	r2, r3
 8005230:	d208      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005232:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f023 020f 	bic.w	r2, r3, #15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	490e      	ldr	r1, [pc, #56]	@ (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005240:	4313      	orrs	r3, r2
 8005242:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005244:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d214      	bcs.n	800527c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 020f 	bic.w	r2, r3, #15
 800525a:	4906      	ldr	r1, [pc, #24]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d005      	beq.n	800527c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e086      	b.n	8005382 <HAL_RCC_ClockConfig+0x34e>
 8005274:	52002000 	.word	0x52002000
 8005278:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	4b3f      	ldr	r3, [pc, #252]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005294:	429a      	cmp	r2, r3
 8005296:	d208      	bcs.n	80052aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005298:	4b3c      	ldr	r3, [pc, #240]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	4939      	ldr	r1, [pc, #228]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	4b34      	ldr	r3, [pc, #208]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d208      	bcs.n	80052d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052c6:	4b31      	ldr	r3, [pc, #196]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	492e      	ldr	r1, [pc, #184]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	4b28      	ldr	r3, [pc, #160]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d208      	bcs.n	8005306 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052f4:	4b25      	ldr	r3, [pc, #148]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4922      	ldr	r1, [pc, #136]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 8005302:	4313      	orrs	r3, r2
 8005304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	4b1d      	ldr	r3, [pc, #116]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800531e:	429a      	cmp	r2, r3
 8005320:	d208      	bcs.n	8005334 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005322:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4917      	ldr	r1, [pc, #92]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 8005330:	4313      	orrs	r3, r2
 8005332:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005334:	f000 f834 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	4912      	ldr	r1, [pc, #72]	@ (8005390 <HAL_RCC_ClockConfig+0x35c>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005352:	4b0e      	ldr	r3, [pc, #56]	@ (800538c <HAL_RCC_ClockConfig+0x358>)
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	4a0d      	ldr	r2, [pc, #52]	@ (8005390 <HAL_RCC_ClockConfig+0x35c>)
 800535c:	5cd3      	ldrb	r3, [r2, r3]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	4a0a      	ldr	r2, [pc, #40]	@ (8005394 <HAL_RCC_ClockConfig+0x360>)
 800536a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800536c:	4a0a      	ldr	r2, [pc, #40]	@ (8005398 <HAL_RCC_ClockConfig+0x364>)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005372:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <HAL_RCC_ClockConfig+0x368>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fd fb9a 	bl	8002ab0 <HAL_InitTick>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	08010f34 	.word	0x08010f34
 8005394:	24000004 	.word	0x24000004
 8005398:	24000000 	.word	0x24000000
 800539c:	2400002c 	.word	0x2400002c

080053a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	@ 0x24
 80053a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053a6:	4bb3      	ldr	r3, [pc, #716]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ae:	2b18      	cmp	r3, #24
 80053b0:	f200 8155 	bhi.w	800565e <HAL_RCC_GetSysClockFreq+0x2be>
 80053b4:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	08005421 	.word	0x08005421
 80053c0:	0800565f 	.word	0x0800565f
 80053c4:	0800565f 	.word	0x0800565f
 80053c8:	0800565f 	.word	0x0800565f
 80053cc:	0800565f 	.word	0x0800565f
 80053d0:	0800565f 	.word	0x0800565f
 80053d4:	0800565f 	.word	0x0800565f
 80053d8:	0800565f 	.word	0x0800565f
 80053dc:	08005447 	.word	0x08005447
 80053e0:	0800565f 	.word	0x0800565f
 80053e4:	0800565f 	.word	0x0800565f
 80053e8:	0800565f 	.word	0x0800565f
 80053ec:	0800565f 	.word	0x0800565f
 80053f0:	0800565f 	.word	0x0800565f
 80053f4:	0800565f 	.word	0x0800565f
 80053f8:	0800565f 	.word	0x0800565f
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	0800565f 	.word	0x0800565f
 8005404:	0800565f 	.word	0x0800565f
 8005408:	0800565f 	.word	0x0800565f
 800540c:	0800565f 	.word	0x0800565f
 8005410:	0800565f 	.word	0x0800565f
 8005414:	0800565f 	.word	0x0800565f
 8005418:	0800565f 	.word	0x0800565f
 800541c:	08005453 	.word	0x08005453
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005420:	4b94      	ldr	r3, [pc, #592]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800542c:	4b91      	ldr	r3, [pc, #580]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	4a90      	ldr	r2, [pc, #576]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800543e:	e111      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005440:	4b8d      	ldr	r3, [pc, #564]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005442:	61bb      	str	r3, [r7, #24]
      break;
 8005444:	e10e      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005446:	4b8d      	ldr	r3, [pc, #564]	@ (800567c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005448:	61bb      	str	r3, [r7, #24]
      break;
 800544a:	e10b      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800544c:	4b8c      	ldr	r3, [pc, #560]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800544e:	61bb      	str	r3, [r7, #24]
      break;
 8005450:	e108      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005452:	4b88      	ldr	r3, [pc, #544]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800545c:	4b85      	ldr	r3, [pc, #532]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005466:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005468:	4b82      	ldr	r3, [pc, #520]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005472:	4b80      	ldr	r3, [pc, #512]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005476:	08db      	lsrs	r3, r3, #3
 8005478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80e1 	beq.w	8005658 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b02      	cmp	r3, #2
 800549a:	f000 8083 	beq.w	80055a4 <HAL_RCC_GetSysClockFreq+0x204>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	f200 80a1 	bhi.w	80055e8 <HAL_RCC_GetSysClockFreq+0x248>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x114>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d056      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054b2:	e099      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02d      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b62      	ldr	r3, [pc, #392]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800551a:	e087      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005688 <HAL_RCC_GetSysClockFreq+0x2e8>
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b51      	ldr	r3, [pc, #324]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005542:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800555e:	e065      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800568c <HAL_RCC_GetSysClockFreq+0x2ec>
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b40      	ldr	r3, [pc, #256]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a02 	vldr	s12, [r7, #8]
 8005586:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005684 <HAL_RCC_GetSysClockFreq+0x2e4>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055a2:	e043      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005690 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005684 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055e6:	e021      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800568c <HAL_RCC_GetSysClockFreq+0x2ec>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	ed97 6a02 	vldr	s12, [r7, #8]
 800560e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800562a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800562c:	4b11      	ldr	r3, [pc, #68]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005630:	0a5b      	lsrs	r3, r3, #9
 8005632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005636:	3301      	adds	r3, #1
 8005638:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005644:	edd7 6a07 	vldr	s13, [r7, #28]
 8005648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800564c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005650:	ee17 3a90 	vmov	r3, s15
 8005654:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005656:	e005      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
      break;
 800565c:	e002      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800565e:	4b07      	ldr	r3, [pc, #28]	@ (800567c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005660:	61bb      	str	r3, [r7, #24]
      break;
 8005662:	bf00      	nop
  }

  return sysclockfreq;
 8005664:	69bb      	ldr	r3, [r7, #24]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3724      	adds	r7, #36	@ 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	03d09000 	.word	0x03d09000
 800567c:	003d0900 	.word	0x003d0900
 8005680:	007a1200 	.word	0x007a1200
 8005684:	46000000 	.word	0x46000000
 8005688:	4c742400 	.word	0x4c742400
 800568c:	4a742400 	.word	0x4a742400
 8005690:	4af42400 	.word	0x4af42400

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800569a:	f7ff fe81 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	490f      	ldr	r1, [pc, #60]	@ (80056e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80056ac:	5ccb      	ldrb	r3, [r1, r3]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	fa22 f303 	lsr.w	r3, r2, r3
 80056b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056b8:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	4a09      	ldr	r2, [pc, #36]	@ (80056e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	fa22 f303 	lsr.w	r3, r2, r3
 80056ce:	4a07      	ldr	r2, [pc, #28]	@ (80056ec <HAL_RCC_GetHCLKFreq+0x58>)
 80056d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056d2:	4a07      	ldr	r2, [pc, #28]	@ (80056f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056d8:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <HAL_RCC_GetHCLKFreq+0x58>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	58024400 	.word	0x58024400
 80056e8:	08010f34 	.word	0x08010f34
 80056ec:	24000004 	.word	0x24000004
 80056f0:	24000000 	.word	0x24000000

080056f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056f8:	f7ff ffcc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	4904      	ldr	r1, [pc, #16]	@ (800571c <HAL_RCC_GetPCLK1Freq+0x28>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	58024400 	.word	0x58024400
 800571c:	08010f34 	.word	0x08010f34

08005720 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005724:	b0cc      	sub	sp, #304	@ 0x130
 8005726:	af00      	add	r7, sp, #0
 8005728:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800572c:	2300      	movs	r3, #0
 800572e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005732:	2300      	movs	r3, #0
 8005734:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005744:	2500      	movs	r5, #0
 8005746:	ea54 0305 	orrs.w	r3, r4, r5
 800574a:	d049      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800574c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005752:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005756:	d02f      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005758:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800575c:	d828      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800575e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005762:	d01a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005768:	d822      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800576e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005772:	d007      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005774:	e01c      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005776:	4bb8      	ldr	r3, [pc, #736]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4ab7      	ldr	r2, [pc, #732]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005782:	e01a      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005788:	3308      	adds	r3, #8
 800578a:	2102      	movs	r1, #2
 800578c:	4618      	mov	r0, r3
 800578e:	f002 fba1 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005798:	e00f      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800579a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800579e:	3328      	adds	r3, #40	@ 0x28
 80057a0:	2102      	movs	r1, #2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f002 fc48 	bl	8008038 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057c2:	4ba5      	ldr	r3, [pc, #660]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d0:	4aa1      	ldr	r2, [pc, #644]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d2:	430b      	orrs	r3, r1
 80057d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80057d6:	e003      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80057ec:	f04f 0900 	mov.w	r9, #0
 80057f0:	ea58 0309 	orrs.w	r3, r8, r9
 80057f4:	d047      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d82a      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005800:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800581d 	.word	0x0800581d
 800580c:	0800582b 	.word	0x0800582b
 8005810:	08005841 	.word	0x08005841
 8005814:	0800585f 	.word	0x0800585f
 8005818:	0800585f 	.word	0x0800585f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	4a8d      	ldr	r2, [pc, #564]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005828:	e01a      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800582e:	3308      	adds	r3, #8
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f002 fb4e 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800583e:	e00f      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005844:	3328      	adds	r3, #40	@ 0x28
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f002 fbf5 	bl	8008038 <RCCEx_PLL3_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005854:	e004      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800585e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005860:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005868:	4b7b      	ldr	r3, [pc, #492]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800586a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586c:	f023 0107 	bic.w	r1, r3, #7
 8005870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005876:	4a78      	ldr	r2, [pc, #480]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005878:	430b      	orrs	r3, r1
 800587a:	6513      	str	r3, [r2, #80]	@ 0x50
 800587c:	e003      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005882:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005892:	f04f 0b00 	mov.w	fp, #0
 8005896:	ea5a 030b 	orrs.w	r3, sl, fp
 800589a:	d04c      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800589c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a6:	d030      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ac:	d829      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b0:	d02d      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80058b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b4:	d825      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058b6:	2b80      	cmp	r3, #128	@ 0x80
 80058b8:	d018      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80058ba:	2b80      	cmp	r3, #128	@ 0x80
 80058bc:	d821      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80058c2:	2b40      	cmp	r3, #64	@ 0x40
 80058c4:	d007      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058c6:	e01c      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c8:	4b63      	ldr	r3, [pc, #396]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	4a62      	ldr	r2, [pc, #392]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058d4:	e01c      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058da:	3308      	adds	r3, #8
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f002 faf8 	bl	8007ed4 <RCCEx_PLL2_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058ea:	e011      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f0:	3328      	adds	r3, #40	@ 0x28
 80058f2:	2100      	movs	r1, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f002 fb9f 	bl	8008038 <RCCEx_PLL3_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800590e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005910:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005918:	4b4f      	ldr	r3, [pc, #316]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005920:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005926:	4a4c      	ldr	r2, [pc, #304]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005928:	430b      	orrs	r3, r1
 800592a:	6513      	str	r3, [r2, #80]	@ 0x50
 800592c:	e003      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005932:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005942:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005946:	2300      	movs	r3, #0
 8005948:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800594c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d053      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800595a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800595e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005962:	d035      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005964:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005968:	d82e      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800596a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800596e:	d031      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005970:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005974:	d828      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800597a:	d01a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800597c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005980:	d822      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005986:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800598a:	d007      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800598c:	e01c      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598e:	4b32      	ldr	r3, [pc, #200]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	4a31      	ldr	r2, [pc, #196]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800599a:	e01c      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800599c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a0:	3308      	adds	r3, #8
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f002 fa95 	bl	8007ed4 <RCCEx_PLL2_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059b0:	e011      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b6:	3328      	adds	r3, #40	@ 0x28
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 fb3c 	bl	8008038 <RCCEx_PLL3_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059c6:	e006      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059d0:	bf00      	nop
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059de:	4b1e      	ldr	r3, [pc, #120]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059f4:	e003      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005a14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d056      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a2a:	d038      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a30:	d831      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a36:	d034      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a3c:	d82b      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a42:	d01d      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a48:	d825      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d006      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a54:	e01f      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	4aa1      	ldr	r2, [pc, #644]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a68:	e01c      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a6e:	3308      	adds	r3, #8
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f002 fa2e 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a7e:	e011      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a84:	3328      	adds	r3, #40	@ 0x28
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f002 fad5 	bl	8008038 <RCCEx_PLL3_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10b      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005aac:	4b8e      	ldr	r3, [pc, #568]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005abc:	4a8a      	ldr	r2, [pc, #552]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac2:	e003      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ac8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ad8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005adc:	2300      	movs	r3, #0
 8005ade:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ae2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d03a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af2:	2b30      	cmp	r3, #48	@ 0x30
 8005af4:	d01f      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005af6:	2b30      	cmp	r3, #48	@ 0x30
 8005af8:	d819      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d00c      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d815      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d111      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0a:	4b77      	ldr	r3, [pc, #476]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	4a76      	ldr	r2, [pc, #472]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b16:	e011      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f002 f9d7 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b2c:	e006      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b44:	4b68      	ldr	r3, [pc, #416]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	4a65      	ldr	r2, [pc, #404]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b54:	430b      	orrs	r3, r1
 8005b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b58:	e003      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b72:	2300      	movs	r3, #0
 8005b74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b78:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	d051      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b8c:	d035      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b92:	d82e      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b98:	d031      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b9e:	d828      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba4:	d01a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005baa:	d822      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb4:	d007      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bb6:	e01c      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bc4:	e01c      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bca:	3308      	adds	r3, #8
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f002 f980 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bda:	e011      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005be0:	3328      	adds	r3, #40	@ 0x28
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f002 fa27 	bl	8008038 <RCCEx_PLL3_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bf0:	e006      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bf8:	e002      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c08:	4b37      	ldr	r3, [pc, #220]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c16:	4a34      	ldr	r2, [pc, #208]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4313      	orrs	r3, r2
 8005c44:	d056      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c50:	d033      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c56:	d82c      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c5c:	d02f      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c62:	d826      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c68:	d02b      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c6e:	d820      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c74:	d012      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7a:	d81a      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d022      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d115      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f002 f920 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c9a:	e015      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca0:	3328      	adds	r3, #40	@ 0x28
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f002 f9c7 	bl	8008038 <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cd0:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cde:	4a02      	ldr	r2, [pc, #8]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ce6:	bf00      	nop
 8005ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cf0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d0a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d055      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d20:	d033      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d26:	d82c      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2c:	d02f      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d32:	d826      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d38:	d02b      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d3e:	d820      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d44:	d012      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d4a:	d81a      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d022      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d54:	d115      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f002 f8b8 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d6a:	e015      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d70:	3328      	adds	r3, #40	@ 0x28
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f002 f95f 	bl	8008038 <RCCEx_PLL3_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d80:	e00a      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d88:	e006      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d8a:	bf00      	nop
 8005d8c:	e004      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d8e:	bf00      	nop
 8005d90:	e002      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d92:	bf00      	nop
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005da0:	4bb6      	ldr	r3, [pc, #728]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005db0:	4ab2      	ldr	r2, [pc, #712]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dbc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	d02a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dee:	d10a      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df4:	3308      	adds	r3, #8
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f002 f86b 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005e04:	e004      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005e18:	4b98      	ldr	r3, [pc, #608]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e26:	4a95      	ldr	r2, [pc, #596]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005e42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e50:	460b      	mov	r3, r1
 8005e52:	4313      	orrs	r3, r2
 8005e54:	d037      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e60:	d00e      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e66:	d816      	bhi.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d018      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e70:	d111      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e72:	4b82      	ldr	r3, [pc, #520]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	4a81      	ldr	r2, [pc, #516]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e7e:	e00f      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e84:	3308      	adds	r3, #8
 8005e86:	2101      	movs	r1, #1
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f002 f823 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e94:	e004      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e9c:	e000      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ea8:	4b74      	ldr	r3, [pc, #464]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eb6:	4a71      	ldr	r2, [pc, #452]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ebc:	e003      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ec2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005edc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	d03a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d81d      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f09 	.word	0x08005f09
 8005f00:	08005f17 	.word	0x08005f17
 8005f04:	08005f35 	.word	0x08005f35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4b5c      	ldr	r3, [pc, #368]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f14:	e00f      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 ffd8 	bl	8007ed4 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f42:	f023 0103 	bic.w	r1, r3, #3
 8005f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f000 80a0 	beq.w	80060be <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f7e:	4b40      	ldr	r3, [pc, #256]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a3f      	ldr	r2, [pc, #252]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f8a:	f7fc fddb 	bl	8002b44 <HAL_GetTick>
 8005f8e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f92:	e00b      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f94:	f7fc fdd6 	bl	8002b44 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b64      	cmp	r3, #100	@ 0x64
 8005fa2:	d903      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005faa:	e005      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fac:	4b34      	ldr	r3, [pc, #208]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ed      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005fb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d17a      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005fcc:	4053      	eors	r3, r2
 8005fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d015      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fd6:	4b29      	ldr	r3, [pc, #164]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fe2:	4b26      	ldr	r3, [pc, #152]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe6:	4a25      	ldr	r2, [pc, #148]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fee:	4b23      	ldr	r3, [pc, #140]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff2:	4a22      	ldr	r2, [pc, #136]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ff8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ffa:	4a20      	ldr	r2, [pc, #128]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ffc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006000:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006006:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800600a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800600e:	d118      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc fd98 	bl	8002b44 <HAL_GetTick>
 8006014:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006018:	e00d      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fc fd93 	bl	8002b44 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	f241 3388 	movw	r3, #5000	@ 0x1388
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006034:	e005      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006036:	4b11      	ldr	r3, [pc, #68]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0eb      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006046:	2b00      	cmp	r3, #0
 8006048:	d130      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800604a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800604e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800605a:	d115      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800605c:	4b07      	ldr	r3, [pc, #28]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006068:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800606c:	091a      	lsrs	r2, r3, #4
 800606e:	4b05      	ldr	r3, [pc, #20]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006070:	4013      	ands	r3, r2
 8006072:	4a02      	ldr	r2, [pc, #8]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006074:	430b      	orrs	r3, r1
 8006076:	6113      	str	r3, [r2, #16]
 8006078:	e00c      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	58024800 	.word	0x58024800
 8006084:	00ffffcf 	.word	0x00ffffcf
 8006088:	4bd4      	ldr	r3, [pc, #848]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4ad3      	ldr	r2, [pc, #844]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800608e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006092:	6113      	str	r3, [r2, #16]
 8006094:	4bd1      	ldr	r3, [pc, #836]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006096:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800609c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a4:	4acd      	ldr	r2, [pc, #820]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80060a6:	430b      	orrs	r3, r1
 80060a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060aa:	e008      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f002 0301 	and.w	r3, r2, #1
 80060ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	f000 808b 	beq.w	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e8:	2b28      	cmp	r3, #40	@ 0x28
 80060ea:	d86b      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80060ec:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	080061cd 	.word	0x080061cd
 80060f8:	080061c5 	.word	0x080061c5
 80060fc:	080061c5 	.word	0x080061c5
 8006100:	080061c5 	.word	0x080061c5
 8006104:	080061c5 	.word	0x080061c5
 8006108:	080061c5 	.word	0x080061c5
 800610c:	080061c5 	.word	0x080061c5
 8006110:	080061c5 	.word	0x080061c5
 8006114:	08006199 	.word	0x08006199
 8006118:	080061c5 	.word	0x080061c5
 800611c:	080061c5 	.word	0x080061c5
 8006120:	080061c5 	.word	0x080061c5
 8006124:	080061c5 	.word	0x080061c5
 8006128:	080061c5 	.word	0x080061c5
 800612c:	080061c5 	.word	0x080061c5
 8006130:	080061c5 	.word	0x080061c5
 8006134:	080061af 	.word	0x080061af
 8006138:	080061c5 	.word	0x080061c5
 800613c:	080061c5 	.word	0x080061c5
 8006140:	080061c5 	.word	0x080061c5
 8006144:	080061c5 	.word	0x080061c5
 8006148:	080061c5 	.word	0x080061c5
 800614c:	080061c5 	.word	0x080061c5
 8006150:	080061c5 	.word	0x080061c5
 8006154:	080061cd 	.word	0x080061cd
 8006158:	080061c5 	.word	0x080061c5
 800615c:	080061c5 	.word	0x080061c5
 8006160:	080061c5 	.word	0x080061c5
 8006164:	080061c5 	.word	0x080061c5
 8006168:	080061c5 	.word	0x080061c5
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061c5 	.word	0x080061c5
 8006174:	080061cd 	.word	0x080061cd
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061c5 	.word	0x080061c5
 8006180:	080061c5 	.word	0x080061c5
 8006184:	080061c5 	.word	0x080061c5
 8006188:	080061c5 	.word	0x080061c5
 800618c:	080061c5 	.word	0x080061c5
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080061cd 	.word	0x080061cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619c:	3308      	adds	r3, #8
 800619e:	2101      	movs	r1, #1
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fe97 	bl	8007ed4 <RCCEx_PLL2_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061ac:	e00f      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b2:	3328      	adds	r3, #40	@ 0x28
 80061b4:	2101      	movs	r1, #1
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 ff3e 	bl	8008038 <RCCEx_PLL3_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061c2:	e004      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061ca:	e000      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80061cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061d6:	4b81      	ldr	r3, [pc, #516]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80061d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80061de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061e6:	4a7d      	ldr	r2, [pc, #500]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80061ec:	e003      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f002 0302 	and.w	r3, r2, #2
 8006202:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006206:	2300      	movs	r3, #0
 8006208:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800620c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006210:	460b      	mov	r3, r1
 8006212:	4313      	orrs	r3, r2
 8006214:	d042      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800621c:	2b05      	cmp	r3, #5
 800621e:	d825      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006220:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	08006275 	.word	0x08006275
 800622c:	08006241 	.word	0x08006241
 8006230:	08006257 	.word	0x08006257
 8006234:	08006275 	.word	0x08006275
 8006238:	08006275 	.word	0x08006275
 800623c:	08006275 	.word	0x08006275
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006244:	3308      	adds	r3, #8
 8006246:	2101      	movs	r1, #1
 8006248:	4618      	mov	r0, r3
 800624a:	f001 fe43 	bl	8007ed4 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006254:	e00f      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800625a:	3328      	adds	r3, #40	@ 0x28
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f001 feea 	bl	8008038 <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800626a:	e004      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800627e:	4b57      	ldr	r3, [pc, #348]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006282:	f023 0107 	bic.w	r1, r3, #7
 8006286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800628a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800628c:	4a53      	ldr	r2, [pc, #332]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800628e:	430b      	orrs	r3, r1
 8006290:	6553      	str	r3, [r2, #84]	@ 0x54
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006298:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800629c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f002 0304 	and.w	r3, r2, #4
 80062a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d044      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	d825      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80062c8:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	0800631d 	.word	0x0800631d
 80062d4:	080062e9 	.word	0x080062e9
 80062d8:	080062ff 	.word	0x080062ff
 80062dc:	0800631d 	.word	0x0800631d
 80062e0:	0800631d 	.word	0x0800631d
 80062e4:	0800631d 	.word	0x0800631d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ec:	3308      	adds	r3, #8
 80062ee:	2101      	movs	r1, #1
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fdef 	bl	8007ed4 <RCCEx_PLL2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062fc:	e00f      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006302:	3328      	adds	r3, #40	@ 0x28
 8006304:	2101      	movs	r1, #1
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fe96 	bl	8008038 <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006312:	e004      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800631a:	e000      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800631c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800631e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006326:	4b2d      	ldr	r3, [pc, #180]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632a:	f023 0107 	bic.w	r1, r3, #7
 800632e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006336:	4a29      	ldr	r2, [pc, #164]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006338:	430b      	orrs	r3, r1
 800633a:	6593      	str	r3, [r2, #88]	@ 0x58
 800633c:	e003      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006342:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f002 0320 	and.w	r3, r2, #32
 8006352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800635c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006360:	460b      	mov	r3, r1
 8006362:	4313      	orrs	r3, r2
 8006364:	d057      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800636a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800636e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006372:	d035      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006378:	d82c      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637e:	d031      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006384:	d826      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800638a:	d02d      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800638c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006390:	d820      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006396:	d012      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800639c:	d81a      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d024      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80063a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063a6:	d115      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ac:	3308      	adds	r3, #8
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fd8f 	bl	8007ed4 <RCCEx_PLL2_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063bc:	e017      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063c2:	3328      	adds	r3, #40	@ 0x28
 80063c4:	2102      	movs	r1, #2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fe36 	bl	8008038 <RCCEx_PLL3_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063d2:	e00c      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063da:	e008      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80063dc:	58024400 	.word	0x58024400
        break;
 80063e0:	bf00      	nop
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063f6:	4bc2      	ldr	r3, [pc, #776]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006406:	4abe      	ldr	r2, [pc, #760]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6553      	str	r3, [r2, #84]	@ 0x54
 800640c:	e003      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006412:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800642c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d055      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800643a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800643e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006442:	d033      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006444:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006448:	d82c      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644e:	d02f      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006454:	d826      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800645a:	d02b      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800645c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006460:	d820      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006466:	d012      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800646c:	d81a      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d022      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006476:	d115      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800647c:	3308      	adds	r3, #8
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f001 fd27 	bl	8007ed4 <RCCEx_PLL2_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800648c:	e015      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006492:	3328      	adds	r3, #40	@ 0x28
 8006494:	2102      	movs	r1, #2
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fdce 	bl	8008038 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064a2:	e00a      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064aa:	e006      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064ac:	bf00      	nop
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064b0:	bf00      	nop
 80064b2:	e002      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064b4:	bf00      	nop
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80064ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064d2:	4a8b      	ldr	r2, [pc, #556]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80064ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064fc:	460b      	mov	r3, r1
 80064fe:	4313      	orrs	r3, r2
 8006500:	d055      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800650a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800650e:	d033      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006510:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006514:	d82c      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800651a:	d02f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006520:	d826      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006522:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006526:	d02b      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006528:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800652c:	d820      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800652e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006532:	d012      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006538:	d81a      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d022      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800653e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006542:	d115      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006548:	3308      	adds	r3, #8
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fcc1 	bl	8007ed4 <RCCEx_PLL2_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006558:	e015      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800655a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655e:	3328      	adds	r3, #40	@ 0x28
 8006560:	2102      	movs	r1, #2
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fd68 	bl	8008038 <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800656e:	e00a      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006576:	e006      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800658e:	4b5c      	ldr	r3, [pc, #368]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006592:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800659e:	4a58      	ldr	r2, [pc, #352]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f002 0308 	and.w	r3, r2, #8
 80065ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065be:	2300      	movs	r3, #0
 80065c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d01e      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065da:	d10c      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065e0:	3328      	adds	r3, #40	@ 0x28
 80065e2:	2102      	movs	r1, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 fd27 	bl	8008038 <RCCEx_PLL3_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065f6:	4b42      	ldr	r3, [pc, #264]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006606:	4a3e      	ldr	r2, [pc, #248]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006608:	430b      	orrs	r3, r1
 800660a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800660c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f002 0310 	and.w	r3, r2, #16
 8006618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006622:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d01e      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800662c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006638:	d10c      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800663a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800663e:	3328      	adds	r3, #40	@ 0x28
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f001 fcf8 	bl	8008038 <RCCEx_PLL3_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006654:	4b2a      	ldr	r3, [pc, #168]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006658:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800665c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006660:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006664:	4a26      	ldr	r2, [pc, #152]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006666:	430b      	orrs	r3, r1
 8006668:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800666a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800667a:	2300      	movs	r3, #0
 800667c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006680:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d040      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800668a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006696:	d022      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669c:	d81b      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80066a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80066a8:	e015      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ae:	3308      	adds	r3, #8
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fc0e 	bl	8007ed4 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066be:	e00f      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066c4:	3328      	adds	r3, #40	@ 0x28
 80066c6:	2102      	movs	r1, #2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fcb5 	bl	8008038 <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80066de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10d      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80066f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066f8:	4a01      	ldr	r2, [pc, #4]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80066fe:	e005      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006708:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800670c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800671a:	2300      	movs	r3, #0
 800671c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800671e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006722:	460b      	mov	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	d03b      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800672c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006730:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006734:	d01f      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006736:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800673a:	d818      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800673c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006740:	d003      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006746:	d007      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006748:	e011      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674a:	4b64      	ldr	r3, [pc, #400]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	4a63      	ldr	r2, [pc, #396]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006756:	e00f      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800675c:	3328      	adds	r3, #40	@ 0x28
 800675e:	2101      	movs	r1, #1
 8006760:	4618      	mov	r0, r3
 8006762:	f001 fc69 	bl	8008038 <RCCEx_PLL3_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800676c:	e004      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006778:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006780:	4b56      	ldr	r3, [pc, #344]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006784:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006788:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800678c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006790:	4a52      	ldr	r2, [pc, #328]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006792:	430b      	orrs	r3, r1
 8006794:	6553      	str	r3, [r2, #84]	@ 0x54
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800679c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80067ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80067ae:	2300      	movs	r3, #0
 80067b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80067b2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d031      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80067c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ca:	d007      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80067cc:	e011      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ce:	4b43      	ldr	r3, [pc, #268]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	4a42      	ldr	r2, [pc, #264]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80067d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067da:	e00e      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067e0:	3308      	adds	r3, #8
 80067e2:	2102      	movs	r1, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fb75 	bl	8007ed4 <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067f0:	e003      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006802:	4b36      	ldr	r3, [pc, #216]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006806:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800680a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800680e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006810:	4a32      	ldr	r2, [pc, #200]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006812:	430b      	orrs	r3, r1
 8006814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006816:	e003      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800681c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006820:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800682c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682e:	2300      	movs	r3, #0
 8006830:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006832:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d00c      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800683c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006840:	3328      	adds	r3, #40	@ 0x28
 8006842:	2102      	movs	r1, #2
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fbf7 	bl	8008038 <RCCEx_PLL3_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006856:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006862:	663b      	str	r3, [r7, #96]	@ 0x60
 8006864:	2300      	movs	r3, #0
 8006866:	667b      	str	r3, [r7, #100]	@ 0x64
 8006868:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800686c:	460b      	mov	r3, r1
 800686e:	4313      	orrs	r3, r2
 8006870:	d03a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800687e:	d018      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006884:	d811      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800688a:	d014      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800688c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006890:	d80b      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d011      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800689a:	d106      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800689c:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	4a0e      	ldr	r2, [pc, #56]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068a8:	e008      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068b0:	e004      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80068b2:	bf00      	nop
 80068b4:	e002      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80068ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d4:	4a01      	ldr	r2, [pc, #4]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068d6:	430b      	orrs	r3, r1
 80068d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80068da:	e005      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80068dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80068f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068f6:	2300      	movs	r3, #0
 80068f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006904:	4baa      	ldr	r3, [pc, #680]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006908:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800690c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006912:	4aa7      	ldr	r2, [pc, #668]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006924:	653b      	str	r3, [r7, #80]	@ 0x50
 8006926:	2300      	movs	r3, #0
 8006928:	657b      	str	r3, [r7, #84]	@ 0x54
 800692a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d00a      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006934:	4b9e      	ldr	r3, [pc, #632]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800693c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006940:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006944:	4a9a      	ldr	r2, [pc, #616]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006946:	430b      	orrs	r3, r1
 8006948:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800694a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006958:	2300      	movs	r3, #0
 800695a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800695c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006966:	4b92      	ldr	r3, [pc, #584]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800696e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006974:	4a8e      	ldr	r2, [pc, #568]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006976:	430b      	orrs	r3, r1
 8006978:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800697a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006986:	643b      	str	r3, [r7, #64]	@ 0x40
 8006988:	2300      	movs	r3, #0
 800698a:	647b      	str	r3, [r7, #68]	@ 0x44
 800698c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d00e      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006996:	4b86      	ldr	r3, [pc, #536]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	4a85      	ldr	r2, [pc, #532]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800699c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069a0:	6113      	str	r3, [r2, #16]
 80069a2:	4b83      	ldr	r3, [pc, #524]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069a4:	6919      	ldr	r1, [r3, #16]
 80069a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069ae:	4a80      	ldr	r2, [pc, #512]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80069c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069c2:	2300      	movs	r3, #0
 80069c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80069ca:	460b      	mov	r3, r1
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069d0:	4b77      	ldr	r3, [pc, #476]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069de:	4a74      	ldr	r2, [pc, #464]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80069f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069f2:	2300      	movs	r3, #0
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80069fa:	460b      	mov	r3, r1
 80069fc:	4313      	orrs	r3, r2
 80069fe:	d00a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a00:	4b6b      	ldr	r3, [pc, #428]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a10:	4a67      	ldr	r2, [pc, #412]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a12:	430b      	orrs	r3, r1
 8006a14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	2100      	movs	r1, #0
 8006a20:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	d011      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a36:	3308      	adds	r3, #8
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f001 fa4a 	bl	8007ed4 <RCCEx_PLL2_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006a46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	2100      	movs	r1, #0
 8006a60:	6239      	str	r1, [r7, #32]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d011      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a76:	3308      	adds	r3, #8
 8006a78:	2101      	movs	r1, #1
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 fa2a 	bl	8007ed4 <RCCEx_PLL2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006a86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	61b9      	str	r1, [r7, #24]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006aac:	460b      	mov	r3, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	d011      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fa0a 	bl	8007ed4 <RCCEx_PLL2_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006ac6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ace:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ad2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	6139      	str	r1, [r7, #16]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006aec:	460b      	mov	r3, r1
 8006aee:	4313      	orrs	r3, r2
 8006af0:	d011      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006af6:	3328      	adds	r3, #40	@ 0x28
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fa9c 	bl	8008038 <RCCEx_PLL3_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006b06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	d011      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b36:	3328      	adds	r3, #40	@ 0x28
 8006b38:	2101      	movs	r1, #1
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 fa7c 	bl	8008038 <RCCEx_PLL3_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006b46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6039      	str	r1, [r7, #0]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	607b      	str	r3, [r7, #4]
 8006b68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d011      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b76:	3328      	adds	r3, #40	@ 0x28
 8006b78:	2102      	movs	r1, #2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fa5c 	bl	8008038 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006b86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006b96:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006baa:	46bd      	mov	sp, r7
 8006bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb0:	58024400 	.word	0x58024400

08006bb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b090      	sub	sp, #64	@ 0x40
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	f040 8094 	bne.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006bcc:	4b9e      	ldr	r3, [pc, #632]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	f200 8087 	bhi.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006bde:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf9 	.word	0x08006bf9
 8006be8:	08006c21 	.word	0x08006c21
 8006bec:	08006c49 	.word	0x08006c49
 8006bf0:	08006ce5 	.word	0x08006ce5
 8006bf4:	08006c71 	.word	0x08006c71
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bf8:	4b93      	ldr	r3, [pc, #588]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c04:	d108      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f810 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c14:	f000 bd45 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1c:	f000 bd41 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c20:	4b89      	ldr	r3, [pc, #548]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c2c:	d108      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2e:	f107 0318 	add.w	r3, r7, #24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fd54 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c3c:	f000 bd31 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c44:	f000 bd2d 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c48:	4b7f      	ldr	r3, [pc, #508]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c54:	d108      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c56:	f107 030c 	add.w	r3, r7, #12
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fe94 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c64:	f000 bd1d 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6c:	f000 bd19 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c70:	4b75      	ldr	r3, [pc, #468]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c7a:	4b73      	ldr	r3, [pc, #460]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d10c      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	08db      	lsrs	r3, r3, #3
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	4a6d      	ldr	r2, [pc, #436]	@ (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c9e:	e01f      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ca0:	4b69      	ldr	r3, [pc, #420]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cac:	d106      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cb4:	d102      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cb6:	4b66      	ldr	r3, [pc, #408]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cba:	e011      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cbc:	4b62      	ldr	r3, [pc, #392]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc8:	d106      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd0:	d102      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cd2:	4b60      	ldr	r3, [pc, #384]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cd6:	e003      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006cdc:	f000 bce1 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ce0:	f000 bcdf 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	f000 bcdb 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf0:	f000 bcd7 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	f040 80ad 	bne.w	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006d02:	4b51      	ldr	r3, [pc, #324]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d06:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d12:	d056      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d1a:	f200 8090 	bhi.w	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d22:	f000 8088 	beq.w	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d2a:	f200 8088 	bhi.w	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	2b80      	cmp	r3, #128	@ 0x80
 8006d32:	d032      	beq.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	2b80      	cmp	r3, #128	@ 0x80
 8006d38:	f200 8081 	bhi.w	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d44:	2b40      	cmp	r3, #64	@ 0x40
 8006d46:	d014      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006d48:	e079      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d56:	d108      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 ff67 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d66:	f000 bc9c 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d6e:	f000 bc98 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d72:	4b35      	ldr	r3, [pc, #212]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d7e:	d108      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fcab 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8e:	f000 bc88 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d96:	f000 bc84 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da6:	d108      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fdeb 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db6:	f000 bc74 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	f000 bc70 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dc2:	4b21      	ldr	r3, [pc, #132]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d10c      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dde:	4b1a      	ldr	r3, [pc, #104]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	08db      	lsrs	r3, r3, #3
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006dea:	fa22 f303 	lsr.w	r3, r2, r3
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df0:	e01f      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df2:	4b15      	ldr	r3, [pc, #84]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e06:	d102      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e08:	4b11      	ldr	r3, [pc, #68]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0c:	e011      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e1a:	d106      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e22:	d102      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e24:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e28:	e003      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e2e:	f000 bc38 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e32:	f000 bc36 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e36:	4b08      	ldr	r3, [pc, #32]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3a:	f000 bc32 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e42:	f000 bc2e 	b.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	03d09000 	.word	0x03d09000
 8006e50:	003d0900 	.word	0x003d0900
 8006e54:	007a1200 	.word	0x007a1200
 8006e58:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e60:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006e64:	430b      	orrs	r3, r1
 8006e66:	f040 809c 	bne.w	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006e6a:	4b9e      	ldr	r3, [pc, #632]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e6e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006e72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e7a:	d054      	beq.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e82:	f200 808b 	bhi.w	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e8c:	f000 8083 	beq.w	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e96:	f200 8081 	bhi.w	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ea0:	d02f      	beq.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ea8:	d878      	bhi.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb6:	d012      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006eb8:	e070      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eba:	4b8a      	ldr	r3, [pc, #552]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 feaf 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed6:	e3e4      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006edc:	e3e1      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ede:	4b81      	ldr	r3, [pc, #516]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eea:	d107      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eec:	f107 0318 	add.w	r3, r7, #24
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fbf5 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006efa:	e3d2      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f00:	e3cf      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f02:	4b78      	ldr	r3, [pc, #480]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f10:	f107 030c 	add.w	r3, r7, #12
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fd37 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f1e:	e3c0      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f24:	e3bd      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f26:	4b6f      	ldr	r3, [pc, #444]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f30:	4b6c      	ldr	r3, [pc, #432]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d10c      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f42:	4b68      	ldr	r3, [pc, #416]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	08db      	lsrs	r3, r3, #3
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	4a66      	ldr	r2, [pc, #408]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f54:	e01e      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f56:	4b63      	ldr	r3, [pc, #396]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f62:	d106      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f6a:	d102      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f6c:	4b5f      	ldr	r3, [pc, #380]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f70:	e010      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f72:	4b5c      	ldr	r3, [pc, #368]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f7e:	d106      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f86:	d102      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f88:	4b59      	ldr	r3, [pc, #356]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8c:	e002      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f92:	e386      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f94:	e385      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f96:	4b57      	ldr	r3, [pc, #348]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9a:	e382      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa0:	e37f      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006faa:	430b      	orrs	r3, r1
 8006fac:	f040 80a7 	bne.w	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006fb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fc0:	d055      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fc8:	f200 8096 	bhi.w	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fd2:	f000 8084 	beq.w	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fdc:	f200 808c 	bhi.w	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fe6:	d030      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fee:	f200 8083 	bhi.w	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ffe:	d012      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007000:	e07a      	b.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007002:	4b38      	ldr	r3, [pc, #224]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700e:	d107      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fe0b 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701e:	e340      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007024:	e33d      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007026:	4b2f      	ldr	r3, [pc, #188]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800702e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007032:	d107      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007034:	f107 0318 	add.w	r3, r7, #24
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fb51 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007042:	e32e      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007048:	e32b      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800704a:	4b26      	ldr	r3, [pc, #152]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007056:	d107      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fc93 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007066:	e31c      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800706c:	e319      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800706e:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007072:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007076:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b04      	cmp	r3, #4
 8007082:	d10c      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800708a:	4b16      	ldr	r3, [pc, #88]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	08db      	lsrs	r3, r3, #3
 8007090:	f003 0303 	and.w	r3, r3, #3
 8007094:	4a14      	ldr	r2, [pc, #80]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007096:	fa22 f303 	lsr.w	r3, r2, r3
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709c:	e01e      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800709e:	4b11      	ldr	r3, [pc, #68]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070aa:	d106      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80070ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070b2:	d102      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070b4:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80070b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b8:	e010      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c6:	d106      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80070c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ce:	d102      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070d0:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d4:	e002      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070da:	e2e2      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070dc:	e2e1      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070de:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80070e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e2:	e2de      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	007a1200 	.word	0x007a1200
 80070f4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fc:	e2d1      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80070fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007102:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007106:	430b      	orrs	r3, r1
 8007108:	f040 809c 	bne.w	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800710c:	4b93      	ldr	r3, [pc, #588]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800710e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007110:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711c:	d054      	beq.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007124:	f200 808b 	bhi.w	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800712e:	f000 8083 	beq.w	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007138:	f200 8081 	bhi.w	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007142:	d02f      	beq.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800714a:	d878      	bhi.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007158:	d012      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800715a:	e070      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800715c:	4b7f      	ldr	r3, [pc, #508]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007168:	d107      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800716a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fd5e 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007178:	e293      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717e:	e290      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007180:	4b76      	ldr	r3, [pc, #472]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800718c:	d107      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800718e:	f107 0318 	add.w	r3, r7, #24
 8007192:	4618      	mov	r0, r3
 8007194:	f000 faa4 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800719c:	e281      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a2:	e27e      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071a4:	4b6d      	ldr	r3, [pc, #436]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b0:	d107      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b2:	f107 030c 	add.w	r3, r7, #12
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fbe6 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c0:	e26f      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c6:	e26c      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071c8:	4b64      	ldr	r3, [pc, #400]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071d2:	4b62      	ldr	r3, [pc, #392]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d10c      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071e4:	4b5d      	ldr	r3, [pc, #372]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a5c      	ldr	r2, [pc, #368]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071f6:	e01e      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071f8:	4b58      	ldr	r3, [pc, #352]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007204:	d106      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800720c:	d102      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800720e:	4b55      	ldr	r3, [pc, #340]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007212:	e010      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007214:	4b51      	ldr	r3, [pc, #324]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007220:	d106      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007228:	d102      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800722a:	4b4f      	ldr	r3, [pc, #316]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800722c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800722e:	e002      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007234:	e235      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007236:	e234      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007238:	4b4c      	ldr	r3, [pc, #304]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723c:	e231      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007242:	e22e      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007248:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800724c:	430b      	orrs	r3, r1
 800724e:	f040 808f 	bne.w	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007252:	4b42      	ldr	r3, [pc, #264]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007256:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800725a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800725c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007262:	d06b      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800726a:	d874      	bhi.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007272:	d056      	beq.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800727a:	d86c      	bhi.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007282:	d03b      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800728a:	d864      	bhi.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007292:	d021      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729a:	d85c      	bhi.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a8:	d004      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80072aa:	e054      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fe fa22 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 80072b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80072b2:	e1f6      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b4:	4b29      	ldr	r3, [pc, #164]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072c0:	d107      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c2:	f107 0318 	add.w	r3, r7, #24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fa0a 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d0:	e1e7      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d6:	e1e4      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072d8:	4b20      	ldr	r3, [pc, #128]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e4:	d107      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e6:	f107 030c 	add.w	r3, r7, #12
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fb4c 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f4:	e1d5      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fa:	e1d2      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072fc:	4b17      	ldr	r3, [pc, #92]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b04      	cmp	r3, #4
 8007306:	d109      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007308:	4b14      	ldr	r3, [pc, #80]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	08db      	lsrs	r3, r3, #3
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	4a13      	ldr	r2, [pc, #76]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
 8007318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800731a:	e1c2      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007320:	e1bf      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007322:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732e:	d102      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007330:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007334:	e1b5      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800733a:	e1b2      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007348:	d102      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800734a:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800734e:	e1a8      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007354:	e1a5      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800735a:	e1a2      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800735c:	58024400 	.word	0x58024400
 8007360:	03d09000 	.word	0x03d09000
 8007364:	003d0900 	.word	0x003d0900
 8007368:	007a1200 	.word	0x007a1200
 800736c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007374:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007378:	430b      	orrs	r3, r1
 800737a:	d173      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800737c:	4b9c      	ldr	r3, [pc, #624]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800737e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007384:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800738c:	d02f      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800738e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007394:	d863      	bhi.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a2:	d012      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80073a4:	e05b      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073a6:	4b92      	ldr	r3, [pc, #584]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b2:	d107      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b4:	f107 0318 	add.w	r3, r7, #24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 f991 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c2:	e16e      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c8:	e16b      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073ca:	4b89      	ldr	r3, [pc, #548]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d6:	d107      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fad3 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e6:	e15c      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ec:	e159      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ee:	4b80      	ldr	r3, [pc, #512]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073f8:	4b7d      	ldr	r3, [pc, #500]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b04      	cmp	r3, #4
 8007402:	d10c      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800740a:	4b79      	ldr	r3, [pc, #484]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	08db      	lsrs	r3, r3, #3
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	4a77      	ldr	r2, [pc, #476]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007416:	fa22 f303 	lsr.w	r3, r2, r3
 800741a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800741c:	e01e      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800741e:	4b74      	ldr	r3, [pc, #464]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742a:	d106      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800742c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007432:	d102      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007434:	4b70      	ldr	r3, [pc, #448]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007438:	e010      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800743a:	4b6d      	ldr	r3, [pc, #436]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007446:	d106      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800744e:	d102      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007450:	4b6a      	ldr	r3, [pc, #424]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007454:	e002      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800745a:	e122      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800745c:	e121      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007462:	e11e      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007468:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800746c:	430b      	orrs	r3, r1
 800746e:	d133      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007470:	4b5f      	ldr	r3, [pc, #380]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007478:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007486:	d012      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007488:	e023      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800748a:	4b59      	ldr	r3, [pc, #356]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007496:	d107      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fbc7 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a6:	e0fc      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ac:	e0f9      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074ae:	4b50      	ldr	r3, [pc, #320]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ba:	d107      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074bc:	f107 0318 	add.w	r3, r7, #24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 f90d 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ca:	e0ea      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d0:	e0e7      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d6:	e0e4      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80074d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074dc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80074e0:	430b      	orrs	r3, r1
 80074e2:	f040 808d 	bne.w	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80074e6:	4b42      	ldr	r3, [pc, #264]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80074ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074f6:	d06b      	beq.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074fe:	d874      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007506:	d056      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750e:	d86c      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007516:	d03b      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800751e:	d864      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007526:	d021      	beq.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800752e:	d85c      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	2b00      	cmp	r3, #0
 8007534:	d004      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800753c:	d004      	beq.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800753e:	e054      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007540:	f000 f8b8 	bl	80076b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007544:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007546:	e0ac      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007548:	4b29      	ldr	r3, [pc, #164]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007554:	d107      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007556:	f107 0318 	add.w	r3, r7, #24
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f8c0 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007564:	e09d      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756a:	e09a      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800756c:	4b20      	ldr	r3, [pc, #128]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007578:	d107      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800757a:	f107 030c 	add.w	r3, r7, #12
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fa02 	bl	8007988 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007588:	e08b      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800758e:	e088      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007590:	4b17      	ldr	r3, [pc, #92]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b04      	cmp	r3, #4
 800759a:	d109      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800759c:	4b14      	ldr	r3, [pc, #80]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	08db      	lsrs	r3, r3, #3
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	4a13      	ldr	r2, [pc, #76]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80075a8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ae:	e078      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b4:	e075      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075b6:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c2:	d102      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80075c4:	4b0c      	ldr	r3, [pc, #48]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c8:	e06b      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ce:	e068      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075d0:	4b07      	ldr	r3, [pc, #28]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075dc:	d102      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80075de:	4b07      	ldr	r3, [pc, #28]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e2:	e05e      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e8:	e05b      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ee:	e058      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075f0:	58024400 	.word	0x58024400
 80075f4:	03d09000 	.word	0x03d09000
 80075f8:	003d0900 	.word	0x003d0900
 80075fc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007604:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007608:	430b      	orrs	r3, r1
 800760a:	d148      	bne.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800760c:	4b27      	ldr	r3, [pc, #156]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800760e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761c:	d02a      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007624:	d838      	bhi.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007632:	d00d      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007634:	e030      	b.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007636:	4b1d      	ldr	r3, [pc, #116]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007642:	d102      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007644:	4b1a      	ldr	r3, [pc, #104]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007648:	e02b      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800764e:	e028      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800765c:	d107      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800765e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fae4 	bl	8007c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800766c:	e019      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007672:	e016      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007674:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800767c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007680:	d107      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007682:	f107 0318 	add.w	r3, r7, #24
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f82a 	bl	80076e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007690:	e007      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007696:	e004      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800769c:	e001      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80076a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3740      	adds	r7, #64	@ 0x40
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	58024400 	.word	0x58024400
 80076b0:	007a1200 	.word	0x007a1200

080076b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80076b8:	f7fd ffec 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80076bc:	4602      	mov	r2, r0
 80076be:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	4904      	ldr	r1, [pc, #16]	@ (80076dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076ca:	5ccb      	ldrb	r3, [r1, r3]
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	58024400 	.word	0x58024400
 80076dc:	08010f34 	.word	0x08010f34

080076e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b089      	sub	sp, #36	@ 0x24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80076f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	0b1b      	lsrs	r3, r3, #12
 80076f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	091b      	lsrs	r3, r3, #4
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800770a:	4b99      	ldr	r3, [pc, #612]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8111 	beq.w	8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b02      	cmp	r3, #2
 8007732:	f000 8083 	beq.w	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b02      	cmp	r3, #2
 800773a:	f200 80a1 	bhi.w	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d056      	beq.n	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800774a:	e099      	b.n	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b88      	ldr	r3, [pc, #544]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02d      	beq.n	80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007758:	4b85      	ldr	r3, [pc, #532]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a84      	ldr	r2, [pc, #528]	@ (8007974 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b7b      	ldr	r3, [pc, #492]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077b2:	e087      	b.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800797c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f6:	e065      	b.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b59      	ldr	r3, [pc, #356]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a03 	vldr	s12, [r7, #12]
 800781e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783a:	e043      	b.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b48      	ldr	r3, [pc, #288]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787e:	e021      	b.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b37      	ldr	r3, [pc, #220]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80078c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	0a5b      	lsrs	r3, r3, #9
 80078ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078de:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ea:	ee17 2a90 	vmov	r2, s15
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80078f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007918:	ee17 2a90 	vmov	r2, s15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007920:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007924:	0e1b      	lsrs	r3, r3, #24
 8007926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800793a:	edd7 6a07 	vldr	s13, [r7, #28]
 800793e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007946:	ee17 2a90 	vmov	r2, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800794e:	e008      	b.n	8007962 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	609a      	str	r2, [r3, #8]
}
 8007962:	bf00      	nop
 8007964:	3724      	adds	r7, #36	@ 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	58024400 	.word	0x58024400
 8007974:	03d09000 	.word	0x03d09000
 8007978:	46000000 	.word	0x46000000
 800797c:	4c742400 	.word	0x4c742400
 8007980:	4a742400 	.word	0x4a742400
 8007984:	4af42400 	.word	0x4af42400

08007988 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	@ 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007990:	4ba1      	ldr	r3, [pc, #644]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	f003 0303 	and.w	r3, r3, #3
 8007998:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800799a:	4b9f      	ldr	r3, [pc, #636]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800799c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799e:	0d1b      	lsrs	r3, r3, #20
 80079a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80079a6:	4b9c      	ldr	r3, [pc, #624]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80079b2:	4b99      	ldr	r3, [pc, #612]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b6:	08db      	lsrs	r3, r3, #3
 80079b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8111 	beq.w	8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	f000 8083 	beq.w	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	f200 80a1 	bhi.w	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d056      	beq.n	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079f2:	e099      	b.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f4:	4b88      	ldr	r3, [pc, #544]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d02d      	beq.n	8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a00:	4b85      	ldr	r3, [pc, #532]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	08db      	lsrs	r3, r3, #3
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	4a84      	ldr	r2, [pc, #528]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a5a:	e087      	b.n	8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9e:	e065      	b.n	8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab2:	4b59      	ldr	r3, [pc, #356]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae2:	e043      	b.n	8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af6:	4b48      	ldr	r3, [pc, #288]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b26:	e021      	b.n	8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3a:	4b37      	ldr	r3, [pc, #220]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b70:	0a5b      	lsrs	r3, r3, #9
 8007b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b92:	ee17 2a90 	vmov	r2, s15
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc0:	ee17 2a90 	vmov	r2, s15
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007bc8:	4b13      	ldr	r3, [pc, #76]	@ (8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bcc:	0e1b      	lsrs	r3, r3, #24
 8007bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bee:	ee17 2a90 	vmov	r2, s15
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bf6:	e008      	b.n	8007c0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
}
 8007c0a:	bf00      	nop
 8007c0c:	3724      	adds	r7, #36	@ 0x24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	03d09000 	.word	0x03d09000
 8007c20:	46000000 	.word	0x46000000
 8007c24:	4c742400 	.word	0x4c742400
 8007c28:	4a742400 	.word	0x4a742400
 8007c2c:	4af42400 	.word	0x4af42400

08007c30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b089      	sub	sp, #36	@ 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c38:	4ba0      	ldr	r3, [pc, #640]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007c42:	4b9e      	ldr	r3, [pc, #632]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c46:	091b      	lsrs	r3, r3, #4
 8007c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007c4e:	4b9b      	ldr	r3, [pc, #620]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c58:	4b98      	ldr	r3, [pc, #608]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5c:	08db      	lsrs	r3, r3, #3
 8007c5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8111 	beq.w	8007e9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	f000 8083 	beq.w	8007d8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	f200 80a1 	bhi.w	8007dce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d056      	beq.n	8007d46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007c98:	e099      	b.n	8007dce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9a:	4b88      	ldr	r3, [pc, #544]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d02d      	beq.n	8007d02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca6:	4b85      	ldr	r3, [pc, #532]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	4a83      	ldr	r2, [pc, #524]	@ (8007ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd0:	4b7a      	ldr	r3, [pc, #488]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd8:	ee07 3a90 	vmov	s15, r3
 8007cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d00:	e087      	b.n	8007e12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	ee07 3a90 	vmov	s15, r3
 8007d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d14:	4b69      	ldr	r3, [pc, #420]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d28:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d44:	e065      	b.n	8007e12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	ee07 3a90 	vmov	s15, r3
 8007d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d50:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007ecc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d58:	4b58      	ldr	r3, [pc, #352]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d88:	e043      	b.n	8007e12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d94:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9c:	4b47      	ldr	r3, [pc, #284]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dcc:	e021      	b.n	8007e12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de0:	4b36      	ldr	r3, [pc, #216]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007e12:	4b2a      	ldr	r3, [pc, #168]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e16:	0a5b      	lsrs	r3, r3, #9
 8007e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e38:	ee17 2a90 	vmov	r2, s15
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007e40:	4b1e      	ldr	r3, [pc, #120]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e66:	ee17 2a90 	vmov	r2, s15
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007e6e:	4b13      	ldr	r3, [pc, #76]	@ (8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e78:	ee07 3a90 	vmov	s15, r3
 8007e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e94:	ee17 2a90 	vmov	r2, s15
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007e9c:	e008      	b.n	8007eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	3724      	adds	r7, #36	@ 0x24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	58024400 	.word	0x58024400
 8007ec0:	03d09000 	.word	0x03d09000
 8007ec4:	46000000 	.word	0x46000000
 8007ec8:	4c742400 	.word	0x4c742400
 8007ecc:	4a742400 	.word	0x4a742400
 8007ed0:	4af42400 	.word	0x4af42400

08007ed4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ee2:	4b53      	ldr	r3, [pc, #332]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d101      	bne.n	8007ef2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e099      	b.n	8008026 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a4e      	ldr	r2, [pc, #312]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007ef8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007efe:	f7fa fe21 	bl	8002b44 <HAL_GetTick>
 8007f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f04:	e008      	b.n	8007f18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f06:	f7fa fe1d 	bl	8002b44 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d901      	bls.n	8007f18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e086      	b.n	8008026 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f18:	4b45      	ldr	r3, [pc, #276]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f0      	bne.n	8007f06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f24:	4b42      	ldr	r3, [pc, #264]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	031b      	lsls	r3, r3, #12
 8007f32:	493f      	ldr	r1, [pc, #252]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	025b      	lsls	r3, r3, #9
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	061b      	lsls	r3, r3, #24
 8007f64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f68:	4931      	ldr	r1, [pc, #196]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f6e:	4b30      	ldr	r3, [pc, #192]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	492d      	ldr	r1, [pc, #180]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f80:	4b2b      	ldr	r3, [pc, #172]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	f023 0220 	bic.w	r2, r3, #32
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	4928      	ldr	r1, [pc, #160]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f92:	4b27      	ldr	r3, [pc, #156]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	4a26      	ldr	r2, [pc, #152]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	f023 0310 	bic.w	r3, r3, #16
 8007f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f9e:	4b24      	ldr	r3, [pc, #144]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fa2:	4b24      	ldr	r3, [pc, #144]	@ (8008034 <RCCEx_PLL2_Config+0x160>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	69d2      	ldr	r2, [r2, #28]
 8007faa:	00d2      	lsls	r2, r2, #3
 8007fac:	4920      	ldr	r1, [pc, #128]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fb8:	f043 0310 	orr.w	r3, r3, #16
 8007fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	4a19      	ldr	r2, [pc, #100]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fd0:	e00f      	b.n	8007ff2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d106      	bne.n	8007fe6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fd8:	4b15      	ldr	r3, [pc, #84]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	4a14      	ldr	r2, [pc, #80]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fe4:	e005      	b.n	8007ff2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007fe6:	4b12      	ldr	r3, [pc, #72]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	4a11      	ldr	r2, [pc, #68]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ffe:	f7fa fda1 	bl	8002b44 <HAL_GetTick>
 8008002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008004:	e008      	b.n	8008018 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008006:	f7fa fd9d 	bl	8002b44 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e006      	b.n	8008026 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008018:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <RCCEx_PLL2_Config+0x15c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0f0      	beq.n	8008006 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	58024400 	.word	0x58024400
 8008034:	ffff0007 	.word	0xffff0007

08008038 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008046:	4b53      	ldr	r3, [pc, #332]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b03      	cmp	r3, #3
 8008050:	d101      	bne.n	8008056 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e099      	b.n	800818a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008056:	4b4f      	ldr	r3, [pc, #316]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a4e      	ldr	r2, [pc, #312]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800805c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008062:	f7fa fd6f 	bl	8002b44 <HAL_GetTick>
 8008066:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008068:	e008      	b.n	800807c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800806a:	f7fa fd6b 	bl	8002b44 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e086      	b.n	800818a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800807c:	4b45      	ldr	r3, [pc, #276]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1f0      	bne.n	800806a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008088:	4b42      	ldr	r3, [pc, #264]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800808a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	051b      	lsls	r3, r3, #20
 8008096:	493f      	ldr	r1, [pc, #252]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008098:	4313      	orrs	r3, r2
 800809a:	628b      	str	r3, [r1, #40]	@ 0x28
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	025b      	lsls	r3, r3, #9
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	061b      	lsls	r3, r3, #24
 80080c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080cc:	4931      	ldr	r1, [pc, #196]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080d2:	4b30      	ldr	r3, [pc, #192]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	492d      	ldr	r1, [pc, #180]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	4928      	ldr	r1, [pc, #160]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80080f6:	4b27      	ldr	r3, [pc, #156]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fa:	4a26      	ldr	r2, [pc, #152]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008100:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008102:	4b24      	ldr	r3, [pc, #144]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008106:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <RCCEx_PLL3_Config+0x160>)
 8008108:	4013      	ands	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	69d2      	ldr	r2, [r2, #28]
 800810e:	00d2      	lsls	r2, r2, #3
 8008110:	4920      	ldr	r1, [pc, #128]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008112:	4313      	orrs	r3, r2
 8008114:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008116:	4b1f      	ldr	r3, [pc, #124]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	4a1e      	ldr	r2, [pc, #120]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800811c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008120:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008128:	4b1a      	ldr	r3, [pc, #104]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	4a19      	ldr	r2, [pc, #100]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800812e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008134:	e00f      	b.n	8008156 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d106      	bne.n	800814a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800813c:	4b15      	ldr	r3, [pc, #84]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	4a14      	ldr	r2, [pc, #80]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008142:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008146:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008148:	e005      	b.n	8008156 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800814a:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	4a11      	ldr	r2, [pc, #68]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008150:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008154:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008156:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a0e      	ldr	r2, [pc, #56]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800815c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008162:	f7fa fcef 	bl	8002b44 <HAL_GetTick>
 8008166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008168:	e008      	b.n	800817c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800816a:	f7fa fceb 	bl	8002b44 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e006      	b.n	800818a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800817c:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <RCCEx_PLL3_Config+0x15c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f0      	beq.n	800816a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
 8008198:	ffff0007 	.word	0xffff0007

0800819c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	@ 0x28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e075      	b.n	800829a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fa f91f 	bl	8002404 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2204      	movs	r2, #4
 80081ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f868 	bl	80082a4 <HAL_SD_InitCard>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e05d      	b.n	800829a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80081de:	f107 0308 	add.w	r3, r7, #8
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fdaf 	bl	8008d48 <HAL_SD_GetCardStatus>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e052      	b.n	800829a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80081f4:	7e3b      	ldrb	r3, [r7, #24]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80081fa:	7e7b      	ldrb	r3, [r7, #25]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008204:	2b01      	cmp	r3, #1
 8008206:	d10a      	bne.n	800821e <HAL_SD_Init+0x82>
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <HAL_SD_Init+0x78>
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800821a:	659a      	str	r2, [r3, #88]	@ 0x58
 800821c:	e00b      	b.n	8008236 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008222:	2b01      	cmp	r3, #1
 8008224:	d104      	bne.n	8008230 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800822c:	659a      	str	r2, [r3, #88]	@ 0x58
 800822e:	e002      	b.n	8008236 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fe6d 	bl	8008f1c <HAL_SD_ConfigWideBusOperation>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e026      	b.n	800829a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800824c:	f7fa fc7a 	bl	8002b44 <HAL_GetTick>
 8008250:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008252:	e011      	b.n	8008278 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008254:	f7fa fc76 	bl	8002b44 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d109      	bne.n	8008278 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800826a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e010      	b.n	800829a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 ff61 	bl	8009140 <HAL_SD_GetCardState>
 800827e:	4603      	mov	r3, r0
 8008280:	2b04      	cmp	r3, #4
 8008282:	d1e7      	bne.n	8008254 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3728      	adds	r7, #40	@ 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b08d      	sub	sp, #52	@ 0x34
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80082bc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80082c0:	f04f 0100 	mov.w	r1, #0
 80082c4:	f7fe fc76 	bl	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80082c8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d109      	bne.n	80082e4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80082de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e070      	b.n	80083c6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	4a39      	ldr	r2, [pc, #228]	@ (80083d0 <HAL_SD_InitCard+0x12c>)
 80082ea:	fba2 2303 	umull	r2, r3, r2, r3
 80082ee:	091b      	lsrs	r3, r3, #4
 80082f0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681c      	ldr	r4, [r3, #0]
 80082f6:	466a      	mov	r2, sp
 80082f8:	f107 0318 	add.w	r3, r7, #24
 80082fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008300:	e882 0003 	stmia.w	r2, {r0, r1}
 8008304:	f107 030c 	add.w	r3, r7, #12
 8008308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800830a:	4620      	mov	r0, r4
 800830c:	f002 ff60 	bl	800b1d0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f002 ffa3 	bl	800b260 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008326:	fbb2 f3f3 	udiv	r3, r2, r3
 800832a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008332:	4a28      	ldr	r2, [pc, #160]	@ (80083d4 <HAL_SD_InitCard+0x130>)
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	fbb2 f3f3 	udiv	r3, r2, r3
 800833a:	3301      	adds	r3, #1
 800833c:	4618      	mov	r0, r3
 800833e:	f7fa fc0d 	bl	8002b5c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 ffea 	bl	800931c <SD_PowerON>
 8008348:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e02e      	b.n	80083c6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 ff09 	bl	8009180 <SD_InitCard>
 800836e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e01b      	b.n	80083c6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008396:	4618      	mov	r0, r3
 8008398:	f002 fff8 	bl	800b38c <SDMMC_CmdBlockLength>
 800839c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00f      	beq.n	80083c4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a0b      	ldr	r2, [pc, #44]	@ (80083d8 <HAL_SD_InitCard+0x134>)
 80083aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	372c      	adds	r7, #44	@ 0x2c
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd90      	pop	{r4, r7, pc}
 80083ce:	bf00      	nop
 80083d0:	014f8b59 	.word	0x014f8b59
 80083d4:	00012110 	.word	0x00012110
 80083d8:	1fe00fff 	.word	0x1fe00fff

080083dc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08c      	sub	sp, #48	@ 0x30
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d107      	bne.n	8008404 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e08d      	b.n	8008520 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	f040 8086 	bne.w	800851e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	441a      	add	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008422:	429a      	cmp	r2, r3
 8008424:	d907      	bls.n	8008436 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e074      	b.n	8008520 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2203      	movs	r2, #3
 800843a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2200      	movs	r2, #0
 8008444:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	025a      	lsls	r2, r3, #9
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008458:	2b01      	cmp	r3, #1
 800845a:	d002      	beq.n	8008462 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	025b      	lsls	r3, r3, #9
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008462:	f04f 33ff 	mov.w	r3, #4294967295
 8008466:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	025b      	lsls	r3, r3, #9
 800846c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800846e:	2390      	movs	r3, #144	@ 0x90
 8008470:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008472:	2302      	movs	r3, #2
 8008474:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008476:	2300      	movs	r3, #0
 8008478:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800847a:	2300      	movs	r3, #0
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f107 0210 	add.w	r2, r7, #16
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f002 ff53 	bl	800b334 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800849c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2201      	movs	r2, #1
 80084ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d90a      	bls.n	80084ca <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2282      	movs	r2, #130	@ 0x82
 80084b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 ffa9 	bl	800b418 <SDMMC_CmdReadMultiBlock>
 80084c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80084c8:	e009      	b.n	80084de <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2281      	movs	r2, #129	@ 0x81
 80084ce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 ff7b 	bl	800b3d2 <SDMMC_CmdReadSingleBlock>
 80084dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d012      	beq.n	800850a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008528 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80084ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f2:	431a      	orrs	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e00a      	b.n	8008520 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008518:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e000      	b.n	8008520 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800851e:	2302      	movs	r3, #2
  }
}
 8008520:	4618      	mov	r0, r3
 8008522:	3730      	adds	r7, #48	@ 0x30
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	1fe00fff 	.word	0x1fe00fff

0800852c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08c      	sub	sp, #48	@ 0x30
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d107      	bne.n	8008554 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008548:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e08d      	b.n	8008670 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	f040 8086 	bne.w	800866e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	441a      	add	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008572:	429a      	cmp	r2, r3
 8008574:	d907      	bls.n	8008586 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e074      	b.n	8008670 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2203      	movs	r2, #3
 800858a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	025a      	lsls	r2, r3, #9
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d002      	beq.n	80085b2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	025b      	lsls	r3, r3, #9
 80085b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085b2:	f04f 33ff 	mov.w	r3, #4294967295
 80085b6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	025b      	lsls	r3, r3, #9
 80085bc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085be:	2390      	movs	r3, #144	@ 0x90
 80085c0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f107 0210 	add.w	r2, r7, #16
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f002 feab 	bl	800b334 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085ec:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2201      	movs	r2, #1
 80085fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d90a      	bls.n	800861a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	22a0      	movs	r2, #160	@ 0xa0
 8008608:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008610:	4618      	mov	r0, r3
 8008612:	f002 ff47 	bl	800b4a4 <SDMMC_CmdWriteMultiBlock>
 8008616:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008618:	e009      	b.n	800862e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2290      	movs	r2, #144	@ 0x90
 800861e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008626:	4618      	mov	r0, r3
 8008628:	f002 ff19 	bl	800b45e <SDMMC_CmdWriteSingleBlock>
 800862c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800862e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d012      	beq.n	800865a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a0f      	ldr	r2, [pc, #60]	@ (8008678 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800863a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	431a      	orrs	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e00a      	b.n	8008670 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008668:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e000      	b.n	8008670 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800866e:	2302      	movs	r3, #2
  }
}
 8008670:	4618      	mov	r0, r3
 8008672:	3730      	adds	r7, #48	@ 0x30
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	1fe00fff 	.word	0x1fe00fff

0800867c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008688:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d008      	beq.n	80086aa <HAL_SD_IRQHandler+0x2e>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 f926 	bl	80098f4 <SD_Read_IT>
 80086a8:	e19a      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80ac 	beq.w	8008812 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086c2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b59      	ldr	r3, [pc, #356]	@ (8008834 <HAL_SD_IRQHandler+0x1b8>)
 80086d0:	400b      	ands	r3, r1
 80086d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80086e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086f2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d038      	beq.n	8008770 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <HAL_SD_IRQHandler+0x96>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b00      	cmp	r3, #0
 8008710:	d011      	beq.n	8008736 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f002 fee8 	bl	800b4ec <SDMMC_CmdStopTransfer>
 800871c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f95b 	bl	80089ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a3f      	ldr	r2, [pc, #252]	@ (8008838 <HAL_SD_IRQHandler+0x1bc>)
 800873c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d104      	bne.n	8008760 <HAL_SD_IRQHandler+0xe4>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f003 fb9b 	bl	800be9c <HAL_SD_RxCpltCallback>
 8008766:	e13b      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f003 fb8d 	bl	800be88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800876e:	e137      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 8132 	beq.w	80089e0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2200      	movs	r2, #0
 800878a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2200      	movs	r2, #0
 8008792:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <HAL_SD_IRQHandler+0x12c>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d011      	beq.n	80087cc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f002 fe9d 	bl	800b4ec <SDMMC_CmdStopTransfer>
 80087b2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d008      	beq.n	80087cc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f910 	bl	80089ec <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f003 0310 	and.w	r3, r3, #16
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d104      	bne.n	80087ee <HAL_SD_IRQHandler+0x172>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f003 fb4a 	bl	800be88 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <HAL_SD_IRQHandler+0x18e>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 80eb 	beq.w	80089e0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f003 fb46 	bl	800be9c <HAL_SD_RxCpltCallback>
}
 8008810:	e0e6      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <HAL_SD_IRQHandler+0x1c0>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d008      	beq.n	800883c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f8a8 	bl	8009980 <SD_Write_IT>
 8008830:	e0d6      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
 8008832:	bf00      	nop
 8008834:	ffff3ec5 	.word	0xffff3ec5
 8008838:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008842:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 809d 	beq.w	8008986 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008878:	f043 0208 	orr.w	r2, r3, #8
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008892:	f043 0220 	orr.w	r2, r3, #32
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ac:	f043 0210 	orr.w	r2, r3, #16
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a4b      	ldr	r2, [pc, #300]	@ (80089e8 <HAL_SD_IRQHandler+0x36c>)
 80088ba:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80088ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088da:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088fa:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f002 fdf3 	bl	800b4ec <SDMMC_CmdStopTransfer>
 8008906:	4602      	mov	r2, r0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008920:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800892a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f851 	bl	80089ec <HAL_SD_ErrorCallback>
}
 800894a:	e049      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008952:	2b00      	cmp	r3, #0
 8008954:	d044      	beq.n	80089e0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895a:	2b00      	cmp	r3, #0
 800895c:	d040      	beq.n	80089e0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800896c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f834 	bl	80089ec <HAL_SD_ErrorCallback>
}
 8008984:	e02c      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d025      	beq.n	80089e0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800899c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10c      	bne.n	80089c6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 f84a 	bl	8009a50 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80089bc:	e010      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 f832 	bl	8009a28 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80089c4:	e00c      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f833 	bl	8009a3c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80089d6:	e003      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f81b 	bl	8009a14 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80089de:	e7ff      	b.n	80089e0 <HAL_SD_IRQHandler+0x364>
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	18000f3a 	.word	0x18000f3a

080089ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a0e:	0f9b      	lsrs	r3, r3, #30
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a1a:	0e9b      	lsrs	r3, r3, #26
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a2c:	0e1b      	lsrs	r3, r3, #24
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 0303 	and.w	r3, r3, #3
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a3e:	0c1b      	lsrs	r3, r3, #16
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a60:	0d1b      	lsrs	r3, r3, #20
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6c:	0c1b      	lsrs	r3, r3, #16
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7e:	0bdb      	lsrs	r3, r3, #15
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a90:	0b9b      	lsrs	r3, r3, #14
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aa2:	0b5b      	lsrs	r3, r3, #13
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab4:	0b1b      	lsrs	r3, r3, #12
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d163      	bne.n	8008b98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad4:	009a      	lsls	r2, r3, #2
 8008ad6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ada:	4013      	ands	r3, r2
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008ae0:	0f92      	lsrs	r2, r2, #30
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aec:	0edb      	lsrs	r3, r3, #27
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008afe:	0e1b      	lsrs	r3, r3, #24
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b10:	0d5b      	lsrs	r3, r3, #21
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b22:	0c9b      	lsrs	r3, r3, #18
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b34:	0bdb      	lsrs	r3, r3, #15
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	7e1b      	ldrb	r3, [r3, #24]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	3302      	adds	r3, #2
 8008b58:	2201      	movs	r2, #1
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b62:	fb03 f202 	mul.w	r2, r3, r2
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	7a1b      	ldrb	r3, [r3, #8]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	2201      	movs	r2, #1
 8008b76:	409a      	lsls	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008b84:	0a52      	lsrs	r2, r2, #9
 8008b86:	fb03 f202 	mul.w	r2, r3, r2
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b94:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b96:	e031      	b.n	8008bfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d11d      	bne.n	8008bdc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba4:	041b      	lsls	r3, r3, #16
 8008ba6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bae:	0c1b      	lsrs	r3, r3, #16
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	029a      	lsls	r2, r3, #10
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	655a      	str	r2, [r3, #84]	@ 0x54
 8008bda:	e00f      	b.n	8008bfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a58      	ldr	r2, [pc, #352]	@ (8008d44 <HAL_SD_GetCardCSD+0x344>)
 8008be2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e09d      	b.n	8008d38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c00:	0b9b      	lsrs	r3, r3, #14
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c12:	09db      	lsrs	r3, r3, #7
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c34:	0fdb      	lsrs	r3, r3, #31
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c40:	0f5b      	lsrs	r3, r3, #29
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c52:	0e9b      	lsrs	r3, r3, #26
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c64:	0d9b      	lsrs	r3, r3, #22
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c76:	0d5b      	lsrs	r3, r3, #21
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ca6:	0bdb      	lsrs	r3, r3, #15
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cba:	0b9b      	lsrs	r3, r3, #14
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cce:	0b5b      	lsrs	r3, r3, #13
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ce2:	0b1b      	lsrs	r3, r3, #12
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cf6:	0a9b      	lsrs	r3, r3, #10
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d0a:	0a1b      	lsrs	r3, r3, #8
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	f003 0303 	and.w	r3, r3, #3
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d1e:	085b      	lsrs	r3, r3, #1
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	1fe00fff 	.word	0x1fe00fff

08008d48 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b094      	sub	sp, #80	@ 0x50
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d101      	bne.n	8008d68 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0a7      	b.n	8008eb8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008d68:	f107 0308 	add.w	r3, r7, #8
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fb62 	bl	8009438 <SD_SendSDStatus>
 8008d74:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d011      	beq.n	8008da0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a4f      	ldr	r2, [pc, #316]	@ (8008ec0 <HAL_SD_GetCardStatus+0x178>)
 8008d82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008d9e:	e070      	b.n	8008e82 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	099b      	lsrs	r3, r3, #6
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	0e1b      	lsrs	r3, r3, #24
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	061a      	lsls	r2, r3, #24
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008de6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008df0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	0e1b      	lsrs	r3, r3, #24
 8008df6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	0d1b      	lsrs	r3, r3, #20
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	0a9b      	lsrs	r3, r3, #10
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	0a1b      	lsrs	r3, r3, #8
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	0e1b      	lsrs	r3, r3, #24
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f002 fa7e 	bl	800b38c <SDMMC_CmdBlockLength>
 8008e90:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00d      	beq.n	8008eb4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a08      	ldr	r2, [pc, #32]	@ (8008ec0 <HAL_SD_GetCardStatus+0x178>)
 8008e9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ea4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3750      	adds	r7, #80	@ 0x50
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	1fe00fff 	.word	0x1fe00fff

08008ec4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008f1c:	b590      	push	{r4, r7, lr}
 8008f1e:	b08d      	sub	sp, #52	@ 0x34
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2203      	movs	r2, #3
 8008f30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d02e      	beq.n	8008f9a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f42:	d106      	bne.n	8008f52 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f50:	e029      	b.n	8008fa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f58:	d10a      	bne.n	8008f70 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fb64 	bl	8009628 <SD_WideBus_Enable>
 8008f60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f6e:	e01a      	b.n	8008fa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fba1 	bl	80096be <SD_WideBus_Disable>
 8008f7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f8a:	e00c      	b.n	8008fa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f98:	e005      	b.n	8008fa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f9e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8009130 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008fb4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008fbc:	e096      	b.n	80090ec <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008fbe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008fc2:	f04f 0100 	mov.w	r1, #0
 8008fc6:	f7fd fdf5 	bl	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fca:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 8083 	beq.w	80090da <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695a      	ldr	r2, [r3, #20]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4950      	ldr	r1, [pc, #320]	@ (8009134 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ff2:	fba1 1303 	umull	r1, r3, r1, r3
 8008ff6:	0e1b      	lsrs	r3, r3, #24
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d303      	bcc.n	8009004 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	e05a      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800900c:	d103      	bne.n	8009016 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e051      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800901e:	d126      	bne.n	800906e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10e      	bne.n	8009046 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	4a43      	ldr	r2, [pc, #268]	@ (8009138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d906      	bls.n	800903e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4a40      	ldr	r2, [pc, #256]	@ (8009134 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	0e5b      	lsrs	r3, r3, #25
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e03d      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	61bb      	str	r3, [r7, #24]
 8009044:	e039      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009052:	4a39      	ldr	r2, [pc, #228]	@ (8009138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d906      	bls.n	8009066 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	4a36      	ldr	r2, [pc, #216]	@ (8009134 <HAL_SD_ConfigWideBusOperation+0x218>)
 800905c:	fba2 2303 	umull	r2, r3, r2, r3
 8009060:	0e5b      	lsrs	r3, r3, #25
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	e029      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	e025      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10e      	bne.n	8009094 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	4a30      	ldr	r2, [pc, #192]	@ (800913c <HAL_SD_ConfigWideBusOperation+0x220>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d906      	bls.n	800908c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	4a2c      	ldr	r2, [pc, #176]	@ (8009134 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009082:	fba2 2303 	umull	r2, r3, r2, r3
 8009086:	0e1b      	lsrs	r3, r3, #24
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	e016      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	61bb      	str	r3, [r7, #24]
 8009092:	e012      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a0:	4a26      	ldr	r2, [pc, #152]	@ (800913c <HAL_SD_ConfigWideBusOperation+0x220>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d906      	bls.n	80090b4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4a22      	ldr	r2, [pc, #136]	@ (8009134 <HAL_SD_ConfigWideBusOperation+0x218>)
 80090aa:	fba2 2303 	umull	r2, r3, r2, r3
 80090ae:	0e1b      	lsrs	r3, r3, #24
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	e002      	b.n	80090ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681c      	ldr	r4, [r3, #0]
 80090be:	466a      	mov	r2, sp
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80090c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090d2:	4620      	mov	r0, r4
 80090d4:	f002 f87c 	bl	800b1d0 <SDMMC_Init>
 80090d8:	e008      	b.n	80090ec <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80090f4:	4618      	mov	r0, r3
 80090f6:	f002 f949 	bl	800b38c <SDMMC_CmdBlockLength>
 80090fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00c      	beq.n	800911c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a0a      	ldr	r2, [pc, #40]	@ (8009130 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009108:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	431a      	orrs	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009128:	4618      	mov	r0, r3
 800912a:	372c      	adds	r7, #44	@ 0x2c
 800912c:	46bd      	mov	sp, r7
 800912e:	bd90      	pop	{r4, r7, pc}
 8009130:	1fe00fff 	.word	0x1fe00fff
 8009134:	55e63b89 	.word	0x55e63b89
 8009138:	02faf080 	.word	0x02faf080
 800913c:	017d7840 	.word	0x017d7840

08009140 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800914c:	f107 030c 	add.w	r3, r7, #12
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa40 	bl	80095d8 <SD_SendStatus>
 8009158:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	0a5b      	lsrs	r3, r3, #9
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009176:	693b      	ldr	r3, [r7, #16]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b090      	sub	sp, #64	@ 0x40
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800918c:	f7f9 fcda 	bl	8002b44 <HAL_GetTick>
 8009190:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f002 f873 	bl	800b282 <SDMMC_GetPowerState>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d102      	bne.n	80091a8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80091a6:	e0b5      	b.n	8009314 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d02e      	beq.n	800920e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f002 fabe 	bl	800b736 <SDMMC_CmdSendCID>
 80091ba:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80091bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <SD_InitCard+0x46>
    {
      return errorstate;
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	e0a6      	b.n	8009314 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f002 f89e 	bl	800b30e <SDMMC_GetResponse>
 80091d2:	4602      	mov	r2, r0
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2104      	movs	r1, #4
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 f895 	bl	800b30e <SDMMC_GetResponse>
 80091e4:	4602      	mov	r2, r0
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2108      	movs	r1, #8
 80091f0:	4618      	mov	r0, r3
 80091f2:	f002 f88c 	bl	800b30e <SDMMC_GetResponse>
 80091f6:	4602      	mov	r2, r0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	210c      	movs	r1, #12
 8009202:	4618      	mov	r0, r3
 8009204:	f002 f883 	bl	800b30e <SDMMC_GetResponse>
 8009208:	4602      	mov	r2, r0
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009212:	2b03      	cmp	r3, #3
 8009214:	d01d      	beq.n	8009252 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009216:	e019      	b.n	800924c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f107 020a 	add.w	r2, r7, #10
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f002 fac6 	bl	800b7b4 <SDMMC_CmdSetRelAdd>
 8009228:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	e06f      	b.n	8009314 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009234:	f7f9 fc86 	bl	8002b44 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009242:	4293      	cmp	r3, r2
 8009244:	d902      	bls.n	800924c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009246:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800924a:	e063      	b.n	8009314 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800924c:	897b      	ldrh	r3, [r7, #10]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0e2      	beq.n	8009218 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	2b03      	cmp	r3, #3
 8009258:	d036      	beq.n	80092c8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800925a:	897b      	ldrh	r3, [r7, #10]
 800925c:	461a      	mov	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f002 fa80 	bl	800b774 <SDMMC_CmdSendCSD>
 8009274:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <SD_InitCard+0x100>
    {
      return errorstate;
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	e049      	b.n	8009314 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2100      	movs	r1, #0
 8009286:	4618      	mov	r0, r3
 8009288:	f002 f841 	bl	800b30e <SDMMC_GetResponse>
 800928c:	4602      	mov	r2, r0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2104      	movs	r1, #4
 8009298:	4618      	mov	r0, r3
 800929a:	f002 f838 	bl	800b30e <SDMMC_GetResponse>
 800929e:	4602      	mov	r2, r0
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2108      	movs	r1, #8
 80092aa:	4618      	mov	r0, r3
 80092ac:	f002 f82f 	bl	800b30e <SDMMC_GetResponse>
 80092b0:	4602      	mov	r2, r0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	210c      	movs	r1, #12
 80092bc:	4618      	mov	r0, r3
 80092be:	f002 f826 	bl	800b30e <SDMMC_GetResponse>
 80092c2:	4602      	mov	r2, r0
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2104      	movs	r1, #4
 80092ce:	4618      	mov	r0, r3
 80092d0:	f002 f81d 	bl	800b30e <SDMMC_GetResponse>
 80092d4:	4603      	mov	r3, r0
 80092d6:	0d1a      	lsrs	r2, r3, #20
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fb8c 	bl	8008a00 <HAL_SD_GetCardCSD>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80092f2:	e00f      	b.n	8009314 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fc:	041b      	lsls	r3, r3, #16
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f002 f92f 	bl	800b564 <SDMMC_CmdSelDesel>
 8009306:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <SD_InitCard+0x192>
  {
    return errorstate;
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	e000      	b.n	8009314 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3740      	adds	r7, #64	@ 0x40
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f002 f938 	bl	800b5aa <SDMMC_CmdGoIdleState>
 800933a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	e072      	b.n	800942c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f002 f94b 	bl	800b5e6 <SDMMC_CmdOperCond>
 8009350:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009358:	d10d      	bne.n	8009376 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4618      	mov	r0, r3
 8009366:	f002 f920 	bl	800b5aa <SDMMC_CmdGoIdleState>
 800936a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <SD_PowerON+0x60>
    {
      return errorstate;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	e05a      	b.n	800942c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009380:	2b01      	cmp	r3, #1
 8009382:	d137      	bne.n	80093f4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f002 f94b 	bl	800b626 <SDMMC_CmdAppCommand>
 8009390:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d02d      	beq.n	80093f4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009398:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800939c:	e046      	b.n	800942c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2100      	movs	r1, #0
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 f93e 	bl	800b626 <SDMMC_CmdAppCommand>
 80093aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	e03a      	b.n	800942c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	491e      	ldr	r1, [pc, #120]	@ (8009434 <SD_PowerON+0x118>)
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 f955 	bl	800b66c <SDMMC_CmdAppOperCommand>
 80093c2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80093ce:	e02d      	b.n	800942c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2100      	movs	r1, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f001 ff99 	bl	800b30e <SDMMC_GetResponse>
 80093dc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	0fdb      	lsrs	r3, r3, #31
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <SD_PowerON+0xce>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <SD_PowerON+0xd0>
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]

    count++;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d802      	bhi.n	8009404 <SD_PowerON+0xe8>
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0cc      	beq.n	800939e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800940a:	4293      	cmp	r3, r2
 800940c:	d902      	bls.n	8009414 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800940e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009412:	e00b      	b.n	800942c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	c1100000 	.word	0xc1100000

08009438 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08c      	sub	sp, #48	@ 0x30
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009442:	f7f9 fb7f 	bl	8002b44 <HAL_GetTick>
 8009446:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f001 ff5b 	bl	800b30e <SDMMC_GetResponse>
 8009458:	4603      	mov	r3, r0
 800945a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800945e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009462:	d102      	bne.n	800946a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009464:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009468:	e0b0      	b.n	80095cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2140      	movs	r1, #64	@ 0x40
 8009470:	4618      	mov	r0, r3
 8009472:	f001 ff8b 	bl	800b38c <SDMMC_CmdBlockLength>
 8009476:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d005      	beq.n	800948a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	e0a0      	b.n	80095cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009492:	041b      	lsls	r3, r3, #16
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f002 f8c5 	bl	800b626 <SDMMC_CmdAppCommand>
 800949c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d005      	beq.n	80094b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	e08d      	b.n	80095cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80094b6:	2340      	movs	r3, #64	@ 0x40
 80094b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80094ba:	2360      	movs	r3, #96	@ 0x60
 80094bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094be:	2302      	movs	r3, #2
 80094c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80094c6:	2301      	movs	r3, #1
 80094c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	4611      	mov	r1, r2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 ff2d 	bl	800b334 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f002 f9ad 	bl	800b83e <SDMMC_CmdStatusRegister>
 80094e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02b      	beq.n	8009544 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	e069      	b.n	80095cc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d013      	beq.n	800952e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009506:	2300      	movs	r3, #0
 8009508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800950a:	e00d      	b.n	8009528 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4618      	mov	r0, r3
 8009512:	f001 fe87 	bl	800b224 <SDMMC_ReadFIFO>
 8009516:	4602      	mov	r2, r0
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	601a      	str	r2, [r3, #0]
        pData++;
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	3304      	adds	r3, #4
 8009520:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	3301      	adds	r3, #1
 8009526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	2b07      	cmp	r3, #7
 800952c:	d9ee      	bls.n	800950c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800952e:	f7f9 fb09 	bl	8002b44 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d102      	bne.n	8009544 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800953e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009542:	e043      	b.n	80095cc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0d2      	beq.n	80094f8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009558:	f003 0308 	and.w	r3, r3, #8
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009560:	2308      	movs	r3, #8
 8009562:	e033      	b.n	80095cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009572:	2302      	movs	r3, #2
 8009574:	e02a      	b.n	80095cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b00      	cmp	r3, #0
 8009582:	d017      	beq.n	80095b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009584:	2320      	movs	r3, #32
 8009586:	e021      	b.n	80095cc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4618      	mov	r0, r3
 800958e:	f001 fe49 	bl	800b224 <SDMMC_ReadFIFO>
 8009592:	4602      	mov	r2, r0
 8009594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009596:	601a      	str	r2, [r3, #0]
    pData++;
 8009598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959a:	3304      	adds	r3, #4
 800959c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800959e:	f7f9 fad1 	bl	8002b44 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d102      	bne.n	80095b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80095ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095b2:	e00b      	b.n	80095cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e2      	bne.n	8009588 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a03      	ldr	r2, [pc, #12]	@ (80095d4 <SD_SendSDStatus+0x19c>)
 80095c8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3730      	adds	r7, #48	@ 0x30
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	18000f3a 	.word	0x18000f3a

080095d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80095e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095ec:	e018      	b.n	8009620 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f6:	041b      	lsls	r3, r3, #16
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	f002 f8fc 	bl	800b7f8 <SDMMC_CmdSendStatus>
 8009600:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	e009      	b.n	8009620 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2100      	movs	r1, #0
 8009612:	4618      	mov	r0, r3
 8009614:	f001 fe7b 	bl	800b30e <SDMMC_GetResponse>
 8009618:	4602      	mov	r2, r0
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fe65 	bl	800b30e <SDMMC_GetResponse>
 8009644:	4603      	mov	r3, r0
 8009646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800964a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800964e:	d102      	bne.n	8009656 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009654:	e02f      	b.n	80096b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009656:	f107 030c 	add.w	r3, r7, #12
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f879 	bl	8009754 <SD_FindSCR>
 8009662:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	e023      	b.n	80096b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01c      	beq.n	80096b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009680:	041b      	lsls	r3, r3, #16
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f001 ffce 	bl	800b626 <SDMMC_CmdAppCommand>
 800968a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	e00f      	b.n	80096b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2102      	movs	r1, #2
 800969c:	4618      	mov	r0, r3
 800969e:	f002 f805 	bl	800b6ac <SDMMC_CmdBusWidth>
 80096a2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	e003      	b.n	80096b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e001      	b.n	80096b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b086      	sub	sp, #24
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2100      	movs	r1, #0
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 fe1a 	bl	800b30e <SDMMC_GetResponse>
 80096da:	4603      	mov	r3, r0
 80096dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096e4:	d102      	bne.n	80096ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80096e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80096ea:	e02f      	b.n	800974c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80096ec:	f107 030c 	add.w	r3, r7, #12
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f82e 	bl	8009754 <SD_FindSCR>
 80096f8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	e023      	b.n	800974c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d01c      	beq.n	8009748 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009716:	041b      	lsls	r3, r3, #16
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f001 ff83 	bl	800b626 <SDMMC_CmdAppCommand>
 8009720:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	e00f      	b.n	800974c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f001 ffba 	bl	800b6ac <SDMMC_CmdBusWidth>
 8009738:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	e003      	b.n	800974c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009744:	2300      	movs	r3, #0
 8009746:	e001      	b.n	800974c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009748:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08e      	sub	sp, #56	@ 0x38
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800975e:	f7f9 f9f1 	bl	8002b44 <HAL_GetTick>
 8009762:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009768:	2300      	movs	r3, #0
 800976a:	60bb      	str	r3, [r7, #8]
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2108      	movs	r1, #8
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fe06 	bl	800b38c <SDMMC_CmdBlockLength>
 8009780:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978a:	e0ad      	b.n	80098e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f001 ff44 	bl	800b626 <SDMMC_CmdAppCommand>
 800979e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80097a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	e09e      	b.n	80098e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295
 80097ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80097b0:	2308      	movs	r3, #8
 80097b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80097b4:	2330      	movs	r3, #48	@ 0x30
 80097b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80097b8:	2302      	movs	r3, #2
 80097ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097bc:	2300      	movs	r3, #0
 80097be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f107 0210 	add.w	r2, r7, #16
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 fdb0 	bl	800b334 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 ff8a 	bl	800b6f2 <SDMMC_CmdSendSCR>
 80097de:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d027      	beq.n	8009836 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	e07e      	b.n	80098e8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d113      	bne.n	8009820 <SD_FindSCR+0xcc>
 80097f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d110      	bne.n	8009820 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f001 fd0e 	bl	800b224 <SDMMC_ReadFIFO>
 8009808:	4603      	mov	r3, r0
 800980a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	f001 fd07 	bl	800b224 <SDMMC_ReadFIFO>
 8009816:	4603      	mov	r3, r0
 8009818:	60fb      	str	r3, [r7, #12]
      index++;
 800981a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981c:	3301      	adds	r3, #1
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009820:	f7f9 f990 	bl	8002b44 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982e:	d102      	bne.n	8009836 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009830:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009834:	e058      	b.n	80098e8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800983c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0d1      	beq.n	80097ea <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2208      	movs	r2, #8
 800985a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800985c:	2308      	movs	r3, #8
 800985e:	e043      	b.n	80098e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2202      	movs	r2, #2
 8009874:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009876:	2302      	movs	r3, #2
 8009878:	e036      	b.n	80098e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2220      	movs	r2, #32
 800988e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009890:	2320      	movs	r3, #32
 8009892:	e029      	b.n	80098e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a15      	ldr	r2, [pc, #84]	@ (80098f0 <SD_FindSCR+0x19c>)
 800989a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	061a      	lsls	r2, r3, #24
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	021b      	lsls	r3, r3, #8
 80098a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	0a1b      	lsrs	r3, r3, #8
 80098ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80098b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	0e1b      	lsrs	r3, r3, #24
 80098b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80098ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098bc:	601a      	str	r2, [r3, #0]
    scr++;
 80098be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c0:	3304      	adds	r3, #4
 80098c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	061a      	lsls	r2, r3, #24
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80098da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	0e1b      	lsrs	r3, r3, #24
 80098e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3738      	adds	r7, #56	@ 0x38
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	18000f3a 	.word	0x18000f3a

080098f4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009900:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009906:	2b1f      	cmp	r3, #31
 8009908:	d936      	bls.n	8009978 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800990a:	2300      	movs	r3, #0
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e027      	b.n	8009960 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f001 fc85 	bl	800b224 <SDMMC_ReadFIFO>
 800991a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	b2da      	uxtb	r2, r3
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3301      	adds	r3, #1
 8009928:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	0a1b      	lsrs	r3, r3, #8
 800992e:	b2da      	uxtb	r2, r3
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	3301      	adds	r3, #1
 8009938:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	0c1b      	lsrs	r3, r3, #16
 800993e:	b2da      	uxtb	r2, r3
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3301      	adds	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	0e1b      	lsrs	r3, r3, #24
 800994e:	b2da      	uxtb	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	3301      	adds	r3, #1
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2b07      	cmp	r3, #7
 8009964:	d9d4      	bls.n	8009910 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009970:	f1a3 0220 	sub.w	r2, r3, #32
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8009978:	bf00      	nop
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	2b1f      	cmp	r3, #31
 8009994:	d93a      	bls.n	8009a0c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009996:	2300      	movs	r3, #0
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e02b      	b.n	80099f4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	3301      	adds	r3, #1
 80099a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	021a      	lsls	r2, r3, #8
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	3301      	adds	r3, #1
 80099b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	041a      	lsls	r2, r3, #16
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	3301      	adds	r3, #1
 80099ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	061a      	lsls	r2, r3, #24
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f107 020c 	add.w	r2, r7, #12
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 fc28 	bl	800b23e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	3301      	adds	r3, #1
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b07      	cmp	r3, #7
 80099f8:	d9d0      	bls.n	800999c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	f1a3 0220 	sub.w	r2, r3, #32
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	621a      	str	r2, [r3, #32]
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e10f      	b.n	8009c96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a87      	ldr	r2, [pc, #540]	@ (8009ca0 <HAL_SPI_Init+0x23c>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00f      	beq.n	8009aa6 <HAL_SPI_Init+0x42>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a86      	ldr	r2, [pc, #536]	@ (8009ca4 <HAL_SPI_Init+0x240>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00a      	beq.n	8009aa6 <HAL_SPI_Init+0x42>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a84      	ldr	r2, [pc, #528]	@ (8009ca8 <HAL_SPI_Init+0x244>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d005      	beq.n	8009aa6 <HAL_SPI_Init+0x42>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b0f      	cmp	r3, #15
 8009aa0:	d901      	bls.n	8009aa6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e0f7      	b.n	8009c96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fde6 	bl	800a678 <SPI_GetPacketSize>
 8009aac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a7b      	ldr	r2, [pc, #492]	@ (8009ca0 <HAL_SPI_Init+0x23c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d00c      	beq.n	8009ad2 <HAL_SPI_Init+0x6e>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a79      	ldr	r2, [pc, #484]	@ (8009ca4 <HAL_SPI_Init+0x240>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d007      	beq.n	8009ad2 <HAL_SPI_Init+0x6e>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a78      	ldr	r2, [pc, #480]	@ (8009ca8 <HAL_SPI_Init+0x244>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d002      	beq.n	8009ad2 <HAL_SPI_Init+0x6e>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b08      	cmp	r3, #8
 8009ad0:	d811      	bhi.n	8009af6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ad6:	4a72      	ldr	r2, [pc, #456]	@ (8009ca0 <HAL_SPI_Init+0x23c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d009      	beq.n	8009af0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a70      	ldr	r2, [pc, #448]	@ (8009ca4 <HAL_SPI_Init+0x240>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d004      	beq.n	8009af0 <HAL_SPI_Init+0x8c>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a6f      	ldr	r2, [pc, #444]	@ (8009ca8 <HAL_SPI_Init+0x244>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d104      	bne.n	8009afa <HAL_SPI_Init+0x96>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b10      	cmp	r3, #16
 8009af4:	d901      	bls.n	8009afa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e0cd      	b.n	8009c96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7f8 fd0e 	bl	8002530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0201 	bic.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009b36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b40:	d119      	bne.n	8009b76 <HAL_SPI_Init+0x112>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b4a:	d103      	bne.n	8009b54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d008      	beq.n	8009b66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10c      	bne.n	8009b76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b64:	d107      	bne.n	8009b76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009b74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00f      	beq.n	8009ba2 <HAL_SPI_Init+0x13e>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	2b06      	cmp	r3, #6
 8009b88:	d90b      	bls.n	8009ba2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	e007      	b.n	8009bb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	69da      	ldr	r2, [r3, #28]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc4:	ea42 0103 	orr.w	r1, r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c12:	ea42 0103 	orr.w	r1, r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d113      	bne.n	8009c52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	40013000 	.word	0x40013000
 8009ca4:	40003800 	.word	0x40003800
 8009ca8:	40003c00 	.word	0x40003c00

08009cac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	@ 0x28
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3320      	adds	r3, #32
 8009cc2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <HAL_SPI_Transmit+0x2a>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e1e1      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cde:	f7f8 ff31 	bl	8002b44 <HAL_GetTick>
 8009ce2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d007      	beq.n	8009d00 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009cfc:	7efb      	ldrb	r3, [r7, #27]
 8009cfe:	e1cc      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_SPI_Transmit+0x60>
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d107      	bne.n	8009d1c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009d18:	7efb      	ldrb	r3, [r7, #27]
 8009d1a:	e1be      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2203      	movs	r2, #3
 8009d20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	88fa      	ldrh	r2, [r7, #6]
 8009d36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	88fa      	ldrh	r2, [r7, #6]
 8009d3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009d6c:	d108      	bne.n	8009d80 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	e009      	b.n	8009d94 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009d92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	4b96      	ldr	r3, [pc, #600]	@ (8009ff4 <HAL_SPI_Transmit+0x348>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	88f9      	ldrh	r1, [r7, #6]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	6812      	ldr	r2, [r2, #0]
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dc0:	d107      	bne.n	8009dd2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b0f      	cmp	r3, #15
 8009dd8:	d947      	bls.n	8009e6a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009dda:	e03f      	b.n	8009e5c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d114      	bne.n	8009e14 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e12:	e023      	b.n	8009e5c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e14:	f7f8 fe96 	bl	8002b44 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d803      	bhi.n	8009e2c <HAL_SPI_Transmit+0x180>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2a:	d102      	bne.n	8009e32 <HAL_SPI_Transmit+0x186>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d114      	bne.n	8009e5c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fb52 	bl	800a4dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e11e      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1b9      	bne.n	8009ddc <HAL_SPI_Transmit+0x130>
 8009e68:	e0f1      	b.n	800a04e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	2b07      	cmp	r3, #7
 8009e70:	f240 80e6 	bls.w	800a040 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e74:	e05d      	b.n	8009f32 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d132      	bne.n	8009eea <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d918      	bls.n	8009ec2 <HAL_SPI_Transmit+0x216>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d014      	beq.n	8009ec2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ea8:	1d1a      	adds	r2, r3, #4
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b02      	subs	r3, #2
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ec0:	e037      	b.n	8009f32 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ec6:	881a      	ldrh	r2, [r3, #0]
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ed0:	1c9a      	adds	r2, r3, #2
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ee8:	e023      	b.n	8009f32 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eea:	f7f8 fe2b 	bl	8002b44 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d803      	bhi.n	8009f02 <HAL_SPI_Transmit+0x256>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d102      	bne.n	8009f08 <HAL_SPI_Transmit+0x25c>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d114      	bne.n	8009f32 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fae7 	bl	800a4dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e0b3      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d19b      	bne.n	8009e76 <HAL_SPI_Transmit+0x1ca>
 8009f3e:	e086      	b.n	800a04e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d154      	bne.n	8009ff8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d918      	bls.n	8009f8c <HAL_SPI_Transmit+0x2e0>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f5e:	2b40      	cmp	r3, #64	@ 0x40
 8009f60:	d914      	bls.n	8009f8c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f72:	1d1a      	adds	r2, r3, #4
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	3b04      	subs	r3, #4
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f8a:	e059      	b.n	800a040 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d917      	bls.n	8009fc8 <HAL_SPI_Transmit+0x31c>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d013      	beq.n	8009fc8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fa4:	881a      	ldrh	r2, [r3, #0]
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fae:	1c9a      	adds	r2, r3, #2
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	3b02      	subs	r3, #2
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009fc6:	e03b      	b.n	800a040 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3320      	adds	r3, #32
 8009fd2:	7812      	ldrb	r2, [r2, #0]
 8009fd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ff2:	e025      	b.n	800a040 <HAL_SPI_Transmit+0x394>
 8009ff4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ff8:	f7f8 fda4 	bl	8002b44 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d803      	bhi.n	800a010 <HAL_SPI_Transmit+0x364>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d102      	bne.n	800a016 <HAL_SPI_Transmit+0x36a>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d114      	bne.n	800a040 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fa60 	bl	800a4dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a02a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e02c      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a046:	b29b      	uxth	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f47f af79 	bne.w	8009f40 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2200      	movs	r2, #0
 800a056:	2108      	movs	r1, #8
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fadf 	bl	800a61c <SPI_WaitOnFlagUntilTimeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a06a:	f043 0220 	orr.w	r2, r3, #32
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fa31 	bl	800a4dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a098:	7efb      	ldrb	r3, [r7, #27]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop

0800a0a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08c      	sub	sp, #48	@ 0x30
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3320      	adds	r3, #32
 800a0be:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3330      	adds	r3, #48	@ 0x30
 800a0c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x32>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e1fd      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0de:	f7f8 fd31 	bl	8002b44 <HAL_GetTick>
 800a0e2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800a0e4:	887b      	ldrh	r3, [r7, #2]
 800a0e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d009      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a106:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a10a:	e1e2      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <HAL_SPI_TransmitReceive+0x7a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <HAL_SPI_TransmitReceive+0x7a>
 800a118:	887b      	ldrh	r3, [r7, #2]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d109      	bne.n	800a132 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a12c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a130:	e1cf      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2205      	movs	r2, #5
 800a136:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	887a      	ldrh	r2, [r7, #2]
 800a14c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	887a      	ldrh	r2, [r7, #2]
 800a154:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	887a      	ldrh	r2, [r7, #2]
 800a162:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	887a      	ldrh	r2, [r7, #2]
 800a16a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a188:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	4b82      	ldr	r3, [pc, #520]	@ (800a39c <HAL_SPI_TransmitReceive+0x2f8>)
 800a192:	4013      	ands	r3, r2
 800a194:	8879      	ldrh	r1, [r7, #2]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	430b      	orrs	r3, r1
 800a19c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1b6:	d107      	bne.n	800a1c8 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b0f      	cmp	r3, #15
 800a1ce:	d970      	bls.n	800a2b2 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a1d0:	e068      	b.n	800a2a4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d11a      	bne.n	800a216 <HAL_SPI_TransmitReceive+0x172>
 800a1e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d017      	beq.n	800a216 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6812      	ldr	r2, [r2, #0]
 800a1f0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1f6:	1d1a      	adds	r2, r3, #4
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a214:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	695a      	ldr	r2, [r3, #20]
 800a21c:	f248 0308 	movw	r3, #32776	@ 0x8008
 800a220:	4013      	ands	r3, r2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d01a      	beq.n	800a25c <HAL_SPI_TransmitReceive+0x1b8>
 800a226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d017      	beq.n	800a25c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a234:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a236:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a23c:	1d1a      	adds	r2, r3, #4
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount --;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a25a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a25c:	f7f8 fc72 	bl	8002b44 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a268:	429a      	cmp	r2, r3
 800a26a:	d803      	bhi.n	800a274 <HAL_SPI_TransmitReceive+0x1d0>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d102      	bne.n	800a27a <HAL_SPI_TransmitReceive+0x1d6>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	2b00      	cmp	r3, #0
 800a278:	d114      	bne.n	800a2a4 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 f92e 	bl	800a4dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a28e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e116      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a2a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d193      	bne.n	800a1d2 <HAL_SPI_TransmitReceive+0x12e>
 800a2aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d190      	bne.n	800a1d2 <HAL_SPI_TransmitReceive+0x12e>
 800a2b0:	e0e8      	b.n	800a484 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	2b07      	cmp	r3, #7
 800a2b8:	f240 80de 	bls.w	800a478 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a2bc:	e066      	b.n	800a38c <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d119      	bne.n	800a300 <HAL_SPI_TransmitReceive+0x25c>
 800a2cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d016      	beq.n	800a300 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2d6:	881a      	ldrh	r2, [r3, #0]
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2e0:	1c9a      	adds	r2, r3, #2
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d11a      	bne.n	800a344 <HAL_SPI_TransmitReceive+0x2a0>
 800a30e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	d017      	beq.n	800a344 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	8812      	ldrh	r2, [r2, #0]
 800a31c:	b292      	uxth	r2, r2
 800a31e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a324:	1c9a      	adds	r2, r3, #2
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a342:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a344:	f7f8 fbfe 	bl	8002b44 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a350:	429a      	cmp	r2, r3
 800a352:	d803      	bhi.n	800a35c <HAL_SPI_TransmitReceive+0x2b8>
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d102      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x2be>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d114      	bne.n	800a38c <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 f8ba 	bl	800a4dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a376:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e0a2      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a38c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d195      	bne.n	800a2be <HAL_SPI_TransmitReceive+0x21a>
 800a392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a394:	2b00      	cmp	r3, #0
 800a396:	d192      	bne.n	800a2be <HAL_SPI_TransmitReceive+0x21a>
 800a398:	e074      	b.n	800a484 <HAL_SPI_TransmitReceive+0x3e0>
 800a39a:	bf00      	nop
 800a39c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d11b      	bne.n	800a3e6 <HAL_SPI_TransmitReceive+0x342>
 800a3ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d018      	beq.n	800a3e6 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3320      	adds	r3, #32
 800a3be:	7812      	ldrb	r2, [r2, #0]
 800a3c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d11d      	bne.n	800a430 <HAL_SPI_TransmitReceive+0x38c>
 800a3f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01a      	beq.n	800a430 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a406:	7812      	ldrb	r2, [r2, #0]
 800a408:	b2d2      	uxtb	r2, r2
 800a40a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	b29a      	uxth	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a42e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a430:	f7f8 fb88 	bl	8002b44 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d803      	bhi.n	800a448 <HAL_SPI_TransmitReceive+0x3a4>
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d102      	bne.n	800a44e <HAL_SPI_TransmitReceive+0x3aa>
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d114      	bne.n	800a478 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 f844 	bl	800a4dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a462:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e02c      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a478:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d190      	bne.n	800a3a0 <HAL_SPI_TransmitReceive+0x2fc>
 800a47e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d18d      	bne.n	800a3a0 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48a:	2200      	movs	r2, #0
 800a48c:	2108      	movs	r1, #8
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 f8c4 	bl	800a61c <SPI_WaitOnFlagUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d007      	beq.n	800a4aa <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4a0:	f043 0220 	orr.w	r2, r3, #32
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f816 	bl	800a4dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e001      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800a4ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3728      	adds	r7, #40	@ 0x28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop

0800a4dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0208 	orr.w	r2, r2, #8
 800a4fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	699a      	ldr	r2, [r3, #24]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0210 	orr.w	r2, r2, #16
 800a50a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0201 	bic.w	r2, r2, #1
 800a51a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6919      	ldr	r1, [r3, #16]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	4b3c      	ldr	r3, [pc, #240]	@ (800a618 <SPI_CloseTransfer+0x13c>)
 800a528:	400b      	ands	r3, r1
 800a52a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689a      	ldr	r2, [r3, #8]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a53a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b04      	cmp	r3, #4
 800a546:	d014      	beq.n	800a572 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00f      	beq.n	800a572 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a558:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	699a      	ldr	r2, [r3, #24]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f042 0220 	orr.w	r2, r2, #32
 800a570:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d014      	beq.n	800a5a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00f      	beq.n	800a5a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a58e:	f043 0204 	orr.w	r2, r3, #4
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00f      	beq.n	800a5d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5b8:	f043 0201 	orr.w	r2, r3, #1
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	699a      	ldr	r2, [r3, #24]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00f      	beq.n	800a5fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5e2:	f043 0208 	orr.w	r2, r3, #8
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a60c:	bf00      	nop
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	fffffc90 	.word	0xfffffc90

0800a61c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	603b      	str	r3, [r7, #0]
 800a628:	4613      	mov	r3, r2
 800a62a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a62c:	e010      	b.n	800a650 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a62e:	f7f8 fa89 	bl	8002b44 <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d803      	bhi.n	800a646 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d102      	bne.n	800a64c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e00f      	b.n	800a670 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695a      	ldr	r2, [r3, #20]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4013      	ands	r3, r2
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	bf0c      	ite	eq
 800a660:	2301      	moveq	r3, #1
 800a662:	2300      	movne	r3, #0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d0df      	beq.n	800a62e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	3301      	adds	r3, #1
 800a688:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	3301      	adds	r3, #1
 800a690:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	3307      	adds	r3, #7
 800a696:	08db      	lsrs	r3, r3, #3
 800a698:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e049      	b.n	800a754 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7f7 ffe3 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f000 fb8b 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e04c      	b.n	800a80e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a26      	ldr	r2, [pc, #152]	@ (800a81c <HAL_TIM_Base_Start+0xc0>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d022      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a78e:	d01d      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a22      	ldr	r2, [pc, #136]	@ (800a820 <HAL_TIM_Base_Start+0xc4>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d018      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a21      	ldr	r2, [pc, #132]	@ (800a824 <HAL_TIM_Base_Start+0xc8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d013      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1f      	ldr	r2, [pc, #124]	@ (800a828 <HAL_TIM_Base_Start+0xcc>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d00e      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800a82c <HAL_TIM_Base_Start+0xd0>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d009      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1c      	ldr	r2, [pc, #112]	@ (800a830 <HAL_TIM_Base_Start+0xd4>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d004      	beq.n	800a7cc <HAL_TIM_Base_Start+0x70>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <HAL_TIM_Base_Start+0xd8>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d115      	bne.n	800a7f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689a      	ldr	r2, [r3, #8]
 800a7d2:	4b19      	ldr	r3, [pc, #100]	@ (800a838 <HAL_TIM_Base_Start+0xdc>)
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b06      	cmp	r3, #6
 800a7dc:	d015      	beq.n	800a80a <HAL_TIM_Base_Start+0xae>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7e4:	d011      	beq.n	800a80a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0201 	orr.w	r2, r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f6:	e008      	b.n	800a80a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0201 	orr.w	r2, r2, #1
 800a806:	601a      	str	r2, [r3, #0]
 800a808:	e000      	b.n	800a80c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a80a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40010000 	.word	0x40010000
 800a820:	40000400 	.word	0x40000400
 800a824:	40000800 	.word	0x40000800
 800a828:	40000c00 	.word	0x40000c00
 800a82c:	40010400 	.word	0x40010400
 800a830:	40001800 	.word	0x40001800
 800a834:	40014000 	.word	0x40014000
 800a838:	00010007 	.word	0x00010007

0800a83c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d001      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e054      	b.n	800a8fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a26      	ldr	r2, [pc, #152]	@ (800a90c <HAL_TIM_Base_Start_IT+0xd0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d022      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a87e:	d01d      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a22      	ldr	r2, [pc, #136]	@ (800a910 <HAL_TIM_Base_Start_IT+0xd4>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d018      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a21      	ldr	r2, [pc, #132]	@ (800a914 <HAL_TIM_Base_Start_IT+0xd8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d013      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a1f      	ldr	r2, [pc, #124]	@ (800a918 <HAL_TIM_Base_Start_IT+0xdc>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d00e      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a91c <HAL_TIM_Base_Start_IT+0xe0>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d009      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a920 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d004      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0x80>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1b      	ldr	r2, [pc, #108]	@ (800a924 <HAL_TIM_Base_Start_IT+0xe8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d115      	bne.n	800a8e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	4b19      	ldr	r3, [pc, #100]	@ (800a928 <HAL_TIM_Base_Start_IT+0xec>)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b06      	cmp	r3, #6
 800a8cc:	d015      	beq.n	800a8fa <HAL_TIM_Base_Start_IT+0xbe>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8d4:	d011      	beq.n	800a8fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f042 0201 	orr.w	r2, r2, #1
 800a8e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e6:	e008      	b.n	800a8fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	e000      	b.n	800a8fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	40010000 	.word	0x40010000
 800a910:	40000400 	.word	0x40000400
 800a914:	40000800 	.word	0x40000800
 800a918:	40000c00 	.word	0x40000c00
 800a91c:	40010400 	.word	0x40010400
 800a920:	40001800 	.word	0x40001800
 800a924:	40014000 	.word	0x40014000
 800a928:	00010007 	.word	0x00010007

0800a92c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68da      	ldr	r2, [r3, #12]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f022 0201 	bic.w	r2, r2, #1
 800a942:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6a1a      	ldr	r2, [r3, #32]
 800a94a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a94e:	4013      	ands	r3, r2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10f      	bne.n	800a974 <HAL_TIM_Base_Stop_IT+0x48>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6a1a      	ldr	r2, [r3, #32]
 800a95a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a95e:	4013      	ands	r3, r2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <HAL_TIM_Base_Stop_IT+0x48>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0201 	bic.w	r2, r2, #1
 800a972:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b082      	sub	sp, #8
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d122      	bne.n	800a9e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d11b      	bne.n	800a9e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f06f 0202 	mvn.w	r2, #2
 800a9b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f9fd 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800a9d2:	e005      	b.n	800a9e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f9ef 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa00 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b04      	cmp	r3, #4
 800a9f2:	d122      	bne.n	800aa3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d11b      	bne.n	800aa3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f06f 0204 	mvn.w	r2, #4
 800aa0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f9d3 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800aa26:	e005      	b.n	800aa34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f9c5 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f9d6 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f003 0308 	and.w	r3, r3, #8
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d122      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b08      	cmp	r3, #8
 800aa54:	d11b      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f06f 0208 	mvn.w	r2, #8
 800aa5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2204      	movs	r2, #4
 800aa64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	f003 0303 	and.w	r3, r3, #3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f9a9 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800aa7a:	e005      	b.n	800aa88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f99b 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f9ac 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f003 0310 	and.w	r3, r3, #16
 800aa98:	2b10      	cmp	r3, #16
 800aa9a:	d122      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	2b10      	cmp	r3, #16
 800aaa8:	d11b      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f06f 0210 	mvn.w	r2, #16
 800aab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2208      	movs	r2, #8
 800aab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f97f 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800aace:	e005      	b.n	800aadc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f971 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f982 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d10e      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d107      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f06f 0201 	mvn.w	r2, #1
 800ab06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7f6 fd41 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab18:	2b80      	cmp	r3, #128	@ 0x80
 800ab1a:	d10e      	bne.n	800ab3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab26:	2b80      	cmp	r3, #128	@ 0x80
 800ab28:	d107      	bne.n	800ab3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ab32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fb37 	bl	800b1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab48:	d10e      	bne.n	800ab68 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab54:	2b80      	cmp	r3, #128	@ 0x80
 800ab56:	d107      	bne.n	800ab68 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fb2a 	bl	800b1bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab72:	2b40      	cmp	r3, #64	@ 0x40
 800ab74:	d10e      	bne.n	800ab94 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab80:	2b40      	cmp	r3, #64	@ 0x40
 800ab82:	d107      	bne.n	800ab94 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f930 	bl	800adf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	f003 0320 	and.w	r3, r3, #32
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d10e      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f003 0320 	and.w	r3, r3, #32
 800abac:	2b20      	cmp	r3, #32
 800abae:	d107      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f06f 0220 	mvn.w	r2, #32
 800abb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 faea 	bl	800b194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <HAL_TIM_ConfigClockSource+0x1c>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e0dc      	b.n	800ad9e <HAL_TIM_ConfigClockSource+0x1d6>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	4b6a      	ldr	r3, [pc, #424]	@ (800ada8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a64      	ldr	r2, [pc, #400]	@ (800adac <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	f000 80a9 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac20:	4a62      	ldr	r2, [pc, #392]	@ (800adac <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	f200 80ae 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac28:	4a61      	ldr	r2, [pc, #388]	@ (800adb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	f000 80a1 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac30:	4a5f      	ldr	r2, [pc, #380]	@ (800adb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	f200 80a6 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac38:	4a5e      	ldr	r2, [pc, #376]	@ (800adb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	f000 8099 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac40:	4a5c      	ldr	r2, [pc, #368]	@ (800adb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	f200 809e 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ac4c:	f000 8091 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ac54:	f200 8096 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac5c:	f000 8089 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac64:	f200 808e 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac6c:	d03e      	beq.n	800acec <HAL_TIM_ConfigClockSource+0x124>
 800ac6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac72:	f200 8087 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac7a:	f000 8086 	beq.w	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
 800ac7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac82:	d87f      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac84:	2b70      	cmp	r3, #112	@ 0x70
 800ac86:	d01a      	beq.n	800acbe <HAL_TIM_ConfigClockSource+0xf6>
 800ac88:	2b70      	cmp	r3, #112	@ 0x70
 800ac8a:	d87b      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac8c:	2b60      	cmp	r3, #96	@ 0x60
 800ac8e:	d050      	beq.n	800ad32 <HAL_TIM_ConfigClockSource+0x16a>
 800ac90:	2b60      	cmp	r3, #96	@ 0x60
 800ac92:	d877      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac94:	2b50      	cmp	r3, #80	@ 0x50
 800ac96:	d03c      	beq.n	800ad12 <HAL_TIM_ConfigClockSource+0x14a>
 800ac98:	2b50      	cmp	r3, #80	@ 0x50
 800ac9a:	d873      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac9c:	2b40      	cmp	r3, #64	@ 0x40
 800ac9e:	d058      	beq.n	800ad52 <HAL_TIM_ConfigClockSource+0x18a>
 800aca0:	2b40      	cmp	r3, #64	@ 0x40
 800aca2:	d86f      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800aca4:	2b30      	cmp	r3, #48	@ 0x30
 800aca6:	d064      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800aca8:	2b30      	cmp	r3, #48	@ 0x30
 800acaa:	d86b      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800acac:	2b20      	cmp	r3, #32
 800acae:	d060      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	d867      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d05c      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d05a      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800acbc:	e062      	b.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800acce:	f000 f9b3 	bl	800b038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ace0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	609a      	str	r2, [r3, #8]
      break;
 800acea:	e04f      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800acfc:	f000 f99c 	bl	800b038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad0e:	609a      	str	r2, [r3, #8]
      break;
 800ad10:	e03c      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f000 f90c 	bl	800af3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2150      	movs	r1, #80	@ 0x50
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f966 	bl	800affc <TIM_ITRx_SetConfig>
      break;
 800ad30:	e02c      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f000 f92b 	bl	800af9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2160      	movs	r1, #96	@ 0x60
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 f956 	bl	800affc <TIM_ITRx_SetConfig>
      break;
 800ad50:	e01c      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f000 f8ec 	bl	800af3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2140      	movs	r1, #64	@ 0x40
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 f946 	bl	800affc <TIM_ITRx_SetConfig>
      break;
 800ad70:	e00c      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	f000 f93d 	bl	800affc <TIM_ITRx_SetConfig>
      break;
 800ad82:	e003      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	73fb      	strb	r3, [r7, #15]
      break;
 800ad88:	e000      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	ffceff88 	.word	0xffceff88
 800adac:	00100040 	.word	0x00100040
 800adb0:	00100030 	.word	0x00100030
 800adb4:	00100020 	.word	0x00100020

0800adb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a40      	ldr	r2, [pc, #256]	@ (800af1c <TIM_Base_SetConfig+0x114>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a3d      	ldr	r2, [pc, #244]	@ (800af20 <TIM_Base_SetConfig+0x118>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a3c      	ldr	r2, [pc, #240]	@ (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a3b      	ldr	r2, [pc, #236]	@ (800af28 <TIM_Base_SetConfig+0x120>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a3a      	ldr	r2, [pc, #232]	@ (800af2c <TIM_Base_SetConfig+0x124>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d108      	bne.n	800ae5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a2f      	ldr	r2, [pc, #188]	@ (800af1c <TIM_Base_SetConfig+0x114>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d01f      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae68:	d01b      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2c      	ldr	r2, [pc, #176]	@ (800af20 <TIM_Base_SetConfig+0x118>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d017      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2b      	ldr	r2, [pc, #172]	@ (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d013      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a2a      	ldr	r2, [pc, #168]	@ (800af28 <TIM_Base_SetConfig+0x120>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00f      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a29      	ldr	r2, [pc, #164]	@ (800af2c <TIM_Base_SetConfig+0x124>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00b      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a28      	ldr	r2, [pc, #160]	@ (800af30 <TIM_Base_SetConfig+0x128>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d007      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a27      	ldr	r2, [pc, #156]	@ (800af34 <TIM_Base_SetConfig+0x12c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d003      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a26      	ldr	r2, [pc, #152]	@ (800af38 <TIM_Base_SetConfig+0x130>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d108      	bne.n	800aeb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a10      	ldr	r2, [pc, #64]	@ (800af1c <TIM_Base_SetConfig+0x114>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00f      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a12      	ldr	r2, [pc, #72]	@ (800af2c <TIM_Base_SetConfig+0x124>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00b      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a11      	ldr	r2, [pc, #68]	@ (800af30 <TIM_Base_SetConfig+0x128>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d007      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a10      	ldr	r2, [pc, #64]	@ (800af34 <TIM_Base_SetConfig+0x12c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a0f      	ldr	r2, [pc, #60]	@ (800af38 <TIM_Base_SetConfig+0x130>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d103      	bne.n	800af08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	615a      	str	r2, [r3, #20]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	40010000 	.word	0x40010000
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00
 800af2c:	40010400 	.word	0x40010400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800

0800af3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	f023 0201 	bic.w	r2, r3, #1
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f023 030a 	bic.w	r3, r3, #10
 800af78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	621a      	str	r2, [r3, #32]
}
 800af8e:	bf00      	nop
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b087      	sub	sp, #28
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f023 0210 	bic.w	r2, r3, #16
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800afc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	031b      	lsls	r3, r3, #12
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	4313      	orrs	r3, r2
 800afce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800afd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	621a      	str	r2, [r3, #32]
}
 800afee:	bf00      	nop
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
	...

0800affc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <TIM_ITRx_SetConfig+0x38>)
 800b010:	4013      	ands	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4313      	orrs	r3, r2
 800b01a:	f043 0307 	orr.w	r3, r3, #7
 800b01e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	609a      	str	r2, [r3, #8]
}
 800b026:	bf00      	nop
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	ffcfff8f 	.word	0xffcfff8f

0800b038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	021a      	lsls	r2, r3, #8
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	431a      	orrs	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4313      	orrs	r3, r2
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	4313      	orrs	r3, r2
 800b064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	609a      	str	r2, [r3, #8]
}
 800b06c:	bf00      	nop
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d101      	bne.n	800b090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b08c:	2302      	movs	r3, #2
 800b08e:	e06d      	b.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2202      	movs	r2, #2
 800b09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a30      	ldr	r2, [pc, #192]	@ (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d004      	beq.n	800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a2f      	ldr	r2, [pc, #188]	@ (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d108      	bne.n	800b0d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b0ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a20      	ldr	r2, [pc, #128]	@ (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d022      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b102:	d01d      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a1d      	ldr	r2, [pc, #116]	@ (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d018      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a1c      	ldr	r2, [pc, #112]	@ (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d013      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a1a      	ldr	r2, [pc, #104]	@ (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d00e      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a15      	ldr	r2, [pc, #84]	@ (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d009      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a16      	ldr	r2, [pc, #88]	@ (800b18c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d004      	beq.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a15      	ldr	r2, [pc, #84]	@ (800b190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d10c      	bne.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	4313      	orrs	r3, r2
 800b150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	40010000 	.word	0x40010000
 800b17c:	40010400 	.word	0x40010400
 800b180:	40000400 	.word	0x40000400
 800b184:	40000800 	.word	0x40000800
 800b188:	40000c00 	.word	0x40000c00
 800b18c:	40001800 	.word	0x40001800
 800b190:	40014000 	.word	0x40014000

0800b194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	b480      	push	{r7}
 800b1d4:	b085      	sub	sp, #20
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	f107 001c 	add.w	r0, r7, #28
 800b1de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b1e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b1ea:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b1ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b1f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b1f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	4b07      	ldr	r3, [pc, #28]	@ (800b220 <SDMMC_Init+0x50>)
 800b204:	4013      	ands	r3, r2
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	b004      	add	sp, #16
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	ffc02c00 	.word	0xffc02c00

0800b224 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f043 0203 	orr.w	r2, r3, #3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0303 	and.w	r3, r3, #3
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b2c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b2ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	4b06      	ldr	r3, [pc, #24]	@ (800b2f0 <SDMMC_SendCommand+0x50>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	fffee0c0 	.word	0xfffee0c0

0800b2f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	b2db      	uxtb	r3, r3
}
 800b302:	4618      	mov	r0, r3
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b30e:	b480      	push	{r7}
 800b310:	b085      	sub	sp, #20
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3314      	adds	r3, #20
 800b31c:	461a      	mov	r2, r3
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	4413      	add	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b35a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b360:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b366:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	431a      	orrs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0

}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b39a:	2310      	movs	r3, #16
 800b39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b39e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff ff73 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3be:	2110      	movs	r1, #16
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fa5f 	bl	800b884 <SDMMC_GetCmdResp1>
 800b3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b088      	sub	sp, #32
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3e0:	2311      	movs	r3, #17
 800b3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff ff50 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b404:	2111      	movs	r1, #17
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fa3c 	bl	800b884 <SDMMC_GetCmdResp1>
 800b40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40e:	69fb      	ldr	r3, [r7, #28]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3720      	adds	r7, #32
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b426:	2312      	movs	r3, #18
 800b428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b42a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b430:	2300      	movs	r3, #0
 800b432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b438:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b43a:	f107 0308 	add.w	r3, r7, #8
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff ff2d 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b44a:	2112      	movs	r1, #18
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa19 	bl	800b884 <SDMMC_GetCmdResp1>
 800b452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b454:	69fb      	ldr	r3, [r7, #28]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b088      	sub	sp, #32
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b46c:	2318      	movs	r3, #24
 800b46e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b47a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b47e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b480:	f107 0308 	add.w	r3, r7, #8
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff ff0a 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b48c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b490:	2118      	movs	r1, #24
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f9f6 	bl	800b884 <SDMMC_GetCmdResp1>
 800b498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b49a:	69fb      	ldr	r3, [r7, #28]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4b2:	2319      	movs	r3, #25
 800b4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4c6:	f107 0308 	add.w	r3, r7, #8
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff fee7 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4d6:	2119      	movs	r1, #25
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f9d3 	bl	800b884 <SDMMC_GetCmdResp1>
 800b4de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4e0:	69fb      	ldr	r3, [r7, #28]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3720      	adds	r7, #32
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4f8:	230c      	movs	r3, #12
 800b4fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b502:	2300      	movs	r3, #0
 800b504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b50a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b524:	f107 0308 	add.w	r3, r7, #8
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff feb8 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b530:	4a0b      	ldr	r2, [pc, #44]	@ (800b560 <SDMMC_CmdStopTransfer+0x74>)
 800b532:	210c      	movs	r1, #12
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f9a5 	bl	800b884 <SDMMC_GetCmdResp1>
 800b53a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca8:	f107 0308 	add.w	r3, r7, #8
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff feb8 	bl	800aa24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800acb4:	4a0b      	ldr	r2, [pc, #44]	@ (800ace4 <SDMMC_CmdStopTransfer+0x74>)
 800acb6:	210c      	movs	r1, #12
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f9a5 	bl	800b008 <SDMMC_GetCmdResp1>
 800acbe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b54e:	d101      	bne.n	800b554 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b550:	2300      	movs	r3, #0
 800b552:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b554:	69fb      	ldr	r3, [r7, #28]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	05f5e100 	.word	0x05f5e100

0800b564 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b572:	2307      	movs	r3, #7
 800b574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b57a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b57c:	2300      	movs	r3, #0
 800b57e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b586:	f107 0308 	add.w	r3, r7, #8
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff fe87 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b592:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b596:	2107      	movs	r1, #7
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f973 	bl	800b884 <SDMMC_GetCmdResp1>
 800b59e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3720      	adds	r7, #32
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b088      	sub	sp, #32
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c8:	f107 0308 	add.w	r3, r7, #8
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff fe66 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fb97 	bl	800bd08 <SDMMC_GetCmdError>
 800b5da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b088      	sub	sp, #32
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5ee:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b5f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5fe:	2300      	movs	r3, #0
 800b600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff fe46 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fb29 	bl	800bc6c <SDMMC_GetCmdResp7>
 800b61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b61c:	69fb      	ldr	r3, [r7, #28]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b088      	sub	sp, #32
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b634:	2337      	movs	r3, #55	@ 0x37
 800b636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b648:	f107 0308 	add.w	r3, r7, #8
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff fe26 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b654:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b658:	2137      	movs	r1, #55	@ 0x37
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f912 	bl	800b884 <SDMMC_GetCmdResp1>
 800b660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b662:	69fb      	ldr	r3, [r7, #28]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3720      	adds	r7, #32
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b088      	sub	sp, #32
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b67a:	2329      	movs	r3, #41	@ 0x29
 800b67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b67e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b684:	2300      	movs	r3, #0
 800b686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b68c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b68e:	f107 0308 	add.w	r3, r7, #8
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff fe03 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa2e 	bl	800bafc <SDMMC_GetCmdResp3>
 800b6a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6a2:	69fb      	ldr	r3, [r7, #28]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3720      	adds	r7, #32
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6ba:	2306      	movs	r3, #6
 800b6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ce:	f107 0308 	add.w	r3, r7, #8
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff fde3 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6de:	2106      	movs	r1, #6
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f8cf 	bl	800b884 <SDMMC_GetCmdResp1>
 800b6e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3720      	adds	r7, #32
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b088      	sub	sp, #32
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6fe:	2333      	movs	r3, #51	@ 0x33
 800b700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b708:	2300      	movs	r3, #0
 800b70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b70c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b710:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b712:	f107 0308 	add.w	r3, r7, #8
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff fdc1 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b71e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b722:	2133      	movs	r1, #51	@ 0x33
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f8ad 	bl	800b884 <SDMMC_GetCmdResp1>
 800b72a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b72c:	69fb      	ldr	r3, [r7, #28]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b742:	2302      	movs	r3, #2
 800b744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b746:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b74a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b754:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b756:	f107 0308 	add.w	r3, r7, #8
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff fd9f 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f980 	bl	800ba68 <SDMMC_GetCmdResp2>
 800b768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b76a:	69fb      	ldr	r3, [r7, #28]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3720      	adds	r7, #32
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b088      	sub	sp, #32
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b782:	2309      	movs	r3, #9
 800b784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b786:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b78a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b794:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b796:	f107 0308 	add.w	r3, r7, #8
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff fd7f 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f960 	bl	800ba68 <SDMMC_GetCmdResp2>
 800b7a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d6:	f107 0308 	add.w	r3, r7, #8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff fd5f 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	2103      	movs	r1, #3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f9c8 	bl	800bb7c <SDMMC_GetCmdResp6>
 800b7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ee:	69fb      	ldr	r3, [r7, #28]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3720      	adds	r7, #32
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b806:	230d      	movs	r3, #13
 800b808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b80a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b80e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b810:	2300      	movs	r3, #0
 800b812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b818:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b81a:	f107 0308 	add.w	r3, r7, #8
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7ff fd3d 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b82a:	210d      	movs	r1, #13
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f829 	bl	800b884 <SDMMC_GetCmdResp1>
 800b832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b834:	69fb      	ldr	r3, [r7, #28]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b088      	sub	sp, #32
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b84a:	230d      	movs	r3, #13
 800b84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b84e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff fd1b 	bl	800b2a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b86a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b86e:	210d      	movs	r1, #13
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f807 	bl	800b884 <SDMMC_GetCmdResp1>
 800b876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b878:	69fb      	ldr	r3, [r7, #28]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	460b      	mov	r3, r1
 800b88e:	607a      	str	r2, [r7, #4]
 800b890:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b892:	4b70      	ldr	r3, [pc, #448]	@ (800ba54 <SDMMC_GetCmdResp1+0x1d0>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a70      	ldr	r2, [pc, #448]	@ (800ba58 <SDMMC_GetCmdResp1+0x1d4>)
 800b898:	fba2 2303 	umull	r2, r3, r2, r3
 800b89c:	0a5a      	lsrs	r2, r3, #9
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	1e5a      	subs	r2, r3, #1
 800b8aa:	61fa      	str	r2, [r7, #28]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8b4:	e0c9      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ba:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	4b67      	ldr	r3, [pc, #412]	@ (800ba5c <SDMMC_GetCmdResp1+0x1d8>)
 800b8c0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0ef      	beq.n	800b8a6 <SDMMC_GetCmdResp1+0x22>
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1ea      	bne.n	800b8a6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d004      	beq.n	800b8e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2204      	movs	r2, #4
 800b8e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	e0b1      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d004      	beq.n	800b8fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e0a6      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4a58      	ldr	r2, [pc, #352]	@ (800ba60 <SDMMC_GetCmdResp1+0x1dc>)
 800b900:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff fcf6 	bl	800b2f4 <SDMMC_GetCommandResponse>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	4293      	cmp	r3, r2
 800b910:	d001      	beq.n	800b916 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b912:	2301      	movs	r3, #1
 800b914:	e099      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b916:	2100      	movs	r1, #0
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f7ff fcf8 	bl	800b30e <SDMMC_GetResponse>
 800b91e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	4b50      	ldr	r3, [pc, #320]	@ (800ba64 <SDMMC_GetCmdResp1+0x1e0>)
 800b924:	4013      	ands	r3, r2
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e08d      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	da02      	bge.n	800b93a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b934:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b938:	e087      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b944:	2340      	movs	r3, #64	@ 0x40
 800b946:	e080      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b952:	2380      	movs	r3, #128	@ 0x80
 800b954:	e079      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b964:	e071      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b974:	e069      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b984:	e061      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b990:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b994:	e059      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9a4:	e051      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9b4:	e049      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b9c4:	e041      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9d4:	e039      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b9e4:	e031      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b9f4:	e029      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba04:	e021      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ba14:	e019      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ba24:	e011      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba30:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ba34:	e009      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f003 0308 	and.w	r3, r3, #8
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba40:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ba44:	e001      	b.n	800ba4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3720      	adds	r7, #32
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	24000000 	.word	0x24000000
 800ba58:	10624dd3 	.word	0x10624dd3
 800ba5c:	00200045 	.word	0x00200045
 800ba60:	002000c5 	.word	0x002000c5
 800ba64:	fdffe008 	.word	0xfdffe008

0800ba68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba70:	4b1f      	ldr	r3, [pc, #124]	@ (800baf0 <SDMMC_GetCmdResp2+0x88>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a1f      	ldr	r2, [pc, #124]	@ (800baf4 <SDMMC_GetCmdResp2+0x8c>)
 800ba76:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7a:	0a5b      	lsrs	r3, r3, #9
 800ba7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba80:	fb02 f303 	mul.w	r3, r2, r3
 800ba84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	1e5a      	subs	r2, r3, #1
 800ba8a:	60fa      	str	r2, [r7, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba94:	e026      	b.n	800bae4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0ef      	beq.n	800ba86 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1ea      	bne.n	800ba86 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d004      	beq.n	800bac6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2204      	movs	r2, #4
 800bac0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bac2:	2304      	movs	r3, #4
 800bac4:	e00e      	b.n	800bae4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d004      	beq.n	800badc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bad8:	2301      	movs	r3, #1
 800bada:	e003      	b.n	800bae4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a06      	ldr	r2, [pc, #24]	@ (800baf8 <SDMMC_GetCmdResp2+0x90>)
 800bae0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	24000000 	.word	0x24000000
 800baf4:	10624dd3 	.word	0x10624dd3
 800baf8:	002000c5 	.word	0x002000c5

0800bafc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb04:	4b1a      	ldr	r3, [pc, #104]	@ (800bb70 <SDMMC_GetCmdResp3+0x74>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a1a      	ldr	r2, [pc, #104]	@ (800bb74 <SDMMC_GetCmdResp3+0x78>)
 800bb0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb0e:	0a5b      	lsrs	r3, r3, #9
 800bb10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb14:	fb02 f303 	mul.w	r3, r2, r3
 800bb18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	1e5a      	subs	r2, r3, #1
 800bb1e:	60fa      	str	r2, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d102      	bne.n	800bb2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb28:	e01b      	b.n	800bb62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0ef      	beq.n	800bb1a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1ea      	bne.n	800bb1a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2204      	movs	r2, #4
 800bb54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb56:	2304      	movs	r3, #4
 800bb58:	e003      	b.n	800bb62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a06      	ldr	r2, [pc, #24]	@ (800bb78 <SDMMC_GetCmdResp3+0x7c>)
 800bb5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	24000000 	.word	0x24000000
 800bb74:	10624dd3 	.word	0x10624dd3
 800bb78:	002000c5 	.word	0x002000c5

0800bb7c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	460b      	mov	r3, r1
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb8a:	4b35      	ldr	r3, [pc, #212]	@ (800bc60 <SDMMC_GetCmdResp6+0xe4>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a35      	ldr	r2, [pc, #212]	@ (800bc64 <SDMMC_GetCmdResp6+0xe8>)
 800bb90:	fba2 2303 	umull	r2, r3, r2, r3
 800bb94:	0a5b      	lsrs	r3, r3, #9
 800bb96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb9a:	fb02 f303 	mul.w	r3, r2, r3
 800bb9e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	1e5a      	subs	r2, r3, #1
 800bba4:	61fa      	str	r2, [r7, #28]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d102      	bne.n	800bbb0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbaa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbae:	e052      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbb4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d0ef      	beq.n	800bba0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1ea      	bne.n	800bba0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d004      	beq.n	800bbe0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2204      	movs	r2, #4
 800bbda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbdc:	2304      	movs	r3, #4
 800bbde:	e03a      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e02f      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff fb7c 	bl	800b2f4 <SDMMC_GetCommandResponse>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	461a      	mov	r2, r3
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d001      	beq.n	800bc0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e025      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	4a16      	ldr	r2, [pc, #88]	@ (800bc68 <SDMMC_GetCmdResp6+0xec>)
 800bc0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc10:	2100      	movs	r1, #0
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7ff fb7b 	bl	800b30e <SDMMC_GetResponse>
 800bc18:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	0c1b      	lsrs	r3, r3, #16
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e011      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bc40:	e009      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc50:	e001      	b.n	800bc56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3720      	adds	r7, #32
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	24000000 	.word	0x24000000
 800bc64:	10624dd3 	.word	0x10624dd3
 800bc68:	002000c5 	.word	0x002000c5

0800bc6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc74:	4b22      	ldr	r3, [pc, #136]	@ (800bd00 <SDMMC_GetCmdResp7+0x94>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a22      	ldr	r2, [pc, #136]	@ (800bd04 <SDMMC_GetCmdResp7+0x98>)
 800bc7a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7e:	0a5b      	lsrs	r3, r3, #9
 800bc80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc84:	fb02 f303 	mul.w	r3, r2, r3
 800bc88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	1e5a      	subs	r2, r3, #1
 800bc8e:	60fa      	str	r2, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d102      	bne.n	800bc9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc98:	e02c      	b.n	800bcf4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0ef      	beq.n	800bc8a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1ea      	bne.n	800bc8a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcc6:	2304      	movs	r3, #4
 800bcc8:	e014      	b.n	800bcf4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d004      	beq.n	800bce0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e009      	b.n	800bcf4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2240      	movs	r2, #64	@ 0x40
 800bcf0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcf2:	2300      	movs	r3, #0

}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	24000000 	.word	0x24000000
 800bd04:	10624dd3 	.word	0x10624dd3

0800bd08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd10:	4b11      	ldr	r3, [pc, #68]	@ (800bd58 <SDMMC_GetCmdError+0x50>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a11      	ldr	r2, [pc, #68]	@ (800bd5c <SDMMC_GetCmdError+0x54>)
 800bd16:	fba2 2303 	umull	r2, r3, r2, r3
 800bd1a:	0a5b      	lsrs	r3, r3, #9
 800bd1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd20:	fb02 f303 	mul.w	r3, r2, r3
 800bd24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	1e5a      	subs	r2, r3, #1
 800bd2a:	60fa      	str	r2, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd34:	e009      	b.n	800bd4a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0f1      	beq.n	800bd26 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a06      	ldr	r2, [pc, #24]	@ (800bd60 <SDMMC_GetCmdError+0x58>)
 800bd46:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	24000000 	.word	0x24000000
 800bd5c:	10624dd3 	.word	0x10624dd3
 800bd60:	002000c5 	.word	0x002000c5

0800bd64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd68:	4904      	ldr	r1, [pc, #16]	@ (800bd7c <MX_FATFS_Init+0x18>)
 800bd6a:	4805      	ldr	r0, [pc, #20]	@ (800bd80 <MX_FATFS_Init+0x1c>)
 800bd6c:	f002 fc04 	bl	800e578 <FATFS_LinkDriver>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	4b03      	ldr	r3, [pc, #12]	@ (800bd84 <MX_FATFS_Init+0x20>)
 800bd76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd78:	bf00      	nop
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	2400436c 	.word	0x2400436c
 800bd80:	08010f54 	.word	0x08010f54
 800bd84:	24004368 	.word	0x24004368

0800bd88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bda2:	f000 f885 	bl	800beb0 <BSP_SD_IsDetected>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d001      	beq.n	800bdb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bdac:	2302      	movs	r3, #2
 800bdae:	e012      	b.n	800bdd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bdb0:	480b      	ldr	r0, [pc, #44]	@ (800bde0 <BSP_SD_Init+0x48>)
 800bdb2:	f7fc f9f3 	bl	800819c <HAL_SD_Init>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bdba:	79fb      	ldrb	r3, [r7, #7]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d109      	bne.n	800bdd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bdc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bdc4:	4806      	ldr	r0, [pc, #24]	@ (800bde0 <BSP_SD_Init+0x48>)
 800bdc6:	f7fd f8a9 	bl	8008f1c <HAL_SD_ConfigWideBusOperation>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	24000358 	.word	0x24000358

0800bde4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	68f9      	ldr	r1, [r7, #12]
 800bdfa:	4806      	ldr	r0, [pc, #24]	@ (800be14 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bdfc:	f7fc faee 	bl	80083dc <HAL_SD_ReadBlocks_DMA>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	24000358 	.word	0x24000358

0800be18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	68f9      	ldr	r1, [r7, #12]
 800be2e:	4806      	ldr	r0, [pc, #24]	@ (800be48 <BSP_SD_WriteBlocks_DMA+0x30>)
 800be30:	f7fc fb7c 	bl	800852c <HAL_SD_WriteBlocks_DMA>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	24000358 	.word	0x24000358

0800be4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be50:	4805      	ldr	r0, [pc, #20]	@ (800be68 <BSP_SD_GetCardState+0x1c>)
 800be52:	f7fd f975 	bl	8009140 <HAL_SD_GetCardState>
 800be56:	4603      	mov	r3, r0
 800be58:	2b04      	cmp	r3, #4
 800be5a:	bf14      	ite	ne
 800be5c:	2301      	movne	r3, #1
 800be5e:	2300      	moveq	r3, #0
 800be60:	b2db      	uxtb	r3, r3
}
 800be62:	4618      	mov	r0, r3
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	24000358 	.word	0x24000358

0800be6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800be74:	6879      	ldr	r1, [r7, #4]
 800be76:	4803      	ldr	r0, [pc, #12]	@ (800be84 <BSP_SD_GetCardInfo+0x18>)
 800be78:	f7fd f824 	bl	8008ec4 <HAL_SD_GetCardInfo>
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	24000358 	.word	0x24000358

0800be88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800be90:	f000 f984 	bl	800c19c <BSP_SD_WriteCpltCallback>
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bea4:	f000 f986 	bl	800c1b4 <BSP_SD_ReadCpltCallback>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800beb6:	2301      	movs	r3, #1
 800beb8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	b2db      	uxtb	r3, r3
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bed2:	f7f6 fe37 	bl	8002b44 <HAL_GetTick>
 800bed6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bed8:	e006      	b.n	800bee8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800beda:	f7ff ffb7 	bl	800be4c <BSP_SD_GetCardState>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	e009      	b.n	800befc <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bee8:	f7f6 fe2c 	bl	8002b44 <HAL_GetTick>
 800beec:	4602      	mov	r2, r0
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d8f0      	bhi.n	800beda <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bf0e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf3c <SD_CheckStatus+0x38>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bf14:	f7ff ff9a 	bl	800be4c <BSP_SD_GetCardState>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d107      	bne.n	800bf2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bf1e:	4b07      	ldr	r3, [pc, #28]	@ (800bf3c <SD_CheckStatus+0x38>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	f023 0301 	bic.w	r3, r3, #1
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	4b04      	ldr	r3, [pc, #16]	@ (800bf3c <SD_CheckStatus+0x38>)
 800bf2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf2e:	4b03      	ldr	r3, [pc, #12]	@ (800bf3c <SD_CheckStatus+0x38>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	b2db      	uxtb	r3, r3
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	24000031 	.word	0x24000031

0800bf40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	4603      	mov	r3, r0
 800bf48:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf4a:	f7ff ff25 	bl	800bd98 <BSP_SD_Init>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d107      	bne.n	800bf64 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bf54:	79fb      	ldrb	r3, [r7, #7]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff ffd4 	bl	800bf04 <SD_CheckStatus>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	4b04      	ldr	r3, [pc, #16]	@ (800bf74 <SD_initialize+0x34>)
 800bf62:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf64:	4b03      	ldr	r3, [pc, #12]	@ (800bf74 <SD_initialize+0x34>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	b2db      	uxtb	r3, r3
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	24000031 	.word	0x24000031

0800bf78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf82:	79fb      	ldrb	r3, [r7, #7]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff ffbd 	bl	800bf04 <SD_CheckStatus>
 800bf8a:	4603      	mov	r3, r0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60b9      	str	r1, [r7, #8]
 800bf9c:	607a      	str	r2, [r7, #4]
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfa8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bfac:	f7ff ff8d 	bl	800beca <SD_CheckStatusWithTimeout>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da01      	bge.n	800bfba <SD_read+0x26>
  {
    return res;
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	e03b      	b.n	800c032 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	68b8      	ldr	r0, [r7, #8]
 800bfc0:	f7ff ff10 	bl	800bde4 <BSP_SD_ReadBlocks_DMA>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d132      	bne.n	800c030 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bfca:	4b1c      	ldr	r3, [pc, #112]	@ (800c03c <SD_read+0xa8>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bfd0:	f7f6 fdb8 	bl	8002b44 <HAL_GetTick>
 800bfd4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bfd6:	bf00      	nop
 800bfd8:	4b18      	ldr	r3, [pc, #96]	@ (800c03c <SD_read+0xa8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d108      	bne.n	800bff2 <SD_read+0x5e>
 800bfe0:	f7f6 fdb0 	bl	8002b44 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d9f2      	bls.n	800bfd8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bff2:	4b12      	ldr	r3, [pc, #72]	@ (800c03c <SD_read+0xa8>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d102      	bne.n	800c000 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	75fb      	strb	r3, [r7, #23]
 800bffe:	e017      	b.n	800c030 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c000:	4b0e      	ldr	r3, [pc, #56]	@ (800c03c <SD_read+0xa8>)
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c006:	f7f6 fd9d 	bl	8002b44 <HAL_GetTick>
 800c00a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c00c:	e007      	b.n	800c01e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c00e:	f7ff ff1d 	bl	800be4c <BSP_SD_GetCardState>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <SD_read+0x8a>
          {
            res = RES_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c01c:	e008      	b.n	800c030 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c01e:	f7f6 fd91 	bl	8002b44 <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d9ee      	bls.n	800c00e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c030:	7dfb      	ldrb	r3, [r7, #23]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	240047d4 	.word	0x240047d4

0800c040 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	607a      	str	r2, [r7, #4]
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c054:	4b24      	ldr	r3, [pc, #144]	@ (800c0e8 <SD_write+0xa8>)
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c05a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c05e:	f7ff ff34 	bl	800beca <SD_CheckStatusWithTimeout>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	da01      	bge.n	800c06c <SD_write+0x2c>
  {
    return res;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
 800c06a:	e038      	b.n	800c0de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	68b8      	ldr	r0, [r7, #8]
 800c072:	f7ff fed1 	bl	800be18 <BSP_SD_WriteBlocks_DMA>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d12f      	bne.n	800c0dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c07c:	f7f6 fd62 	bl	8002b44 <HAL_GetTick>
 800c080:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c082:	bf00      	nop
 800c084:	4b18      	ldr	r3, [pc, #96]	@ (800c0e8 <SD_write+0xa8>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d108      	bne.n	800c09e <SD_write+0x5e>
 800c08c:	f7f6 fd5a 	bl	8002b44 <HAL_GetTick>
 800c090:	4602      	mov	r2, r0
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d9f2      	bls.n	800c084 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c09e:	4b12      	ldr	r3, [pc, #72]	@ (800c0e8 <SD_write+0xa8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	75fb      	strb	r3, [r7, #23]
 800c0aa:	e017      	b.n	800c0dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e8 <SD_write+0xa8>)
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c0b2:	f7f6 fd47 	bl	8002b44 <HAL_GetTick>
 800c0b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c0b8:	e007      	b.n	800c0ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0ba:	f7ff fec7 	bl	800be4c <BSP_SD_GetCardState>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <SD_write+0x8a>
          {
            res = RES_OK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	75fb      	strb	r3, [r7, #23]
            break;
 800c0c8:	e008      	b.n	800c0dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c0ca:	f7f6 fd3b 	bl	8002b44 <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d9ee      	bls.n	800c0ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	240047d0 	.word	0x240047d0

0800c0ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08c      	sub	sp, #48	@ 0x30
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	603a      	str	r2, [r7, #0]
 800c0f6:	71fb      	strb	r3, [r7, #7]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c102:	4b25      	ldr	r3, [pc, #148]	@ (800c198 <SD_ioctl+0xac>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <SD_ioctl+0x28>
 800c110:	2303      	movs	r3, #3
 800c112:	e03c      	b.n	800c18e <SD_ioctl+0xa2>

  switch (cmd)
 800c114:	79bb      	ldrb	r3, [r7, #6]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d834      	bhi.n	800c184 <SD_ioctl+0x98>
 800c11a:	a201      	add	r2, pc, #4	@ (adr r2, 800c120 <SD_ioctl+0x34>)
 800c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c139 	.word	0x0800c139
 800c128:	0800c151 	.word	0x0800c151
 800c12c:	0800c16b 	.word	0x0800c16b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c136:	e028      	b.n	800c18a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c138:	f107 0308 	add.w	r3, r7, #8
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fe95 	bl	800be6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c142:	6a3a      	ldr	r2, [r7, #32]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c14e:	e01c      	b.n	800c18a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c150:	f107 0308 	add.w	r3, r7, #8
 800c154:	4618      	mov	r0, r3
 800c156:	f7ff fe89 	bl	800be6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c168:	e00f      	b.n	800c18a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c16a:	f107 0308 	add.w	r3, r7, #8
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff fe7c 	bl	800be6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c176:	0a5a      	lsrs	r2, r3, #9
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c182:	e002      	b.n	800c18a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c184:	2304      	movs	r3, #4
 800c186:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c18a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3730      	adds	r7, #48	@ 0x30
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	24000031 	.word	0x24000031

0800c19c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c1a0:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <BSP_SD_WriteCpltCallback+0x14>)
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	240047d0 	.word	0x240047d0

0800c1b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c1b8:	4b03      	ldr	r3, [pc, #12]	@ (800c1c8 <BSP_SD_ReadCpltCallback+0x14>)
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	601a      	str	r2, [r3, #0]
}
 800c1be:	bf00      	nop
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr
 800c1c8:	240047d4 	.word	0x240047d4

0800c1cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c1d6:	79fb      	ldrb	r3, [r7, #7]
 800c1d8:	4a08      	ldr	r2, [pc, #32]	@ (800c1fc <disk_status+0x30>)
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	79fa      	ldrb	r2, [r7, #7]
 800c1e4:	4905      	ldr	r1, [pc, #20]	@ (800c1fc <disk_status+0x30>)
 800c1e6:	440a      	add	r2, r1
 800c1e8:	7a12      	ldrb	r2, [r2, #8]
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	4798      	blx	r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	24004800 	.word	0x24004800

0800c200 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	4a0d      	ldr	r2, [pc, #52]	@ (800c248 <disk_initialize+0x48>)
 800c212:	5cd3      	ldrb	r3, [r2, r3]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d111      	bne.n	800c23c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	4a0b      	ldr	r2, [pc, #44]	@ (800c248 <disk_initialize+0x48>)
 800c21c:	2101      	movs	r1, #1
 800c21e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	4a09      	ldr	r2, [pc, #36]	@ (800c248 <disk_initialize+0x48>)
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	79fa      	ldrb	r2, [r7, #7]
 800c22e:	4906      	ldr	r1, [pc, #24]	@ (800c248 <disk_initialize+0x48>)
 800c230:	440a      	add	r2, r1
 800c232:	7a12      	ldrb	r2, [r2, #8]
 800c234:	4610      	mov	r0, r2
 800c236:	4798      	blx	r3
 800c238:	4603      	mov	r3, r0
 800c23a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	24004800 	.word	0x24004800

0800c24c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c24c:	b590      	push	{r4, r7, lr}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	607a      	str	r2, [r7, #4]
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	4a0a      	ldr	r2, [pc, #40]	@ (800c288 <disk_read+0x3c>)
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	689c      	ldr	r4, [r3, #8]
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	4a07      	ldr	r2, [pc, #28]	@ (800c288 <disk_read+0x3c>)
 800c26c:	4413      	add	r3, r2
 800c26e:	7a18      	ldrb	r0, [r3, #8]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	68b9      	ldr	r1, [r7, #8]
 800c276:	47a0      	blx	r4
 800c278:	4603      	mov	r3, r0
 800c27a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	bd90      	pop	{r4, r7, pc}
 800c286:	bf00      	nop
 800c288:	24004800 	.word	0x24004800

0800c28c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c28c:	b590      	push	{r4, r7, lr}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	60b9      	str	r1, [r7, #8]
 800c294:	607a      	str	r2, [r7, #4]
 800c296:	603b      	str	r3, [r7, #0]
 800c298:	4603      	mov	r3, r0
 800c29a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	4a0a      	ldr	r2, [pc, #40]	@ (800c2c8 <disk_write+0x3c>)
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4413      	add	r3, r2
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	68dc      	ldr	r4, [r3, #12]
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	4a07      	ldr	r2, [pc, #28]	@ (800c2c8 <disk_write+0x3c>)
 800c2ac:	4413      	add	r3, r2
 800c2ae:	7a18      	ldrb	r0, [r3, #8]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	47a0      	blx	r4
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd90      	pop	{r4, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	24004800 	.word	0x24004800

0800c2cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	603a      	str	r2, [r7, #0]
 800c2d6:	71fb      	strb	r3, [r7, #7]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	4a09      	ldr	r2, [pc, #36]	@ (800c304 <disk_ioctl+0x38>)
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	79fa      	ldrb	r2, [r7, #7]
 800c2ea:	4906      	ldr	r1, [pc, #24]	@ (800c304 <disk_ioctl+0x38>)
 800c2ec:	440a      	add	r2, r1
 800c2ee:	7a10      	ldrb	r0, [r2, #8]
 800c2f0:	79b9      	ldrb	r1, [r7, #6]
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4798      	blx	r3
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	24004800 	.word	0x24004800

0800c308 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3301      	adds	r3, #1
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c318:	89fb      	ldrh	r3, [r7, #14]
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	b21a      	sxth	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	b21b      	sxth	r3, r3
 800c324:	4313      	orrs	r3, r2
 800c326:	b21b      	sxth	r3, r3
 800c328:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c32a:	89fb      	ldrh	r3, [r7, #14]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3303      	adds	r3, #3
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	021b      	lsls	r3, r3, #8
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	3202      	adds	r2, #2
 800c350:	7812      	ldrb	r2, [r2, #0]
 800c352:	4313      	orrs	r3, r2
 800c354:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	021b      	lsls	r3, r3, #8
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	3201      	adds	r2, #1
 800c35e:	7812      	ldrb	r2, [r2, #0]
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	021b      	lsls	r3, r3, #8
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c370:	68fb      	ldr	r3, [r7, #12]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c37e:	b480      	push	{r7}
 800c380:	b083      	sub	sp, #12
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	887a      	ldrh	r2, [r7, #2]
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	701a      	strb	r2, [r3, #0]
 800c396:	887b      	ldrh	r3, [r7, #2]
 800c398:	0a1b      	lsrs	r3, r3, #8
 800c39a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	607a      	str	r2, [r7, #4]
 800c3a2:	887a      	ldrh	r2, [r7, #2]
 800c3a4:	b2d2      	uxtb	r2, r2
 800c3a6:	701a      	strb	r2, [r3, #0]
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	b2d2      	uxtb	r2, r2
 800c3c8:	701a      	strb	r2, [r3, #0]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	0a1b      	lsrs	r3, r3, #8
 800c3ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	607a      	str	r2, [r7, #4]
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	b2d2      	uxtb	r2, r2
 800c3da:	701a      	strb	r2, [r3, #0]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	0a1b      	lsrs	r3, r3, #8
 800c3e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	0a1b      	lsrs	r3, r3, #8
 800c3f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	607a      	str	r2, [r7, #4]
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	b2d2      	uxtb	r2, r2
 800c3fe:	701a      	strb	r2, [r3, #0]
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c40c:	b480      	push	{r7}
 800c40e:	b087      	sub	sp, #28
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00d      	beq.n	800c442 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	1c53      	adds	r3, r2, #1
 800c42a:	613b      	str	r3, [r7, #16]
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	1c59      	adds	r1, r3, #1
 800c430:	6179      	str	r1, [r7, #20]
 800c432:	7812      	ldrb	r2, [r2, #0]
 800c434:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3b01      	subs	r3, #1
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1f1      	bne.n	800c426 <mem_cpy+0x1a>
	}
}
 800c442:	bf00      	nop
 800c444:	371c      	adds	r7, #28
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c44e:	b480      	push	{r7}
 800c450:	b087      	sub	sp, #28
 800c452:	af00      	add	r7, sp, #0
 800c454:	60f8      	str	r0, [r7, #12]
 800c456:	60b9      	str	r1, [r7, #8]
 800c458:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	617a      	str	r2, [r7, #20]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	b2d2      	uxtb	r2, r2
 800c468:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	607b      	str	r3, [r7, #4]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1f3      	bne.n	800c45e <mem_set+0x10>
}
 800c476:	bf00      	nop
 800c478:	bf00      	nop
 800c47a:	371c      	adds	r7, #28
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c484:	b480      	push	{r7}
 800c486:	b089      	sub	sp, #36	@ 0x24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	61fb      	str	r3, [r7, #28]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c498:	2300      	movs	r3, #0
 800c49a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	61fa      	str	r2, [r7, #28]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	61ba      	str	r2, [r7, #24]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	1acb      	subs	r3, r1, r3
 800c4b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	607b      	str	r3, [r7, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <mem_cmp+0x40>
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0eb      	beq.n	800c49c <mem_cmp+0x18>

	return r;
 800c4c4:	697b      	ldr	r3, [r7, #20]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3724      	adds	r7, #36	@ 0x24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4dc:	e002      	b.n	800c4e4 <chk_chr+0x12>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	607b      	str	r3, [r7, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d005      	beq.n	800c4f8 <chk_chr+0x26>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d1f2      	bne.n	800c4de <chk_chr+0xc>
	return *str;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c512:	2300      	movs	r3, #0
 800c514:	60bb      	str	r3, [r7, #8]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	e029      	b.n	800c570 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c51c:	4a27      	ldr	r2, [pc, #156]	@ (800c5bc <chk_lock+0xb4>)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	011b      	lsls	r3, r3, #4
 800c522:	4413      	add	r3, r2
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d01d      	beq.n	800c566 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c52a:	4a24      	ldr	r2, [pc, #144]	@ (800c5bc <chk_lock+0xb4>)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	4413      	add	r3, r2
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d116      	bne.n	800c56a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c53c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5bc <chk_lock+0xb4>)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	011b      	lsls	r3, r3, #4
 800c542:	4413      	add	r3, r2
 800c544:	3304      	adds	r3, #4
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d10c      	bne.n	800c56a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c550:	4a1a      	ldr	r2, [pc, #104]	@ (800c5bc <chk_lock+0xb4>)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	4413      	add	r3, r2
 800c558:	3308      	adds	r3, #8
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c560:	429a      	cmp	r2, r3
 800c562:	d102      	bne.n	800c56a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c564:	e007      	b.n	800c576 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c566:	2301      	movs	r3, #1
 800c568:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3301      	adds	r3, #1
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d9d2      	bls.n	800c51c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d109      	bne.n	800c590 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d102      	bne.n	800c588 <chk_lock+0x80>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d101      	bne.n	800c58c <chk_lock+0x84>
 800c588:	2300      	movs	r3, #0
 800c58a:	e010      	b.n	800c5ae <chk_lock+0xa6>
 800c58c:	2312      	movs	r3, #18
 800c58e:	e00e      	b.n	800c5ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d108      	bne.n	800c5a8 <chk_lock+0xa0>
 800c596:	4a09      	ldr	r2, [pc, #36]	@ (800c5bc <chk_lock+0xb4>)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	011b      	lsls	r3, r3, #4
 800c59c:	4413      	add	r3, r2
 800c59e:	330c      	adds	r3, #12
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5a6:	d101      	bne.n	800c5ac <chk_lock+0xa4>
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	e000      	b.n	800c5ae <chk_lock+0xa6>
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	240047e0 	.word	0x240047e0

0800c5c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	607b      	str	r3, [r7, #4]
 800c5ca:	e002      	b.n	800c5d2 <enq_lock+0x12>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	607b      	str	r3, [r7, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d806      	bhi.n	800c5e6 <enq_lock+0x26>
 800c5d8:	4a09      	ldr	r2, [pc, #36]	@ (800c600 <enq_lock+0x40>)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	011b      	lsls	r3, r3, #4
 800c5de:	4413      	add	r3, r2
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1f2      	bne.n	800c5cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	240047e0 	.word	0x240047e0

0800c604 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	e01f      	b.n	800c654 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c614:	4a41      	ldr	r2, [pc, #260]	@ (800c71c <inc_lock+0x118>)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	011b      	lsls	r3, r3, #4
 800c61a:	4413      	add	r3, r2
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d113      	bne.n	800c64e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c626:	4a3d      	ldr	r2, [pc, #244]	@ (800c71c <inc_lock+0x118>)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	4413      	add	r3, r2
 800c62e:	3304      	adds	r3, #4
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c636:	429a      	cmp	r2, r3
 800c638:	d109      	bne.n	800c64e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c63a:	4a38      	ldr	r2, [pc, #224]	@ (800c71c <inc_lock+0x118>)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	011b      	lsls	r3, r3, #4
 800c640:	4413      	add	r3, r2
 800c642:	3308      	adds	r3, #8
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d006      	beq.n	800c65c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3301      	adds	r3, #1
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b01      	cmp	r3, #1
 800c658:	d9dc      	bls.n	800c614 <inc_lock+0x10>
 800c65a:	e000      	b.n	800c65e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c65c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d132      	bne.n	800c6ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c664:	2300      	movs	r3, #0
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	e002      	b.n	800c670 <inc_lock+0x6c>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3301      	adds	r3, #1
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d806      	bhi.n	800c684 <inc_lock+0x80>
 800c676:	4a29      	ldr	r2, [pc, #164]	@ (800c71c <inc_lock+0x118>)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	011b      	lsls	r3, r3, #4
 800c67c:	4413      	add	r3, r2
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1f2      	bne.n	800c66a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d101      	bne.n	800c68e <inc_lock+0x8a>
 800c68a:	2300      	movs	r3, #0
 800c68c:	e040      	b.n	800c710 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	4922      	ldr	r1, [pc, #136]	@ (800c71c <inc_lock+0x118>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	440b      	add	r3, r1
 800c69a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	689a      	ldr	r2, [r3, #8]
 800c6a0:	491e      	ldr	r1, [pc, #120]	@ (800c71c <inc_lock+0x118>)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	011b      	lsls	r3, r3, #4
 800c6a6:	440b      	add	r3, r1
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	695a      	ldr	r2, [r3, #20]
 800c6b0:	491a      	ldr	r1, [pc, #104]	@ (800c71c <inc_lock+0x118>)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	011b      	lsls	r3, r3, #4
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c6bc:	4a17      	ldr	r2, [pc, #92]	@ (800c71c <inc_lock+0x118>)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	4413      	add	r3, r2
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d009      	beq.n	800c6e4 <inc_lock+0xe0>
 800c6d0:	4a12      	ldr	r2, [pc, #72]	@ (800c71c <inc_lock+0x118>)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	4413      	add	r3, r2
 800c6d8:	330c      	adds	r3, #12
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <inc_lock+0xe0>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	e015      	b.n	800c710 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d108      	bne.n	800c6fc <inc_lock+0xf8>
 800c6ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c71c <inc_lock+0x118>)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	011b      	lsls	r3, r3, #4
 800c6f0:	4413      	add	r3, r2
 800c6f2:	330c      	adds	r3, #12
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	e001      	b.n	800c700 <inc_lock+0xfc>
 800c6fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c700:	4906      	ldr	r1, [pc, #24]	@ (800c71c <inc_lock+0x118>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	440b      	add	r3, r1
 800c708:	330c      	adds	r3, #12
 800c70a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3301      	adds	r3, #1
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	240047e0 	.word	0x240047e0

0800c720 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c728:	2300      	movs	r3, #0
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	e010      	b.n	800c750 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c72e:	4a0d      	ldr	r2, [pc, #52]	@ (800c764 <clear_lock+0x44>)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	011b      	lsls	r3, r3, #4
 800c734:	4413      	add	r3, r2
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d105      	bne.n	800c74a <clear_lock+0x2a>
 800c73e:	4a09      	ldr	r2, [pc, #36]	@ (800c764 <clear_lock+0x44>)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	011b      	lsls	r3, r3, #4
 800c744:	4413      	add	r3, r2
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d9eb      	bls.n	800c72e <clear_lock+0xe>
	}
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	240047e0 	.word	0x240047e0

0800c768 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	78db      	ldrb	r3, [r3, #3]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d034      	beq.n	800c7e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c780:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7858      	ldrb	r0, [r3, #1]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c78c:	2301      	movs	r3, #1
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	f7ff fd7c 	bl	800c28c <disk_write>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	73fb      	strb	r3, [r7, #15]
 800c79e:	e022      	b.n	800c7e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	1ad2      	subs	r2, r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d217      	bcs.n	800c7e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	789b      	ldrb	r3, [r3, #2]
 800c7ba:	613b      	str	r3, [r7, #16]
 800c7bc:	e010      	b.n	800c7e0 <sync_window+0x78>
					wsect += fs->fsize;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7858      	ldrb	r0, [r3, #1]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	f7ff fd59 	bl	800c28c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d8eb      	bhi.n	800c7be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	429a      	cmp	r2, r3
 800c806:	d01b      	beq.n	800c840 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff ffad 	bl	800c768 <sync_window>
 800c80e:	4603      	mov	r3, r0
 800c810:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d113      	bne.n	800c840 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	7858      	ldrb	r0, [r3, #1]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c822:	2301      	movs	r3, #1
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	f7ff fd11 	bl	800c24c <disk_read>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d004      	beq.n	800c83a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c836:	2301      	movs	r3, #1
 800c838:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c840:	7bfb      	ldrb	r3, [r7, #15]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
	...

0800c84c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ff87 	bl	800c768 <sync_window>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d158      	bne.n	800c916 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d148      	bne.n	800c8fe <sync_fs+0xb2>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	791b      	ldrb	r3, [r3, #4]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d144      	bne.n	800c8fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	3330      	adds	r3, #48	@ 0x30
 800c878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c87c:	2100      	movs	r1, #0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7ff fde5 	bl	800c44e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	3330      	adds	r3, #48	@ 0x30
 800c888:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c88c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fd74 	bl	800c37e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3330      	adds	r3, #48	@ 0x30
 800c89a:	4921      	ldr	r1, [pc, #132]	@ (800c920 <sync_fs+0xd4>)
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff fd89 	bl	800c3b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3330      	adds	r3, #48	@ 0x30
 800c8a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c8aa:	491e      	ldr	r1, [pc, #120]	@ (800c924 <sync_fs+0xd8>)
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7ff fd81 	bl	800c3b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3330      	adds	r3, #48	@ 0x30
 800c8b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	f7ff fd77 	bl	800c3b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	3330      	adds	r3, #48	@ 0x30
 800c8ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f7ff fd6d 	bl	800c3b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7858      	ldrb	r0, [r3, #1]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	f7ff fcca 	bl	800c28c <disk_write>
			fs->fsi_flag = 0;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	785b      	ldrb	r3, [r3, #1]
 800c902:	2200      	movs	r2, #0
 800c904:	2100      	movs	r1, #0
 800c906:	4618      	mov	r0, r3
 800c908:	f7ff fce0 	bl	800c2cc <disk_ioctl>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <sync_fs+0xca>
 800c912:	2301      	movs	r3, #1
 800c914:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c916:	7bfb      	ldrb	r3, [r7, #15]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	41615252 	.word	0x41615252
 800c924:	61417272 	.word	0x61417272

0800c928 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	3b02      	subs	r3, #2
 800c936:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	3b02      	subs	r3, #2
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	429a      	cmp	r2, r3
 800c942:	d301      	bcc.n	800c948 <clust2sect+0x20>
 800c944:	2300      	movs	r3, #0
 800c946:	e008      	b.n	800c95a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	895b      	ldrh	r3, [r3, #10]
 800c94c:	461a      	mov	r2, r3
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	fb03 f202 	mul.w	r2, r3, r2
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c958:	4413      	add	r3, r2
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b086      	sub	sp, #24
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d904      	bls.n	800c986 <get_fat+0x20>
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	683a      	ldr	r2, [r7, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d302      	bcc.n	800c98c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c986:	2301      	movs	r3, #1
 800c988:	617b      	str	r3, [r7, #20]
 800c98a:	e08e      	b.n	800caaa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c98c:	f04f 33ff 	mov.w	r3, #4294967295
 800c990:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b03      	cmp	r3, #3
 800c998:	d061      	beq.n	800ca5e <get_fat+0xf8>
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	dc7b      	bgt.n	800ca96 <get_fat+0x130>
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d002      	beq.n	800c9a8 <get_fat+0x42>
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d041      	beq.n	800ca2a <get_fat+0xc4>
 800c9a6:	e076      	b.n	800ca96 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	085b      	lsrs	r3, r3, #1
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	6a1a      	ldr	r2, [r3, #32]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	0a5b      	lsrs	r3, r3, #9
 800c9be:	4413      	add	r3, r2
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	6938      	ldr	r0, [r7, #16]
 800c9c4:	f7ff ff14 	bl	800c7f0 <move_window>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d166      	bne.n	800ca9c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	1c5a      	adds	r2, r3, #1
 800c9d2:	60fa      	str	r2, [r7, #12]
 800c9d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d8:	693a      	ldr	r2, [r7, #16]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	6a1a      	ldr	r2, [r3, #32]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	0a5b      	lsrs	r3, r3, #9
 800c9ea:	4413      	add	r3, r2
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6938      	ldr	r0, [r7, #16]
 800c9f0:	f7ff fefe 	bl	800c7f0 <move_window>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d152      	bne.n	800caa0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	4413      	add	r3, r2
 800ca04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca08:	021b      	lsls	r3, r3, #8
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <get_fat+0xba>
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	091b      	lsrs	r3, r3, #4
 800ca1e:	e002      	b.n	800ca26 <get_fat+0xc0>
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca26:	617b      	str	r3, [r7, #20]
			break;
 800ca28:	e03f      	b.n	800caaa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	6a1a      	ldr	r2, [r3, #32]
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	0a1b      	lsrs	r3, r3, #8
 800ca32:	4413      	add	r3, r2
 800ca34:	4619      	mov	r1, r3
 800ca36:	6938      	ldr	r0, [r7, #16]
 800ca38:	f7ff feda 	bl	800c7f0 <move_window>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d130      	bne.n	800caa4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ca50:	4413      	add	r3, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff fc58 	bl	800c308 <ld_word>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	617b      	str	r3, [r7, #20]
			break;
 800ca5c:	e025      	b.n	800caaa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	6a1a      	ldr	r2, [r3, #32]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	09db      	lsrs	r3, r3, #7
 800ca66:	4413      	add	r3, r2
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6938      	ldr	r0, [r7, #16]
 800ca6c:	f7ff fec0 	bl	800c7f0 <move_window>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d118      	bne.n	800caa8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ca84:	4413      	add	r3, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff fc56 	bl	800c338 <ld_dword>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ca92:	617b      	str	r3, [r7, #20]
			break;
 800ca94:	e009      	b.n	800caaa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ca96:	2301      	movs	r3, #1
 800ca98:	617b      	str	r3, [r7, #20]
 800ca9a:	e006      	b.n	800caaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca9c:	bf00      	nop
 800ca9e:	e004      	b.n	800caaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caa0:	bf00      	nop
 800caa2:	e002      	b.n	800caaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800caa4:	bf00      	nop
 800caa6:	e000      	b.n	800caaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800caa8:	bf00      	nop
		}
	}

	return val;
 800caaa:	697b      	ldr	r3, [r7, #20]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cab4:	b590      	push	{r4, r7, lr}
 800cab6:	b089      	sub	sp, #36	@ 0x24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cac0:	2302      	movs	r3, #2
 800cac2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	f240 80d9 	bls.w	800cc7e <put_fat+0x1ca>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	f080 80d3 	bcs.w	800cc7e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b03      	cmp	r3, #3
 800cade:	f000 8096 	beq.w	800cc0e <put_fat+0x15a>
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	f300 80cb 	bgt.w	800cc7e <put_fat+0x1ca>
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d002      	beq.n	800caf2 <put_fat+0x3e>
 800caec:	2b02      	cmp	r3, #2
 800caee:	d06e      	beq.n	800cbce <put_fat+0x11a>
 800caf0:	e0c5      	b.n	800cc7e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	61bb      	str	r3, [r7, #24]
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	085b      	lsrs	r3, r3, #1
 800cafa:	69ba      	ldr	r2, [r7, #24]
 800cafc:	4413      	add	r3, r2
 800cafe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6a1a      	ldr	r2, [r3, #32]
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	0a5b      	lsrs	r3, r3, #9
 800cb08:	4413      	add	r3, r2
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fe6f 	bl	800c7f0 <move_window>
 800cb12:	4603      	mov	r3, r0
 800cb14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb16:	7ffb      	ldrb	r3, [r7, #31]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f040 80a9 	bne.w	800cc70 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	1c59      	adds	r1, r3, #1
 800cb28:	61b9      	str	r1, [r7, #24]
 800cb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2e:	4413      	add	r3, r2
 800cb30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00d      	beq.n	800cb58 <put_fat+0xa4>
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	b25b      	sxtb	r3, r3
 800cb42:	f003 030f 	and.w	r3, r3, #15
 800cb46:	b25a      	sxtb	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	b25b      	sxtb	r3, r3
 800cb50:	4313      	orrs	r3, r2
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	e001      	b.n	800cb5c <put_fat+0xa8>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a1a      	ldr	r2, [r3, #32]
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	0a5b      	lsrs	r3, r3, #9
 800cb6e:	4413      	add	r3, r2
 800cb70:	4619      	mov	r1, r3
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f7ff fe3c 	bl	800c7f0 <move_window>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb7c:	7ffb      	ldrb	r3, [r7, #31]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d178      	bne.n	800cc74 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8e:	4413      	add	r3, r2
 800cb90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <put_fat+0xf0>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	091b      	lsrs	r3, r3, #4
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	e00e      	b.n	800cbc2 <put_fat+0x10e>
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	b25b      	sxtb	r3, r3
 800cbaa:	f023 030f 	bic.w	r3, r3, #15
 800cbae:	b25a      	sxtb	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	0a1b      	lsrs	r3, r3, #8
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	f003 030f 	and.w	r3, r3, #15
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b25b      	sxtb	r3, r3
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	70da      	strb	r2, [r3, #3]
			break;
 800cbcc:	e057      	b.n	800cc7e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a1a      	ldr	r2, [r3, #32]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	0a1b      	lsrs	r3, r3, #8
 800cbd6:	4413      	add	r3, r2
 800cbd8:	4619      	mov	r1, r3
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f7ff fe08 	bl	800c7f0 <move_window>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbe4:	7ffb      	ldrb	r3, [r7, #31]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d146      	bne.n	800cc78 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cbf8:	4413      	add	r3, r2
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	b292      	uxth	r2, r2
 800cbfe:	4611      	mov	r1, r2
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fbbc 	bl	800c37e <st_word>
			fs->wflag = 1;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	70da      	strb	r2, [r3, #3]
			break;
 800cc0c:	e037      	b.n	800cc7e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6a1a      	ldr	r2, [r3, #32]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	09db      	lsrs	r3, r3, #7
 800cc16:	4413      	add	r3, r2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff fde8 	bl	800c7f0 <move_window>
 800cc20:	4603      	mov	r3, r0
 800cc22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc24:	7ffb      	ldrb	r3, [r7, #31]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d128      	bne.n	800cc7c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc3e:	4413      	add	r3, r2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff fb79 	bl	800c338 <ld_dword>
 800cc46:	4603      	mov	r3, r0
 800cc48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cc4c:	4323      	orrs	r3, r4
 800cc4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc5e:	4413      	add	r3, r2
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fba6 	bl	800c3b4 <st_dword>
			fs->wflag = 1;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	70da      	strb	r2, [r3, #3]
			break;
 800cc6e:	e006      	b.n	800cc7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc70:	bf00      	nop
 800cc72:	e004      	b.n	800cc7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc74:	bf00      	nop
 800cc76:	e002      	b.n	800cc7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc78:	bf00      	nop
 800cc7a:	e000      	b.n	800cc7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc7c:	bf00      	nop
		}
	}
	return res;
 800cc7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3724      	adds	r7, #36	@ 0x24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd90      	pop	{r4, r7, pc}

0800cc88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d904      	bls.n	800ccae <remove_chain+0x26>
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d301      	bcc.n	800ccb2 <remove_chain+0x2a>
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e04b      	b.n	800cd4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00c      	beq.n	800ccd2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ccb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	69b8      	ldr	r0, [r7, #24]
 800ccc0:	f7ff fef8 	bl	800cab4 <put_fat>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ccc8:	7ffb      	ldrb	r3, [r7, #31]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <remove_chain+0x4a>
 800ccce:	7ffb      	ldrb	r3, [r7, #31]
 800ccd0:	e03b      	b.n	800cd4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ccd2:	68b9      	ldr	r1, [r7, #8]
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff fe46 	bl	800c966 <get_fat>
 800ccda:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d031      	beq.n	800cd46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d101      	bne.n	800ccec <remove_chain+0x64>
 800cce8:	2302      	movs	r3, #2
 800ccea:	e02e      	b.n	800cd4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf2:	d101      	bne.n	800ccf8 <remove_chain+0x70>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e028      	b.n	800cd4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	69b8      	ldr	r0, [r7, #24]
 800ccfe:	f7ff fed9 	bl	800cab4 <put_fat>
 800cd02:	4603      	mov	r3, r0
 800cd04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd06:	7ffb      	ldrb	r3, [r7, #31]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <remove_chain+0x88>
 800cd0c:	7ffb      	ldrb	r3, [r7, #31]
 800cd0e:	e01c      	b.n	800cd4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	691a      	ldr	r2, [r3, #16]
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	3b02      	subs	r3, #2
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d20b      	bcs.n	800cd36 <remove_chain+0xae>
			fs->free_clst++;
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	791b      	ldrb	r3, [r3, #4]
 800cd2c:	f043 0301 	orr.w	r3, r3, #1
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d3c6      	bcc.n	800ccd2 <remove_chain+0x4a>
 800cd44:	e000      	b.n	800cd48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cd46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b088      	sub	sp, #32
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10d      	bne.n	800cd84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d004      	beq.n	800cd7e <create_chain+0x2c>
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	69ba      	ldr	r2, [r7, #24]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d31b      	bcc.n	800cdb6 <create_chain+0x64>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	61bb      	str	r3, [r7, #24]
 800cd82:	e018      	b.n	800cdb6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fded 	bl	800c966 <get_fat>
 800cd8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d801      	bhi.n	800cd98 <create_chain+0x46>
 800cd94:	2301      	movs	r3, #1
 800cd96:	e070      	b.n	800ce7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9e:	d101      	bne.n	800cda4 <create_chain+0x52>
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	e06a      	b.n	800ce7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d201      	bcs.n	800cdb2 <create_chain+0x60>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	e063      	b.n	800ce7a <create_chain+0x128>
		scl = clst;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	69fa      	ldr	r2, [r7, #28]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d307      	bcc.n	800cdda <create_chain+0x88>
				ncl = 2;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cdce:	69fa      	ldr	r2, [r7, #28]
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d901      	bls.n	800cdda <create_chain+0x88>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	e04f      	b.n	800ce7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cdda:	69f9      	ldr	r1, [r7, #28]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff fdc2 	bl	800c966 <get_fat>
 800cde2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d003      	beq.n	800cdf8 <create_chain+0xa6>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d101      	bne.n	800cdfc <create_chain+0xaa>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	e03e      	b.n	800ce7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cdfc:	69fa      	ldr	r2, [r7, #28]
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d1da      	bne.n	800cdba <create_chain+0x68>
 800ce04:	2300      	movs	r3, #0
 800ce06:	e038      	b.n	800ce7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0e:	69f9      	ldr	r1, [r7, #28]
 800ce10:	6938      	ldr	r0, [r7, #16]
 800ce12:	f7ff fe4f 	bl	800cab4 <put_fat>
 800ce16:	4603      	mov	r3, r0
 800ce18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d109      	bne.n	800ce34 <create_chain+0xe2>
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce26:	69fa      	ldr	r2, [r7, #28]
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6938      	ldr	r0, [r7, #16]
 800ce2c:	f7ff fe42 	bl	800cab4 <put_fat>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d116      	bne.n	800ce68 <create_chain+0x116>
		fs->last_clst = ncl;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	69fa      	ldr	r2, [r7, #28]
 800ce3e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	691a      	ldr	r2, [r3, #16]
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	3b02      	subs	r3, #2
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d804      	bhi.n	800ce58 <create_chain+0x106>
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	1e5a      	subs	r2, r3, #1
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	791b      	ldrb	r3, [r3, #4]
 800ce5c:	f043 0301 	orr.w	r3, r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	711a      	strb	r2, [r3, #4]
 800ce66:	e007      	b.n	800ce78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d102      	bne.n	800ce74 <create_chain+0x122>
 800ce6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce72:	e000      	b.n	800ce76 <create_chain+0x124>
 800ce74:	2301      	movs	r3, #1
 800ce76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce78:	69fb      	ldr	r3, [r7, #28]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3720      	adds	r7, #32
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b087      	sub	sp, #28
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce96:	3304      	adds	r3, #4
 800ce98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	0a5b      	lsrs	r3, r3, #9
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	8952      	ldrh	r2, [r2, #10]
 800cea2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cea6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	1d1a      	adds	r2, r3, #4
 800ceac:	613a      	str	r2, [r7, #16]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <clmt_clust+0x3a>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e010      	b.n	800cede <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d307      	bcc.n	800ced4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	3304      	adds	r3, #4
 800ced0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ced2:	e7e9      	b.n	800cea8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ced4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	4413      	add	r3, r2
}
 800cede:	4618      	mov	r0, r3
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b086      	sub	sp, #24
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf00:	d204      	bcs.n	800cf0c <dir_sdi+0x22>
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	f003 031f 	and.w	r3, r3, #31
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e063      	b.n	800cfd8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <dir_sdi+0x46>
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d902      	bls.n	800cf30 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10c      	bne.n	800cf50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	095b      	lsrs	r3, r3, #5
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	8912      	ldrh	r2, [r2, #8]
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d301      	bcc.n	800cf46 <dir_sdi+0x5c>
 800cf42:	2302      	movs	r3, #2
 800cf44:	e048      	b.n	800cfd8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	61da      	str	r2, [r3, #28]
 800cf4e:	e029      	b.n	800cfa4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	895b      	ldrh	r3, [r3, #10]
 800cf54:	025b      	lsls	r3, r3, #9
 800cf56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf58:	e019      	b.n	800cf8e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6979      	ldr	r1, [r7, #20]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fd01 	bl	800c966 <get_fat>
 800cf64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6c:	d101      	bne.n	800cf72 <dir_sdi+0x88>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e032      	b.n	800cfd8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d904      	bls.n	800cf82 <dir_sdi+0x98>
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d301      	bcc.n	800cf86 <dir_sdi+0x9c>
 800cf82:	2302      	movs	r3, #2
 800cf84:	e028      	b.n	800cfd8 <dir_sdi+0xee>
			ofs -= csz;
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d2e1      	bcs.n	800cf5a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cf96:	6979      	ldr	r1, [r7, #20]
 800cf98:	6938      	ldr	r0, [r7, #16]
 800cf9a:	f7ff fcc5 	bl	800c928 <clust2sect>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	69db      	ldr	r3, [r3, #28]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <dir_sdi+0xcc>
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	e010      	b.n	800cfd8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	69da      	ldr	r2, [r3, #28]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	0a5b      	lsrs	r3, r3, #9
 800cfbe:	441a      	add	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd0:	441a      	add	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cfd6:	2300      	movs	r3, #0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	3320      	adds	r3, #32
 800cff6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	69db      	ldr	r3, [r3, #28]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d003      	beq.n	800d008 <dir_next+0x28>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d006:	d301      	bcc.n	800d00c <dir_next+0x2c>
 800d008:	2304      	movs	r3, #4
 800d00a:	e0aa      	b.n	800d162 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d012:	2b00      	cmp	r3, #0
 800d014:	f040 8098 	bne.w	800d148 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	1c5a      	adds	r2, r3, #1
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10b      	bne.n	800d042 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	095b      	lsrs	r3, r3, #5
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	8912      	ldrh	r2, [r2, #8]
 800d032:	4293      	cmp	r3, r2
 800d034:	f0c0 8088 	bcc.w	800d148 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	61da      	str	r2, [r3, #28]
 800d03e:	2304      	movs	r3, #4
 800d040:	e08f      	b.n	800d162 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	0a5b      	lsrs	r3, r3, #9
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	8952      	ldrh	r2, [r2, #10]
 800d04a:	3a01      	subs	r2, #1
 800d04c:	4013      	ands	r3, r2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d17a      	bne.n	800d148 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	4619      	mov	r1, r3
 800d05a:	4610      	mov	r0, r2
 800d05c:	f7ff fc83 	bl	800c966 <get_fat>
 800d060:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d801      	bhi.n	800d06c <dir_next+0x8c>
 800d068:	2302      	movs	r3, #2
 800d06a:	e07a      	b.n	800d162 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d101      	bne.n	800d078 <dir_next+0x98>
 800d074:	2301      	movs	r3, #1
 800d076:	e074      	b.n	800d162 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	697a      	ldr	r2, [r7, #20]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d358      	bcc.n	800d134 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d104      	bne.n	800d092 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	61da      	str	r2, [r3, #28]
 800d08e:	2304      	movs	r3, #4
 800d090:	e067      	b.n	800d162 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f7ff fe59 	bl	800cd52 <create_chain>
 800d0a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <dir_next+0xcc>
 800d0a8:	2307      	movs	r3, #7
 800d0aa:	e05a      	b.n	800d162 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d101      	bne.n	800d0b6 <dir_next+0xd6>
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e055      	b.n	800d162 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0bc:	d101      	bne.n	800d0c2 <dir_next+0xe2>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e04f      	b.n	800d162 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7ff fb50 	bl	800c768 <sync_window>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <dir_next+0xf2>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e047      	b.n	800d162 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3330      	adds	r3, #48	@ 0x30
 800d0d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff f9b6 	bl	800c44e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	613b      	str	r3, [r7, #16]
 800d0e6:	6979      	ldr	r1, [r7, #20]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff fc1d 	bl	800c928 <clust2sect>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d0f4:	e012      	b.n	800d11c <dir_next+0x13c>
						fs->wflag = 1;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f7ff fb33 	bl	800c768 <sync_window>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d001      	beq.n	800d10c <dir_next+0x12c>
 800d108:	2301      	movs	r3, #1
 800d10a:	e02a      	b.n	800d162 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	3301      	adds	r3, #1
 800d110:	613b      	str	r3, [r7, #16]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	895b      	ldrh	r3, [r3, #10]
 800d120:	461a      	mov	r2, r3
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	4293      	cmp	r3, r2
 800d126:	d3e6      	bcc.n	800d0f6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	1ad2      	subs	r2, r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d13a:	6979      	ldr	r1, [r7, #20]
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff fbf3 	bl	800c928 <clust2sect>
 800d142:	4602      	mov	r2, r0
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15a:	441a      	add	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b086      	sub	sp, #24
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d17a:	2100      	movs	r1, #0
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff feb4 	bl	800ceea <dir_sdi>
 800d182:	4603      	mov	r3, r0
 800d184:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d12b      	bne.n	800d1e4 <dir_alloc+0x7a>
		n = 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	69db      	ldr	r3, [r3, #28]
 800d194:	4619      	mov	r1, r3
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7ff fb2a 	bl	800c7f0 <move_window>
 800d19c:	4603      	mov	r3, r0
 800d19e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d11d      	bne.n	800d1e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2be5      	cmp	r3, #229	@ 0xe5
 800d1ae:	d004      	beq.n	800d1ba <dir_alloc+0x50>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6a1b      	ldr	r3, [r3, #32]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d107      	bne.n	800d1ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	613b      	str	r3, [r7, #16]
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d102      	bne.n	800d1ce <dir_alloc+0x64>
 800d1c8:	e00c      	b.n	800d1e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ff05 	bl	800cfe0 <dir_next>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d0d7      	beq.n	800d190 <dir_alloc+0x26>
 800d1e0:	e000      	b.n	800d1e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d1e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	2b04      	cmp	r3, #4
 800d1e8:	d101      	bne.n	800d1ee <dir_alloc+0x84>
 800d1ea:	2307      	movs	r3, #7
 800d1ec:	75fb      	strb	r3, [r7, #23]
	return res;
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	331a      	adds	r3, #26
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff f87e 	bl	800c308 <ld_word>
 800d20c:	4603      	mov	r3, r0
 800d20e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b03      	cmp	r3, #3
 800d216:	d109      	bne.n	800d22c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	3314      	adds	r3, #20
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7ff f873 	bl	800c308 <ld_word>
 800d222:	4603      	mov	r3, r0
 800d224:	041b      	lsls	r3, r3, #16
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	4313      	orrs	r3, r2
 800d22a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d22c:	68fb      	ldr	r3, [r7, #12]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	60b9      	str	r1, [r7, #8]
 800d240:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	331a      	adds	r3, #26
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	b292      	uxth	r2, r2
 800d24a:	4611      	mov	r1, r2
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff f896 	bl	800c37e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2b03      	cmp	r3, #3
 800d258:	d109      	bne.n	800d26e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	f103 0214 	add.w	r2, r3, #20
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	0c1b      	lsrs	r3, r3, #16
 800d264:	b29b      	uxth	r3, r3
 800d266:	4619      	mov	r1, r3
 800d268:	4610      	mov	r0, r2
 800d26a:	f7ff f888 	bl	800c37e <st_word>
	}
}
 800d26e:	bf00      	nop
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b086      	sub	sp, #24
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d284:	2100      	movs	r1, #0
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff fe2f 	bl	800ceea <dir_sdi>
 800d28c:	4603      	mov	r3, r0
 800d28e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <dir_find+0x24>
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	e03e      	b.n	800d318 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6938      	ldr	r0, [r7, #16]
 800d2a2:	f7ff faa5 	bl	800c7f0 <move_window>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2aa:	7dfb      	ldrb	r3, [r7, #23]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d12f      	bne.n	800d310 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a1b      	ldr	r3, [r3, #32]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d102      	bne.n	800d2c4 <dir_find+0x4e>
 800d2be:	2304      	movs	r3, #4
 800d2c0:	75fb      	strb	r3, [r7, #23]
 800d2c2:	e028      	b.n	800d316 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a1b      	ldr	r3, [r3, #32]
 800d2c8:	330b      	adds	r3, #11
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	330b      	adds	r3, #11
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	f003 0308 	and.w	r3, r3, #8
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <dir_find+0x86>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6a18      	ldr	r0, [r3, #32]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3324      	adds	r3, #36	@ 0x24
 800d2ee:	220b      	movs	r2, #11
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f7ff f8c7 	bl	800c484 <mem_cmp>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00b      	beq.n	800d314 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff fe6e 	bl	800cfe0 <dir_next>
 800d304:	4603      	mov	r3, r0
 800d306:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d308:	7dfb      	ldrb	r3, [r7, #23]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0c5      	beq.n	800d29a <dir_find+0x24>
 800d30e:	e002      	b.n	800d316 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d314:	bf00      	nop

	return res;
 800d316:	7dfb      	ldrb	r3, [r7, #23]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d32e:	2101      	movs	r1, #1
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff ff1a 	bl	800d16a <dir_alloc>
 800d336:	4603      	mov	r3, r0
 800d338:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d11c      	bne.n	800d37a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	69db      	ldr	r3, [r3, #28]
 800d344:	4619      	mov	r1, r3
 800d346:	68b8      	ldr	r0, [r7, #8]
 800d348:	f7ff fa52 	bl	800c7f0 <move_window>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d111      	bne.n	800d37a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	2220      	movs	r2, #32
 800d35c:	2100      	movs	r1, #0
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff f875 	bl	800c44e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a18      	ldr	r0, [r3, #32]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3324      	adds	r3, #36	@ 0x24
 800d36c:	220b      	movs	r2, #11
 800d36e:	4619      	mov	r1, r3
 800d370:	f7ff f84c 	bl	800c40c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2201      	movs	r2, #1
 800d378:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2200      	movs	r2, #0
 800d392:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	69db      	ldr	r3, [r3, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d04f      	beq.n	800d43c <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	613b      	str	r3, [r7, #16]
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800d3a4:	e022      	b.n	800d3ec <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a1a      	ldr	r2, [r3, #32]
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	1c59      	adds	r1, r3, #1
 800d3ae:	6179      	str	r1, [r7, #20]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	2b20      	cmp	r3, #32
 800d3ba:	d016      	beq.n	800d3ea <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	2b05      	cmp	r3, #5
 800d3c0:	d101      	bne.n	800d3c6 <get_fileinfo+0x42>
 800d3c2:	23e5      	movs	r3, #229	@ 0xe5
 800d3c4:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b09      	cmp	r3, #9
 800d3ca:	d106      	bne.n	800d3da <get_fileinfo+0x56>
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	613a      	str	r2, [r7, #16]
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	222e      	movs	r2, #46	@ 0x2e
 800d3d8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	613a      	str	r2, [r7, #16]
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	7bfa      	ldrb	r2, [r7, #15]
 800d3e6:	725a      	strb	r2, [r3, #9]
 800d3e8:	e000      	b.n	800d3ec <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800d3ea:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	2b0a      	cmp	r3, #10
 800d3f0:	d9d9      	bls.n	800d3a6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	3309      	adds	r3, #9
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a1b      	ldr	r3, [r3, #32]
 800d402:	7ada      	ldrb	r2, [r3, #11]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a1b      	ldr	r3, [r3, #32]
 800d40c:	331c      	adds	r3, #28
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe ff92 	bl	800c338 <ld_dword>
 800d414:	4602      	mov	r2, r0
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	3316      	adds	r3, #22
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe ff89 	bl	800c338 <ld_dword>
 800d426:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	80da      	strh	r2, [r3, #6]
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	0c1b      	lsrs	r3, r3, #16
 800d434:	b29a      	uxth	r2, r3
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	809a      	strh	r2, [r3, #4]
 800d43a:	e000      	b.n	800d43e <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d43c:	bf00      	nop
}
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b088      	sub	sp, #32
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3324      	adds	r3, #36	@ 0x24
 800d458:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d45a:	220b      	movs	r2, #11
 800d45c:	2120      	movs	r1, #32
 800d45e:	68b8      	ldr	r0, [r7, #8]
 800d460:	f7fe fff5 	bl	800c44e <mem_set>
	si = i = 0; ni = 8;
 800d464:	2300      	movs	r3, #0
 800d466:	613b      	str	r3, [r7, #16]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	61fb      	str	r3, [r7, #28]
 800d46c:	2308      	movs	r3, #8
 800d46e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	61fa      	str	r2, [r7, #28]
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	4413      	add	r3, r2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d47e:	7efb      	ldrb	r3, [r7, #27]
 800d480:	2b20      	cmp	r3, #32
 800d482:	d94e      	bls.n	800d522 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d484:	7efb      	ldrb	r3, [r7, #27]
 800d486:	2b2f      	cmp	r3, #47	@ 0x2f
 800d488:	d006      	beq.n	800d498 <create_name+0x54>
 800d48a:	7efb      	ldrb	r3, [r7, #27]
 800d48c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d48e:	d110      	bne.n	800d4b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d490:	e002      	b.n	800d498 <create_name+0x54>
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	3301      	adds	r3, #1
 800d496:	61fb      	str	r3, [r7, #28]
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	4413      	add	r3, r2
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d4a2:	d0f6      	beq.n	800d492 <create_name+0x4e>
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800d4ae:	d0f0      	beq.n	800d492 <create_name+0x4e>
			break;
 800d4b0:	e038      	b.n	800d524 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d4b2:	7efb      	ldrb	r3, [r7, #27]
 800d4b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4b6:	d003      	beq.n	800d4c0 <create_name+0x7c>
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d30c      	bcc.n	800d4da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	2b0b      	cmp	r3, #11
 800d4c4:	d002      	beq.n	800d4cc <create_name+0x88>
 800d4c6:	7efb      	ldrb	r3, [r7, #27]
 800d4c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4ca:	d001      	beq.n	800d4d0 <create_name+0x8c>
 800d4cc:	2306      	movs	r3, #6
 800d4ce:	e044      	b.n	800d55a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	613b      	str	r3, [r7, #16]
 800d4d4:	230b      	movs	r3, #11
 800d4d6:	617b      	str	r3, [r7, #20]
			continue;
 800d4d8:	e022      	b.n	800d520 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d4da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	da04      	bge.n	800d4ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d4e2:	7efb      	ldrb	r3, [r7, #27]
 800d4e4:	3b80      	subs	r3, #128	@ 0x80
 800d4e6:	4a1f      	ldr	r2, [pc, #124]	@ (800d564 <create_name+0x120>)
 800d4e8:	5cd3      	ldrb	r3, [r2, r3]
 800d4ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d4ec:	7efb      	ldrb	r3, [r7, #27]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	481d      	ldr	r0, [pc, #116]	@ (800d568 <create_name+0x124>)
 800d4f2:	f7fe ffee 	bl	800c4d2 <chk_chr>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <create_name+0xbc>
 800d4fc:	2306      	movs	r3, #6
 800d4fe:	e02c      	b.n	800d55a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d500:	7efb      	ldrb	r3, [r7, #27]
 800d502:	2b60      	cmp	r3, #96	@ 0x60
 800d504:	d905      	bls.n	800d512 <create_name+0xce>
 800d506:	7efb      	ldrb	r3, [r7, #27]
 800d508:	2b7a      	cmp	r3, #122	@ 0x7a
 800d50a:	d802      	bhi.n	800d512 <create_name+0xce>
 800d50c:	7efb      	ldrb	r3, [r7, #27]
 800d50e:	3b20      	subs	r3, #32
 800d510:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	613a      	str	r2, [r7, #16]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	4413      	add	r3, r2
 800d51c:	7efa      	ldrb	r2, [r7, #27]
 800d51e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d520:	e7a6      	b.n	800d470 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d522:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	441a      	add	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <create_name+0xf4>
 800d534:	2306      	movs	r3, #6
 800d536:	e010      	b.n	800d55a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2be5      	cmp	r3, #229	@ 0xe5
 800d53e:	d102      	bne.n	800d546 <create_name+0x102>
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2205      	movs	r2, #5
 800d544:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d546:	7efb      	ldrb	r3, [r7, #27]
 800d548:	2b20      	cmp	r3, #32
 800d54a:	d801      	bhi.n	800d550 <create_name+0x10c>
 800d54c:	2204      	movs	r2, #4
 800d54e:	e000      	b.n	800d552 <create_name+0x10e>
 800d550:	2200      	movs	r2, #0
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	330b      	adds	r3, #11
 800d556:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d558:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	08010f68 	.word	0x08010f68
 800d568:	08010ef0 	.word	0x08010ef0

0800d56c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d580:	e002      	b.n	800d588 <follow_path+0x1c>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	3301      	adds	r3, #1
 800d586:	603b      	str	r3, [r7, #0]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d58e:	d0f8      	beq.n	800d582 <follow_path+0x16>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2b5c      	cmp	r3, #92	@ 0x5c
 800d596:	d0f4      	beq.n	800d582 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2200      	movs	r2, #0
 800d59c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b1f      	cmp	r3, #31
 800d5a4:	d80a      	bhi.n	800d5bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2280      	movs	r2, #128	@ 0x80
 800d5aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff fc9a 	bl	800ceea <dir_sdi>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	75fb      	strb	r3, [r7, #23]
 800d5ba:	e043      	b.n	800d644 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d5bc:	463b      	mov	r3, r7
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff ff3f 	bl	800d444 <create_name>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d5ca:	7dfb      	ldrb	r3, [r7, #23]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d134      	bne.n	800d63a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff fe50 	bl	800d276 <dir_find>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d5e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00a      	beq.n	800d5fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d5e8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ea:	2b04      	cmp	r3, #4
 800d5ec:	d127      	bne.n	800d63e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d5ee:	7afb      	ldrb	r3, [r7, #11]
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d122      	bne.n	800d63e <follow_path+0xd2>
 800d5f8:	2305      	movs	r3, #5
 800d5fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d5fc:	e01f      	b.n	800d63e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d5fe:	7afb      	ldrb	r3, [r7, #11]
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	d11c      	bne.n	800d642 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	799b      	ldrb	r3, [r3, #6]
 800d60c:	f003 0310 	and.w	r3, r3, #16
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d614:	2305      	movs	r3, #5
 800d616:	75fb      	strb	r3, [r7, #23]
 800d618:	e014      	b.n	800d644 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d628:	4413      	add	r3, r2
 800d62a:	4619      	mov	r1, r3
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff fde3 	bl	800d1f8 <ld_clust>
 800d632:	4602      	mov	r2, r0
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d638:	e7c0      	b.n	800d5bc <follow_path+0x50>
			if (res != FR_OK) break;
 800d63a:	bf00      	nop
 800d63c:	e002      	b.n	800d644 <follow_path+0xd8>
				break;
 800d63e:	bf00      	nop
 800d640:	e000      	b.n	800d644 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d642:	bf00      	nop
			}
		}
	}

	return res;
 800d644:	7dfb      	ldrb	r3, [r7, #23]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3718      	adds	r7, #24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d64e:	b480      	push	{r7}
 800d650:	b087      	sub	sp, #28
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d656:	f04f 33ff 	mov.w	r3, #4294967295
 800d65a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d031      	beq.n	800d6c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	617b      	str	r3, [r7, #20]
 800d66a:	e002      	b.n	800d672 <get_ldnumber+0x24>
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	3301      	adds	r3, #1
 800d670:	617b      	str	r3, [r7, #20]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b20      	cmp	r3, #32
 800d678:	d903      	bls.n	800d682 <get_ldnumber+0x34>
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d680:	d1f4      	bne.n	800d66c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	2b3a      	cmp	r3, #58	@ 0x3a
 800d688:	d11c      	bne.n	800d6c4 <get_ldnumber+0x76>
			tp = *path;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	60fa      	str	r2, [r7, #12]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	3b30      	subs	r3, #48	@ 0x30
 800d69a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b09      	cmp	r3, #9
 800d6a0:	d80e      	bhi.n	800d6c0 <get_ldnumber+0x72>
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d10a      	bne.n	800d6c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d107      	bne.n	800d6c0 <get_ldnumber+0x72>
					vol = (int)i;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	617b      	str	r3, [r7, #20]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	e002      	b.n	800d6ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d6c8:	693b      	ldr	r3, [r7, #16]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	371c      	adds	r7, #28
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	70da      	strb	r2, [r3, #3]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7ff f87c 	bl	800c7f0 <move_window>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <check_fs+0x2a>
 800d6fe:	2304      	movs	r3, #4
 800d700:	e038      	b.n	800d774 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3330      	adds	r3, #48	@ 0x30
 800d706:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe fdfc 	bl	800c308 <ld_word>
 800d710:	4603      	mov	r3, r0
 800d712:	461a      	mov	r2, r3
 800d714:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d718:	429a      	cmp	r2, r3
 800d71a:	d001      	beq.n	800d720 <check_fs+0x48>
 800d71c:	2303      	movs	r3, #3
 800d71e:	e029      	b.n	800d774 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d726:	2be9      	cmp	r3, #233	@ 0xe9
 800d728:	d009      	beq.n	800d73e <check_fs+0x66>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d730:	2beb      	cmp	r3, #235	@ 0xeb
 800d732:	d11e      	bne.n	800d772 <check_fs+0x9a>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d73a:	2b90      	cmp	r3, #144	@ 0x90
 800d73c:	d119      	bne.n	800d772 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3330      	adds	r3, #48	@ 0x30
 800d742:	3336      	adds	r3, #54	@ 0x36
 800d744:	4618      	mov	r0, r3
 800d746:	f7fe fdf7 	bl	800c338 <ld_dword>
 800d74a:	4603      	mov	r3, r0
 800d74c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d750:	4a0a      	ldr	r2, [pc, #40]	@ (800d77c <check_fs+0xa4>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d101      	bne.n	800d75a <check_fs+0x82>
 800d756:	2300      	movs	r3, #0
 800d758:	e00c      	b.n	800d774 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	3330      	adds	r3, #48	@ 0x30
 800d75e:	3352      	adds	r3, #82	@ 0x52
 800d760:	4618      	mov	r0, r3
 800d762:	f7fe fde9 	bl	800c338 <ld_dword>
 800d766:	4603      	mov	r3, r0
 800d768:	4a05      	ldr	r2, [pc, #20]	@ (800d780 <check_fs+0xa8>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d101      	bne.n	800d772 <check_fs+0x9a>
 800d76e:	2300      	movs	r3, #0
 800d770:	e000      	b.n	800d774 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d772:	2302      	movs	r3, #2
}
 800d774:	4618      	mov	r0, r3
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	00544146 	.word	0x00544146
 800d780:	33544146 	.word	0x33544146

0800d784 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b096      	sub	sp, #88	@ 0x58
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f7ff ff58 	bl	800d64e <get_ldnumber>
 800d79e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	da01      	bge.n	800d7aa <find_volume+0x26>
 800d7a6:	230b      	movs	r3, #11
 800d7a8:	e22d      	b.n	800dc06 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d7aa:	4aa1      	ldr	r2, [pc, #644]	@ (800da30 <find_volume+0x2ac>)
 800d7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d101      	bne.n	800d7be <find_volume+0x3a>
 800d7ba:	230c      	movs	r3, #12
 800d7bc:	e223      	b.n	800dc06 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	f023 0301 	bic.w	r3, r3, #1
 800d7ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d01a      	beq.n	800d80a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d6:	785b      	ldrb	r3, [r3, #1]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fcf7 	bl	800c1cc <disk_status>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d7e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7e8:	f003 0301 	and.w	r3, r3, #1
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10c      	bne.n	800d80a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d007      	beq.n	800d806 <find_volume+0x82>
 800d7f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7fa:	f003 0304 	and.w	r3, r3, #4
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d802:	230a      	movs	r3, #10
 800d804:	e1ff      	b.n	800dc06 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d806:	2300      	movs	r3, #0
 800d808:	e1fd      	b.n	800dc06 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d812:	b2da      	uxtb	r2, r3
 800d814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d816:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81a:	785b      	ldrb	r3, [r3, #1]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe fcef 	bl	800c200 <disk_initialize>
 800d822:	4603      	mov	r3, r0
 800d824:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d828:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d834:	2303      	movs	r3, #3
 800d836:	e1e6      	b.n	800dc06 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d007      	beq.n	800d84e <find_volume+0xca>
 800d83e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d842:	f003 0304 	and.w	r3, r3, #4
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d84a:	230a      	movs	r3, #10
 800d84c:	e1db      	b.n	800dc06 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d852:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d854:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d856:	f7ff ff3f 	bl	800d6d8 <check_fs>
 800d85a:	4603      	mov	r3, r0
 800d85c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d864:	2b02      	cmp	r3, #2
 800d866:	d149      	bne.n	800d8fc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d868:	2300      	movs	r3, #0
 800d86a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d86c:	e01e      	b.n	800d8ac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d870:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d876:	011b      	lsls	r3, r3, #4
 800d878:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d87c:	4413      	add	r3, r2
 800d87e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d882:	3304      	adds	r3, #4
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d006      	beq.n	800d898 <find_volume+0x114>
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	3308      	adds	r3, #8
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe fd52 	bl	800c338 <ld_dword>
 800d894:	4602      	mov	r2, r0
 800d896:	e000      	b.n	800d89a <find_volume+0x116>
 800d898:	2200      	movs	r2, #0
 800d89a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	3358      	adds	r3, #88	@ 0x58
 800d8a0:	443b      	add	r3, r7
 800d8a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d8a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d9dd      	bls.n	800d86e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d8b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <find_volume+0x13e>
 800d8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	3358      	adds	r3, #88	@ 0x58
 800d8c8:	443b      	add	r3, r7
 800d8ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d8ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d8d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d005      	beq.n	800d8e2 <find_volume+0x15e>
 800d8d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d8d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d8da:	f7ff fefd 	bl	800d6d8 <check_fs>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	e000      	b.n	800d8e4 <find_volume+0x160>
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d8e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d905      	bls.n	800d8fc <find_volume+0x178>
 800d8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8f8:	2b03      	cmp	r3, #3
 800d8fa:	d9e2      	bls.n	800d8c2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d900:	2b04      	cmp	r3, #4
 800d902:	d101      	bne.n	800d908 <find_volume+0x184>
 800d904:	2301      	movs	r3, #1
 800d906:	e17e      	b.n	800dc06 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d901      	bls.n	800d914 <find_volume+0x190>
 800d910:	230d      	movs	r3, #13
 800d912:	e178      	b.n	800dc06 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d916:	3330      	adds	r3, #48	@ 0x30
 800d918:	330b      	adds	r3, #11
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fcf4 	bl	800c308 <ld_word>
 800d920:	4603      	mov	r3, r0
 800d922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d926:	d001      	beq.n	800d92c <find_volume+0x1a8>
 800d928:	230d      	movs	r3, #13
 800d92a:	e16c      	b.n	800dc06 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92e:	3330      	adds	r3, #48	@ 0x30
 800d930:	3316      	adds	r3, #22
 800d932:	4618      	mov	r0, r3
 800d934:	f7fe fce8 	bl	800c308 <ld_word>
 800d938:	4603      	mov	r3, r0
 800d93a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <find_volume+0x1cc>
 800d942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d944:	3330      	adds	r3, #48	@ 0x30
 800d946:	3324      	adds	r3, #36	@ 0x24
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe fcf5 	bl	800c338 <ld_dword>
 800d94e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d952:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d954:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d958:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d962:	789b      	ldrb	r3, [r3, #2]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d005      	beq.n	800d974 <find_volume+0x1f0>
 800d968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96a:	789b      	ldrb	r3, [r3, #2]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d001      	beq.n	800d974 <find_volume+0x1f0>
 800d970:	230d      	movs	r3, #13
 800d972:	e148      	b.n	800dc06 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d976:	789b      	ldrb	r3, [r3, #2]
 800d978:	461a      	mov	r2, r3
 800d97a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d97c:	fb02 f303 	mul.w	r3, r2, r3
 800d980:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d988:	461a      	mov	r2, r3
 800d98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d990:	895b      	ldrh	r3, [r3, #10]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d008      	beq.n	800d9a8 <find_volume+0x224>
 800d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d998:	895b      	ldrh	r3, [r3, #10]
 800d99a:	461a      	mov	r2, r3
 800d99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99e:	895b      	ldrh	r3, [r3, #10]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <find_volume+0x228>
 800d9a8:	230d      	movs	r3, #13
 800d9aa:	e12c      	b.n	800dc06 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ae:	3330      	adds	r3, #48	@ 0x30
 800d9b0:	3311      	adds	r3, #17
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fca8 	bl	800c308 <ld_word>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c2:	891b      	ldrh	r3, [r3, #8]
 800d9c4:	f003 030f 	and.w	r3, r3, #15
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <find_volume+0x24e>
 800d9ce:	230d      	movs	r3, #13
 800d9d0:	e119      	b.n	800dc06 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d4:	3330      	adds	r3, #48	@ 0x30
 800d9d6:	3313      	adds	r3, #19
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fc95 	bl	800c308 <ld_word>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d106      	bne.n	800d9f6 <find_volume+0x272>
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ea:	3330      	adds	r3, #48	@ 0x30
 800d9ec:	3320      	adds	r3, #32
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fca2 	bl	800c338 <ld_dword>
 800d9f4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f8:	3330      	adds	r3, #48	@ 0x30
 800d9fa:	330e      	adds	r3, #14
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fc83 	bl	800c308 <ld_word>
 800da02:	4603      	mov	r3, r0
 800da04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800da06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <find_volume+0x28c>
 800da0c:	230d      	movs	r3, #13
 800da0e:	e0fa      	b.n	800dc06 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800da10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800da12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da14:	4413      	add	r3, r2
 800da16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da18:	8912      	ldrh	r2, [r2, #8]
 800da1a:	0912      	lsrs	r2, r2, #4
 800da1c:	b292      	uxth	r2, r2
 800da1e:	4413      	add	r3, r2
 800da20:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800da22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da26:	429a      	cmp	r2, r3
 800da28:	d204      	bcs.n	800da34 <find_volume+0x2b0>
 800da2a:	230d      	movs	r3, #13
 800da2c:	e0eb      	b.n	800dc06 <find_volume+0x482>
 800da2e:	bf00      	nop
 800da30:	240047d8 	.word	0x240047d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800da34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da3c:	8952      	ldrh	r2, [r2, #10]
 800da3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800da42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800da44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <find_volume+0x2ca>
 800da4a:	230d      	movs	r3, #13
 800da4c:	e0db      	b.n	800dc06 <find_volume+0x482>
		fmt = FS_FAT32;
 800da4e:	2303      	movs	r3, #3
 800da50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800da54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da56:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d802      	bhi.n	800da64 <find_volume+0x2e0>
 800da5e:	2302      	movs	r3, #2
 800da60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d802      	bhi.n	800da74 <find_volume+0x2f0>
 800da6e:	2301      	movs	r3, #1
 800da70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800da74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da76:	1c9a      	adds	r2, r3, #2
 800da78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da7a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800da7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da80:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800da82:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800da84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da86:	441a      	add	r2, r3
 800da88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800da8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da90:	441a      	add	r2, r3
 800da92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da94:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800da96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d11e      	bne.n	800dadc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800da9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa0:	3330      	adds	r3, #48	@ 0x30
 800daa2:	332a      	adds	r3, #42	@ 0x2a
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe fc2f 	bl	800c308 <ld_word>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <find_volume+0x330>
 800dab0:	230d      	movs	r3, #13
 800dab2:	e0a8      	b.n	800dc06 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab6:	891b      	ldrh	r3, [r3, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <find_volume+0x33c>
 800dabc:	230d      	movs	r3, #13
 800dabe:	e0a2      	b.n	800dc06 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac2:	3330      	adds	r3, #48	@ 0x30
 800dac4:	332c      	adds	r3, #44	@ 0x2c
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe fc36 	bl	800c338 <ld_dword>
 800dacc:	4602      	mov	r2, r0
 800dace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dada:	e01f      	b.n	800db1c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dade:	891b      	ldrh	r3, [r3, #8]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d101      	bne.n	800dae8 <find_volume+0x364>
 800dae4:	230d      	movs	r3, #13
 800dae6:	e08e      	b.n	800dc06 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daea:	6a1a      	ldr	r2, [r3, #32]
 800daec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daee:	441a      	add	r2, r3
 800daf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800daf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d103      	bne.n	800db04 <find_volume+0x380>
 800dafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	005b      	lsls	r3, r3, #1
 800db02:	e00a      	b.n	800db1a <find_volume+0x396>
 800db04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db06:	695a      	ldr	r2, [r3, #20]
 800db08:	4613      	mov	r3, r2
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	085a      	lsrs	r2, r3, #1
 800db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800db1a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	699a      	ldr	r2, [r3, #24]
 800db20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db22:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800db26:	0a5b      	lsrs	r3, r3, #9
 800db28:	429a      	cmp	r2, r3
 800db2a:	d201      	bcs.n	800db30 <find_volume+0x3ac>
 800db2c:	230d      	movs	r3, #13
 800db2e:	e06a      	b.n	800dc06 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800db30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db32:	f04f 32ff 	mov.w	r2, #4294967295
 800db36:	611a      	str	r2, [r3, #16]
 800db38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3a:	691a      	ldr	r2, [r3, #16]
 800db3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800db40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db42:	2280      	movs	r2, #128	@ 0x80
 800db44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800db46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d149      	bne.n	800dbe2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	3330      	adds	r3, #48	@ 0x30
 800db52:	3330      	adds	r3, #48	@ 0x30
 800db54:	4618      	mov	r0, r3
 800db56:	f7fe fbd7 	bl	800c308 <ld_word>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d140      	bne.n	800dbe2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800db60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db62:	3301      	adds	r3, #1
 800db64:	4619      	mov	r1, r3
 800db66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db68:	f7fe fe42 	bl	800c7f0 <move_window>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d137      	bne.n	800dbe2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800db72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db74:	2200      	movs	r2, #0
 800db76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800db78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7a:	3330      	adds	r3, #48	@ 0x30
 800db7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fbc1 	bl	800c308 <ld_word>
 800db86:	4603      	mov	r3, r0
 800db88:	461a      	mov	r2, r3
 800db8a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800db8e:	429a      	cmp	r2, r3
 800db90:	d127      	bne.n	800dbe2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800db92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db94:	3330      	adds	r3, #48	@ 0x30
 800db96:	4618      	mov	r0, r3
 800db98:	f7fe fbce 	bl	800c338 <ld_dword>
 800db9c:	4603      	mov	r3, r0
 800db9e:	4a1c      	ldr	r2, [pc, #112]	@ (800dc10 <find_volume+0x48c>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d11e      	bne.n	800dbe2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba6:	3330      	adds	r3, #48	@ 0x30
 800dba8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fe fbc3 	bl	800c338 <ld_dword>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	4a17      	ldr	r2, [pc, #92]	@ (800dc14 <find_volume+0x490>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d113      	bne.n	800dbe2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbbc:	3330      	adds	r3, #48	@ 0x30
 800dbbe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe fbb8 	bl	800c338 <ld_dword>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbcc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd0:	3330      	adds	r3, #48	@ 0x30
 800dbd2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fe fbae 	bl	800c338 <ld_dword>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800dbe8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dbea:	4b0b      	ldr	r3, [pc, #44]	@ (800dc18 <find_volume+0x494>)
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	4b09      	ldr	r3, [pc, #36]	@ (800dc18 <find_volume+0x494>)
 800dbf4:	801a      	strh	r2, [r3, #0]
 800dbf6:	4b08      	ldr	r3, [pc, #32]	@ (800dc18 <find_volume+0x494>)
 800dbf8:	881a      	ldrh	r2, [r3, #0]
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbfc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dbfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc00:	f7fe fd8e 	bl	800c720 <clear_lock>
#endif
	return FR_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3758      	adds	r7, #88	@ 0x58
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	41615252 	.word	0x41615252
 800dc14:	61417272 	.word	0x61417272
 800dc18:	240047dc 	.word	0x240047dc

0800dc1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dc26:	2309      	movs	r3, #9
 800dc28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d01c      	beq.n	800dc6a <validate+0x4e>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d018      	beq.n	800dc6a <validate+0x4e>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d013      	beq.n	800dc6a <validate+0x4e>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	889a      	ldrh	r2, [r3, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	88db      	ldrh	r3, [r3, #6]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d10c      	bne.n	800dc6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fab8 	bl	800c1cc <disk_status>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <validate+0x4e>
			res = FR_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <validate+0x5a>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	e000      	b.n	800dc78 <validate+0x5c>
 800dc76:	2300      	movs	r3, #0
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	6013      	str	r3, [r2, #0]
	return res;
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	4613      	mov	r3, r2
 800dc94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dc9a:	f107 0310 	add.w	r3, r7, #16
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff fcd5 	bl	800d64e <get_ldnumber>
 800dca4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	da01      	bge.n	800dcb0 <f_mount+0x28>
 800dcac:	230b      	movs	r3, #11
 800dcae:	e02b      	b.n	800dd08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dcb0:	4a17      	ldr	r2, [pc, #92]	@ (800dd10 <f_mount+0x88>)
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dcc0:	69b8      	ldr	r0, [r7, #24]
 800dcc2:	f7fe fd2d 	bl	800c720 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d002      	beq.n	800dcd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	490d      	ldr	r1, [pc, #52]	@ (800dd10 <f_mount+0x88>)
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <f_mount+0x66>
 800dce8:	79fb      	ldrb	r3, [r7, #7]
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d001      	beq.n	800dcf2 <f_mount+0x6a>
 800dcee:	2300      	movs	r3, #0
 800dcf0:	e00a      	b.n	800dd08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dcf2:	f107 010c 	add.w	r1, r7, #12
 800dcf6:	f107 0308 	add.w	r3, r7, #8
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7ff fd41 	bl	800d784 <find_volume>
 800dd02:	4603      	mov	r3, r0
 800dd04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3720      	adds	r7, #32
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	240047d8 	.word	0x240047d8

0800dd14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b098      	sub	sp, #96	@ 0x60
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <f_open+0x18>
 800dd28:	2309      	movs	r3, #9
 800dd2a:	e1a9      	b.n	800e080 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dd2c:	79fb      	ldrb	r3, [r7, #7]
 800dd2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dd34:	79fa      	ldrb	r2, [r7, #7]
 800dd36:	f107 0110 	add.w	r1, r7, #16
 800dd3a:	f107 0308 	add.w	r3, r7, #8
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff fd20 	bl	800d784 <find_volume>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800dd4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f040 818d 	bne.w	800e06e <f_open+0x35a>
		dj.obj.fs = fs;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	f107 0314 	add.w	r3, r7, #20
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff fc03 	bl	800d56c <follow_path>
 800dd66:	4603      	mov	r3, r0
 800dd68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dd6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d118      	bne.n	800dda6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dd74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd78:	b25b      	sxtb	r3, r3
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	da03      	bge.n	800dd86 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dd7e:	2306      	movs	r3, #6
 800dd80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dd84:	e00f      	b.n	800dda6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	bf8c      	ite	hi
 800dd8c:	2301      	movhi	r3, #1
 800dd8e:	2300      	movls	r3, #0
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	461a      	mov	r2, r3
 800dd94:	f107 0314 	add.w	r3, r7, #20
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fe fbb4 	bl	800c508 <chk_lock>
 800dda0:	4603      	mov	r3, r0
 800dda2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dda6:	79fb      	ldrb	r3, [r7, #7]
 800dda8:	f003 031c 	and.w	r3, r3, #28
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d07f      	beq.n	800deb0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ddb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d017      	beq.n	800dde8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ddb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ddbc:	2b04      	cmp	r3, #4
 800ddbe:	d10e      	bne.n	800ddde <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ddc0:	f7fe fbfe 	bl	800c5c0 <enq_lock>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d006      	beq.n	800ddd8 <f_open+0xc4>
 800ddca:	f107 0314 	add.w	r3, r7, #20
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff faa6 	bl	800d320 <dir_register>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	e000      	b.n	800ddda <f_open+0xc6>
 800ddd8:	2312      	movs	r3, #18
 800ddda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	f043 0308 	orr.w	r3, r3, #8
 800dde4:	71fb      	strb	r3, [r7, #7]
 800dde6:	e010      	b.n	800de0a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dde8:	7ebb      	ldrb	r3, [r7, #26]
 800ddea:	f003 0311 	and.w	r3, r3, #17
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d003      	beq.n	800ddfa <f_open+0xe6>
					res = FR_DENIED;
 800ddf2:	2307      	movs	r3, #7
 800ddf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ddf8:	e007      	b.n	800de0a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	f003 0304 	and.w	r3, r3, #4
 800de00:	2b00      	cmp	r3, #0
 800de02:	d002      	beq.n	800de0a <f_open+0xf6>
 800de04:	2308      	movs	r3, #8
 800de06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800de0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d168      	bne.n	800dee4 <f_open+0x1d0>
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	f003 0308 	and.w	r3, r3, #8
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d063      	beq.n	800dee4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800de1c:	f7fd ffb4 	bl	800bd88 <get_fattime>
 800de20:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800de22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de24:	330e      	adds	r3, #14
 800de26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fe fac3 	bl	800c3b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800de2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de30:	3316      	adds	r3, #22
 800de32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800de34:	4618      	mov	r0, r3
 800de36:	f7fe fabd 	bl	800c3b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800de3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de3c:	330b      	adds	r3, #11
 800de3e:	2220      	movs	r2, #32
 800de40:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de46:	4611      	mov	r1, r2
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff f9d5 	bl	800d1f8 <ld_clust>
 800de4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800de54:	2200      	movs	r2, #0
 800de56:	4618      	mov	r0, r3
 800de58:	f7ff f9ed 	bl	800d236 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800de5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de5e:	331c      	adds	r3, #28
 800de60:	2100      	movs	r1, #0
 800de62:	4618      	mov	r0, r3
 800de64:	f7fe faa6 	bl	800c3b4 <st_dword>
					fs->wflag = 1;
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	2201      	movs	r2, #1
 800de6c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800de6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d037      	beq.n	800dee4 <f_open+0x1d0>
						dw = fs->winsect;
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800de7a:	f107 0314 	add.w	r3, r7, #20
 800de7e:	2200      	movs	r2, #0
 800de80:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800de82:	4618      	mov	r0, r3
 800de84:	f7fe ff00 	bl	800cc88 <remove_chain>
 800de88:	4603      	mov	r3, r0
 800de8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800de8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de92:	2b00      	cmp	r3, #0
 800de94:	d126      	bne.n	800dee4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fe fca8 	bl	800c7f0 <move_window>
 800dea0:	4603      	mov	r3, r0
 800dea2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800deaa:	3a01      	subs	r2, #1
 800deac:	60da      	str	r2, [r3, #12]
 800deae:	e019      	b.n	800dee4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800deb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d115      	bne.n	800dee4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800deb8:	7ebb      	ldrb	r3, [r7, #26]
 800deba:	f003 0310 	and.w	r3, r3, #16
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <f_open+0x1b6>
					res = FR_NO_FILE;
 800dec2:	2304      	movs	r3, #4
 800dec4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dec8:	e00c      	b.n	800dee4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	f003 0302 	and.w	r3, r3, #2
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d007      	beq.n	800dee4 <f_open+0x1d0>
 800ded4:	7ebb      	ldrb	r3, [r7, #26]
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <f_open+0x1d0>
						res = FR_DENIED;
 800dede:	2307      	movs	r3, #7
 800dee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dee4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d126      	bne.n	800df3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	f003 0308 	and.w	r3, r3, #8
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800defc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800df06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	bf8c      	ite	hi
 800df12:	2301      	movhi	r3, #1
 800df14:	2300      	movls	r3, #0
 800df16:	b2db      	uxtb	r3, r3
 800df18:	461a      	mov	r2, r3
 800df1a:	f107 0314 	add.w	r3, r7, #20
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fb6f 	bl	800c604 <inc_lock>
 800df26:	4602      	mov	r2, r0
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <f_open+0x226>
 800df34:	2302      	movs	r3, #2
 800df36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800df3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f040 8095 	bne.w	800e06e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7ff f954 	bl	800d1f8 <ld_clust>
 800df50:	4602      	mov	r2, r0
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800df56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df58:	331c      	adds	r3, #28
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fe f9ec 	bl	800c338 <ld_dword>
 800df60:	4602      	mov	r2, r0
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df6c:	693a      	ldr	r2, [r7, #16]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	88da      	ldrh	r2, [r3, #6]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	79fa      	ldrb	r2, [r7, #7]
 800df7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2200      	movs	r2, #0
 800df90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3330      	adds	r3, #48	@ 0x30
 800df96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df9a:	2100      	movs	r1, #0
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe fa56 	bl	800c44e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dfa2:	79fb      	ldrb	r3, [r7, #7]
 800dfa4:	f003 0320 	and.w	r3, r3, #32
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d060      	beq.n	800e06e <f_open+0x35a>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d05c      	beq.n	800e06e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68da      	ldr	r2, [r3, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	895b      	ldrh	r3, [r3, #10]
 800dfc0:	025b      	lsls	r3, r3, #9
 800dfc2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	657b      	str	r3, [r7, #84]	@ 0x54
 800dfd0:	e016      	b.n	800e000 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fe fcc5 	bl	800c966 <get_fat>
 800dfdc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dfde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d802      	bhi.n	800dfea <f_open+0x2d6>
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dfea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff0:	d102      	bne.n	800dff8 <f_open+0x2e4>
 800dff2:	2301      	movs	r3, #1
 800dff4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dff8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	657b      	str	r3, [r7, #84]	@ 0x54
 800e000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e004:	2b00      	cmp	r3, #0
 800e006:	d103      	bne.n	800e010 <f_open+0x2fc>
 800e008:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e00a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d8e0      	bhi.n	800dfd2 <f_open+0x2be>
				}
				fp->clust = clst;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e014:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e016:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d127      	bne.n	800e06e <f_open+0x35a>
 800e01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e024:	2b00      	cmp	r3, #0
 800e026:	d022      	beq.n	800e06e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fc7b 	bl	800c928 <clust2sect>
 800e032:	6478      	str	r0, [r7, #68]	@ 0x44
 800e034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e036:	2b00      	cmp	r3, #0
 800e038:	d103      	bne.n	800e042 <f_open+0x32e>
						res = FR_INT_ERR;
 800e03a:	2302      	movs	r3, #2
 800e03c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e040:	e015      	b.n	800e06e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e044:	0a5a      	lsrs	r2, r3, #9
 800e046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e048:	441a      	add	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	7858      	ldrb	r0, [r3, #1]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6a1a      	ldr	r2, [r3, #32]
 800e05c:	2301      	movs	r3, #1
 800e05e:	f7fe f8f5 	bl	800c24c <disk_read>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <f_open+0x35a>
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e06e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <f_open+0x368>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e07c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e080:	4618      	mov	r0, r3
 800e082:	3760      	adds	r7, #96	@ 0x60
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08c      	sub	sp, #48	@ 0x30
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2200      	movs	r2, #0
 800e09e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f107 0210 	add.w	r2, r7, #16
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7ff fdb7 	bl	800dc1c <validate>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d107      	bne.n	800e0cc <f_write+0x44>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	7d5b      	ldrb	r3, [r3, #21]
 800e0c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <f_write+0x4a>
 800e0cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0d0:	e14b      	b.n	800e36a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	7d1b      	ldrb	r3, [r3, #20]
 800e0d6:	f003 0302 	and.w	r3, r3, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <f_write+0x5a>
 800e0de:	2307      	movs	r3, #7
 800e0e0:	e143      	b.n	800e36a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	699a      	ldr	r2, [r3, #24]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	441a      	add	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	699b      	ldr	r3, [r3, #24]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	f080 812d 	bcs.w	800e34e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	43db      	mvns	r3, r3
 800e0fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e0fc:	e127      	b.n	800e34e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e106:	2b00      	cmp	r3, #0
 800e108:	f040 80e3 	bne.w	800e2d2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	0a5b      	lsrs	r3, r3, #9
 800e112:	693a      	ldr	r2, [r7, #16]
 800e114:	8952      	ldrh	r2, [r2, #10]
 800e116:	3a01      	subs	r2, #1
 800e118:	4013      	ands	r3, r2
 800e11a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d143      	bne.n	800e1aa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d10c      	bne.n	800e144 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e132:	2b00      	cmp	r3, #0
 800e134:	d11a      	bne.n	800e16c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2100      	movs	r1, #0
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe fe09 	bl	800cd52 <create_chain>
 800e140:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e142:	e013      	b.n	800e16c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d007      	beq.n	800e15c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	4619      	mov	r1, r3
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7fe fe95 	bl	800ce82 <clmt_clust>
 800e158:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e15a:	e007      	b.n	800e16c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	4619      	mov	r1, r3
 800e164:	4610      	mov	r0, r2
 800e166:	f7fe fdf4 	bl	800cd52 <create_chain>
 800e16a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f000 80f2 	beq.w	800e358 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e176:	2b01      	cmp	r3, #1
 800e178:	d104      	bne.n	800e184 <f_write+0xfc>
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2202      	movs	r2, #2
 800e17e:	755a      	strb	r2, [r3, #21]
 800e180:	2302      	movs	r3, #2
 800e182:	e0f2      	b.n	800e36a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18a:	d104      	bne.n	800e196 <f_write+0x10e>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2201      	movs	r2, #1
 800e190:	755a      	strb	r2, [r3, #21]
 800e192:	2301      	movs	r3, #1
 800e194:	e0e9      	b.n	800e36a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e19a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d102      	bne.n	800e1aa <f_write+0x122>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	7d1b      	ldrb	r3, [r3, #20]
 800e1ae:	b25b      	sxtb	r3, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	da18      	bge.n	800e1e6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	7858      	ldrb	r0, [r3, #1]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6a1a      	ldr	r2, [r3, #32]
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	f7fe f862 	bl	800c28c <disk_write>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d004      	beq.n	800e1d8 <f_write+0x150>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	755a      	strb	r2, [r3, #21]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e0c8      	b.n	800e36a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	7d1b      	ldrb	r3, [r3, #20]
 800e1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e1e6:	693a      	ldr	r2, [r7, #16]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	69db      	ldr	r3, [r3, #28]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	f7fe fb9a 	bl	800c928 <clust2sect>
 800e1f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d104      	bne.n	800e206 <f_write+0x17e>
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2202      	movs	r2, #2
 800e200:	755a      	strb	r2, [r3, #21]
 800e202:	2302      	movs	r3, #2
 800e204:	e0b1      	b.n	800e36a <f_write+0x2e2>
			sect += csect;
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	4413      	add	r3, r2
 800e20c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	0a5b      	lsrs	r3, r3, #9
 800e212:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e214:	6a3b      	ldr	r3, [r7, #32]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d03c      	beq.n	800e294 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	4413      	add	r3, r2
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	8952      	ldrh	r2, [r2, #10]
 800e224:	4293      	cmp	r3, r2
 800e226:	d905      	bls.n	800e234 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	895b      	ldrh	r3, [r3, #10]
 800e22c:	461a      	mov	r2, r3
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	7858      	ldrb	r0, [r3, #1]
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	697a      	ldr	r2, [r7, #20]
 800e23c:	69f9      	ldr	r1, [r7, #28]
 800e23e:	f7fe f825 	bl	800c28c <disk_write>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d004      	beq.n	800e252 <f_write+0x1ca>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2201      	movs	r2, #1
 800e24c:	755a      	strb	r2, [r3, #21]
 800e24e:	2301      	movs	r3, #1
 800e250:	e08b      	b.n	800e36a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6a1a      	ldr	r2, [r3, #32]
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	6a3a      	ldr	r2, [r7, #32]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d915      	bls.n	800e28c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6a1a      	ldr	r2, [r3, #32]
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	025b      	lsls	r3, r3, #9
 800e270:	69fa      	ldr	r2, [r7, #28]
 800e272:	4413      	add	r3, r2
 800e274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e278:	4619      	mov	r1, r3
 800e27a:	f7fe f8c7 	bl	800c40c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	7d1b      	ldrb	r3, [r3, #20]
 800e282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e286:	b2da      	uxtb	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	025b      	lsls	r3, r3, #9
 800e290:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e292:	e03f      	b.n	800e314 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d016      	beq.n	800e2cc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	699a      	ldr	r2, [r3, #24]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d210      	bcs.n	800e2cc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	7858      	ldrb	r0, [r3, #1]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	697a      	ldr	r2, [r7, #20]
 800e2b8:	f7fd ffc8 	bl	800c24c <disk_read>
 800e2bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d004      	beq.n	800e2cc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	755a      	strb	r2, [r3, #21]
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e04e      	b.n	800e36a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2da:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e2de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e2e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d901      	bls.n	800e2ec <f_write+0x264>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2fa:	4413      	add	r3, r2
 800e2fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2fe:	69f9      	ldr	r1, [r7, #28]
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe f883 	bl	800c40c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7d1b      	ldrb	r3, [r3, #20]
 800e30a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e30e:	b2da      	uxtb	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e314:	69fa      	ldr	r2, [r7, #28]
 800e316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e318:	4413      	add	r3, r2
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	699a      	ldr	r2, [r3, #24]
 800e320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e322:	441a      	add	r2, r3
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	619a      	str	r2, [r3, #24]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	68da      	ldr	r2, [r3, #12]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	429a      	cmp	r2, r3
 800e332:	bf38      	it	cc
 800e334:	461a      	movcc	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	60da      	str	r2, [r3, #12]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e340:	441a      	add	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34a:	1ad3      	subs	r3, r2, r3
 800e34c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	f47f aed4 	bne.w	800e0fe <f_write+0x76>
 800e356:	e000      	b.n	800e35a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e358:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	7d1b      	ldrb	r3, [r3, #20]
 800e35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e362:	b2da      	uxtb	r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3730      	adds	r7, #48	@ 0x30
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b086      	sub	sp, #24
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f107 0208 	add.w	r2, r7, #8
 800e380:	4611      	mov	r1, r2
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff fc4a 	bl	800dc1c <validate>
 800e388:	4603      	mov	r3, r0
 800e38a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d168      	bne.n	800e464 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	7d1b      	ldrb	r3, [r3, #20]
 800e396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d062      	beq.n	800e464 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7d1b      	ldrb	r3, [r3, #20]
 800e3a2:	b25b      	sxtb	r3, r3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	da15      	bge.n	800e3d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	7858      	ldrb	r0, [r3, #1]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a1a      	ldr	r2, [r3, #32]
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f7fd ff68 	bl	800c28c <disk_write>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <f_sync+0x54>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e04f      	b.n	800e466 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e3d4:	f7fd fcd8 	bl	800bd88 <get_fattime>
 800e3d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f7fe fa04 	bl	800c7f0 <move_window>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d138      	bne.n	800e464 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	330b      	adds	r3, #11
 800e3fc:	781a      	ldrb	r2, [r3, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	330b      	adds	r3, #11
 800e402:	f042 0220 	orr.w	r2, r2, #32
 800e406:	b2d2      	uxtb	r2, r2
 800e408:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6818      	ldr	r0, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	461a      	mov	r2, r3
 800e414:	68f9      	ldr	r1, [r7, #12]
 800e416:	f7fe ff0e 	bl	800d236 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f103 021c 	add.w	r2, r3, #28
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	4619      	mov	r1, r3
 800e426:	4610      	mov	r0, r2
 800e428:	f7fd ffc4 	bl	800c3b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3316      	adds	r3, #22
 800e430:	6939      	ldr	r1, [r7, #16]
 800e432:	4618      	mov	r0, r3
 800e434:	f7fd ffbe 	bl	800c3b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3312      	adds	r3, #18
 800e43c:	2100      	movs	r1, #0
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fd ff9d 	bl	800c37e <st_word>
					fs->wflag = 1;
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	2201      	movs	r2, #1
 800e448:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fe f9fd 	bl	800c84c <sync_fs>
 800e452:	4603      	mov	r3, r0
 800e454:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	7d1b      	ldrb	r3, [r3, #20]
 800e45a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e464:	7dfb      	ldrb	r3, [r7, #23]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3718      	adds	r7, #24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b090      	sub	sp, #64	@ 0x40
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
 800e476:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e478:	f107 010c 	add.w	r1, r7, #12
 800e47c:	1d3b      	adds	r3, r7, #4
 800e47e:	2200      	movs	r2, #0
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff f97f 	bl	800d784 <find_volume>
 800e486:	4603      	mov	r3, r0
 800e488:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800e48c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e490:	2b00      	cmp	r3, #0
 800e492:	d11f      	bne.n	800e4d4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	f107 030c 	add.w	r3, r7, #12
 800e49a:	4611      	mov	r1, r2
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff f865 	bl	800d56c <follow_path>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800e4a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d111      	bne.n	800e4d4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e4b0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e4b4:	b25b      	sxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	da03      	bge.n	800e4c2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e4ba:	2306      	movs	r3, #6
 800e4bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e4c0:	e008      	b.n	800e4d4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <f_stat+0x66>
 800e4c8:	f107 030c 	add.w	r3, r7, #12
 800e4cc:	6839      	ldr	r1, [r7, #0]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe ff58 	bl	800d384 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e4d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3740      	adds	r7, #64	@ 0x40
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e4f6:	4b1f      	ldr	r3, [pc, #124]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e4f8:	7a5b      	ldrb	r3, [r3, #9]
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d131      	bne.n	800e564 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e500:	4b1c      	ldr	r3, [pc, #112]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e502:	7a5b      	ldrb	r3, [r3, #9]
 800e504:	b2db      	uxtb	r3, r3
 800e506:	461a      	mov	r2, r3
 800e508:	4b1a      	ldr	r3, [pc, #104]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e50a:	2100      	movs	r1, #0
 800e50c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e50e:	4b19      	ldr	r3, [pc, #100]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e510:	7a5b      	ldrb	r3, [r3, #9]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	4a17      	ldr	r2, [pc, #92]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e51e:	4b15      	ldr	r3, [pc, #84]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e520:	7a5b      	ldrb	r3, [r3, #9]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	461a      	mov	r2, r3
 800e526:	4b13      	ldr	r3, [pc, #76]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e528:	4413      	add	r3, r2
 800e52a:	79fa      	ldrb	r2, [r7, #7]
 800e52c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e52e:	4b11      	ldr	r3, [pc, #68]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e530:	7a5b      	ldrb	r3, [r3, #9]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	b2d1      	uxtb	r1, r2
 800e538:	4a0e      	ldr	r2, [pc, #56]	@ (800e574 <FATFS_LinkDriverEx+0x94>)
 800e53a:	7251      	strb	r1, [r2, #9]
 800e53c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e53e:	7dbb      	ldrb	r3, [r7, #22]
 800e540:	3330      	adds	r3, #48	@ 0x30
 800e542:	b2da      	uxtb	r2, r3
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	3301      	adds	r3, #1
 800e54c:	223a      	movs	r2, #58	@ 0x3a
 800e54e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	3302      	adds	r3, #2
 800e554:	222f      	movs	r2, #47	@ 0x2f
 800e556:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	3303      	adds	r3, #3
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e564:	7dfb      	ldrb	r3, [r7, #23]
}
 800e566:	4618      	mov	r0, r3
 800e568:	371c      	adds	r7, #28
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	24004800 	.word	0x24004800

0800e578 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e582:	2200      	movs	r2, #0
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff ffaa 	bl	800e4e0 <FATFS_LinkDriverEx>
 800e58c:	4603      	mov	r3, r0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <atoi>:
 800e596:	220a      	movs	r2, #10
 800e598:	2100      	movs	r1, #0
 800e59a:	f000 b87b 	b.w	800e694 <strtol>
	...

0800e5a0 <_strtol_l.constprop.0>:
 800e5a0:	2b24      	cmp	r3, #36	@ 0x24
 800e5a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a6:	4686      	mov	lr, r0
 800e5a8:	4690      	mov	r8, r2
 800e5aa:	d801      	bhi.n	800e5b0 <_strtol_l.constprop.0+0x10>
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d106      	bne.n	800e5be <_strtol_l.constprop.0+0x1e>
 800e5b0:	f000 fe0a 	bl	800f1c8 <__errno>
 800e5b4:	2316      	movs	r3, #22
 800e5b6:	6003      	str	r3, [r0, #0]
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5be:	4834      	ldr	r0, [pc, #208]	@ (800e690 <_strtol_l.constprop.0+0xf0>)
 800e5c0:	460d      	mov	r5, r1
 800e5c2:	462a      	mov	r2, r5
 800e5c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5c8:	5d06      	ldrb	r6, [r0, r4]
 800e5ca:	f016 0608 	ands.w	r6, r6, #8
 800e5ce:	d1f8      	bne.n	800e5c2 <_strtol_l.constprop.0+0x22>
 800e5d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800e5d2:	d12d      	bne.n	800e630 <_strtol_l.constprop.0+0x90>
 800e5d4:	782c      	ldrb	r4, [r5, #0]
 800e5d6:	2601      	movs	r6, #1
 800e5d8:	1c95      	adds	r5, r2, #2
 800e5da:	f033 0210 	bics.w	r2, r3, #16
 800e5de:	d109      	bne.n	800e5f4 <_strtol_l.constprop.0+0x54>
 800e5e0:	2c30      	cmp	r4, #48	@ 0x30
 800e5e2:	d12a      	bne.n	800e63a <_strtol_l.constprop.0+0x9a>
 800e5e4:	782a      	ldrb	r2, [r5, #0]
 800e5e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e5ea:	2a58      	cmp	r2, #88	@ 0x58
 800e5ec:	d125      	bne.n	800e63a <_strtol_l.constprop.0+0x9a>
 800e5ee:	786c      	ldrb	r4, [r5, #1]
 800e5f0:	2310      	movs	r3, #16
 800e5f2:	3502      	adds	r5, #2
 800e5f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e5f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	fbbc f9f3 	udiv	r9, ip, r3
 800e602:	4610      	mov	r0, r2
 800e604:	fb03 ca19 	mls	sl, r3, r9, ip
 800e608:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e60c:	2f09      	cmp	r7, #9
 800e60e:	d81b      	bhi.n	800e648 <_strtol_l.constprop.0+0xa8>
 800e610:	463c      	mov	r4, r7
 800e612:	42a3      	cmp	r3, r4
 800e614:	dd27      	ble.n	800e666 <_strtol_l.constprop.0+0xc6>
 800e616:	1c57      	adds	r7, r2, #1
 800e618:	d007      	beq.n	800e62a <_strtol_l.constprop.0+0x8a>
 800e61a:	4581      	cmp	r9, r0
 800e61c:	d320      	bcc.n	800e660 <_strtol_l.constprop.0+0xc0>
 800e61e:	d101      	bne.n	800e624 <_strtol_l.constprop.0+0x84>
 800e620:	45a2      	cmp	sl, r4
 800e622:	db1d      	blt.n	800e660 <_strtol_l.constprop.0+0xc0>
 800e624:	fb00 4003 	mla	r0, r0, r3, r4
 800e628:	2201      	movs	r2, #1
 800e62a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e62e:	e7eb      	b.n	800e608 <_strtol_l.constprop.0+0x68>
 800e630:	2c2b      	cmp	r4, #43	@ 0x2b
 800e632:	bf04      	itt	eq
 800e634:	782c      	ldrbeq	r4, [r5, #0]
 800e636:	1c95      	addeq	r5, r2, #2
 800e638:	e7cf      	b.n	800e5da <_strtol_l.constprop.0+0x3a>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1da      	bne.n	800e5f4 <_strtol_l.constprop.0+0x54>
 800e63e:	2c30      	cmp	r4, #48	@ 0x30
 800e640:	bf0c      	ite	eq
 800e642:	2308      	moveq	r3, #8
 800e644:	230a      	movne	r3, #10
 800e646:	e7d5      	b.n	800e5f4 <_strtol_l.constprop.0+0x54>
 800e648:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e64c:	2f19      	cmp	r7, #25
 800e64e:	d801      	bhi.n	800e654 <_strtol_l.constprop.0+0xb4>
 800e650:	3c37      	subs	r4, #55	@ 0x37
 800e652:	e7de      	b.n	800e612 <_strtol_l.constprop.0+0x72>
 800e654:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e658:	2f19      	cmp	r7, #25
 800e65a:	d804      	bhi.n	800e666 <_strtol_l.constprop.0+0xc6>
 800e65c:	3c57      	subs	r4, #87	@ 0x57
 800e65e:	e7d8      	b.n	800e612 <_strtol_l.constprop.0+0x72>
 800e660:	f04f 32ff 	mov.w	r2, #4294967295
 800e664:	e7e1      	b.n	800e62a <_strtol_l.constprop.0+0x8a>
 800e666:	1c53      	adds	r3, r2, #1
 800e668:	d108      	bne.n	800e67c <_strtol_l.constprop.0+0xdc>
 800e66a:	2322      	movs	r3, #34	@ 0x22
 800e66c:	f8ce 3000 	str.w	r3, [lr]
 800e670:	4660      	mov	r0, ip
 800e672:	f1b8 0f00 	cmp.w	r8, #0
 800e676:	d0a0      	beq.n	800e5ba <_strtol_l.constprop.0+0x1a>
 800e678:	1e69      	subs	r1, r5, #1
 800e67a:	e006      	b.n	800e68a <_strtol_l.constprop.0+0xea>
 800e67c:	b106      	cbz	r6, 800e680 <_strtol_l.constprop.0+0xe0>
 800e67e:	4240      	negs	r0, r0
 800e680:	f1b8 0f00 	cmp.w	r8, #0
 800e684:	d099      	beq.n	800e5ba <_strtol_l.constprop.0+0x1a>
 800e686:	2a00      	cmp	r2, #0
 800e688:	d1f6      	bne.n	800e678 <_strtol_l.constprop.0+0xd8>
 800e68a:	f8c8 1000 	str.w	r1, [r8]
 800e68e:	e794      	b.n	800e5ba <_strtol_l.constprop.0+0x1a>
 800e690:	08010fe9 	.word	0x08010fe9

0800e694 <strtol>:
 800e694:	4613      	mov	r3, r2
 800e696:	460a      	mov	r2, r1
 800e698:	4601      	mov	r1, r0
 800e69a:	4802      	ldr	r0, [pc, #8]	@ (800e6a4 <strtol+0x10>)
 800e69c:	6800      	ldr	r0, [r0, #0]
 800e69e:	f7ff bf7f 	b.w	800e5a0 <_strtol_l.constprop.0>
 800e6a2:	bf00      	nop
 800e6a4:	24000040 	.word	0x24000040

0800e6a8 <__cvt>:
 800e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6aa:	ed2d 8b02 	vpush	{d8}
 800e6ae:	eeb0 8b40 	vmov.f64	d8, d0
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	4617      	mov	r7, r2
 800e6b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e6b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6ba:	ee18 2a90 	vmov	r2, s17
 800e6be:	f025 0520 	bic.w	r5, r5, #32
 800e6c2:	2a00      	cmp	r2, #0
 800e6c4:	bfb6      	itet	lt
 800e6c6:	222d      	movlt	r2, #45	@ 0x2d
 800e6c8:	2200      	movge	r2, #0
 800e6ca:	eeb1 8b40 	vneglt.f64	d8, d0
 800e6ce:	2d46      	cmp	r5, #70	@ 0x46
 800e6d0:	460c      	mov	r4, r1
 800e6d2:	701a      	strb	r2, [r3, #0]
 800e6d4:	d004      	beq.n	800e6e0 <__cvt+0x38>
 800e6d6:	2d45      	cmp	r5, #69	@ 0x45
 800e6d8:	d100      	bne.n	800e6dc <__cvt+0x34>
 800e6da:	3401      	adds	r4, #1
 800e6dc:	2102      	movs	r1, #2
 800e6de:	e000      	b.n	800e6e2 <__cvt+0x3a>
 800e6e0:	2103      	movs	r1, #3
 800e6e2:	ab03      	add	r3, sp, #12
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	ab02      	add	r3, sp, #8
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	4633      	mov	r3, r6
 800e6ee:	eeb0 0b48 	vmov.f64	d0, d8
 800e6f2:	f000 fe2d 	bl	800f350 <_dtoa_r>
 800e6f6:	2d47      	cmp	r5, #71	@ 0x47
 800e6f8:	d114      	bne.n	800e724 <__cvt+0x7c>
 800e6fa:	07fb      	lsls	r3, r7, #31
 800e6fc:	d50a      	bpl.n	800e714 <__cvt+0x6c>
 800e6fe:	1902      	adds	r2, r0, r4
 800e700:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e708:	bf08      	it	eq
 800e70a:	9203      	streq	r2, [sp, #12]
 800e70c:	2130      	movs	r1, #48	@ 0x30
 800e70e:	9b03      	ldr	r3, [sp, #12]
 800e710:	4293      	cmp	r3, r2
 800e712:	d319      	bcc.n	800e748 <__cvt+0xa0>
 800e714:	9b03      	ldr	r3, [sp, #12]
 800e716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e718:	1a1b      	subs	r3, r3, r0
 800e71a:	6013      	str	r3, [r2, #0]
 800e71c:	b005      	add	sp, #20
 800e71e:	ecbd 8b02 	vpop	{d8}
 800e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e724:	2d46      	cmp	r5, #70	@ 0x46
 800e726:	eb00 0204 	add.w	r2, r0, r4
 800e72a:	d1e9      	bne.n	800e700 <__cvt+0x58>
 800e72c:	7803      	ldrb	r3, [r0, #0]
 800e72e:	2b30      	cmp	r3, #48	@ 0x30
 800e730:	d107      	bne.n	800e742 <__cvt+0x9a>
 800e732:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	bf1c      	itt	ne
 800e73c:	f1c4 0401 	rsbne	r4, r4, #1
 800e740:	6034      	strne	r4, [r6, #0]
 800e742:	6833      	ldr	r3, [r6, #0]
 800e744:	441a      	add	r2, r3
 800e746:	e7db      	b.n	800e700 <__cvt+0x58>
 800e748:	1c5c      	adds	r4, r3, #1
 800e74a:	9403      	str	r4, [sp, #12]
 800e74c:	7019      	strb	r1, [r3, #0]
 800e74e:	e7de      	b.n	800e70e <__cvt+0x66>

0800e750 <__exponent>:
 800e750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e752:	2900      	cmp	r1, #0
 800e754:	bfba      	itte	lt
 800e756:	4249      	neglt	r1, r1
 800e758:	232d      	movlt	r3, #45	@ 0x2d
 800e75a:	232b      	movge	r3, #43	@ 0x2b
 800e75c:	2909      	cmp	r1, #9
 800e75e:	7002      	strb	r2, [r0, #0]
 800e760:	7043      	strb	r3, [r0, #1]
 800e762:	dd29      	ble.n	800e7b8 <__exponent+0x68>
 800e764:	f10d 0307 	add.w	r3, sp, #7
 800e768:	461d      	mov	r5, r3
 800e76a:	270a      	movs	r7, #10
 800e76c:	461a      	mov	r2, r3
 800e76e:	fbb1 f6f7 	udiv	r6, r1, r7
 800e772:	fb07 1416 	mls	r4, r7, r6, r1
 800e776:	3430      	adds	r4, #48	@ 0x30
 800e778:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e77c:	460c      	mov	r4, r1
 800e77e:	2c63      	cmp	r4, #99	@ 0x63
 800e780:	f103 33ff 	add.w	r3, r3, #4294967295
 800e784:	4631      	mov	r1, r6
 800e786:	dcf1      	bgt.n	800e76c <__exponent+0x1c>
 800e788:	3130      	adds	r1, #48	@ 0x30
 800e78a:	1e94      	subs	r4, r2, #2
 800e78c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e790:	1c41      	adds	r1, r0, #1
 800e792:	4623      	mov	r3, r4
 800e794:	42ab      	cmp	r3, r5
 800e796:	d30a      	bcc.n	800e7ae <__exponent+0x5e>
 800e798:	f10d 0309 	add.w	r3, sp, #9
 800e79c:	1a9b      	subs	r3, r3, r2
 800e79e:	42ac      	cmp	r4, r5
 800e7a0:	bf88      	it	hi
 800e7a2:	2300      	movhi	r3, #0
 800e7a4:	3302      	adds	r3, #2
 800e7a6:	4403      	add	r3, r0
 800e7a8:	1a18      	subs	r0, r3, r0
 800e7aa:	b003      	add	sp, #12
 800e7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e7b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e7b6:	e7ed      	b.n	800e794 <__exponent+0x44>
 800e7b8:	2330      	movs	r3, #48	@ 0x30
 800e7ba:	3130      	adds	r1, #48	@ 0x30
 800e7bc:	7083      	strb	r3, [r0, #2]
 800e7be:	70c1      	strb	r1, [r0, #3]
 800e7c0:	1d03      	adds	r3, r0, #4
 800e7c2:	e7f1      	b.n	800e7a8 <__exponent+0x58>
 800e7c4:	0000      	movs	r0, r0
	...

0800e7c8 <_printf_float>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	b08d      	sub	sp, #52	@ 0x34
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e7d4:	4616      	mov	r6, r2
 800e7d6:	461f      	mov	r7, r3
 800e7d8:	4605      	mov	r5, r0
 800e7da:	f000 fcab 	bl	800f134 <_localeconv_r>
 800e7de:	f8d0 b000 	ldr.w	fp, [r0]
 800e7e2:	4658      	mov	r0, fp
 800e7e4:	f7f1 fdcc 	bl	8000380 <strlen>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e7f4:	6822      	ldr	r2, [r4, #0]
 800e7f6:	9005      	str	r0, [sp, #20]
 800e7f8:	3307      	adds	r3, #7
 800e7fa:	f023 0307 	bic.w	r3, r3, #7
 800e7fe:	f103 0108 	add.w	r1, r3, #8
 800e802:	f8c8 1000 	str.w	r1, [r8]
 800e806:	ed93 0b00 	vldr	d0, [r3]
 800e80a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ea68 <_printf_float+0x2a0>
 800e80e:	eeb0 7bc0 	vabs.f64	d7, d0
 800e812:	eeb4 7b46 	vcmp.f64	d7, d6
 800e816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e81e:	dd24      	ble.n	800e86a <_printf_float+0xa2>
 800e820:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e828:	d502      	bpl.n	800e830 <_printf_float+0x68>
 800e82a:	232d      	movs	r3, #45	@ 0x2d
 800e82c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e830:	498f      	ldr	r1, [pc, #572]	@ (800ea70 <_printf_float+0x2a8>)
 800e832:	4b90      	ldr	r3, [pc, #576]	@ (800ea74 <_printf_float+0x2ac>)
 800e834:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e838:	bf94      	ite	ls
 800e83a:	4688      	movls	r8, r1
 800e83c:	4698      	movhi	r8, r3
 800e83e:	f022 0204 	bic.w	r2, r2, #4
 800e842:	2303      	movs	r3, #3
 800e844:	6123      	str	r3, [r4, #16]
 800e846:	6022      	str	r2, [r4, #0]
 800e848:	f04f 0a00 	mov.w	sl, #0
 800e84c:	9700      	str	r7, [sp, #0]
 800e84e:	4633      	mov	r3, r6
 800e850:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e852:	4621      	mov	r1, r4
 800e854:	4628      	mov	r0, r5
 800e856:	f000 f9d1 	bl	800ebfc <_printf_common>
 800e85a:	3001      	adds	r0, #1
 800e85c:	f040 8089 	bne.w	800e972 <_printf_float+0x1aa>
 800e860:	f04f 30ff 	mov.w	r0, #4294967295
 800e864:	b00d      	add	sp, #52	@ 0x34
 800e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86a:	eeb4 0b40 	vcmp.f64	d0, d0
 800e86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e872:	d709      	bvc.n	800e888 <_printf_float+0xc0>
 800e874:	ee10 3a90 	vmov	r3, s1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	bfbc      	itt	lt
 800e87c:	232d      	movlt	r3, #45	@ 0x2d
 800e87e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e882:	497d      	ldr	r1, [pc, #500]	@ (800ea78 <_printf_float+0x2b0>)
 800e884:	4b7d      	ldr	r3, [pc, #500]	@ (800ea7c <_printf_float+0x2b4>)
 800e886:	e7d5      	b.n	800e834 <_printf_float+0x6c>
 800e888:	6863      	ldr	r3, [r4, #4]
 800e88a:	1c59      	adds	r1, r3, #1
 800e88c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e890:	d139      	bne.n	800e906 <_printf_float+0x13e>
 800e892:	2306      	movs	r3, #6
 800e894:	6063      	str	r3, [r4, #4]
 800e896:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e89a:	2300      	movs	r3, #0
 800e89c:	6022      	str	r2, [r4, #0]
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e8a6:	ab09      	add	r3, sp, #36	@ 0x24
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	6861      	ldr	r1, [r4, #4]
 800e8ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	f7ff fef9 	bl	800e6a8 <__cvt>
 800e8b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e8ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8bc:	4680      	mov	r8, r0
 800e8be:	d129      	bne.n	800e914 <_printf_float+0x14c>
 800e8c0:	1cc8      	adds	r0, r1, #3
 800e8c2:	db02      	blt.n	800e8ca <_printf_float+0x102>
 800e8c4:	6863      	ldr	r3, [r4, #4]
 800e8c6:	4299      	cmp	r1, r3
 800e8c8:	dd41      	ble.n	800e94e <_printf_float+0x186>
 800e8ca:	f1a9 0902 	sub.w	r9, r9, #2
 800e8ce:	fa5f f989 	uxtb.w	r9, r9
 800e8d2:	3901      	subs	r1, #1
 800e8d4:	464a      	mov	r2, r9
 800e8d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e8da:	9109      	str	r1, [sp, #36]	@ 0x24
 800e8dc:	f7ff ff38 	bl	800e750 <__exponent>
 800e8e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8e2:	1813      	adds	r3, r2, r0
 800e8e4:	2a01      	cmp	r2, #1
 800e8e6:	4682      	mov	sl, r0
 800e8e8:	6123      	str	r3, [r4, #16]
 800e8ea:	dc02      	bgt.n	800e8f2 <_printf_float+0x12a>
 800e8ec:	6822      	ldr	r2, [r4, #0]
 800e8ee:	07d2      	lsls	r2, r2, #31
 800e8f0:	d501      	bpl.n	800e8f6 <_printf_float+0x12e>
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	6123      	str	r3, [r4, #16]
 800e8f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0a6      	beq.n	800e84c <_printf_float+0x84>
 800e8fe:	232d      	movs	r3, #45	@ 0x2d
 800e900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e904:	e7a2      	b.n	800e84c <_printf_float+0x84>
 800e906:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e90a:	d1c4      	bne.n	800e896 <_printf_float+0xce>
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1c2      	bne.n	800e896 <_printf_float+0xce>
 800e910:	2301      	movs	r3, #1
 800e912:	e7bf      	b.n	800e894 <_printf_float+0xcc>
 800e914:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e918:	d9db      	bls.n	800e8d2 <_printf_float+0x10a>
 800e91a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e91e:	d118      	bne.n	800e952 <_printf_float+0x18a>
 800e920:	2900      	cmp	r1, #0
 800e922:	6863      	ldr	r3, [r4, #4]
 800e924:	dd0b      	ble.n	800e93e <_printf_float+0x176>
 800e926:	6121      	str	r1, [r4, #16]
 800e928:	b913      	cbnz	r3, 800e930 <_printf_float+0x168>
 800e92a:	6822      	ldr	r2, [r4, #0]
 800e92c:	07d0      	lsls	r0, r2, #31
 800e92e:	d502      	bpl.n	800e936 <_printf_float+0x16e>
 800e930:	3301      	adds	r3, #1
 800e932:	440b      	add	r3, r1
 800e934:	6123      	str	r3, [r4, #16]
 800e936:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e938:	f04f 0a00 	mov.w	sl, #0
 800e93c:	e7db      	b.n	800e8f6 <_printf_float+0x12e>
 800e93e:	b913      	cbnz	r3, 800e946 <_printf_float+0x17e>
 800e940:	6822      	ldr	r2, [r4, #0]
 800e942:	07d2      	lsls	r2, r2, #31
 800e944:	d501      	bpl.n	800e94a <_printf_float+0x182>
 800e946:	3302      	adds	r3, #2
 800e948:	e7f4      	b.n	800e934 <_printf_float+0x16c>
 800e94a:	2301      	movs	r3, #1
 800e94c:	e7f2      	b.n	800e934 <_printf_float+0x16c>
 800e94e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e954:	4299      	cmp	r1, r3
 800e956:	db05      	blt.n	800e964 <_printf_float+0x19c>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	6121      	str	r1, [r4, #16]
 800e95c:	07d8      	lsls	r0, r3, #31
 800e95e:	d5ea      	bpl.n	800e936 <_printf_float+0x16e>
 800e960:	1c4b      	adds	r3, r1, #1
 800e962:	e7e7      	b.n	800e934 <_printf_float+0x16c>
 800e964:	2900      	cmp	r1, #0
 800e966:	bfd4      	ite	le
 800e968:	f1c1 0202 	rsble	r2, r1, #2
 800e96c:	2201      	movgt	r2, #1
 800e96e:	4413      	add	r3, r2
 800e970:	e7e0      	b.n	800e934 <_printf_float+0x16c>
 800e972:	6823      	ldr	r3, [r4, #0]
 800e974:	055a      	lsls	r2, r3, #21
 800e976:	d407      	bmi.n	800e988 <_printf_float+0x1c0>
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	4642      	mov	r2, r8
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	d12a      	bne.n	800e9dc <_printf_float+0x214>
 800e986:	e76b      	b.n	800e860 <_printf_float+0x98>
 800e988:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e98c:	f240 80e0 	bls.w	800eb50 <_printf_float+0x388>
 800e990:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e994:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99c:	d133      	bne.n	800ea06 <_printf_float+0x23e>
 800e99e:	4a38      	ldr	r2, [pc, #224]	@ (800ea80 <_printf_float+0x2b8>)
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	47b8      	blx	r7
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f43f af59 	beq.w	800e860 <_printf_float+0x98>
 800e9ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e9b2:	4543      	cmp	r3, r8
 800e9b4:	db02      	blt.n	800e9bc <_printf_float+0x1f4>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	07d8      	lsls	r0, r3, #31
 800e9ba:	d50f      	bpl.n	800e9dc <_printf_float+0x214>
 800e9bc:	9b05      	ldr	r3, [sp, #20]
 800e9be:	465a      	mov	r2, fp
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	47b8      	blx	r7
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	f43f af4a 	beq.w	800e860 <_printf_float+0x98>
 800e9cc:	f04f 0900 	mov.w	r9, #0
 800e9d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e9d4:	f104 0a1a 	add.w	sl, r4, #26
 800e9d8:	45c8      	cmp	r8, r9
 800e9da:	dc09      	bgt.n	800e9f0 <_printf_float+0x228>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	079b      	lsls	r3, r3, #30
 800e9e0:	f100 8107 	bmi.w	800ebf2 <_printf_float+0x42a>
 800e9e4:	68e0      	ldr	r0, [r4, #12]
 800e9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9e8:	4298      	cmp	r0, r3
 800e9ea:	bfb8      	it	lt
 800e9ec:	4618      	movlt	r0, r3
 800e9ee:	e739      	b.n	800e864 <_printf_float+0x9c>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	4652      	mov	r2, sl
 800e9f4:	4631      	mov	r1, r6
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	47b8      	blx	r7
 800e9fa:	3001      	adds	r0, #1
 800e9fc:	f43f af30 	beq.w	800e860 <_printf_float+0x98>
 800ea00:	f109 0901 	add.w	r9, r9, #1
 800ea04:	e7e8      	b.n	800e9d8 <_printf_float+0x210>
 800ea06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	dc3b      	bgt.n	800ea84 <_printf_float+0x2bc>
 800ea0c:	4a1c      	ldr	r2, [pc, #112]	@ (800ea80 <_printf_float+0x2b8>)
 800ea0e:	2301      	movs	r3, #1
 800ea10:	4631      	mov	r1, r6
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b8      	blx	r7
 800ea16:	3001      	adds	r0, #1
 800ea18:	f43f af22 	beq.w	800e860 <_printf_float+0x98>
 800ea1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ea20:	ea59 0303 	orrs.w	r3, r9, r3
 800ea24:	d102      	bne.n	800ea2c <_printf_float+0x264>
 800ea26:	6823      	ldr	r3, [r4, #0]
 800ea28:	07d9      	lsls	r1, r3, #31
 800ea2a:	d5d7      	bpl.n	800e9dc <_printf_float+0x214>
 800ea2c:	9b05      	ldr	r3, [sp, #20]
 800ea2e:	465a      	mov	r2, fp
 800ea30:	4631      	mov	r1, r6
 800ea32:	4628      	mov	r0, r5
 800ea34:	47b8      	blx	r7
 800ea36:	3001      	adds	r0, #1
 800ea38:	f43f af12 	beq.w	800e860 <_printf_float+0x98>
 800ea3c:	f04f 0a00 	mov.w	sl, #0
 800ea40:	f104 0b1a 	add.w	fp, r4, #26
 800ea44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea46:	425b      	negs	r3, r3
 800ea48:	4553      	cmp	r3, sl
 800ea4a:	dc01      	bgt.n	800ea50 <_printf_float+0x288>
 800ea4c:	464b      	mov	r3, r9
 800ea4e:	e794      	b.n	800e97a <_printf_float+0x1b2>
 800ea50:	2301      	movs	r3, #1
 800ea52:	465a      	mov	r2, fp
 800ea54:	4631      	mov	r1, r6
 800ea56:	4628      	mov	r0, r5
 800ea58:	47b8      	blx	r7
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	f43f af00 	beq.w	800e860 <_printf_float+0x98>
 800ea60:	f10a 0a01 	add.w	sl, sl, #1
 800ea64:	e7ee      	b.n	800ea44 <_printf_float+0x27c>
 800ea66:	bf00      	nop
 800ea68:	ffffffff 	.word	0xffffffff
 800ea6c:	7fefffff 	.word	0x7fefffff
 800ea70:	080110e9 	.word	0x080110e9
 800ea74:	080110ed 	.word	0x080110ed
 800ea78:	080110f1 	.word	0x080110f1
 800ea7c:	080110f5 	.word	0x080110f5
 800ea80:	080110f9 	.word	0x080110f9
 800ea84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea8a:	4553      	cmp	r3, sl
 800ea8c:	bfa8      	it	ge
 800ea8e:	4653      	movge	r3, sl
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	4699      	mov	r9, r3
 800ea94:	dc37      	bgt.n	800eb06 <_printf_float+0x33e>
 800ea96:	2300      	movs	r3, #0
 800ea98:	9307      	str	r3, [sp, #28]
 800ea9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea9e:	f104 021a 	add.w	r2, r4, #26
 800eaa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eaa4:	9907      	ldr	r1, [sp, #28]
 800eaa6:	9306      	str	r3, [sp, #24]
 800eaa8:	eba3 0309 	sub.w	r3, r3, r9
 800eaac:	428b      	cmp	r3, r1
 800eaae:	dc31      	bgt.n	800eb14 <_printf_float+0x34c>
 800eab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab2:	459a      	cmp	sl, r3
 800eab4:	dc3b      	bgt.n	800eb2e <_printf_float+0x366>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	07da      	lsls	r2, r3, #31
 800eaba:	d438      	bmi.n	800eb2e <_printf_float+0x366>
 800eabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eabe:	ebaa 0903 	sub.w	r9, sl, r3
 800eac2:	9b06      	ldr	r3, [sp, #24]
 800eac4:	ebaa 0303 	sub.w	r3, sl, r3
 800eac8:	4599      	cmp	r9, r3
 800eaca:	bfa8      	it	ge
 800eacc:	4699      	movge	r9, r3
 800eace:	f1b9 0f00 	cmp.w	r9, #0
 800ead2:	dc34      	bgt.n	800eb3e <_printf_float+0x376>
 800ead4:	f04f 0800 	mov.w	r8, #0
 800ead8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eadc:	f104 0b1a 	add.w	fp, r4, #26
 800eae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae2:	ebaa 0303 	sub.w	r3, sl, r3
 800eae6:	eba3 0309 	sub.w	r3, r3, r9
 800eaea:	4543      	cmp	r3, r8
 800eaec:	f77f af76 	ble.w	800e9dc <_printf_float+0x214>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	465a      	mov	r2, fp
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	47b8      	blx	r7
 800eafa:	3001      	adds	r0, #1
 800eafc:	f43f aeb0 	beq.w	800e860 <_printf_float+0x98>
 800eb00:	f108 0801 	add.w	r8, r8, #1
 800eb04:	e7ec      	b.n	800eae0 <_printf_float+0x318>
 800eb06:	4642      	mov	r2, r8
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d1c1      	bne.n	800ea96 <_printf_float+0x2ce>
 800eb12:	e6a5      	b.n	800e860 <_printf_float+0x98>
 800eb14:	2301      	movs	r3, #1
 800eb16:	4631      	mov	r1, r6
 800eb18:	4628      	mov	r0, r5
 800eb1a:	9206      	str	r2, [sp, #24]
 800eb1c:	47b8      	blx	r7
 800eb1e:	3001      	adds	r0, #1
 800eb20:	f43f ae9e 	beq.w	800e860 <_printf_float+0x98>
 800eb24:	9b07      	ldr	r3, [sp, #28]
 800eb26:	9a06      	ldr	r2, [sp, #24]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	9307      	str	r3, [sp, #28]
 800eb2c:	e7b9      	b.n	800eaa2 <_printf_float+0x2da>
 800eb2e:	9b05      	ldr	r3, [sp, #20]
 800eb30:	465a      	mov	r2, fp
 800eb32:	4631      	mov	r1, r6
 800eb34:	4628      	mov	r0, r5
 800eb36:	47b8      	blx	r7
 800eb38:	3001      	adds	r0, #1
 800eb3a:	d1bf      	bne.n	800eabc <_printf_float+0x2f4>
 800eb3c:	e690      	b.n	800e860 <_printf_float+0x98>
 800eb3e:	9a06      	ldr	r2, [sp, #24]
 800eb40:	464b      	mov	r3, r9
 800eb42:	4442      	add	r2, r8
 800eb44:	4631      	mov	r1, r6
 800eb46:	4628      	mov	r0, r5
 800eb48:	47b8      	blx	r7
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	d1c2      	bne.n	800ead4 <_printf_float+0x30c>
 800eb4e:	e687      	b.n	800e860 <_printf_float+0x98>
 800eb50:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800eb54:	f1b9 0f01 	cmp.w	r9, #1
 800eb58:	dc01      	bgt.n	800eb5e <_printf_float+0x396>
 800eb5a:	07db      	lsls	r3, r3, #31
 800eb5c:	d536      	bpl.n	800ebcc <_printf_float+0x404>
 800eb5e:	2301      	movs	r3, #1
 800eb60:	4642      	mov	r2, r8
 800eb62:	4631      	mov	r1, r6
 800eb64:	4628      	mov	r0, r5
 800eb66:	47b8      	blx	r7
 800eb68:	3001      	adds	r0, #1
 800eb6a:	f43f ae79 	beq.w	800e860 <_printf_float+0x98>
 800eb6e:	9b05      	ldr	r3, [sp, #20]
 800eb70:	465a      	mov	r2, fp
 800eb72:	4631      	mov	r1, r6
 800eb74:	4628      	mov	r0, r5
 800eb76:	47b8      	blx	r7
 800eb78:	3001      	adds	r0, #1
 800eb7a:	f43f ae71 	beq.w	800e860 <_printf_float+0x98>
 800eb7e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800eb82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8a:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb8e:	d018      	beq.n	800ebc2 <_printf_float+0x3fa>
 800eb90:	464b      	mov	r3, r9
 800eb92:	f108 0201 	add.w	r2, r8, #1
 800eb96:	4631      	mov	r1, r6
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b8      	blx	r7
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	d10c      	bne.n	800ebba <_printf_float+0x3f2>
 800eba0:	e65e      	b.n	800e860 <_printf_float+0x98>
 800eba2:	2301      	movs	r3, #1
 800eba4:	465a      	mov	r2, fp
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b8      	blx	r7
 800ebac:	3001      	adds	r0, #1
 800ebae:	f43f ae57 	beq.w	800e860 <_printf_float+0x98>
 800ebb2:	f108 0801 	add.w	r8, r8, #1
 800ebb6:	45c8      	cmp	r8, r9
 800ebb8:	dbf3      	blt.n	800eba2 <_printf_float+0x3da>
 800ebba:	4653      	mov	r3, sl
 800ebbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ebc0:	e6dc      	b.n	800e97c <_printf_float+0x1b4>
 800ebc2:	f04f 0800 	mov.w	r8, #0
 800ebc6:	f104 0b1a 	add.w	fp, r4, #26
 800ebca:	e7f4      	b.n	800ebb6 <_printf_float+0x3ee>
 800ebcc:	2301      	movs	r3, #1
 800ebce:	4642      	mov	r2, r8
 800ebd0:	e7e1      	b.n	800eb96 <_printf_float+0x3ce>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	464a      	mov	r2, r9
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b8      	blx	r7
 800ebdc:	3001      	adds	r0, #1
 800ebde:	f43f ae3f 	beq.w	800e860 <_printf_float+0x98>
 800ebe2:	f108 0801 	add.w	r8, r8, #1
 800ebe6:	68e3      	ldr	r3, [r4, #12]
 800ebe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebea:	1a5b      	subs	r3, r3, r1
 800ebec:	4543      	cmp	r3, r8
 800ebee:	dcf0      	bgt.n	800ebd2 <_printf_float+0x40a>
 800ebf0:	e6f8      	b.n	800e9e4 <_printf_float+0x21c>
 800ebf2:	f04f 0800 	mov.w	r8, #0
 800ebf6:	f104 0919 	add.w	r9, r4, #25
 800ebfa:	e7f4      	b.n	800ebe6 <_printf_float+0x41e>

0800ebfc <_printf_common>:
 800ebfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec00:	4616      	mov	r6, r2
 800ec02:	4698      	mov	r8, r3
 800ec04:	688a      	ldr	r2, [r1, #8]
 800ec06:	690b      	ldr	r3, [r1, #16]
 800ec08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	bfb8      	it	lt
 800ec10:	4613      	movlt	r3, r2
 800ec12:	6033      	str	r3, [r6, #0]
 800ec14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec18:	4607      	mov	r7, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	b10a      	cbz	r2, 800ec22 <_printf_common+0x26>
 800ec1e:	3301      	adds	r3, #1
 800ec20:	6033      	str	r3, [r6, #0]
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	0699      	lsls	r1, r3, #26
 800ec26:	bf42      	ittt	mi
 800ec28:	6833      	ldrmi	r3, [r6, #0]
 800ec2a:	3302      	addmi	r3, #2
 800ec2c:	6033      	strmi	r3, [r6, #0]
 800ec2e:	6825      	ldr	r5, [r4, #0]
 800ec30:	f015 0506 	ands.w	r5, r5, #6
 800ec34:	d106      	bne.n	800ec44 <_printf_common+0x48>
 800ec36:	f104 0a19 	add.w	sl, r4, #25
 800ec3a:	68e3      	ldr	r3, [r4, #12]
 800ec3c:	6832      	ldr	r2, [r6, #0]
 800ec3e:	1a9b      	subs	r3, r3, r2
 800ec40:	42ab      	cmp	r3, r5
 800ec42:	dc26      	bgt.n	800ec92 <_printf_common+0x96>
 800ec44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec48:	6822      	ldr	r2, [r4, #0]
 800ec4a:	3b00      	subs	r3, #0
 800ec4c:	bf18      	it	ne
 800ec4e:	2301      	movne	r3, #1
 800ec50:	0692      	lsls	r2, r2, #26
 800ec52:	d42b      	bmi.n	800ecac <_printf_common+0xb0>
 800ec54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec58:	4641      	mov	r1, r8
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	47c8      	blx	r9
 800ec5e:	3001      	adds	r0, #1
 800ec60:	d01e      	beq.n	800eca0 <_printf_common+0xa4>
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	6922      	ldr	r2, [r4, #16]
 800ec66:	f003 0306 	and.w	r3, r3, #6
 800ec6a:	2b04      	cmp	r3, #4
 800ec6c:	bf02      	ittt	eq
 800ec6e:	68e5      	ldreq	r5, [r4, #12]
 800ec70:	6833      	ldreq	r3, [r6, #0]
 800ec72:	1aed      	subeq	r5, r5, r3
 800ec74:	68a3      	ldr	r3, [r4, #8]
 800ec76:	bf0c      	ite	eq
 800ec78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec7c:	2500      	movne	r5, #0
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	bfc4      	itt	gt
 800ec82:	1a9b      	subgt	r3, r3, r2
 800ec84:	18ed      	addgt	r5, r5, r3
 800ec86:	2600      	movs	r6, #0
 800ec88:	341a      	adds	r4, #26
 800ec8a:	42b5      	cmp	r5, r6
 800ec8c:	d11a      	bne.n	800ecc4 <_printf_common+0xc8>
 800ec8e:	2000      	movs	r0, #0
 800ec90:	e008      	b.n	800eca4 <_printf_common+0xa8>
 800ec92:	2301      	movs	r3, #1
 800ec94:	4652      	mov	r2, sl
 800ec96:	4641      	mov	r1, r8
 800ec98:	4638      	mov	r0, r7
 800ec9a:	47c8      	blx	r9
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d103      	bne.n	800eca8 <_printf_common+0xac>
 800eca0:	f04f 30ff 	mov.w	r0, #4294967295
 800eca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca8:	3501      	adds	r5, #1
 800ecaa:	e7c6      	b.n	800ec3a <_printf_common+0x3e>
 800ecac:	18e1      	adds	r1, r4, r3
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	2030      	movs	r0, #48	@ 0x30
 800ecb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecb6:	4422      	add	r2, r4
 800ecb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ecbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ecc0:	3302      	adds	r3, #2
 800ecc2:	e7c7      	b.n	800ec54 <_printf_common+0x58>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	4641      	mov	r1, r8
 800ecca:	4638      	mov	r0, r7
 800eccc:	47c8      	blx	r9
 800ecce:	3001      	adds	r0, #1
 800ecd0:	d0e6      	beq.n	800eca0 <_printf_common+0xa4>
 800ecd2:	3601      	adds	r6, #1
 800ecd4:	e7d9      	b.n	800ec8a <_printf_common+0x8e>
	...

0800ecd8 <_printf_i>:
 800ecd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecdc:	7e0f      	ldrb	r7, [r1, #24]
 800ecde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ece0:	2f78      	cmp	r7, #120	@ 0x78
 800ece2:	4691      	mov	r9, r2
 800ece4:	4680      	mov	r8, r0
 800ece6:	460c      	mov	r4, r1
 800ece8:	469a      	mov	sl, r3
 800ecea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ecee:	d807      	bhi.n	800ed00 <_printf_i+0x28>
 800ecf0:	2f62      	cmp	r7, #98	@ 0x62
 800ecf2:	d80a      	bhi.n	800ed0a <_printf_i+0x32>
 800ecf4:	2f00      	cmp	r7, #0
 800ecf6:	f000 80d2 	beq.w	800ee9e <_printf_i+0x1c6>
 800ecfa:	2f58      	cmp	r7, #88	@ 0x58
 800ecfc:	f000 80b9 	beq.w	800ee72 <_printf_i+0x19a>
 800ed00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed08:	e03a      	b.n	800ed80 <_printf_i+0xa8>
 800ed0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed0e:	2b15      	cmp	r3, #21
 800ed10:	d8f6      	bhi.n	800ed00 <_printf_i+0x28>
 800ed12:	a101      	add	r1, pc, #4	@ (adr r1, 800ed18 <_printf_i+0x40>)
 800ed14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed18:	0800ed71 	.word	0x0800ed71
 800ed1c:	0800ed85 	.word	0x0800ed85
 800ed20:	0800ed01 	.word	0x0800ed01
 800ed24:	0800ed01 	.word	0x0800ed01
 800ed28:	0800ed01 	.word	0x0800ed01
 800ed2c:	0800ed01 	.word	0x0800ed01
 800ed30:	0800ed85 	.word	0x0800ed85
 800ed34:	0800ed01 	.word	0x0800ed01
 800ed38:	0800ed01 	.word	0x0800ed01
 800ed3c:	0800ed01 	.word	0x0800ed01
 800ed40:	0800ed01 	.word	0x0800ed01
 800ed44:	0800ee85 	.word	0x0800ee85
 800ed48:	0800edaf 	.word	0x0800edaf
 800ed4c:	0800ee3f 	.word	0x0800ee3f
 800ed50:	0800ed01 	.word	0x0800ed01
 800ed54:	0800ed01 	.word	0x0800ed01
 800ed58:	0800eea7 	.word	0x0800eea7
 800ed5c:	0800ed01 	.word	0x0800ed01
 800ed60:	0800edaf 	.word	0x0800edaf
 800ed64:	0800ed01 	.word	0x0800ed01
 800ed68:	0800ed01 	.word	0x0800ed01
 800ed6c:	0800ee47 	.word	0x0800ee47
 800ed70:	6833      	ldr	r3, [r6, #0]
 800ed72:	1d1a      	adds	r2, r3, #4
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6032      	str	r2, [r6, #0]
 800ed78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed80:	2301      	movs	r3, #1
 800ed82:	e09d      	b.n	800eec0 <_printf_i+0x1e8>
 800ed84:	6833      	ldr	r3, [r6, #0]
 800ed86:	6820      	ldr	r0, [r4, #0]
 800ed88:	1d19      	adds	r1, r3, #4
 800ed8a:	6031      	str	r1, [r6, #0]
 800ed8c:	0606      	lsls	r6, r0, #24
 800ed8e:	d501      	bpl.n	800ed94 <_printf_i+0xbc>
 800ed90:	681d      	ldr	r5, [r3, #0]
 800ed92:	e003      	b.n	800ed9c <_printf_i+0xc4>
 800ed94:	0645      	lsls	r5, r0, #25
 800ed96:	d5fb      	bpl.n	800ed90 <_printf_i+0xb8>
 800ed98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed9c:	2d00      	cmp	r5, #0
 800ed9e:	da03      	bge.n	800eda8 <_printf_i+0xd0>
 800eda0:	232d      	movs	r3, #45	@ 0x2d
 800eda2:	426d      	negs	r5, r5
 800eda4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eda8:	4859      	ldr	r0, [pc, #356]	@ (800ef10 <_printf_i+0x238>)
 800edaa:	230a      	movs	r3, #10
 800edac:	e011      	b.n	800edd2 <_printf_i+0xfa>
 800edae:	6821      	ldr	r1, [r4, #0]
 800edb0:	6833      	ldr	r3, [r6, #0]
 800edb2:	0608      	lsls	r0, r1, #24
 800edb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800edb8:	d402      	bmi.n	800edc0 <_printf_i+0xe8>
 800edba:	0649      	lsls	r1, r1, #25
 800edbc:	bf48      	it	mi
 800edbe:	b2ad      	uxthmi	r5, r5
 800edc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800edc2:	4853      	ldr	r0, [pc, #332]	@ (800ef10 <_printf_i+0x238>)
 800edc4:	6033      	str	r3, [r6, #0]
 800edc6:	bf14      	ite	ne
 800edc8:	230a      	movne	r3, #10
 800edca:	2308      	moveq	r3, #8
 800edcc:	2100      	movs	r1, #0
 800edce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800edd2:	6866      	ldr	r6, [r4, #4]
 800edd4:	60a6      	str	r6, [r4, #8]
 800edd6:	2e00      	cmp	r6, #0
 800edd8:	bfa2      	ittt	ge
 800edda:	6821      	ldrge	r1, [r4, #0]
 800eddc:	f021 0104 	bicge.w	r1, r1, #4
 800ede0:	6021      	strge	r1, [r4, #0]
 800ede2:	b90d      	cbnz	r5, 800ede8 <_printf_i+0x110>
 800ede4:	2e00      	cmp	r6, #0
 800ede6:	d04b      	beq.n	800ee80 <_printf_i+0x1a8>
 800ede8:	4616      	mov	r6, r2
 800edea:	fbb5 f1f3 	udiv	r1, r5, r3
 800edee:	fb03 5711 	mls	r7, r3, r1, r5
 800edf2:	5dc7      	ldrb	r7, [r0, r7]
 800edf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edf8:	462f      	mov	r7, r5
 800edfa:	42bb      	cmp	r3, r7
 800edfc:	460d      	mov	r5, r1
 800edfe:	d9f4      	bls.n	800edea <_printf_i+0x112>
 800ee00:	2b08      	cmp	r3, #8
 800ee02:	d10b      	bne.n	800ee1c <_printf_i+0x144>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	07df      	lsls	r7, r3, #31
 800ee08:	d508      	bpl.n	800ee1c <_printf_i+0x144>
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	6861      	ldr	r1, [r4, #4]
 800ee0e:	4299      	cmp	r1, r3
 800ee10:	bfde      	ittt	le
 800ee12:	2330      	movle	r3, #48	@ 0x30
 800ee14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee1c:	1b92      	subs	r2, r2, r6
 800ee1e:	6122      	str	r2, [r4, #16]
 800ee20:	f8cd a000 	str.w	sl, [sp]
 800ee24:	464b      	mov	r3, r9
 800ee26:	aa03      	add	r2, sp, #12
 800ee28:	4621      	mov	r1, r4
 800ee2a:	4640      	mov	r0, r8
 800ee2c:	f7ff fee6 	bl	800ebfc <_printf_common>
 800ee30:	3001      	adds	r0, #1
 800ee32:	d14a      	bne.n	800eeca <_printf_i+0x1f2>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	b004      	add	sp, #16
 800ee3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	f043 0320 	orr.w	r3, r3, #32
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	4833      	ldr	r0, [pc, #204]	@ (800ef14 <_printf_i+0x23c>)
 800ee48:	2778      	movs	r7, #120	@ 0x78
 800ee4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	6831      	ldr	r1, [r6, #0]
 800ee52:	061f      	lsls	r7, r3, #24
 800ee54:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee58:	d402      	bmi.n	800ee60 <_printf_i+0x188>
 800ee5a:	065f      	lsls	r7, r3, #25
 800ee5c:	bf48      	it	mi
 800ee5e:	b2ad      	uxthmi	r5, r5
 800ee60:	6031      	str	r1, [r6, #0]
 800ee62:	07d9      	lsls	r1, r3, #31
 800ee64:	bf44      	itt	mi
 800ee66:	f043 0320 	orrmi.w	r3, r3, #32
 800ee6a:	6023      	strmi	r3, [r4, #0]
 800ee6c:	b11d      	cbz	r5, 800ee76 <_printf_i+0x19e>
 800ee6e:	2310      	movs	r3, #16
 800ee70:	e7ac      	b.n	800edcc <_printf_i+0xf4>
 800ee72:	4827      	ldr	r0, [pc, #156]	@ (800ef10 <_printf_i+0x238>)
 800ee74:	e7e9      	b.n	800ee4a <_printf_i+0x172>
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	f023 0320 	bic.w	r3, r3, #32
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	e7f6      	b.n	800ee6e <_printf_i+0x196>
 800ee80:	4616      	mov	r6, r2
 800ee82:	e7bd      	b.n	800ee00 <_printf_i+0x128>
 800ee84:	6833      	ldr	r3, [r6, #0]
 800ee86:	6825      	ldr	r5, [r4, #0]
 800ee88:	6961      	ldr	r1, [r4, #20]
 800ee8a:	1d18      	adds	r0, r3, #4
 800ee8c:	6030      	str	r0, [r6, #0]
 800ee8e:	062e      	lsls	r6, r5, #24
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	d501      	bpl.n	800ee98 <_printf_i+0x1c0>
 800ee94:	6019      	str	r1, [r3, #0]
 800ee96:	e002      	b.n	800ee9e <_printf_i+0x1c6>
 800ee98:	0668      	lsls	r0, r5, #25
 800ee9a:	d5fb      	bpl.n	800ee94 <_printf_i+0x1bc>
 800ee9c:	8019      	strh	r1, [r3, #0]
 800ee9e:	2300      	movs	r3, #0
 800eea0:	6123      	str	r3, [r4, #16]
 800eea2:	4616      	mov	r6, r2
 800eea4:	e7bc      	b.n	800ee20 <_printf_i+0x148>
 800eea6:	6833      	ldr	r3, [r6, #0]
 800eea8:	1d1a      	adds	r2, r3, #4
 800eeaa:	6032      	str	r2, [r6, #0]
 800eeac:	681e      	ldr	r6, [r3, #0]
 800eeae:	6862      	ldr	r2, [r4, #4]
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7f1 fa14 	bl	80002e0 <memchr>
 800eeb8:	b108      	cbz	r0, 800eebe <_printf_i+0x1e6>
 800eeba:	1b80      	subs	r0, r0, r6
 800eebc:	6060      	str	r0, [r4, #4]
 800eebe:	6863      	ldr	r3, [r4, #4]
 800eec0:	6123      	str	r3, [r4, #16]
 800eec2:	2300      	movs	r3, #0
 800eec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eec8:	e7aa      	b.n	800ee20 <_printf_i+0x148>
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	4632      	mov	r2, r6
 800eece:	4649      	mov	r1, r9
 800eed0:	4640      	mov	r0, r8
 800eed2:	47d0      	blx	sl
 800eed4:	3001      	adds	r0, #1
 800eed6:	d0ad      	beq.n	800ee34 <_printf_i+0x15c>
 800eed8:	6823      	ldr	r3, [r4, #0]
 800eeda:	079b      	lsls	r3, r3, #30
 800eedc:	d413      	bmi.n	800ef06 <_printf_i+0x22e>
 800eede:	68e0      	ldr	r0, [r4, #12]
 800eee0:	9b03      	ldr	r3, [sp, #12]
 800eee2:	4298      	cmp	r0, r3
 800eee4:	bfb8      	it	lt
 800eee6:	4618      	movlt	r0, r3
 800eee8:	e7a6      	b.n	800ee38 <_printf_i+0x160>
 800eeea:	2301      	movs	r3, #1
 800eeec:	4632      	mov	r2, r6
 800eeee:	4649      	mov	r1, r9
 800eef0:	4640      	mov	r0, r8
 800eef2:	47d0      	blx	sl
 800eef4:	3001      	adds	r0, #1
 800eef6:	d09d      	beq.n	800ee34 <_printf_i+0x15c>
 800eef8:	3501      	adds	r5, #1
 800eefa:	68e3      	ldr	r3, [r4, #12]
 800eefc:	9903      	ldr	r1, [sp, #12]
 800eefe:	1a5b      	subs	r3, r3, r1
 800ef00:	42ab      	cmp	r3, r5
 800ef02:	dcf2      	bgt.n	800eeea <_printf_i+0x212>
 800ef04:	e7eb      	b.n	800eede <_printf_i+0x206>
 800ef06:	2500      	movs	r5, #0
 800ef08:	f104 0619 	add.w	r6, r4, #25
 800ef0c:	e7f5      	b.n	800eefa <_printf_i+0x222>
 800ef0e:	bf00      	nop
 800ef10:	080110fb 	.word	0x080110fb
 800ef14:	0801110c 	.word	0x0801110c

0800ef18 <std>:
 800ef18:	2300      	movs	r3, #0
 800ef1a:	b510      	push	{r4, lr}
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ef22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef26:	6083      	str	r3, [r0, #8]
 800ef28:	8181      	strh	r1, [r0, #12]
 800ef2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ef2c:	81c2      	strh	r2, [r0, #14]
 800ef2e:	6183      	str	r3, [r0, #24]
 800ef30:	4619      	mov	r1, r3
 800ef32:	2208      	movs	r2, #8
 800ef34:	305c      	adds	r0, #92	@ 0x5c
 800ef36:	f000 f8f4 	bl	800f122 <memset>
 800ef3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef70 <std+0x58>)
 800ef3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <std+0x5c>)
 800ef40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef42:	4b0d      	ldr	r3, [pc, #52]	@ (800ef78 <std+0x60>)
 800ef44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef46:	4b0d      	ldr	r3, [pc, #52]	@ (800ef7c <std+0x64>)
 800ef48:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef80 <std+0x68>)
 800ef4c:	6224      	str	r4, [r4, #32]
 800ef4e:	429c      	cmp	r4, r3
 800ef50:	d006      	beq.n	800ef60 <std+0x48>
 800ef52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef56:	4294      	cmp	r4, r2
 800ef58:	d002      	beq.n	800ef60 <std+0x48>
 800ef5a:	33d0      	adds	r3, #208	@ 0xd0
 800ef5c:	429c      	cmp	r4, r3
 800ef5e:	d105      	bne.n	800ef6c <std+0x54>
 800ef60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef68:	f000 b958 	b.w	800f21c <__retarget_lock_init_recursive>
 800ef6c:	bd10      	pop	{r4, pc}
 800ef6e:	bf00      	nop
 800ef70:	0800f09d 	.word	0x0800f09d
 800ef74:	0800f0bf 	.word	0x0800f0bf
 800ef78:	0800f0f7 	.word	0x0800f0f7
 800ef7c:	0800f11b 	.word	0x0800f11b
 800ef80:	2400480c 	.word	0x2400480c

0800ef84 <stdio_exit_handler>:
 800ef84:	4a02      	ldr	r2, [pc, #8]	@ (800ef90 <stdio_exit_handler+0xc>)
 800ef86:	4903      	ldr	r1, [pc, #12]	@ (800ef94 <stdio_exit_handler+0x10>)
 800ef88:	4803      	ldr	r0, [pc, #12]	@ (800ef98 <stdio_exit_handler+0x14>)
 800ef8a:	f000 b869 	b.w	800f060 <_fwalk_sglue>
 800ef8e:	bf00      	nop
 800ef90:	24000034 	.word	0x24000034
 800ef94:	08010809 	.word	0x08010809
 800ef98:	24000044 	.word	0x24000044

0800ef9c <cleanup_stdio>:
 800ef9c:	6841      	ldr	r1, [r0, #4]
 800ef9e:	4b0c      	ldr	r3, [pc, #48]	@ (800efd0 <cleanup_stdio+0x34>)
 800efa0:	4299      	cmp	r1, r3
 800efa2:	b510      	push	{r4, lr}
 800efa4:	4604      	mov	r4, r0
 800efa6:	d001      	beq.n	800efac <cleanup_stdio+0x10>
 800efa8:	f001 fc2e 	bl	8010808 <_fflush_r>
 800efac:	68a1      	ldr	r1, [r4, #8]
 800efae:	4b09      	ldr	r3, [pc, #36]	@ (800efd4 <cleanup_stdio+0x38>)
 800efb0:	4299      	cmp	r1, r3
 800efb2:	d002      	beq.n	800efba <cleanup_stdio+0x1e>
 800efb4:	4620      	mov	r0, r4
 800efb6:	f001 fc27 	bl	8010808 <_fflush_r>
 800efba:	68e1      	ldr	r1, [r4, #12]
 800efbc:	4b06      	ldr	r3, [pc, #24]	@ (800efd8 <cleanup_stdio+0x3c>)
 800efbe:	4299      	cmp	r1, r3
 800efc0:	d004      	beq.n	800efcc <cleanup_stdio+0x30>
 800efc2:	4620      	mov	r0, r4
 800efc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efc8:	f001 bc1e 	b.w	8010808 <_fflush_r>
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	bf00      	nop
 800efd0:	2400480c 	.word	0x2400480c
 800efd4:	24004874 	.word	0x24004874
 800efd8:	240048dc 	.word	0x240048dc

0800efdc <global_stdio_init.part.0>:
 800efdc:	b510      	push	{r4, lr}
 800efde:	4b0b      	ldr	r3, [pc, #44]	@ (800f00c <global_stdio_init.part.0+0x30>)
 800efe0:	4c0b      	ldr	r4, [pc, #44]	@ (800f010 <global_stdio_init.part.0+0x34>)
 800efe2:	4a0c      	ldr	r2, [pc, #48]	@ (800f014 <global_stdio_init.part.0+0x38>)
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	4620      	mov	r0, r4
 800efe8:	2200      	movs	r2, #0
 800efea:	2104      	movs	r1, #4
 800efec:	f7ff ff94 	bl	800ef18 <std>
 800eff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eff4:	2201      	movs	r2, #1
 800eff6:	2109      	movs	r1, #9
 800eff8:	f7ff ff8e 	bl	800ef18 <std>
 800effc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f000:	2202      	movs	r2, #2
 800f002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f006:	2112      	movs	r1, #18
 800f008:	f7ff bf86 	b.w	800ef18 <std>
 800f00c:	24004944 	.word	0x24004944
 800f010:	2400480c 	.word	0x2400480c
 800f014:	0800ef85 	.word	0x0800ef85

0800f018 <__sfp_lock_acquire>:
 800f018:	4801      	ldr	r0, [pc, #4]	@ (800f020 <__sfp_lock_acquire+0x8>)
 800f01a:	f000 b900 	b.w	800f21e <__retarget_lock_acquire_recursive>
 800f01e:	bf00      	nop
 800f020:	2400494d 	.word	0x2400494d

0800f024 <__sfp_lock_release>:
 800f024:	4801      	ldr	r0, [pc, #4]	@ (800f02c <__sfp_lock_release+0x8>)
 800f026:	f000 b8fb 	b.w	800f220 <__retarget_lock_release_recursive>
 800f02a:	bf00      	nop
 800f02c:	2400494d 	.word	0x2400494d

0800f030 <__sinit>:
 800f030:	b510      	push	{r4, lr}
 800f032:	4604      	mov	r4, r0
 800f034:	f7ff fff0 	bl	800f018 <__sfp_lock_acquire>
 800f038:	6a23      	ldr	r3, [r4, #32]
 800f03a:	b11b      	cbz	r3, 800f044 <__sinit+0x14>
 800f03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f040:	f7ff bff0 	b.w	800f024 <__sfp_lock_release>
 800f044:	4b04      	ldr	r3, [pc, #16]	@ (800f058 <__sinit+0x28>)
 800f046:	6223      	str	r3, [r4, #32]
 800f048:	4b04      	ldr	r3, [pc, #16]	@ (800f05c <__sinit+0x2c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1f5      	bne.n	800f03c <__sinit+0xc>
 800f050:	f7ff ffc4 	bl	800efdc <global_stdio_init.part.0>
 800f054:	e7f2      	b.n	800f03c <__sinit+0xc>
 800f056:	bf00      	nop
 800f058:	0800ef9d 	.word	0x0800ef9d
 800f05c:	24004944 	.word	0x24004944

0800f060 <_fwalk_sglue>:
 800f060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f064:	4607      	mov	r7, r0
 800f066:	4688      	mov	r8, r1
 800f068:	4614      	mov	r4, r2
 800f06a:	2600      	movs	r6, #0
 800f06c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f070:	f1b9 0901 	subs.w	r9, r9, #1
 800f074:	d505      	bpl.n	800f082 <_fwalk_sglue+0x22>
 800f076:	6824      	ldr	r4, [r4, #0]
 800f078:	2c00      	cmp	r4, #0
 800f07a:	d1f7      	bne.n	800f06c <_fwalk_sglue+0xc>
 800f07c:	4630      	mov	r0, r6
 800f07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f082:	89ab      	ldrh	r3, [r5, #12]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d907      	bls.n	800f098 <_fwalk_sglue+0x38>
 800f088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f08c:	3301      	adds	r3, #1
 800f08e:	d003      	beq.n	800f098 <_fwalk_sglue+0x38>
 800f090:	4629      	mov	r1, r5
 800f092:	4638      	mov	r0, r7
 800f094:	47c0      	blx	r8
 800f096:	4306      	orrs	r6, r0
 800f098:	3568      	adds	r5, #104	@ 0x68
 800f09a:	e7e9      	b.n	800f070 <_fwalk_sglue+0x10>

0800f09c <__sread>:
 800f09c:	b510      	push	{r4, lr}
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a4:	f000 f86c 	bl	800f180 <_read_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	bfab      	itete	ge
 800f0ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f0b0:	181b      	addge	r3, r3, r0
 800f0b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f0b6:	bfac      	ite	ge
 800f0b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f0ba:	81a3      	strhlt	r3, [r4, #12]
 800f0bc:	bd10      	pop	{r4, pc}

0800f0be <__swrite>:
 800f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	461f      	mov	r7, r3
 800f0c4:	898b      	ldrh	r3, [r1, #12]
 800f0c6:	05db      	lsls	r3, r3, #23
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	d505      	bpl.n	800f0dc <__swrite+0x1e>
 800f0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f000 f840 	bl	800f15c <_lseek_r>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	463b      	mov	r3, r7
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f2:	f000 b857 	b.w	800f1a4 <_write_r>

0800f0f6 <__sseek>:
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fe:	f000 f82d 	bl	800f15c <_lseek_r>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	bf15      	itete	ne
 800f108:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f10a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f10e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f112:	81a3      	strheq	r3, [r4, #12]
 800f114:	bf18      	it	ne
 800f116:	81a3      	strhne	r3, [r4, #12]
 800f118:	bd10      	pop	{r4, pc}

0800f11a <__sclose>:
 800f11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11e:	f000 b80d 	b.w	800f13c <_close_r>

0800f122 <memset>:
 800f122:	4402      	add	r2, r0
 800f124:	4603      	mov	r3, r0
 800f126:	4293      	cmp	r3, r2
 800f128:	d100      	bne.n	800f12c <memset+0xa>
 800f12a:	4770      	bx	lr
 800f12c:	f803 1b01 	strb.w	r1, [r3], #1
 800f130:	e7f9      	b.n	800f126 <memset+0x4>
	...

0800f134 <_localeconv_r>:
 800f134:	4800      	ldr	r0, [pc, #0]	@ (800f138 <_localeconv_r+0x4>)
 800f136:	4770      	bx	lr
 800f138:	24000180 	.word	0x24000180

0800f13c <_close_r>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4d06      	ldr	r5, [pc, #24]	@ (800f158 <_close_r+0x1c>)
 800f140:	2300      	movs	r3, #0
 800f142:	4604      	mov	r4, r0
 800f144:	4608      	mov	r0, r1
 800f146:	602b      	str	r3, [r5, #0]
 800f148:	f7f3 fbe2 	bl	8002910 <_close>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_close_r+0x1a>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	b103      	cbz	r3, 800f156 <_close_r+0x1a>
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	24004948 	.word	0x24004948

0800f15c <_lseek_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d07      	ldr	r5, [pc, #28]	@ (800f17c <_lseek_r+0x20>)
 800f160:	4604      	mov	r4, r0
 800f162:	4608      	mov	r0, r1
 800f164:	4611      	mov	r1, r2
 800f166:	2200      	movs	r2, #0
 800f168:	602a      	str	r2, [r5, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	f7f3 fbf7 	bl	800295e <_lseek>
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	d102      	bne.n	800f17a <_lseek_r+0x1e>
 800f174:	682b      	ldr	r3, [r5, #0]
 800f176:	b103      	cbz	r3, 800f17a <_lseek_r+0x1e>
 800f178:	6023      	str	r3, [r4, #0]
 800f17a:	bd38      	pop	{r3, r4, r5, pc}
 800f17c:	24004948 	.word	0x24004948

0800f180 <_read_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	@ (800f1a0 <_read_r+0x20>)
 800f184:	4604      	mov	r4, r0
 800f186:	4608      	mov	r0, r1
 800f188:	4611      	mov	r1, r2
 800f18a:	2200      	movs	r2, #0
 800f18c:	602a      	str	r2, [r5, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	f7f3 fb85 	bl	800289e <_read>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_read_r+0x1e>
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_read_r+0x1e>
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	24004948 	.word	0x24004948

0800f1a4 <_write_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d07      	ldr	r5, [pc, #28]	@ (800f1c4 <_write_r+0x20>)
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	4608      	mov	r0, r1
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	602a      	str	r2, [r5, #0]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f7f3 fb90 	bl	80028d8 <_write>
 800f1b8:	1c43      	adds	r3, r0, #1
 800f1ba:	d102      	bne.n	800f1c2 <_write_r+0x1e>
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	b103      	cbz	r3, 800f1c2 <_write_r+0x1e>
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	bd38      	pop	{r3, r4, r5, pc}
 800f1c4:	24004948 	.word	0x24004948

0800f1c8 <__errno>:
 800f1c8:	4b01      	ldr	r3, [pc, #4]	@ (800f1d0 <__errno+0x8>)
 800f1ca:	6818      	ldr	r0, [r3, #0]
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	24000040 	.word	0x24000040

0800f1d4 <__libc_init_array>:
 800f1d4:	b570      	push	{r4, r5, r6, lr}
 800f1d6:	4d0d      	ldr	r5, [pc, #52]	@ (800f20c <__libc_init_array+0x38>)
 800f1d8:	4c0d      	ldr	r4, [pc, #52]	@ (800f210 <__libc_init_array+0x3c>)
 800f1da:	1b64      	subs	r4, r4, r5
 800f1dc:	10a4      	asrs	r4, r4, #2
 800f1de:	2600      	movs	r6, #0
 800f1e0:	42a6      	cmp	r6, r4
 800f1e2:	d109      	bne.n	800f1f8 <__libc_init_array+0x24>
 800f1e4:	4d0b      	ldr	r5, [pc, #44]	@ (800f214 <__libc_init_array+0x40>)
 800f1e6:	4c0c      	ldr	r4, [pc, #48]	@ (800f218 <__libc_init_array+0x44>)
 800f1e8:	f001 fe4e 	bl	8010e88 <_init>
 800f1ec:	1b64      	subs	r4, r4, r5
 800f1ee:	10a4      	asrs	r4, r4, #2
 800f1f0:	2600      	movs	r6, #0
 800f1f2:	42a6      	cmp	r6, r4
 800f1f4:	d105      	bne.n	800f202 <__libc_init_array+0x2e>
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
 800f1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1fc:	4798      	blx	r3
 800f1fe:	3601      	adds	r6, #1
 800f200:	e7ee      	b.n	800f1e0 <__libc_init_array+0xc>
 800f202:	f855 3b04 	ldr.w	r3, [r5], #4
 800f206:	4798      	blx	r3
 800f208:	3601      	adds	r6, #1
 800f20a:	e7f2      	b.n	800f1f2 <__libc_init_array+0x1e>
 800f20c:	08011360 	.word	0x08011360
 800f210:	08011360 	.word	0x08011360
 800f214:	08011360 	.word	0x08011360
 800f218:	08011364 	.word	0x08011364

0800f21c <__retarget_lock_init_recursive>:
 800f21c:	4770      	bx	lr

0800f21e <__retarget_lock_acquire_recursive>:
 800f21e:	4770      	bx	lr

0800f220 <__retarget_lock_release_recursive>:
 800f220:	4770      	bx	lr

0800f222 <memcpy>:
 800f222:	440a      	add	r2, r1
 800f224:	4291      	cmp	r1, r2
 800f226:	f100 33ff 	add.w	r3, r0, #4294967295
 800f22a:	d100      	bne.n	800f22e <memcpy+0xc>
 800f22c:	4770      	bx	lr
 800f22e:	b510      	push	{r4, lr}
 800f230:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f234:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f238:	4291      	cmp	r1, r2
 800f23a:	d1f9      	bne.n	800f230 <memcpy+0xe>
 800f23c:	bd10      	pop	{r4, pc}

0800f23e <quorem>:
 800f23e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f242:	6903      	ldr	r3, [r0, #16]
 800f244:	690c      	ldr	r4, [r1, #16]
 800f246:	42a3      	cmp	r3, r4
 800f248:	4607      	mov	r7, r0
 800f24a:	db7e      	blt.n	800f34a <quorem+0x10c>
 800f24c:	3c01      	subs	r4, #1
 800f24e:	f101 0814 	add.w	r8, r1, #20
 800f252:	00a3      	lsls	r3, r4, #2
 800f254:	f100 0514 	add.w	r5, r0, #20
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f268:	3301      	adds	r3, #1
 800f26a:	429a      	cmp	r2, r3
 800f26c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f270:	fbb2 f6f3 	udiv	r6, r2, r3
 800f274:	d32e      	bcc.n	800f2d4 <quorem+0x96>
 800f276:	f04f 0a00 	mov.w	sl, #0
 800f27a:	46c4      	mov	ip, r8
 800f27c:	46ae      	mov	lr, r5
 800f27e:	46d3      	mov	fp, sl
 800f280:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f284:	b298      	uxth	r0, r3
 800f286:	fb06 a000 	mla	r0, r6, r0, sl
 800f28a:	0c02      	lsrs	r2, r0, #16
 800f28c:	0c1b      	lsrs	r3, r3, #16
 800f28e:	fb06 2303 	mla	r3, r6, r3, r2
 800f292:	f8de 2000 	ldr.w	r2, [lr]
 800f296:	b280      	uxth	r0, r0
 800f298:	b292      	uxth	r2, r2
 800f29a:	1a12      	subs	r2, r2, r0
 800f29c:	445a      	add	r2, fp
 800f29e:	f8de 0000 	ldr.w	r0, [lr]
 800f2a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f2ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f2b0:	b292      	uxth	r2, r2
 800f2b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f2b6:	45e1      	cmp	r9, ip
 800f2b8:	f84e 2b04 	str.w	r2, [lr], #4
 800f2bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f2c0:	d2de      	bcs.n	800f280 <quorem+0x42>
 800f2c2:	9b00      	ldr	r3, [sp, #0]
 800f2c4:	58eb      	ldr	r3, [r5, r3]
 800f2c6:	b92b      	cbnz	r3, 800f2d4 <quorem+0x96>
 800f2c8:	9b01      	ldr	r3, [sp, #4]
 800f2ca:	3b04      	subs	r3, #4
 800f2cc:	429d      	cmp	r5, r3
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	d32f      	bcc.n	800f332 <quorem+0xf4>
 800f2d2:	613c      	str	r4, [r7, #16]
 800f2d4:	4638      	mov	r0, r7
 800f2d6:	f001 f90b 	bl	80104f0 <__mcmp>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	db25      	blt.n	800f32a <quorem+0xec>
 800f2de:	4629      	mov	r1, r5
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800f2e6:	f8d1 c000 	ldr.w	ip, [r1]
 800f2ea:	fa1f fe82 	uxth.w	lr, r2
 800f2ee:	fa1f f38c 	uxth.w	r3, ip
 800f2f2:	eba3 030e 	sub.w	r3, r3, lr
 800f2f6:	4403      	add	r3, r0
 800f2f8:	0c12      	lsrs	r2, r2, #16
 800f2fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f2fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f302:	b29b      	uxth	r3, r3
 800f304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f308:	45c1      	cmp	r9, r8
 800f30a:	f841 3b04 	str.w	r3, [r1], #4
 800f30e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f312:	d2e6      	bcs.n	800f2e2 <quorem+0xa4>
 800f314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f318:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f31c:	b922      	cbnz	r2, 800f328 <quorem+0xea>
 800f31e:	3b04      	subs	r3, #4
 800f320:	429d      	cmp	r5, r3
 800f322:	461a      	mov	r2, r3
 800f324:	d30b      	bcc.n	800f33e <quorem+0x100>
 800f326:	613c      	str	r4, [r7, #16]
 800f328:	3601      	adds	r6, #1
 800f32a:	4630      	mov	r0, r6
 800f32c:	b003      	add	sp, #12
 800f32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f332:	6812      	ldr	r2, [r2, #0]
 800f334:	3b04      	subs	r3, #4
 800f336:	2a00      	cmp	r2, #0
 800f338:	d1cb      	bne.n	800f2d2 <quorem+0x94>
 800f33a:	3c01      	subs	r4, #1
 800f33c:	e7c6      	b.n	800f2cc <quorem+0x8e>
 800f33e:	6812      	ldr	r2, [r2, #0]
 800f340:	3b04      	subs	r3, #4
 800f342:	2a00      	cmp	r2, #0
 800f344:	d1ef      	bne.n	800f326 <quorem+0xe8>
 800f346:	3c01      	subs	r4, #1
 800f348:	e7ea      	b.n	800f320 <quorem+0xe2>
 800f34a:	2000      	movs	r0, #0
 800f34c:	e7ee      	b.n	800f32c <quorem+0xee>
	...

0800f350 <_dtoa_r>:
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	ed2d 8b02 	vpush	{d8}
 800f358:	69c7      	ldr	r7, [r0, #28]
 800f35a:	b091      	sub	sp, #68	@ 0x44
 800f35c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f360:	ec55 4b10 	vmov	r4, r5, d0
 800f364:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f366:	9107      	str	r1, [sp, #28]
 800f368:	4681      	mov	r9, r0
 800f36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f36c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f36e:	b97f      	cbnz	r7, 800f390 <_dtoa_r+0x40>
 800f370:	2010      	movs	r0, #16
 800f372:	f000 fd8d 	bl	800fe90 <malloc>
 800f376:	4602      	mov	r2, r0
 800f378:	f8c9 001c 	str.w	r0, [r9, #28]
 800f37c:	b920      	cbnz	r0, 800f388 <_dtoa_r+0x38>
 800f37e:	4ba0      	ldr	r3, [pc, #640]	@ (800f600 <_dtoa_r+0x2b0>)
 800f380:	21ef      	movs	r1, #239	@ 0xef
 800f382:	48a0      	ldr	r0, [pc, #640]	@ (800f604 <_dtoa_r+0x2b4>)
 800f384:	f001 fa78 	bl	8010878 <__assert_func>
 800f388:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f38c:	6007      	str	r7, [r0, #0]
 800f38e:	60c7      	str	r7, [r0, #12]
 800f390:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f394:	6819      	ldr	r1, [r3, #0]
 800f396:	b159      	cbz	r1, 800f3b0 <_dtoa_r+0x60>
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	604a      	str	r2, [r1, #4]
 800f39c:	2301      	movs	r3, #1
 800f39e:	4093      	lsls	r3, r2
 800f3a0:	608b      	str	r3, [r1, #8]
 800f3a2:	4648      	mov	r0, r9
 800f3a4:	f000 fe6a 	bl	801007c <_Bfree>
 800f3a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	1e2b      	subs	r3, r5, #0
 800f3b2:	bfbb      	ittet	lt
 800f3b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f3b8:	9303      	strlt	r3, [sp, #12]
 800f3ba:	2300      	movge	r3, #0
 800f3bc:	2201      	movlt	r2, #1
 800f3be:	bfac      	ite	ge
 800f3c0:	6033      	strge	r3, [r6, #0]
 800f3c2:	6032      	strlt	r2, [r6, #0]
 800f3c4:	4b90      	ldr	r3, [pc, #576]	@ (800f608 <_dtoa_r+0x2b8>)
 800f3c6:	9e03      	ldr	r6, [sp, #12]
 800f3c8:	43b3      	bics	r3, r6
 800f3ca:	d110      	bne.n	800f3ee <_dtoa_r+0x9e>
 800f3cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f3d2:	6013      	str	r3, [r2, #0]
 800f3d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f3d8:	4323      	orrs	r3, r4
 800f3da:	f000 84de 	beq.w	800fd9a <_dtoa_r+0xa4a>
 800f3de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3e0:	4f8a      	ldr	r7, [pc, #552]	@ (800f60c <_dtoa_r+0x2bc>)
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f000 84e0 	beq.w	800fda8 <_dtoa_r+0xa58>
 800f3e8:	1cfb      	adds	r3, r7, #3
 800f3ea:	f000 bcdb 	b.w	800fda4 <_dtoa_r+0xa54>
 800f3ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f3f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fa:	d10a      	bne.n	800f412 <_dtoa_r+0xc2>
 800f3fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3fe:	2301      	movs	r3, #1
 800f400:	6013      	str	r3, [r2, #0]
 800f402:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f404:	b113      	cbz	r3, 800f40c <_dtoa_r+0xbc>
 800f406:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f408:	4b81      	ldr	r3, [pc, #516]	@ (800f610 <_dtoa_r+0x2c0>)
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	4f81      	ldr	r7, [pc, #516]	@ (800f614 <_dtoa_r+0x2c4>)
 800f40e:	f000 bccb 	b.w	800fda8 <_dtoa_r+0xa58>
 800f412:	aa0e      	add	r2, sp, #56	@ 0x38
 800f414:	a90f      	add	r1, sp, #60	@ 0x3c
 800f416:	4648      	mov	r0, r9
 800f418:	eeb0 0b48 	vmov.f64	d0, d8
 800f41c:	f001 f918 	bl	8010650 <__d2b>
 800f420:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f426:	9001      	str	r0, [sp, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d045      	beq.n	800f4b8 <_dtoa_r+0x168>
 800f42c:	eeb0 7b48 	vmov.f64	d7, d8
 800f430:	ee18 1a90 	vmov	r1, s17
 800f434:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f438:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f43c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f440:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f444:	2500      	movs	r5, #0
 800f446:	ee07 1a90 	vmov	s15, r1
 800f44a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f44e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f5e8 <_dtoa_r+0x298>
 800f452:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f456:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f5f0 <_dtoa_r+0x2a0>
 800f45a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f45e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f5f8 <_dtoa_r+0x2a8>
 800f462:	ee07 3a90 	vmov	s15, r3
 800f466:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f46a:	eeb0 7b46 	vmov.f64	d7, d6
 800f46e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f472:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f476:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47e:	ee16 8a90 	vmov	r8, s13
 800f482:	d508      	bpl.n	800f496 <_dtoa_r+0x146>
 800f484:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f488:	eeb4 6b47 	vcmp.f64	d6, d7
 800f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f490:	bf18      	it	ne
 800f492:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f496:	f1b8 0f16 	cmp.w	r8, #22
 800f49a:	d82b      	bhi.n	800f4f4 <_dtoa_r+0x1a4>
 800f49c:	495e      	ldr	r1, [pc, #376]	@ (800f618 <_dtoa_r+0x2c8>)
 800f49e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f4a2:	ed91 7b00 	vldr	d7, [r1]
 800f4a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	d501      	bpl.n	800f4b4 <_dtoa_r+0x164>
 800f4b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	e01e      	b.n	800f4f6 <_dtoa_r+0x1a6>
 800f4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4ba:	4413      	add	r3, r2
 800f4bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f4c0:	2920      	cmp	r1, #32
 800f4c2:	bfc1      	itttt	gt
 800f4c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f4c8:	408e      	lslgt	r6, r1
 800f4ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f4ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f4d2:	bfd6      	itet	le
 800f4d4:	f1c1 0120 	rsble	r1, r1, #32
 800f4d8:	4331      	orrgt	r1, r6
 800f4da:	fa04 f101 	lslle.w	r1, r4, r1
 800f4de:	ee07 1a90 	vmov	s15, r1
 800f4e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	ee17 1a90 	vmov	r1, s15
 800f4ec:	2501      	movs	r5, #1
 800f4ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f4f2:	e7a8      	b.n	800f446 <_dtoa_r+0xf6>
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	1ad2      	subs	r2, r2, r3
 800f4f8:	1e53      	subs	r3, r2, #1
 800f4fa:	9306      	str	r3, [sp, #24]
 800f4fc:	bf45      	ittet	mi
 800f4fe:	f1c2 0301 	rsbmi	r3, r2, #1
 800f502:	9305      	strmi	r3, [sp, #20]
 800f504:	2300      	movpl	r3, #0
 800f506:	2300      	movmi	r3, #0
 800f508:	bf4c      	ite	mi
 800f50a:	9306      	strmi	r3, [sp, #24]
 800f50c:	9305      	strpl	r3, [sp, #20]
 800f50e:	f1b8 0f00 	cmp.w	r8, #0
 800f512:	910c      	str	r1, [sp, #48]	@ 0x30
 800f514:	db18      	blt.n	800f548 <_dtoa_r+0x1f8>
 800f516:	9b06      	ldr	r3, [sp, #24]
 800f518:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f51c:	4443      	add	r3, r8
 800f51e:	9306      	str	r3, [sp, #24]
 800f520:	2300      	movs	r3, #0
 800f522:	9a07      	ldr	r2, [sp, #28]
 800f524:	2a09      	cmp	r2, #9
 800f526:	d849      	bhi.n	800f5bc <_dtoa_r+0x26c>
 800f528:	2a05      	cmp	r2, #5
 800f52a:	bfc4      	itt	gt
 800f52c:	3a04      	subgt	r2, #4
 800f52e:	9207      	strgt	r2, [sp, #28]
 800f530:	9a07      	ldr	r2, [sp, #28]
 800f532:	f1a2 0202 	sub.w	r2, r2, #2
 800f536:	bfcc      	ite	gt
 800f538:	2400      	movgt	r4, #0
 800f53a:	2401      	movle	r4, #1
 800f53c:	2a03      	cmp	r2, #3
 800f53e:	d848      	bhi.n	800f5d2 <_dtoa_r+0x282>
 800f540:	e8df f002 	tbb	[pc, r2]
 800f544:	3a2c2e0b 	.word	0x3a2c2e0b
 800f548:	9b05      	ldr	r3, [sp, #20]
 800f54a:	2200      	movs	r2, #0
 800f54c:	eba3 0308 	sub.w	r3, r3, r8
 800f550:	9305      	str	r3, [sp, #20]
 800f552:	920a      	str	r2, [sp, #40]	@ 0x28
 800f554:	f1c8 0300 	rsb	r3, r8, #0
 800f558:	e7e3      	b.n	800f522 <_dtoa_r+0x1d2>
 800f55a:	2200      	movs	r2, #0
 800f55c:	9208      	str	r2, [sp, #32]
 800f55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f560:	2a00      	cmp	r2, #0
 800f562:	dc39      	bgt.n	800f5d8 <_dtoa_r+0x288>
 800f564:	f04f 0b01 	mov.w	fp, #1
 800f568:	46da      	mov	sl, fp
 800f56a:	465a      	mov	r2, fp
 800f56c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f570:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f574:	2100      	movs	r1, #0
 800f576:	2004      	movs	r0, #4
 800f578:	f100 0614 	add.w	r6, r0, #20
 800f57c:	4296      	cmp	r6, r2
 800f57e:	d930      	bls.n	800f5e2 <_dtoa_r+0x292>
 800f580:	6079      	str	r1, [r7, #4]
 800f582:	4648      	mov	r0, r9
 800f584:	9304      	str	r3, [sp, #16]
 800f586:	f000 fd39 	bl	800fffc <_Balloc>
 800f58a:	9b04      	ldr	r3, [sp, #16]
 800f58c:	4607      	mov	r7, r0
 800f58e:	2800      	cmp	r0, #0
 800f590:	d146      	bne.n	800f620 <_dtoa_r+0x2d0>
 800f592:	4b22      	ldr	r3, [pc, #136]	@ (800f61c <_dtoa_r+0x2cc>)
 800f594:	4602      	mov	r2, r0
 800f596:	f240 11af 	movw	r1, #431	@ 0x1af
 800f59a:	e6f2      	b.n	800f382 <_dtoa_r+0x32>
 800f59c:	2201      	movs	r2, #1
 800f59e:	e7dd      	b.n	800f55c <_dtoa_r+0x20c>
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	9208      	str	r2, [sp, #32]
 800f5a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5a6:	eb08 0b02 	add.w	fp, r8, r2
 800f5aa:	f10b 0a01 	add.w	sl, fp, #1
 800f5ae:	4652      	mov	r2, sl
 800f5b0:	2a01      	cmp	r2, #1
 800f5b2:	bfb8      	it	lt
 800f5b4:	2201      	movlt	r2, #1
 800f5b6:	e7db      	b.n	800f570 <_dtoa_r+0x220>
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	e7f2      	b.n	800f5a2 <_dtoa_r+0x252>
 800f5bc:	2401      	movs	r4, #1
 800f5be:	2200      	movs	r2, #0
 800f5c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f5c4:	f04f 3bff 	mov.w	fp, #4294967295
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	46da      	mov	sl, fp
 800f5cc:	2212      	movs	r2, #18
 800f5ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5d0:	e7ce      	b.n	800f570 <_dtoa_r+0x220>
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	9208      	str	r2, [sp, #32]
 800f5d6:	e7f5      	b.n	800f5c4 <_dtoa_r+0x274>
 800f5d8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f5dc:	46da      	mov	sl, fp
 800f5de:	465a      	mov	r2, fp
 800f5e0:	e7c6      	b.n	800f570 <_dtoa_r+0x220>
 800f5e2:	3101      	adds	r1, #1
 800f5e4:	0040      	lsls	r0, r0, #1
 800f5e6:	e7c7      	b.n	800f578 <_dtoa_r+0x228>
 800f5e8:	636f4361 	.word	0x636f4361
 800f5ec:	3fd287a7 	.word	0x3fd287a7
 800f5f0:	8b60c8b3 	.word	0x8b60c8b3
 800f5f4:	3fc68a28 	.word	0x3fc68a28
 800f5f8:	509f79fb 	.word	0x509f79fb
 800f5fc:	3fd34413 	.word	0x3fd34413
 800f600:	0801112a 	.word	0x0801112a
 800f604:	08011141 	.word	0x08011141
 800f608:	7ff00000 	.word	0x7ff00000
 800f60c:	08011126 	.word	0x08011126
 800f610:	080110fa 	.word	0x080110fa
 800f614:	080110f9 	.word	0x080110f9
 800f618:	08011238 	.word	0x08011238
 800f61c:	08011199 	.word	0x08011199
 800f620:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f624:	f1ba 0f0e 	cmp.w	sl, #14
 800f628:	6010      	str	r0, [r2, #0]
 800f62a:	d86f      	bhi.n	800f70c <_dtoa_r+0x3bc>
 800f62c:	2c00      	cmp	r4, #0
 800f62e:	d06d      	beq.n	800f70c <_dtoa_r+0x3bc>
 800f630:	f1b8 0f00 	cmp.w	r8, #0
 800f634:	f340 80c2 	ble.w	800f7bc <_dtoa_r+0x46c>
 800f638:	4aca      	ldr	r2, [pc, #808]	@ (800f964 <_dtoa_r+0x614>)
 800f63a:	f008 010f 	and.w	r1, r8, #15
 800f63e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f642:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f646:	ed92 7b00 	vldr	d7, [r2]
 800f64a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f64e:	f000 80a9 	beq.w	800f7a4 <_dtoa_r+0x454>
 800f652:	4ac5      	ldr	r2, [pc, #788]	@ (800f968 <_dtoa_r+0x618>)
 800f654:	ed92 6b08 	vldr	d6, [r2, #32]
 800f658:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f65c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f660:	f001 010f 	and.w	r1, r1, #15
 800f664:	2203      	movs	r2, #3
 800f666:	48c0      	ldr	r0, [pc, #768]	@ (800f968 <_dtoa_r+0x618>)
 800f668:	2900      	cmp	r1, #0
 800f66a:	f040 809d 	bne.w	800f7a8 <_dtoa_r+0x458>
 800f66e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f672:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f676:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f67a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f67c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f680:	2900      	cmp	r1, #0
 800f682:	f000 80c1 	beq.w	800f808 <_dtoa_r+0x4b8>
 800f686:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f68a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f692:	f140 80b9 	bpl.w	800f808 <_dtoa_r+0x4b8>
 800f696:	f1ba 0f00 	cmp.w	sl, #0
 800f69a:	f000 80b5 	beq.w	800f808 <_dtoa_r+0x4b8>
 800f69e:	f1bb 0f00 	cmp.w	fp, #0
 800f6a2:	dd31      	ble.n	800f708 <_dtoa_r+0x3b8>
 800f6a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f6a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6b0:	f108 31ff 	add.w	r1, r8, #4294967295
 800f6b4:	9104      	str	r1, [sp, #16]
 800f6b6:	3201      	adds	r2, #1
 800f6b8:	465c      	mov	r4, fp
 800f6ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f6c2:	ee07 2a90 	vmov	s15, r2
 800f6c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f6ce:	ee15 2a90 	vmov	r2, s11
 800f6d2:	ec51 0b15 	vmov	r0, r1, d5
 800f6d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f6da:	2c00      	cmp	r4, #0
 800f6dc:	f040 8098 	bne.w	800f810 <_dtoa_r+0x4c0>
 800f6e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f6e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f6e8:	ec41 0b17 	vmov	d7, r0, r1
 800f6ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f4:	f300 8261 	bgt.w	800fbba <_dtoa_r+0x86a>
 800f6f8:	eeb1 7b47 	vneg.f64	d7, d7
 800f6fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f704:	f100 80f5 	bmi.w	800f8f2 <_dtoa_r+0x5a2>
 800f708:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f70c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f70e:	2a00      	cmp	r2, #0
 800f710:	f2c0 812c 	blt.w	800f96c <_dtoa_r+0x61c>
 800f714:	f1b8 0f0e 	cmp.w	r8, #14
 800f718:	f300 8128 	bgt.w	800f96c <_dtoa_r+0x61c>
 800f71c:	4b91      	ldr	r3, [pc, #580]	@ (800f964 <_dtoa_r+0x614>)
 800f71e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f722:	ed93 6b00 	vldr	d6, [r3]
 800f726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f728:	2b00      	cmp	r3, #0
 800f72a:	da03      	bge.n	800f734 <_dtoa_r+0x3e4>
 800f72c:	f1ba 0f00 	cmp.w	sl, #0
 800f730:	f340 80d2 	ble.w	800f8d8 <_dtoa_r+0x588>
 800f734:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f73c:	463e      	mov	r6, r7
 800f73e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f742:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f746:	ee15 3a10 	vmov	r3, s10
 800f74a:	3330      	adds	r3, #48	@ 0x30
 800f74c:	f806 3b01 	strb.w	r3, [r6], #1
 800f750:	1bf3      	subs	r3, r6, r7
 800f752:	459a      	cmp	sl, r3
 800f754:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f758:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f75c:	f040 80f8 	bne.w	800f950 <_dtoa_r+0x600>
 800f760:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f764:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76c:	f300 80dd 	bgt.w	800f92a <_dtoa_r+0x5da>
 800f770:	eeb4 7b46 	vcmp.f64	d7, d6
 800f774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f778:	d104      	bne.n	800f784 <_dtoa_r+0x434>
 800f77a:	ee15 3a10 	vmov	r3, s10
 800f77e:	07db      	lsls	r3, r3, #31
 800f780:	f100 80d3 	bmi.w	800f92a <_dtoa_r+0x5da>
 800f784:	9901      	ldr	r1, [sp, #4]
 800f786:	4648      	mov	r0, r9
 800f788:	f000 fc78 	bl	801007c <_Bfree>
 800f78c:	2300      	movs	r3, #0
 800f78e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f790:	7033      	strb	r3, [r6, #0]
 800f792:	f108 0301 	add.w	r3, r8, #1
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f000 8304 	beq.w	800fda8 <_dtoa_r+0xa58>
 800f7a0:	601e      	str	r6, [r3, #0]
 800f7a2:	e301      	b.n	800fda8 <_dtoa_r+0xa58>
 800f7a4:	2202      	movs	r2, #2
 800f7a6:	e75e      	b.n	800f666 <_dtoa_r+0x316>
 800f7a8:	07cc      	lsls	r4, r1, #31
 800f7aa:	d504      	bpl.n	800f7b6 <_dtoa_r+0x466>
 800f7ac:	ed90 6b00 	vldr	d6, [r0]
 800f7b0:	3201      	adds	r2, #1
 800f7b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7b6:	1049      	asrs	r1, r1, #1
 800f7b8:	3008      	adds	r0, #8
 800f7ba:	e755      	b.n	800f668 <_dtoa_r+0x318>
 800f7bc:	d022      	beq.n	800f804 <_dtoa_r+0x4b4>
 800f7be:	f1c8 0100 	rsb	r1, r8, #0
 800f7c2:	4a68      	ldr	r2, [pc, #416]	@ (800f964 <_dtoa_r+0x614>)
 800f7c4:	f001 000f 	and.w	r0, r1, #15
 800f7c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f7cc:	ed92 7b00 	vldr	d7, [r2]
 800f7d0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f7d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7d8:	4863      	ldr	r0, [pc, #396]	@ (800f968 <_dtoa_r+0x618>)
 800f7da:	1109      	asrs	r1, r1, #4
 800f7dc:	2400      	movs	r4, #0
 800f7de:	2202      	movs	r2, #2
 800f7e0:	b929      	cbnz	r1, 800f7ee <_dtoa_r+0x49e>
 800f7e2:	2c00      	cmp	r4, #0
 800f7e4:	f43f af49 	beq.w	800f67a <_dtoa_r+0x32a>
 800f7e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7ec:	e745      	b.n	800f67a <_dtoa_r+0x32a>
 800f7ee:	07ce      	lsls	r6, r1, #31
 800f7f0:	d505      	bpl.n	800f7fe <_dtoa_r+0x4ae>
 800f7f2:	ed90 6b00 	vldr	d6, [r0]
 800f7f6:	3201      	adds	r2, #1
 800f7f8:	2401      	movs	r4, #1
 800f7fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7fe:	1049      	asrs	r1, r1, #1
 800f800:	3008      	adds	r0, #8
 800f802:	e7ed      	b.n	800f7e0 <_dtoa_r+0x490>
 800f804:	2202      	movs	r2, #2
 800f806:	e738      	b.n	800f67a <_dtoa_r+0x32a>
 800f808:	f8cd 8010 	str.w	r8, [sp, #16]
 800f80c:	4654      	mov	r4, sl
 800f80e:	e754      	b.n	800f6ba <_dtoa_r+0x36a>
 800f810:	4a54      	ldr	r2, [pc, #336]	@ (800f964 <_dtoa_r+0x614>)
 800f812:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f816:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f81a:	9a08      	ldr	r2, [sp, #32]
 800f81c:	ec41 0b17 	vmov	d7, r0, r1
 800f820:	443c      	add	r4, r7
 800f822:	b34a      	cbz	r2, 800f878 <_dtoa_r+0x528>
 800f824:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f828:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f82c:	463e      	mov	r6, r7
 800f82e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f832:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f836:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f83a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f83e:	ee14 2a90 	vmov	r2, s9
 800f842:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f846:	3230      	adds	r2, #48	@ 0x30
 800f848:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f84c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f854:	f806 2b01 	strb.w	r2, [r6], #1
 800f858:	d438      	bmi.n	800f8cc <_dtoa_r+0x57c>
 800f85a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f85e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f866:	d462      	bmi.n	800f92e <_dtoa_r+0x5de>
 800f868:	42a6      	cmp	r6, r4
 800f86a:	f43f af4d 	beq.w	800f708 <_dtoa_r+0x3b8>
 800f86e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f872:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f876:	e7e0      	b.n	800f83a <_dtoa_r+0x4ea>
 800f878:	4621      	mov	r1, r4
 800f87a:	463e      	mov	r6, r7
 800f87c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f880:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f884:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f888:	ee14 2a90 	vmov	r2, s9
 800f88c:	3230      	adds	r2, #48	@ 0x30
 800f88e:	f806 2b01 	strb.w	r2, [r6], #1
 800f892:	42a6      	cmp	r6, r4
 800f894:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f898:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f89c:	d119      	bne.n	800f8d2 <_dtoa_r+0x582>
 800f89e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f8a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f8a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ae:	dc3e      	bgt.n	800f92e <_dtoa_r+0x5de>
 800f8b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f8b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8bc:	f57f af24 	bpl.w	800f708 <_dtoa_r+0x3b8>
 800f8c0:	460e      	mov	r6, r1
 800f8c2:	3901      	subs	r1, #1
 800f8c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8c8:	2b30      	cmp	r3, #48	@ 0x30
 800f8ca:	d0f9      	beq.n	800f8c0 <_dtoa_r+0x570>
 800f8cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f8d0:	e758      	b.n	800f784 <_dtoa_r+0x434>
 800f8d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8d6:	e7d5      	b.n	800f884 <_dtoa_r+0x534>
 800f8d8:	d10b      	bne.n	800f8f2 <_dtoa_r+0x5a2>
 800f8da:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f8de:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f8e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ee:	f2c0 8161 	blt.w	800fbb4 <_dtoa_r+0x864>
 800f8f2:	2400      	movs	r4, #0
 800f8f4:	4625      	mov	r5, r4
 800f8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f8:	43db      	mvns	r3, r3
 800f8fa:	9304      	str	r3, [sp, #16]
 800f8fc:	463e      	mov	r6, r7
 800f8fe:	f04f 0800 	mov.w	r8, #0
 800f902:	4621      	mov	r1, r4
 800f904:	4648      	mov	r0, r9
 800f906:	f000 fbb9 	bl	801007c <_Bfree>
 800f90a:	2d00      	cmp	r5, #0
 800f90c:	d0de      	beq.n	800f8cc <_dtoa_r+0x57c>
 800f90e:	f1b8 0f00 	cmp.w	r8, #0
 800f912:	d005      	beq.n	800f920 <_dtoa_r+0x5d0>
 800f914:	45a8      	cmp	r8, r5
 800f916:	d003      	beq.n	800f920 <_dtoa_r+0x5d0>
 800f918:	4641      	mov	r1, r8
 800f91a:	4648      	mov	r0, r9
 800f91c:	f000 fbae 	bl	801007c <_Bfree>
 800f920:	4629      	mov	r1, r5
 800f922:	4648      	mov	r0, r9
 800f924:	f000 fbaa 	bl	801007c <_Bfree>
 800f928:	e7d0      	b.n	800f8cc <_dtoa_r+0x57c>
 800f92a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f92e:	4633      	mov	r3, r6
 800f930:	461e      	mov	r6, r3
 800f932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f936:	2a39      	cmp	r2, #57	@ 0x39
 800f938:	d106      	bne.n	800f948 <_dtoa_r+0x5f8>
 800f93a:	429f      	cmp	r7, r3
 800f93c:	d1f8      	bne.n	800f930 <_dtoa_r+0x5e0>
 800f93e:	9a04      	ldr	r2, [sp, #16]
 800f940:	3201      	adds	r2, #1
 800f942:	9204      	str	r2, [sp, #16]
 800f944:	2230      	movs	r2, #48	@ 0x30
 800f946:	703a      	strb	r2, [r7, #0]
 800f948:	781a      	ldrb	r2, [r3, #0]
 800f94a:	3201      	adds	r2, #1
 800f94c:	701a      	strb	r2, [r3, #0]
 800f94e:	e7bd      	b.n	800f8cc <_dtoa_r+0x57c>
 800f950:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f954:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95c:	f47f aeef 	bne.w	800f73e <_dtoa_r+0x3ee>
 800f960:	e710      	b.n	800f784 <_dtoa_r+0x434>
 800f962:	bf00      	nop
 800f964:	08011238 	.word	0x08011238
 800f968:	08011210 	.word	0x08011210
 800f96c:	9908      	ldr	r1, [sp, #32]
 800f96e:	2900      	cmp	r1, #0
 800f970:	f000 80e3 	beq.w	800fb3a <_dtoa_r+0x7ea>
 800f974:	9907      	ldr	r1, [sp, #28]
 800f976:	2901      	cmp	r1, #1
 800f978:	f300 80c8 	bgt.w	800fb0c <_dtoa_r+0x7bc>
 800f97c:	2d00      	cmp	r5, #0
 800f97e:	f000 80c1 	beq.w	800fb04 <_dtoa_r+0x7b4>
 800f982:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f986:	9e05      	ldr	r6, [sp, #20]
 800f988:	461c      	mov	r4, r3
 800f98a:	9304      	str	r3, [sp, #16]
 800f98c:	9b05      	ldr	r3, [sp, #20]
 800f98e:	4413      	add	r3, r2
 800f990:	9305      	str	r3, [sp, #20]
 800f992:	9b06      	ldr	r3, [sp, #24]
 800f994:	2101      	movs	r1, #1
 800f996:	4413      	add	r3, r2
 800f998:	4648      	mov	r0, r9
 800f99a:	9306      	str	r3, [sp, #24]
 800f99c:	f000 fc22 	bl	80101e4 <__i2b>
 800f9a0:	9b04      	ldr	r3, [sp, #16]
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	b166      	cbz	r6, 800f9c0 <_dtoa_r+0x670>
 800f9a6:	9a06      	ldr	r2, [sp, #24]
 800f9a8:	2a00      	cmp	r2, #0
 800f9aa:	dd09      	ble.n	800f9c0 <_dtoa_r+0x670>
 800f9ac:	42b2      	cmp	r2, r6
 800f9ae:	9905      	ldr	r1, [sp, #20]
 800f9b0:	bfa8      	it	ge
 800f9b2:	4632      	movge	r2, r6
 800f9b4:	1a89      	subs	r1, r1, r2
 800f9b6:	9105      	str	r1, [sp, #20]
 800f9b8:	9906      	ldr	r1, [sp, #24]
 800f9ba:	1ab6      	subs	r6, r6, r2
 800f9bc:	1a8a      	subs	r2, r1, r2
 800f9be:	9206      	str	r2, [sp, #24]
 800f9c0:	b1fb      	cbz	r3, 800fa02 <_dtoa_r+0x6b2>
 800f9c2:	9a08      	ldr	r2, [sp, #32]
 800f9c4:	2a00      	cmp	r2, #0
 800f9c6:	f000 80bc 	beq.w	800fb42 <_dtoa_r+0x7f2>
 800f9ca:	b19c      	cbz	r4, 800f9f4 <_dtoa_r+0x6a4>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4622      	mov	r2, r4
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9d4:	f000 fcc6 	bl	8010364 <__pow5mult>
 800f9d8:	9a01      	ldr	r2, [sp, #4]
 800f9da:	4601      	mov	r1, r0
 800f9dc:	4605      	mov	r5, r0
 800f9de:	4648      	mov	r0, r9
 800f9e0:	f000 fc16 	bl	8010210 <__multiply>
 800f9e4:	9901      	ldr	r1, [sp, #4]
 800f9e6:	9004      	str	r0, [sp, #16]
 800f9e8:	4648      	mov	r0, r9
 800f9ea:	f000 fb47 	bl	801007c <_Bfree>
 800f9ee:	9a04      	ldr	r2, [sp, #16]
 800f9f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9f2:	9201      	str	r2, [sp, #4]
 800f9f4:	1b1a      	subs	r2, r3, r4
 800f9f6:	d004      	beq.n	800fa02 <_dtoa_r+0x6b2>
 800f9f8:	9901      	ldr	r1, [sp, #4]
 800f9fa:	4648      	mov	r0, r9
 800f9fc:	f000 fcb2 	bl	8010364 <__pow5mult>
 800fa00:	9001      	str	r0, [sp, #4]
 800fa02:	2101      	movs	r1, #1
 800fa04:	4648      	mov	r0, r9
 800fa06:	f000 fbed 	bl	80101e4 <__i2b>
 800fa0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f000 81d0 	beq.w	800fdb4 <_dtoa_r+0xa64>
 800fa14:	461a      	mov	r2, r3
 800fa16:	4601      	mov	r1, r0
 800fa18:	4648      	mov	r0, r9
 800fa1a:	f000 fca3 	bl	8010364 <__pow5mult>
 800fa1e:	9b07      	ldr	r3, [sp, #28]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	4604      	mov	r4, r0
 800fa24:	f300 8095 	bgt.w	800fb52 <_dtoa_r+0x802>
 800fa28:	9b02      	ldr	r3, [sp, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f040 808b 	bne.w	800fb46 <_dtoa_r+0x7f6>
 800fa30:	9b03      	ldr	r3, [sp, #12]
 800fa32:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fa36:	2a00      	cmp	r2, #0
 800fa38:	f040 8087 	bne.w	800fb4a <_dtoa_r+0x7fa>
 800fa3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fa40:	0d12      	lsrs	r2, r2, #20
 800fa42:	0512      	lsls	r2, r2, #20
 800fa44:	2a00      	cmp	r2, #0
 800fa46:	f000 8082 	beq.w	800fb4e <_dtoa_r+0x7fe>
 800fa4a:	9b05      	ldr	r3, [sp, #20]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	9305      	str	r3, [sp, #20]
 800fa50:	9b06      	ldr	r3, [sp, #24]
 800fa52:	3301      	adds	r3, #1
 800fa54:	9306      	str	r3, [sp, #24]
 800fa56:	2301      	movs	r3, #1
 800fa58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 81af 	beq.w	800fdc0 <_dtoa_r+0xa70>
 800fa62:	6922      	ldr	r2, [r4, #16]
 800fa64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fa68:	6910      	ldr	r0, [r2, #16]
 800fa6a:	f000 fb6f 	bl	801014c <__hi0bits>
 800fa6e:	f1c0 0020 	rsb	r0, r0, #32
 800fa72:	9b06      	ldr	r3, [sp, #24]
 800fa74:	4418      	add	r0, r3
 800fa76:	f010 001f 	ands.w	r0, r0, #31
 800fa7a:	d076      	beq.n	800fb6a <_dtoa_r+0x81a>
 800fa7c:	f1c0 0220 	rsb	r2, r0, #32
 800fa80:	2a04      	cmp	r2, #4
 800fa82:	dd69      	ble.n	800fb58 <_dtoa_r+0x808>
 800fa84:	9b05      	ldr	r3, [sp, #20]
 800fa86:	f1c0 001c 	rsb	r0, r0, #28
 800fa8a:	4403      	add	r3, r0
 800fa8c:	9305      	str	r3, [sp, #20]
 800fa8e:	9b06      	ldr	r3, [sp, #24]
 800fa90:	4406      	add	r6, r0
 800fa92:	4403      	add	r3, r0
 800fa94:	9306      	str	r3, [sp, #24]
 800fa96:	9b05      	ldr	r3, [sp, #20]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	dd05      	ble.n	800faa8 <_dtoa_r+0x758>
 800fa9c:	9901      	ldr	r1, [sp, #4]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	4648      	mov	r0, r9
 800faa2:	f000 fcb9 	bl	8010418 <__lshift>
 800faa6:	9001      	str	r0, [sp, #4]
 800faa8:	9b06      	ldr	r3, [sp, #24]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dd05      	ble.n	800faba <_dtoa_r+0x76a>
 800faae:	4621      	mov	r1, r4
 800fab0:	461a      	mov	r2, r3
 800fab2:	4648      	mov	r0, r9
 800fab4:	f000 fcb0 	bl	8010418 <__lshift>
 800fab8:	4604      	mov	r4, r0
 800faba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d056      	beq.n	800fb6e <_dtoa_r+0x81e>
 800fac0:	9801      	ldr	r0, [sp, #4]
 800fac2:	4621      	mov	r1, r4
 800fac4:	f000 fd14 	bl	80104f0 <__mcmp>
 800fac8:	2800      	cmp	r0, #0
 800faca:	da50      	bge.n	800fb6e <_dtoa_r+0x81e>
 800facc:	f108 33ff 	add.w	r3, r8, #4294967295
 800fad0:	9304      	str	r3, [sp, #16]
 800fad2:	9901      	ldr	r1, [sp, #4]
 800fad4:	2300      	movs	r3, #0
 800fad6:	220a      	movs	r2, #10
 800fad8:	4648      	mov	r0, r9
 800fada:	f000 faf1 	bl	80100c0 <__multadd>
 800fade:	9b08      	ldr	r3, [sp, #32]
 800fae0:	9001      	str	r0, [sp, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 816e 	beq.w	800fdc4 <_dtoa_r+0xa74>
 800fae8:	4629      	mov	r1, r5
 800faea:	2300      	movs	r3, #0
 800faec:	220a      	movs	r2, #10
 800faee:	4648      	mov	r0, r9
 800faf0:	f000 fae6 	bl	80100c0 <__multadd>
 800faf4:	f1bb 0f00 	cmp.w	fp, #0
 800faf8:	4605      	mov	r5, r0
 800fafa:	dc64      	bgt.n	800fbc6 <_dtoa_r+0x876>
 800fafc:	9b07      	ldr	r3, [sp, #28]
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	dc3e      	bgt.n	800fb80 <_dtoa_r+0x830>
 800fb02:	e060      	b.n	800fbc6 <_dtoa_r+0x876>
 800fb04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fb0a:	e73c      	b.n	800f986 <_dtoa_r+0x636>
 800fb0c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fb10:	42a3      	cmp	r3, r4
 800fb12:	bfbf      	itttt	lt
 800fb14:	1ae2      	sublt	r2, r4, r3
 800fb16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fb18:	189b      	addlt	r3, r3, r2
 800fb1a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800fb1c:	bfae      	itee	ge
 800fb1e:	1b1c      	subge	r4, r3, r4
 800fb20:	4623      	movlt	r3, r4
 800fb22:	2400      	movlt	r4, #0
 800fb24:	f1ba 0f00 	cmp.w	sl, #0
 800fb28:	bfb5      	itete	lt
 800fb2a:	9a05      	ldrlt	r2, [sp, #20]
 800fb2c:	9e05      	ldrge	r6, [sp, #20]
 800fb2e:	eba2 060a 	sublt.w	r6, r2, sl
 800fb32:	4652      	movge	r2, sl
 800fb34:	bfb8      	it	lt
 800fb36:	2200      	movlt	r2, #0
 800fb38:	e727      	b.n	800f98a <_dtoa_r+0x63a>
 800fb3a:	9e05      	ldr	r6, [sp, #20]
 800fb3c:	9d08      	ldr	r5, [sp, #32]
 800fb3e:	461c      	mov	r4, r3
 800fb40:	e730      	b.n	800f9a4 <_dtoa_r+0x654>
 800fb42:	461a      	mov	r2, r3
 800fb44:	e758      	b.n	800f9f8 <_dtoa_r+0x6a8>
 800fb46:	2300      	movs	r3, #0
 800fb48:	e786      	b.n	800fa58 <_dtoa_r+0x708>
 800fb4a:	9b02      	ldr	r3, [sp, #8]
 800fb4c:	e784      	b.n	800fa58 <_dtoa_r+0x708>
 800fb4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fb50:	e783      	b.n	800fa5a <_dtoa_r+0x70a>
 800fb52:	2300      	movs	r3, #0
 800fb54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb56:	e784      	b.n	800fa62 <_dtoa_r+0x712>
 800fb58:	d09d      	beq.n	800fa96 <_dtoa_r+0x746>
 800fb5a:	9b05      	ldr	r3, [sp, #20]
 800fb5c:	321c      	adds	r2, #28
 800fb5e:	4413      	add	r3, r2
 800fb60:	9305      	str	r3, [sp, #20]
 800fb62:	9b06      	ldr	r3, [sp, #24]
 800fb64:	4416      	add	r6, r2
 800fb66:	4413      	add	r3, r2
 800fb68:	e794      	b.n	800fa94 <_dtoa_r+0x744>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	e7f5      	b.n	800fb5a <_dtoa_r+0x80a>
 800fb6e:	f1ba 0f00 	cmp.w	sl, #0
 800fb72:	f8cd 8010 	str.w	r8, [sp, #16]
 800fb76:	46d3      	mov	fp, sl
 800fb78:	dc21      	bgt.n	800fbbe <_dtoa_r+0x86e>
 800fb7a:	9b07      	ldr	r3, [sp, #28]
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	dd1e      	ble.n	800fbbe <_dtoa_r+0x86e>
 800fb80:	f1bb 0f00 	cmp.w	fp, #0
 800fb84:	f47f aeb7 	bne.w	800f8f6 <_dtoa_r+0x5a6>
 800fb88:	4621      	mov	r1, r4
 800fb8a:	465b      	mov	r3, fp
 800fb8c:	2205      	movs	r2, #5
 800fb8e:	4648      	mov	r0, r9
 800fb90:	f000 fa96 	bl	80100c0 <__multadd>
 800fb94:	4601      	mov	r1, r0
 800fb96:	4604      	mov	r4, r0
 800fb98:	9801      	ldr	r0, [sp, #4]
 800fb9a:	f000 fca9 	bl	80104f0 <__mcmp>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	f77f aea9 	ble.w	800f8f6 <_dtoa_r+0x5a6>
 800fba4:	463e      	mov	r6, r7
 800fba6:	2331      	movs	r3, #49	@ 0x31
 800fba8:	f806 3b01 	strb.w	r3, [r6], #1
 800fbac:	9b04      	ldr	r3, [sp, #16]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	9304      	str	r3, [sp, #16]
 800fbb2:	e6a4      	b.n	800f8fe <_dtoa_r+0x5ae>
 800fbb4:	f8cd 8010 	str.w	r8, [sp, #16]
 800fbb8:	4654      	mov	r4, sl
 800fbba:	4625      	mov	r5, r4
 800fbbc:	e7f2      	b.n	800fba4 <_dtoa_r+0x854>
 800fbbe:	9b08      	ldr	r3, [sp, #32]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 8103 	beq.w	800fdcc <_dtoa_r+0xa7c>
 800fbc6:	2e00      	cmp	r6, #0
 800fbc8:	dd05      	ble.n	800fbd6 <_dtoa_r+0x886>
 800fbca:	4629      	mov	r1, r5
 800fbcc:	4632      	mov	r2, r6
 800fbce:	4648      	mov	r0, r9
 800fbd0:	f000 fc22 	bl	8010418 <__lshift>
 800fbd4:	4605      	mov	r5, r0
 800fbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d058      	beq.n	800fc8e <_dtoa_r+0x93e>
 800fbdc:	6869      	ldr	r1, [r5, #4]
 800fbde:	4648      	mov	r0, r9
 800fbe0:	f000 fa0c 	bl	800fffc <_Balloc>
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	b928      	cbnz	r0, 800fbf4 <_dtoa_r+0x8a4>
 800fbe8:	4b82      	ldr	r3, [pc, #520]	@ (800fdf4 <_dtoa_r+0xaa4>)
 800fbea:	4602      	mov	r2, r0
 800fbec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fbf0:	f7ff bbc7 	b.w	800f382 <_dtoa_r+0x32>
 800fbf4:	692a      	ldr	r2, [r5, #16]
 800fbf6:	3202      	adds	r2, #2
 800fbf8:	0092      	lsls	r2, r2, #2
 800fbfa:	f105 010c 	add.w	r1, r5, #12
 800fbfe:	300c      	adds	r0, #12
 800fc00:	f7ff fb0f 	bl	800f222 <memcpy>
 800fc04:	2201      	movs	r2, #1
 800fc06:	4631      	mov	r1, r6
 800fc08:	4648      	mov	r0, r9
 800fc0a:	f000 fc05 	bl	8010418 <__lshift>
 800fc0e:	1c7b      	adds	r3, r7, #1
 800fc10:	9305      	str	r3, [sp, #20]
 800fc12:	eb07 030b 	add.w	r3, r7, fp
 800fc16:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc18:	9b02      	ldr	r3, [sp, #8]
 800fc1a:	f003 0301 	and.w	r3, r3, #1
 800fc1e:	46a8      	mov	r8, r5
 800fc20:	9308      	str	r3, [sp, #32]
 800fc22:	4605      	mov	r5, r0
 800fc24:	9b05      	ldr	r3, [sp, #20]
 800fc26:	9801      	ldr	r0, [sp, #4]
 800fc28:	4621      	mov	r1, r4
 800fc2a:	f103 3bff 	add.w	fp, r3, #4294967295
 800fc2e:	f7ff fb06 	bl	800f23e <quorem>
 800fc32:	4641      	mov	r1, r8
 800fc34:	9002      	str	r0, [sp, #8]
 800fc36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fc3a:	9801      	ldr	r0, [sp, #4]
 800fc3c:	f000 fc58 	bl	80104f0 <__mcmp>
 800fc40:	462a      	mov	r2, r5
 800fc42:	9006      	str	r0, [sp, #24]
 800fc44:	4621      	mov	r1, r4
 800fc46:	4648      	mov	r0, r9
 800fc48:	f000 fc6e 	bl	8010528 <__mdiff>
 800fc4c:	68c2      	ldr	r2, [r0, #12]
 800fc4e:	4606      	mov	r6, r0
 800fc50:	b9fa      	cbnz	r2, 800fc92 <_dtoa_r+0x942>
 800fc52:	4601      	mov	r1, r0
 800fc54:	9801      	ldr	r0, [sp, #4]
 800fc56:	f000 fc4b 	bl	80104f0 <__mcmp>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	4631      	mov	r1, r6
 800fc5e:	4648      	mov	r0, r9
 800fc60:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc62:	f000 fa0b 	bl	801007c <_Bfree>
 800fc66:	9b07      	ldr	r3, [sp, #28]
 800fc68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc6a:	9e05      	ldr	r6, [sp, #20]
 800fc6c:	ea43 0102 	orr.w	r1, r3, r2
 800fc70:	9b08      	ldr	r3, [sp, #32]
 800fc72:	4319      	orrs	r1, r3
 800fc74:	d10f      	bne.n	800fc96 <_dtoa_r+0x946>
 800fc76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc7a:	d028      	beq.n	800fcce <_dtoa_r+0x97e>
 800fc7c:	9b06      	ldr	r3, [sp, #24]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	dd02      	ble.n	800fc88 <_dtoa_r+0x938>
 800fc82:	9b02      	ldr	r3, [sp, #8]
 800fc84:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fc88:	f88b a000 	strb.w	sl, [fp]
 800fc8c:	e639      	b.n	800f902 <_dtoa_r+0x5b2>
 800fc8e:	4628      	mov	r0, r5
 800fc90:	e7bd      	b.n	800fc0e <_dtoa_r+0x8be>
 800fc92:	2201      	movs	r2, #1
 800fc94:	e7e2      	b.n	800fc5c <_dtoa_r+0x90c>
 800fc96:	9b06      	ldr	r3, [sp, #24]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	db04      	blt.n	800fca6 <_dtoa_r+0x956>
 800fc9c:	9907      	ldr	r1, [sp, #28]
 800fc9e:	430b      	orrs	r3, r1
 800fca0:	9908      	ldr	r1, [sp, #32]
 800fca2:	430b      	orrs	r3, r1
 800fca4:	d120      	bne.n	800fce8 <_dtoa_r+0x998>
 800fca6:	2a00      	cmp	r2, #0
 800fca8:	ddee      	ble.n	800fc88 <_dtoa_r+0x938>
 800fcaa:	9901      	ldr	r1, [sp, #4]
 800fcac:	2201      	movs	r2, #1
 800fcae:	4648      	mov	r0, r9
 800fcb0:	f000 fbb2 	bl	8010418 <__lshift>
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	9001      	str	r0, [sp, #4]
 800fcb8:	f000 fc1a 	bl	80104f0 <__mcmp>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	dc03      	bgt.n	800fcc8 <_dtoa_r+0x978>
 800fcc0:	d1e2      	bne.n	800fc88 <_dtoa_r+0x938>
 800fcc2:	f01a 0f01 	tst.w	sl, #1
 800fcc6:	d0df      	beq.n	800fc88 <_dtoa_r+0x938>
 800fcc8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fccc:	d1d9      	bne.n	800fc82 <_dtoa_r+0x932>
 800fcce:	2339      	movs	r3, #57	@ 0x39
 800fcd0:	f88b 3000 	strb.w	r3, [fp]
 800fcd4:	4633      	mov	r3, r6
 800fcd6:	461e      	mov	r6, r3
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fcde:	2a39      	cmp	r2, #57	@ 0x39
 800fce0:	d053      	beq.n	800fd8a <_dtoa_r+0xa3a>
 800fce2:	3201      	adds	r2, #1
 800fce4:	701a      	strb	r2, [r3, #0]
 800fce6:	e60c      	b.n	800f902 <_dtoa_r+0x5b2>
 800fce8:	2a00      	cmp	r2, #0
 800fcea:	dd07      	ble.n	800fcfc <_dtoa_r+0x9ac>
 800fcec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fcf0:	d0ed      	beq.n	800fcce <_dtoa_r+0x97e>
 800fcf2:	f10a 0301 	add.w	r3, sl, #1
 800fcf6:	f88b 3000 	strb.w	r3, [fp]
 800fcfa:	e602      	b.n	800f902 <_dtoa_r+0x5b2>
 800fcfc:	9b05      	ldr	r3, [sp, #20]
 800fcfe:	9a05      	ldr	r2, [sp, #20]
 800fd00:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d029      	beq.n	800fd5e <_dtoa_r+0xa0e>
 800fd0a:	9901      	ldr	r1, [sp, #4]
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	220a      	movs	r2, #10
 800fd10:	4648      	mov	r0, r9
 800fd12:	f000 f9d5 	bl	80100c0 <__multadd>
 800fd16:	45a8      	cmp	r8, r5
 800fd18:	9001      	str	r0, [sp, #4]
 800fd1a:	f04f 0300 	mov.w	r3, #0
 800fd1e:	f04f 020a 	mov.w	r2, #10
 800fd22:	4641      	mov	r1, r8
 800fd24:	4648      	mov	r0, r9
 800fd26:	d107      	bne.n	800fd38 <_dtoa_r+0x9e8>
 800fd28:	f000 f9ca 	bl	80100c0 <__multadd>
 800fd2c:	4680      	mov	r8, r0
 800fd2e:	4605      	mov	r5, r0
 800fd30:	9b05      	ldr	r3, [sp, #20]
 800fd32:	3301      	adds	r3, #1
 800fd34:	9305      	str	r3, [sp, #20]
 800fd36:	e775      	b.n	800fc24 <_dtoa_r+0x8d4>
 800fd38:	f000 f9c2 	bl	80100c0 <__multadd>
 800fd3c:	4629      	mov	r1, r5
 800fd3e:	4680      	mov	r8, r0
 800fd40:	2300      	movs	r3, #0
 800fd42:	220a      	movs	r2, #10
 800fd44:	4648      	mov	r0, r9
 800fd46:	f000 f9bb 	bl	80100c0 <__multadd>
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	e7f0      	b.n	800fd30 <_dtoa_r+0x9e0>
 800fd4e:	f1bb 0f00 	cmp.w	fp, #0
 800fd52:	bfcc      	ite	gt
 800fd54:	465e      	movgt	r6, fp
 800fd56:	2601      	movle	r6, #1
 800fd58:	443e      	add	r6, r7
 800fd5a:	f04f 0800 	mov.w	r8, #0
 800fd5e:	9901      	ldr	r1, [sp, #4]
 800fd60:	2201      	movs	r2, #1
 800fd62:	4648      	mov	r0, r9
 800fd64:	f000 fb58 	bl	8010418 <__lshift>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	9001      	str	r0, [sp, #4]
 800fd6c:	f000 fbc0 	bl	80104f0 <__mcmp>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	dcaf      	bgt.n	800fcd4 <_dtoa_r+0x984>
 800fd74:	d102      	bne.n	800fd7c <_dtoa_r+0xa2c>
 800fd76:	f01a 0f01 	tst.w	sl, #1
 800fd7a:	d1ab      	bne.n	800fcd4 <_dtoa_r+0x984>
 800fd7c:	4633      	mov	r3, r6
 800fd7e:	461e      	mov	r6, r3
 800fd80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd84:	2a30      	cmp	r2, #48	@ 0x30
 800fd86:	d0fa      	beq.n	800fd7e <_dtoa_r+0xa2e>
 800fd88:	e5bb      	b.n	800f902 <_dtoa_r+0x5b2>
 800fd8a:	429f      	cmp	r7, r3
 800fd8c:	d1a3      	bne.n	800fcd6 <_dtoa_r+0x986>
 800fd8e:	9b04      	ldr	r3, [sp, #16]
 800fd90:	3301      	adds	r3, #1
 800fd92:	9304      	str	r3, [sp, #16]
 800fd94:	2331      	movs	r3, #49	@ 0x31
 800fd96:	703b      	strb	r3, [r7, #0]
 800fd98:	e5b3      	b.n	800f902 <_dtoa_r+0x5b2>
 800fd9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd9c:	4f16      	ldr	r7, [pc, #88]	@ (800fdf8 <_dtoa_r+0xaa8>)
 800fd9e:	b11b      	cbz	r3, 800fda8 <_dtoa_r+0xa58>
 800fda0:	f107 0308 	add.w	r3, r7, #8
 800fda4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fda6:	6013      	str	r3, [r2, #0]
 800fda8:	4638      	mov	r0, r7
 800fdaa:	b011      	add	sp, #68	@ 0x44
 800fdac:	ecbd 8b02 	vpop	{d8}
 800fdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb4:	9b07      	ldr	r3, [sp, #28]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	f77f ae36 	ble.w	800fa28 <_dtoa_r+0x6d8>
 800fdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdc0:	2001      	movs	r0, #1
 800fdc2:	e656      	b.n	800fa72 <_dtoa_r+0x722>
 800fdc4:	f1bb 0f00 	cmp.w	fp, #0
 800fdc8:	f77f aed7 	ble.w	800fb7a <_dtoa_r+0x82a>
 800fdcc:	463e      	mov	r6, r7
 800fdce:	9801      	ldr	r0, [sp, #4]
 800fdd0:	4621      	mov	r1, r4
 800fdd2:	f7ff fa34 	bl	800f23e <quorem>
 800fdd6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fdda:	f806 ab01 	strb.w	sl, [r6], #1
 800fdde:	1bf2      	subs	r2, r6, r7
 800fde0:	4593      	cmp	fp, r2
 800fde2:	ddb4      	ble.n	800fd4e <_dtoa_r+0x9fe>
 800fde4:	9901      	ldr	r1, [sp, #4]
 800fde6:	2300      	movs	r3, #0
 800fde8:	220a      	movs	r2, #10
 800fdea:	4648      	mov	r0, r9
 800fdec:	f000 f968 	bl	80100c0 <__multadd>
 800fdf0:	9001      	str	r0, [sp, #4]
 800fdf2:	e7ec      	b.n	800fdce <_dtoa_r+0xa7e>
 800fdf4:	08011199 	.word	0x08011199
 800fdf8:	0801111d 	.word	0x0801111d

0800fdfc <_free_r>:
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	4605      	mov	r5, r0
 800fe00:	2900      	cmp	r1, #0
 800fe02:	d041      	beq.n	800fe88 <_free_r+0x8c>
 800fe04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe08:	1f0c      	subs	r4, r1, #4
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	bfb8      	it	lt
 800fe0e:	18e4      	addlt	r4, r4, r3
 800fe10:	f000 f8e8 	bl	800ffe4 <__malloc_lock>
 800fe14:	4a1d      	ldr	r2, [pc, #116]	@ (800fe8c <_free_r+0x90>)
 800fe16:	6813      	ldr	r3, [r2, #0]
 800fe18:	b933      	cbnz	r3, 800fe28 <_free_r+0x2c>
 800fe1a:	6063      	str	r3, [r4, #4]
 800fe1c:	6014      	str	r4, [r2, #0]
 800fe1e:	4628      	mov	r0, r5
 800fe20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe24:	f000 b8e4 	b.w	800fff0 <__malloc_unlock>
 800fe28:	42a3      	cmp	r3, r4
 800fe2a:	d908      	bls.n	800fe3e <_free_r+0x42>
 800fe2c:	6820      	ldr	r0, [r4, #0]
 800fe2e:	1821      	adds	r1, r4, r0
 800fe30:	428b      	cmp	r3, r1
 800fe32:	bf01      	itttt	eq
 800fe34:	6819      	ldreq	r1, [r3, #0]
 800fe36:	685b      	ldreq	r3, [r3, #4]
 800fe38:	1809      	addeq	r1, r1, r0
 800fe3a:	6021      	streq	r1, [r4, #0]
 800fe3c:	e7ed      	b.n	800fe1a <_free_r+0x1e>
 800fe3e:	461a      	mov	r2, r3
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	b10b      	cbz	r3, 800fe48 <_free_r+0x4c>
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	d9fa      	bls.n	800fe3e <_free_r+0x42>
 800fe48:	6811      	ldr	r1, [r2, #0]
 800fe4a:	1850      	adds	r0, r2, r1
 800fe4c:	42a0      	cmp	r0, r4
 800fe4e:	d10b      	bne.n	800fe68 <_free_r+0x6c>
 800fe50:	6820      	ldr	r0, [r4, #0]
 800fe52:	4401      	add	r1, r0
 800fe54:	1850      	adds	r0, r2, r1
 800fe56:	4283      	cmp	r3, r0
 800fe58:	6011      	str	r1, [r2, #0]
 800fe5a:	d1e0      	bne.n	800fe1e <_free_r+0x22>
 800fe5c:	6818      	ldr	r0, [r3, #0]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	6053      	str	r3, [r2, #4]
 800fe62:	4408      	add	r0, r1
 800fe64:	6010      	str	r0, [r2, #0]
 800fe66:	e7da      	b.n	800fe1e <_free_r+0x22>
 800fe68:	d902      	bls.n	800fe70 <_free_r+0x74>
 800fe6a:	230c      	movs	r3, #12
 800fe6c:	602b      	str	r3, [r5, #0]
 800fe6e:	e7d6      	b.n	800fe1e <_free_r+0x22>
 800fe70:	6820      	ldr	r0, [r4, #0]
 800fe72:	1821      	adds	r1, r4, r0
 800fe74:	428b      	cmp	r3, r1
 800fe76:	bf04      	itt	eq
 800fe78:	6819      	ldreq	r1, [r3, #0]
 800fe7a:	685b      	ldreq	r3, [r3, #4]
 800fe7c:	6063      	str	r3, [r4, #4]
 800fe7e:	bf04      	itt	eq
 800fe80:	1809      	addeq	r1, r1, r0
 800fe82:	6021      	streq	r1, [r4, #0]
 800fe84:	6054      	str	r4, [r2, #4]
 800fe86:	e7ca      	b.n	800fe1e <_free_r+0x22>
 800fe88:	bd38      	pop	{r3, r4, r5, pc}
 800fe8a:	bf00      	nop
 800fe8c:	24004954 	.word	0x24004954

0800fe90 <malloc>:
 800fe90:	4b02      	ldr	r3, [pc, #8]	@ (800fe9c <malloc+0xc>)
 800fe92:	4601      	mov	r1, r0
 800fe94:	6818      	ldr	r0, [r3, #0]
 800fe96:	f000 b825 	b.w	800fee4 <_malloc_r>
 800fe9a:	bf00      	nop
 800fe9c:	24000040 	.word	0x24000040

0800fea0 <sbrk_aligned>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	4e0f      	ldr	r6, [pc, #60]	@ (800fee0 <sbrk_aligned+0x40>)
 800fea4:	460c      	mov	r4, r1
 800fea6:	6831      	ldr	r1, [r6, #0]
 800fea8:	4605      	mov	r5, r0
 800feaa:	b911      	cbnz	r1, 800feb2 <sbrk_aligned+0x12>
 800feac:	f000 fcd4 	bl	8010858 <_sbrk_r>
 800feb0:	6030      	str	r0, [r6, #0]
 800feb2:	4621      	mov	r1, r4
 800feb4:	4628      	mov	r0, r5
 800feb6:	f000 fccf 	bl	8010858 <_sbrk_r>
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	d103      	bne.n	800fec6 <sbrk_aligned+0x26>
 800febe:	f04f 34ff 	mov.w	r4, #4294967295
 800fec2:	4620      	mov	r0, r4
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	1cc4      	adds	r4, r0, #3
 800fec8:	f024 0403 	bic.w	r4, r4, #3
 800fecc:	42a0      	cmp	r0, r4
 800fece:	d0f8      	beq.n	800fec2 <sbrk_aligned+0x22>
 800fed0:	1a21      	subs	r1, r4, r0
 800fed2:	4628      	mov	r0, r5
 800fed4:	f000 fcc0 	bl	8010858 <_sbrk_r>
 800fed8:	3001      	adds	r0, #1
 800feda:	d1f2      	bne.n	800fec2 <sbrk_aligned+0x22>
 800fedc:	e7ef      	b.n	800febe <sbrk_aligned+0x1e>
 800fede:	bf00      	nop
 800fee0:	24004950 	.word	0x24004950

0800fee4 <_malloc_r>:
 800fee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee8:	1ccd      	adds	r5, r1, #3
 800feea:	f025 0503 	bic.w	r5, r5, #3
 800feee:	3508      	adds	r5, #8
 800fef0:	2d0c      	cmp	r5, #12
 800fef2:	bf38      	it	cc
 800fef4:	250c      	movcc	r5, #12
 800fef6:	2d00      	cmp	r5, #0
 800fef8:	4606      	mov	r6, r0
 800fefa:	db01      	blt.n	800ff00 <_malloc_r+0x1c>
 800fefc:	42a9      	cmp	r1, r5
 800fefe:	d904      	bls.n	800ff0a <_malloc_r+0x26>
 800ff00:	230c      	movs	r3, #12
 800ff02:	6033      	str	r3, [r6, #0]
 800ff04:	2000      	movs	r0, #0
 800ff06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ffe0 <_malloc_r+0xfc>
 800ff0e:	f000 f869 	bl	800ffe4 <__malloc_lock>
 800ff12:	f8d8 3000 	ldr.w	r3, [r8]
 800ff16:	461c      	mov	r4, r3
 800ff18:	bb44      	cbnz	r4, 800ff6c <_malloc_r+0x88>
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	f7ff ffbf 	bl	800fea0 <sbrk_aligned>
 800ff22:	1c43      	adds	r3, r0, #1
 800ff24:	4604      	mov	r4, r0
 800ff26:	d158      	bne.n	800ffda <_malloc_r+0xf6>
 800ff28:	f8d8 4000 	ldr.w	r4, [r8]
 800ff2c:	4627      	mov	r7, r4
 800ff2e:	2f00      	cmp	r7, #0
 800ff30:	d143      	bne.n	800ffba <_malloc_r+0xd6>
 800ff32:	2c00      	cmp	r4, #0
 800ff34:	d04b      	beq.n	800ffce <_malloc_r+0xea>
 800ff36:	6823      	ldr	r3, [r4, #0]
 800ff38:	4639      	mov	r1, r7
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	eb04 0903 	add.w	r9, r4, r3
 800ff40:	f000 fc8a 	bl	8010858 <_sbrk_r>
 800ff44:	4581      	cmp	r9, r0
 800ff46:	d142      	bne.n	800ffce <_malloc_r+0xea>
 800ff48:	6821      	ldr	r1, [r4, #0]
 800ff4a:	1a6d      	subs	r5, r5, r1
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4630      	mov	r0, r6
 800ff50:	f7ff ffa6 	bl	800fea0 <sbrk_aligned>
 800ff54:	3001      	adds	r0, #1
 800ff56:	d03a      	beq.n	800ffce <_malloc_r+0xea>
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	442b      	add	r3, r5
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	bb62      	cbnz	r2, 800ffc0 <_malloc_r+0xdc>
 800ff66:	f8c8 7000 	str.w	r7, [r8]
 800ff6a:	e00f      	b.n	800ff8c <_malloc_r+0xa8>
 800ff6c:	6822      	ldr	r2, [r4, #0]
 800ff6e:	1b52      	subs	r2, r2, r5
 800ff70:	d420      	bmi.n	800ffb4 <_malloc_r+0xd0>
 800ff72:	2a0b      	cmp	r2, #11
 800ff74:	d917      	bls.n	800ffa6 <_malloc_r+0xc2>
 800ff76:	1961      	adds	r1, r4, r5
 800ff78:	42a3      	cmp	r3, r4
 800ff7a:	6025      	str	r5, [r4, #0]
 800ff7c:	bf18      	it	ne
 800ff7e:	6059      	strne	r1, [r3, #4]
 800ff80:	6863      	ldr	r3, [r4, #4]
 800ff82:	bf08      	it	eq
 800ff84:	f8c8 1000 	streq.w	r1, [r8]
 800ff88:	5162      	str	r2, [r4, r5]
 800ff8a:	604b      	str	r3, [r1, #4]
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f000 f82f 	bl	800fff0 <__malloc_unlock>
 800ff92:	f104 000b 	add.w	r0, r4, #11
 800ff96:	1d23      	adds	r3, r4, #4
 800ff98:	f020 0007 	bic.w	r0, r0, #7
 800ff9c:	1ac2      	subs	r2, r0, r3
 800ff9e:	bf1c      	itt	ne
 800ffa0:	1a1b      	subne	r3, r3, r0
 800ffa2:	50a3      	strne	r3, [r4, r2]
 800ffa4:	e7af      	b.n	800ff06 <_malloc_r+0x22>
 800ffa6:	6862      	ldr	r2, [r4, #4]
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	bf0c      	ite	eq
 800ffac:	f8c8 2000 	streq.w	r2, [r8]
 800ffb0:	605a      	strne	r2, [r3, #4]
 800ffb2:	e7eb      	b.n	800ff8c <_malloc_r+0xa8>
 800ffb4:	4623      	mov	r3, r4
 800ffb6:	6864      	ldr	r4, [r4, #4]
 800ffb8:	e7ae      	b.n	800ff18 <_malloc_r+0x34>
 800ffba:	463c      	mov	r4, r7
 800ffbc:	687f      	ldr	r7, [r7, #4]
 800ffbe:	e7b6      	b.n	800ff2e <_malloc_r+0x4a>
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	42a3      	cmp	r3, r4
 800ffc6:	d1fb      	bne.n	800ffc0 <_malloc_r+0xdc>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	6053      	str	r3, [r2, #4]
 800ffcc:	e7de      	b.n	800ff8c <_malloc_r+0xa8>
 800ffce:	230c      	movs	r3, #12
 800ffd0:	6033      	str	r3, [r6, #0]
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f000 f80c 	bl	800fff0 <__malloc_unlock>
 800ffd8:	e794      	b.n	800ff04 <_malloc_r+0x20>
 800ffda:	6005      	str	r5, [r0, #0]
 800ffdc:	e7d6      	b.n	800ff8c <_malloc_r+0xa8>
 800ffde:	bf00      	nop
 800ffe0:	24004954 	.word	0x24004954

0800ffe4 <__malloc_lock>:
 800ffe4:	4801      	ldr	r0, [pc, #4]	@ (800ffec <__malloc_lock+0x8>)
 800ffe6:	f7ff b91a 	b.w	800f21e <__retarget_lock_acquire_recursive>
 800ffea:	bf00      	nop
 800ffec:	2400494c 	.word	0x2400494c

0800fff0 <__malloc_unlock>:
 800fff0:	4801      	ldr	r0, [pc, #4]	@ (800fff8 <__malloc_unlock+0x8>)
 800fff2:	f7ff b915 	b.w	800f220 <__retarget_lock_release_recursive>
 800fff6:	bf00      	nop
 800fff8:	2400494c 	.word	0x2400494c

0800fffc <_Balloc>:
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	69c6      	ldr	r6, [r0, #28]
 8010000:	4604      	mov	r4, r0
 8010002:	460d      	mov	r5, r1
 8010004:	b976      	cbnz	r6, 8010024 <_Balloc+0x28>
 8010006:	2010      	movs	r0, #16
 8010008:	f7ff ff42 	bl	800fe90 <malloc>
 801000c:	4602      	mov	r2, r0
 801000e:	61e0      	str	r0, [r4, #28]
 8010010:	b920      	cbnz	r0, 801001c <_Balloc+0x20>
 8010012:	4b18      	ldr	r3, [pc, #96]	@ (8010074 <_Balloc+0x78>)
 8010014:	4818      	ldr	r0, [pc, #96]	@ (8010078 <_Balloc+0x7c>)
 8010016:	216b      	movs	r1, #107	@ 0x6b
 8010018:	f000 fc2e 	bl	8010878 <__assert_func>
 801001c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010020:	6006      	str	r6, [r0, #0]
 8010022:	60c6      	str	r6, [r0, #12]
 8010024:	69e6      	ldr	r6, [r4, #28]
 8010026:	68f3      	ldr	r3, [r6, #12]
 8010028:	b183      	cbz	r3, 801004c <_Balloc+0x50>
 801002a:	69e3      	ldr	r3, [r4, #28]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010032:	b9b8      	cbnz	r0, 8010064 <_Balloc+0x68>
 8010034:	2101      	movs	r1, #1
 8010036:	fa01 f605 	lsl.w	r6, r1, r5
 801003a:	1d72      	adds	r2, r6, #5
 801003c:	0092      	lsls	r2, r2, #2
 801003e:	4620      	mov	r0, r4
 8010040:	f000 fc38 	bl	80108b4 <_calloc_r>
 8010044:	b160      	cbz	r0, 8010060 <_Balloc+0x64>
 8010046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801004a:	e00e      	b.n	801006a <_Balloc+0x6e>
 801004c:	2221      	movs	r2, #33	@ 0x21
 801004e:	2104      	movs	r1, #4
 8010050:	4620      	mov	r0, r4
 8010052:	f000 fc2f 	bl	80108b4 <_calloc_r>
 8010056:	69e3      	ldr	r3, [r4, #28]
 8010058:	60f0      	str	r0, [r6, #12]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1e4      	bne.n	801002a <_Balloc+0x2e>
 8010060:	2000      	movs	r0, #0
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	6802      	ldr	r2, [r0, #0]
 8010066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801006a:	2300      	movs	r3, #0
 801006c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010070:	e7f7      	b.n	8010062 <_Balloc+0x66>
 8010072:	bf00      	nop
 8010074:	0801112a 	.word	0x0801112a
 8010078:	080111aa 	.word	0x080111aa

0801007c <_Bfree>:
 801007c:	b570      	push	{r4, r5, r6, lr}
 801007e:	69c6      	ldr	r6, [r0, #28]
 8010080:	4605      	mov	r5, r0
 8010082:	460c      	mov	r4, r1
 8010084:	b976      	cbnz	r6, 80100a4 <_Bfree+0x28>
 8010086:	2010      	movs	r0, #16
 8010088:	f7ff ff02 	bl	800fe90 <malloc>
 801008c:	4602      	mov	r2, r0
 801008e:	61e8      	str	r0, [r5, #28]
 8010090:	b920      	cbnz	r0, 801009c <_Bfree+0x20>
 8010092:	4b09      	ldr	r3, [pc, #36]	@ (80100b8 <_Bfree+0x3c>)
 8010094:	4809      	ldr	r0, [pc, #36]	@ (80100bc <_Bfree+0x40>)
 8010096:	218f      	movs	r1, #143	@ 0x8f
 8010098:	f000 fbee 	bl	8010878 <__assert_func>
 801009c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100a0:	6006      	str	r6, [r0, #0]
 80100a2:	60c6      	str	r6, [r0, #12]
 80100a4:	b13c      	cbz	r4, 80100b6 <_Bfree+0x3a>
 80100a6:	69eb      	ldr	r3, [r5, #28]
 80100a8:	6862      	ldr	r2, [r4, #4]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100b0:	6021      	str	r1, [r4, #0]
 80100b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100b6:	bd70      	pop	{r4, r5, r6, pc}
 80100b8:	0801112a 	.word	0x0801112a
 80100bc:	080111aa 	.word	0x080111aa

080100c0 <__multadd>:
 80100c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c4:	690d      	ldr	r5, [r1, #16]
 80100c6:	4607      	mov	r7, r0
 80100c8:	460c      	mov	r4, r1
 80100ca:	461e      	mov	r6, r3
 80100cc:	f101 0c14 	add.w	ip, r1, #20
 80100d0:	2000      	movs	r0, #0
 80100d2:	f8dc 3000 	ldr.w	r3, [ip]
 80100d6:	b299      	uxth	r1, r3
 80100d8:	fb02 6101 	mla	r1, r2, r1, r6
 80100dc:	0c1e      	lsrs	r6, r3, #16
 80100de:	0c0b      	lsrs	r3, r1, #16
 80100e0:	fb02 3306 	mla	r3, r2, r6, r3
 80100e4:	b289      	uxth	r1, r1
 80100e6:	3001      	adds	r0, #1
 80100e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100ec:	4285      	cmp	r5, r0
 80100ee:	f84c 1b04 	str.w	r1, [ip], #4
 80100f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100f6:	dcec      	bgt.n	80100d2 <__multadd+0x12>
 80100f8:	b30e      	cbz	r6, 801013e <__multadd+0x7e>
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	42ab      	cmp	r3, r5
 80100fe:	dc19      	bgt.n	8010134 <__multadd+0x74>
 8010100:	6861      	ldr	r1, [r4, #4]
 8010102:	4638      	mov	r0, r7
 8010104:	3101      	adds	r1, #1
 8010106:	f7ff ff79 	bl	800fffc <_Balloc>
 801010a:	4680      	mov	r8, r0
 801010c:	b928      	cbnz	r0, 801011a <__multadd+0x5a>
 801010e:	4602      	mov	r2, r0
 8010110:	4b0c      	ldr	r3, [pc, #48]	@ (8010144 <__multadd+0x84>)
 8010112:	480d      	ldr	r0, [pc, #52]	@ (8010148 <__multadd+0x88>)
 8010114:	21ba      	movs	r1, #186	@ 0xba
 8010116:	f000 fbaf 	bl	8010878 <__assert_func>
 801011a:	6922      	ldr	r2, [r4, #16]
 801011c:	3202      	adds	r2, #2
 801011e:	f104 010c 	add.w	r1, r4, #12
 8010122:	0092      	lsls	r2, r2, #2
 8010124:	300c      	adds	r0, #12
 8010126:	f7ff f87c 	bl	800f222 <memcpy>
 801012a:	4621      	mov	r1, r4
 801012c:	4638      	mov	r0, r7
 801012e:	f7ff ffa5 	bl	801007c <_Bfree>
 8010132:	4644      	mov	r4, r8
 8010134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010138:	3501      	adds	r5, #1
 801013a:	615e      	str	r6, [r3, #20]
 801013c:	6125      	str	r5, [r4, #16]
 801013e:	4620      	mov	r0, r4
 8010140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010144:	08011199 	.word	0x08011199
 8010148:	080111aa 	.word	0x080111aa

0801014c <__hi0bits>:
 801014c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010150:	4603      	mov	r3, r0
 8010152:	bf36      	itet	cc
 8010154:	0403      	lslcc	r3, r0, #16
 8010156:	2000      	movcs	r0, #0
 8010158:	2010      	movcc	r0, #16
 801015a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801015e:	bf3c      	itt	cc
 8010160:	021b      	lslcc	r3, r3, #8
 8010162:	3008      	addcc	r0, #8
 8010164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010168:	bf3c      	itt	cc
 801016a:	011b      	lslcc	r3, r3, #4
 801016c:	3004      	addcc	r0, #4
 801016e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010172:	bf3c      	itt	cc
 8010174:	009b      	lslcc	r3, r3, #2
 8010176:	3002      	addcc	r0, #2
 8010178:	2b00      	cmp	r3, #0
 801017a:	db05      	blt.n	8010188 <__hi0bits+0x3c>
 801017c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010180:	f100 0001 	add.w	r0, r0, #1
 8010184:	bf08      	it	eq
 8010186:	2020      	moveq	r0, #32
 8010188:	4770      	bx	lr

0801018a <__lo0bits>:
 801018a:	6803      	ldr	r3, [r0, #0]
 801018c:	4602      	mov	r2, r0
 801018e:	f013 0007 	ands.w	r0, r3, #7
 8010192:	d00b      	beq.n	80101ac <__lo0bits+0x22>
 8010194:	07d9      	lsls	r1, r3, #31
 8010196:	d421      	bmi.n	80101dc <__lo0bits+0x52>
 8010198:	0798      	lsls	r0, r3, #30
 801019a:	bf49      	itett	mi
 801019c:	085b      	lsrmi	r3, r3, #1
 801019e:	089b      	lsrpl	r3, r3, #2
 80101a0:	2001      	movmi	r0, #1
 80101a2:	6013      	strmi	r3, [r2, #0]
 80101a4:	bf5c      	itt	pl
 80101a6:	6013      	strpl	r3, [r2, #0]
 80101a8:	2002      	movpl	r0, #2
 80101aa:	4770      	bx	lr
 80101ac:	b299      	uxth	r1, r3
 80101ae:	b909      	cbnz	r1, 80101b4 <__lo0bits+0x2a>
 80101b0:	0c1b      	lsrs	r3, r3, #16
 80101b2:	2010      	movs	r0, #16
 80101b4:	b2d9      	uxtb	r1, r3
 80101b6:	b909      	cbnz	r1, 80101bc <__lo0bits+0x32>
 80101b8:	3008      	adds	r0, #8
 80101ba:	0a1b      	lsrs	r3, r3, #8
 80101bc:	0719      	lsls	r1, r3, #28
 80101be:	bf04      	itt	eq
 80101c0:	091b      	lsreq	r3, r3, #4
 80101c2:	3004      	addeq	r0, #4
 80101c4:	0799      	lsls	r1, r3, #30
 80101c6:	bf04      	itt	eq
 80101c8:	089b      	lsreq	r3, r3, #2
 80101ca:	3002      	addeq	r0, #2
 80101cc:	07d9      	lsls	r1, r3, #31
 80101ce:	d403      	bmi.n	80101d8 <__lo0bits+0x4e>
 80101d0:	085b      	lsrs	r3, r3, #1
 80101d2:	f100 0001 	add.w	r0, r0, #1
 80101d6:	d003      	beq.n	80101e0 <__lo0bits+0x56>
 80101d8:	6013      	str	r3, [r2, #0]
 80101da:	4770      	bx	lr
 80101dc:	2000      	movs	r0, #0
 80101de:	4770      	bx	lr
 80101e0:	2020      	movs	r0, #32
 80101e2:	4770      	bx	lr

080101e4 <__i2b>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	460c      	mov	r4, r1
 80101e8:	2101      	movs	r1, #1
 80101ea:	f7ff ff07 	bl	800fffc <_Balloc>
 80101ee:	4602      	mov	r2, r0
 80101f0:	b928      	cbnz	r0, 80101fe <__i2b+0x1a>
 80101f2:	4b05      	ldr	r3, [pc, #20]	@ (8010208 <__i2b+0x24>)
 80101f4:	4805      	ldr	r0, [pc, #20]	@ (801020c <__i2b+0x28>)
 80101f6:	f240 1145 	movw	r1, #325	@ 0x145
 80101fa:	f000 fb3d 	bl	8010878 <__assert_func>
 80101fe:	2301      	movs	r3, #1
 8010200:	6144      	str	r4, [r0, #20]
 8010202:	6103      	str	r3, [r0, #16]
 8010204:	bd10      	pop	{r4, pc}
 8010206:	bf00      	nop
 8010208:	08011199 	.word	0x08011199
 801020c:	080111aa 	.word	0x080111aa

08010210 <__multiply>:
 8010210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	4614      	mov	r4, r2
 8010216:	690a      	ldr	r2, [r1, #16]
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	429a      	cmp	r2, r3
 801021c:	bfa8      	it	ge
 801021e:	4623      	movge	r3, r4
 8010220:	460f      	mov	r7, r1
 8010222:	bfa4      	itt	ge
 8010224:	460c      	movge	r4, r1
 8010226:	461f      	movge	r7, r3
 8010228:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801022c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010230:	68a3      	ldr	r3, [r4, #8]
 8010232:	6861      	ldr	r1, [r4, #4]
 8010234:	eb0a 0609 	add.w	r6, sl, r9
 8010238:	42b3      	cmp	r3, r6
 801023a:	b085      	sub	sp, #20
 801023c:	bfb8      	it	lt
 801023e:	3101      	addlt	r1, #1
 8010240:	f7ff fedc 	bl	800fffc <_Balloc>
 8010244:	b930      	cbnz	r0, 8010254 <__multiply+0x44>
 8010246:	4602      	mov	r2, r0
 8010248:	4b44      	ldr	r3, [pc, #272]	@ (801035c <__multiply+0x14c>)
 801024a:	4845      	ldr	r0, [pc, #276]	@ (8010360 <__multiply+0x150>)
 801024c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010250:	f000 fb12 	bl	8010878 <__assert_func>
 8010254:	f100 0514 	add.w	r5, r0, #20
 8010258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801025c:	462b      	mov	r3, r5
 801025e:	2200      	movs	r2, #0
 8010260:	4543      	cmp	r3, r8
 8010262:	d321      	bcc.n	80102a8 <__multiply+0x98>
 8010264:	f107 0114 	add.w	r1, r7, #20
 8010268:	f104 0214 	add.w	r2, r4, #20
 801026c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010270:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010274:	9302      	str	r3, [sp, #8]
 8010276:	1b13      	subs	r3, r2, r4
 8010278:	3b15      	subs	r3, #21
 801027a:	f023 0303 	bic.w	r3, r3, #3
 801027e:	3304      	adds	r3, #4
 8010280:	f104 0715 	add.w	r7, r4, #21
 8010284:	42ba      	cmp	r2, r7
 8010286:	bf38      	it	cc
 8010288:	2304      	movcc	r3, #4
 801028a:	9301      	str	r3, [sp, #4]
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	9103      	str	r1, [sp, #12]
 8010290:	428b      	cmp	r3, r1
 8010292:	d80c      	bhi.n	80102ae <__multiply+0x9e>
 8010294:	2e00      	cmp	r6, #0
 8010296:	dd03      	ble.n	80102a0 <__multiply+0x90>
 8010298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801029c:	2b00      	cmp	r3, #0
 801029e:	d05b      	beq.n	8010358 <__multiply+0x148>
 80102a0:	6106      	str	r6, [r0, #16]
 80102a2:	b005      	add	sp, #20
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	f843 2b04 	str.w	r2, [r3], #4
 80102ac:	e7d8      	b.n	8010260 <__multiply+0x50>
 80102ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80102b2:	f1ba 0f00 	cmp.w	sl, #0
 80102b6:	d024      	beq.n	8010302 <__multiply+0xf2>
 80102b8:	f104 0e14 	add.w	lr, r4, #20
 80102bc:	46a9      	mov	r9, r5
 80102be:	f04f 0c00 	mov.w	ip, #0
 80102c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80102c6:	f8d9 3000 	ldr.w	r3, [r9]
 80102ca:	fa1f fb87 	uxth.w	fp, r7
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80102d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80102d8:	f8d9 7000 	ldr.w	r7, [r9]
 80102dc:	4463      	add	r3, ip
 80102de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80102e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80102e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80102f0:	4572      	cmp	r2, lr
 80102f2:	f849 3b04 	str.w	r3, [r9], #4
 80102f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80102fa:	d8e2      	bhi.n	80102c2 <__multiply+0xb2>
 80102fc:	9b01      	ldr	r3, [sp, #4]
 80102fe:	f845 c003 	str.w	ip, [r5, r3]
 8010302:	9b03      	ldr	r3, [sp, #12]
 8010304:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010308:	3104      	adds	r1, #4
 801030a:	f1b9 0f00 	cmp.w	r9, #0
 801030e:	d021      	beq.n	8010354 <__multiply+0x144>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	f104 0c14 	add.w	ip, r4, #20
 8010316:	46ae      	mov	lr, r5
 8010318:	f04f 0a00 	mov.w	sl, #0
 801031c:	f8bc b000 	ldrh.w	fp, [ip]
 8010320:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010324:	fb09 770b 	mla	r7, r9, fp, r7
 8010328:	4457      	add	r7, sl
 801032a:	b29b      	uxth	r3, r3
 801032c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010330:	f84e 3b04 	str.w	r3, [lr], #4
 8010334:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010338:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801033c:	f8be 3000 	ldrh.w	r3, [lr]
 8010340:	fb09 330a 	mla	r3, r9, sl, r3
 8010344:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010348:	4562      	cmp	r2, ip
 801034a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801034e:	d8e5      	bhi.n	801031c <__multiply+0x10c>
 8010350:	9f01      	ldr	r7, [sp, #4]
 8010352:	51eb      	str	r3, [r5, r7]
 8010354:	3504      	adds	r5, #4
 8010356:	e799      	b.n	801028c <__multiply+0x7c>
 8010358:	3e01      	subs	r6, #1
 801035a:	e79b      	b.n	8010294 <__multiply+0x84>
 801035c:	08011199 	.word	0x08011199
 8010360:	080111aa 	.word	0x080111aa

08010364 <__pow5mult>:
 8010364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010368:	4615      	mov	r5, r2
 801036a:	f012 0203 	ands.w	r2, r2, #3
 801036e:	4607      	mov	r7, r0
 8010370:	460e      	mov	r6, r1
 8010372:	d007      	beq.n	8010384 <__pow5mult+0x20>
 8010374:	4c25      	ldr	r4, [pc, #148]	@ (801040c <__pow5mult+0xa8>)
 8010376:	3a01      	subs	r2, #1
 8010378:	2300      	movs	r3, #0
 801037a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801037e:	f7ff fe9f 	bl	80100c0 <__multadd>
 8010382:	4606      	mov	r6, r0
 8010384:	10ad      	asrs	r5, r5, #2
 8010386:	d03d      	beq.n	8010404 <__pow5mult+0xa0>
 8010388:	69fc      	ldr	r4, [r7, #28]
 801038a:	b97c      	cbnz	r4, 80103ac <__pow5mult+0x48>
 801038c:	2010      	movs	r0, #16
 801038e:	f7ff fd7f 	bl	800fe90 <malloc>
 8010392:	4602      	mov	r2, r0
 8010394:	61f8      	str	r0, [r7, #28]
 8010396:	b928      	cbnz	r0, 80103a4 <__pow5mult+0x40>
 8010398:	4b1d      	ldr	r3, [pc, #116]	@ (8010410 <__pow5mult+0xac>)
 801039a:	481e      	ldr	r0, [pc, #120]	@ (8010414 <__pow5mult+0xb0>)
 801039c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80103a0:	f000 fa6a 	bl	8010878 <__assert_func>
 80103a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103a8:	6004      	str	r4, [r0, #0]
 80103aa:	60c4      	str	r4, [r0, #12]
 80103ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80103b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103b4:	b94c      	cbnz	r4, 80103ca <__pow5mult+0x66>
 80103b6:	f240 2171 	movw	r1, #625	@ 0x271
 80103ba:	4638      	mov	r0, r7
 80103bc:	f7ff ff12 	bl	80101e4 <__i2b>
 80103c0:	2300      	movs	r3, #0
 80103c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80103c6:	4604      	mov	r4, r0
 80103c8:	6003      	str	r3, [r0, #0]
 80103ca:	f04f 0900 	mov.w	r9, #0
 80103ce:	07eb      	lsls	r3, r5, #31
 80103d0:	d50a      	bpl.n	80103e8 <__pow5mult+0x84>
 80103d2:	4631      	mov	r1, r6
 80103d4:	4622      	mov	r2, r4
 80103d6:	4638      	mov	r0, r7
 80103d8:	f7ff ff1a 	bl	8010210 <__multiply>
 80103dc:	4631      	mov	r1, r6
 80103de:	4680      	mov	r8, r0
 80103e0:	4638      	mov	r0, r7
 80103e2:	f7ff fe4b 	bl	801007c <_Bfree>
 80103e6:	4646      	mov	r6, r8
 80103e8:	106d      	asrs	r5, r5, #1
 80103ea:	d00b      	beq.n	8010404 <__pow5mult+0xa0>
 80103ec:	6820      	ldr	r0, [r4, #0]
 80103ee:	b938      	cbnz	r0, 8010400 <__pow5mult+0x9c>
 80103f0:	4622      	mov	r2, r4
 80103f2:	4621      	mov	r1, r4
 80103f4:	4638      	mov	r0, r7
 80103f6:	f7ff ff0b 	bl	8010210 <__multiply>
 80103fa:	6020      	str	r0, [r4, #0]
 80103fc:	f8c0 9000 	str.w	r9, [r0]
 8010400:	4604      	mov	r4, r0
 8010402:	e7e4      	b.n	80103ce <__pow5mult+0x6a>
 8010404:	4630      	mov	r0, r6
 8010406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801040a:	bf00      	nop
 801040c:	08011204 	.word	0x08011204
 8010410:	0801112a 	.word	0x0801112a
 8010414:	080111aa 	.word	0x080111aa

08010418 <__lshift>:
 8010418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801041c:	460c      	mov	r4, r1
 801041e:	6849      	ldr	r1, [r1, #4]
 8010420:	6923      	ldr	r3, [r4, #16]
 8010422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010426:	68a3      	ldr	r3, [r4, #8]
 8010428:	4607      	mov	r7, r0
 801042a:	4691      	mov	r9, r2
 801042c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010430:	f108 0601 	add.w	r6, r8, #1
 8010434:	42b3      	cmp	r3, r6
 8010436:	db0b      	blt.n	8010450 <__lshift+0x38>
 8010438:	4638      	mov	r0, r7
 801043a:	f7ff fddf 	bl	800fffc <_Balloc>
 801043e:	4605      	mov	r5, r0
 8010440:	b948      	cbnz	r0, 8010456 <__lshift+0x3e>
 8010442:	4602      	mov	r2, r0
 8010444:	4b28      	ldr	r3, [pc, #160]	@ (80104e8 <__lshift+0xd0>)
 8010446:	4829      	ldr	r0, [pc, #164]	@ (80104ec <__lshift+0xd4>)
 8010448:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801044c:	f000 fa14 	bl	8010878 <__assert_func>
 8010450:	3101      	adds	r1, #1
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	e7ee      	b.n	8010434 <__lshift+0x1c>
 8010456:	2300      	movs	r3, #0
 8010458:	f100 0114 	add.w	r1, r0, #20
 801045c:	f100 0210 	add.w	r2, r0, #16
 8010460:	4618      	mov	r0, r3
 8010462:	4553      	cmp	r3, sl
 8010464:	db33      	blt.n	80104ce <__lshift+0xb6>
 8010466:	6920      	ldr	r0, [r4, #16]
 8010468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801046c:	f104 0314 	add.w	r3, r4, #20
 8010470:	f019 091f 	ands.w	r9, r9, #31
 8010474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801047c:	d02b      	beq.n	80104d6 <__lshift+0xbe>
 801047e:	f1c9 0e20 	rsb	lr, r9, #32
 8010482:	468a      	mov	sl, r1
 8010484:	2200      	movs	r2, #0
 8010486:	6818      	ldr	r0, [r3, #0]
 8010488:	fa00 f009 	lsl.w	r0, r0, r9
 801048c:	4310      	orrs	r0, r2
 801048e:	f84a 0b04 	str.w	r0, [sl], #4
 8010492:	f853 2b04 	ldr.w	r2, [r3], #4
 8010496:	459c      	cmp	ip, r3
 8010498:	fa22 f20e 	lsr.w	r2, r2, lr
 801049c:	d8f3      	bhi.n	8010486 <__lshift+0x6e>
 801049e:	ebac 0304 	sub.w	r3, ip, r4
 80104a2:	3b15      	subs	r3, #21
 80104a4:	f023 0303 	bic.w	r3, r3, #3
 80104a8:	3304      	adds	r3, #4
 80104aa:	f104 0015 	add.w	r0, r4, #21
 80104ae:	4584      	cmp	ip, r0
 80104b0:	bf38      	it	cc
 80104b2:	2304      	movcc	r3, #4
 80104b4:	50ca      	str	r2, [r1, r3]
 80104b6:	b10a      	cbz	r2, 80104bc <__lshift+0xa4>
 80104b8:	f108 0602 	add.w	r6, r8, #2
 80104bc:	3e01      	subs	r6, #1
 80104be:	4638      	mov	r0, r7
 80104c0:	612e      	str	r6, [r5, #16]
 80104c2:	4621      	mov	r1, r4
 80104c4:	f7ff fdda 	bl	801007c <_Bfree>
 80104c8:	4628      	mov	r0, r5
 80104ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80104d2:	3301      	adds	r3, #1
 80104d4:	e7c5      	b.n	8010462 <__lshift+0x4a>
 80104d6:	3904      	subs	r1, #4
 80104d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80104dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80104e0:	459c      	cmp	ip, r3
 80104e2:	d8f9      	bhi.n	80104d8 <__lshift+0xc0>
 80104e4:	e7ea      	b.n	80104bc <__lshift+0xa4>
 80104e6:	bf00      	nop
 80104e8:	08011199 	.word	0x08011199
 80104ec:	080111aa 	.word	0x080111aa

080104f0 <__mcmp>:
 80104f0:	690a      	ldr	r2, [r1, #16]
 80104f2:	4603      	mov	r3, r0
 80104f4:	6900      	ldr	r0, [r0, #16]
 80104f6:	1a80      	subs	r0, r0, r2
 80104f8:	b530      	push	{r4, r5, lr}
 80104fa:	d10e      	bne.n	801051a <__mcmp+0x2a>
 80104fc:	3314      	adds	r3, #20
 80104fe:	3114      	adds	r1, #20
 8010500:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010504:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801050c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010510:	4295      	cmp	r5, r2
 8010512:	d003      	beq.n	801051c <__mcmp+0x2c>
 8010514:	d205      	bcs.n	8010522 <__mcmp+0x32>
 8010516:	f04f 30ff 	mov.w	r0, #4294967295
 801051a:	bd30      	pop	{r4, r5, pc}
 801051c:	42a3      	cmp	r3, r4
 801051e:	d3f3      	bcc.n	8010508 <__mcmp+0x18>
 8010520:	e7fb      	b.n	801051a <__mcmp+0x2a>
 8010522:	2001      	movs	r0, #1
 8010524:	e7f9      	b.n	801051a <__mcmp+0x2a>
	...

08010528 <__mdiff>:
 8010528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801052c:	4689      	mov	r9, r1
 801052e:	4606      	mov	r6, r0
 8010530:	4611      	mov	r1, r2
 8010532:	4648      	mov	r0, r9
 8010534:	4614      	mov	r4, r2
 8010536:	f7ff ffdb 	bl	80104f0 <__mcmp>
 801053a:	1e05      	subs	r5, r0, #0
 801053c:	d112      	bne.n	8010564 <__mdiff+0x3c>
 801053e:	4629      	mov	r1, r5
 8010540:	4630      	mov	r0, r6
 8010542:	f7ff fd5b 	bl	800fffc <_Balloc>
 8010546:	4602      	mov	r2, r0
 8010548:	b928      	cbnz	r0, 8010556 <__mdiff+0x2e>
 801054a:	4b3f      	ldr	r3, [pc, #252]	@ (8010648 <__mdiff+0x120>)
 801054c:	f240 2137 	movw	r1, #567	@ 0x237
 8010550:	483e      	ldr	r0, [pc, #248]	@ (801064c <__mdiff+0x124>)
 8010552:	f000 f991 	bl	8010878 <__assert_func>
 8010556:	2301      	movs	r3, #1
 8010558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801055c:	4610      	mov	r0, r2
 801055e:	b003      	add	sp, #12
 8010560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010564:	bfbc      	itt	lt
 8010566:	464b      	movlt	r3, r9
 8010568:	46a1      	movlt	r9, r4
 801056a:	4630      	mov	r0, r6
 801056c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010570:	bfba      	itte	lt
 8010572:	461c      	movlt	r4, r3
 8010574:	2501      	movlt	r5, #1
 8010576:	2500      	movge	r5, #0
 8010578:	f7ff fd40 	bl	800fffc <_Balloc>
 801057c:	4602      	mov	r2, r0
 801057e:	b918      	cbnz	r0, 8010588 <__mdiff+0x60>
 8010580:	4b31      	ldr	r3, [pc, #196]	@ (8010648 <__mdiff+0x120>)
 8010582:	f240 2145 	movw	r1, #581	@ 0x245
 8010586:	e7e3      	b.n	8010550 <__mdiff+0x28>
 8010588:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801058c:	6926      	ldr	r6, [r4, #16]
 801058e:	60c5      	str	r5, [r0, #12]
 8010590:	f109 0310 	add.w	r3, r9, #16
 8010594:	f109 0514 	add.w	r5, r9, #20
 8010598:	f104 0e14 	add.w	lr, r4, #20
 801059c:	f100 0b14 	add.w	fp, r0, #20
 80105a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80105a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80105a8:	9301      	str	r3, [sp, #4]
 80105aa:	46d9      	mov	r9, fp
 80105ac:	f04f 0c00 	mov.w	ip, #0
 80105b0:	9b01      	ldr	r3, [sp, #4]
 80105b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80105b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	fa1f f38a 	uxth.w	r3, sl
 80105c0:	4619      	mov	r1, r3
 80105c2:	b283      	uxth	r3, r0
 80105c4:	1acb      	subs	r3, r1, r3
 80105c6:	0c00      	lsrs	r0, r0, #16
 80105c8:	4463      	add	r3, ip
 80105ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80105ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80105d8:	4576      	cmp	r6, lr
 80105da:	f849 3b04 	str.w	r3, [r9], #4
 80105de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80105e2:	d8e5      	bhi.n	80105b0 <__mdiff+0x88>
 80105e4:	1b33      	subs	r3, r6, r4
 80105e6:	3b15      	subs	r3, #21
 80105e8:	f023 0303 	bic.w	r3, r3, #3
 80105ec:	3415      	adds	r4, #21
 80105ee:	3304      	adds	r3, #4
 80105f0:	42a6      	cmp	r6, r4
 80105f2:	bf38      	it	cc
 80105f4:	2304      	movcc	r3, #4
 80105f6:	441d      	add	r5, r3
 80105f8:	445b      	add	r3, fp
 80105fa:	461e      	mov	r6, r3
 80105fc:	462c      	mov	r4, r5
 80105fe:	4544      	cmp	r4, r8
 8010600:	d30e      	bcc.n	8010620 <__mdiff+0xf8>
 8010602:	f108 0103 	add.w	r1, r8, #3
 8010606:	1b49      	subs	r1, r1, r5
 8010608:	f021 0103 	bic.w	r1, r1, #3
 801060c:	3d03      	subs	r5, #3
 801060e:	45a8      	cmp	r8, r5
 8010610:	bf38      	it	cc
 8010612:	2100      	movcc	r1, #0
 8010614:	440b      	add	r3, r1
 8010616:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801061a:	b191      	cbz	r1, 8010642 <__mdiff+0x11a>
 801061c:	6117      	str	r7, [r2, #16]
 801061e:	e79d      	b.n	801055c <__mdiff+0x34>
 8010620:	f854 1b04 	ldr.w	r1, [r4], #4
 8010624:	46e6      	mov	lr, ip
 8010626:	0c08      	lsrs	r0, r1, #16
 8010628:	fa1c fc81 	uxtah	ip, ip, r1
 801062c:	4471      	add	r1, lr
 801062e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010632:	b289      	uxth	r1, r1
 8010634:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010638:	f846 1b04 	str.w	r1, [r6], #4
 801063c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010640:	e7dd      	b.n	80105fe <__mdiff+0xd6>
 8010642:	3f01      	subs	r7, #1
 8010644:	e7e7      	b.n	8010616 <__mdiff+0xee>
 8010646:	bf00      	nop
 8010648:	08011199 	.word	0x08011199
 801064c:	080111aa 	.word	0x080111aa

08010650 <__d2b>:
 8010650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010654:	460f      	mov	r7, r1
 8010656:	2101      	movs	r1, #1
 8010658:	ec59 8b10 	vmov	r8, r9, d0
 801065c:	4616      	mov	r6, r2
 801065e:	f7ff fccd 	bl	800fffc <_Balloc>
 8010662:	4604      	mov	r4, r0
 8010664:	b930      	cbnz	r0, 8010674 <__d2b+0x24>
 8010666:	4602      	mov	r2, r0
 8010668:	4b23      	ldr	r3, [pc, #140]	@ (80106f8 <__d2b+0xa8>)
 801066a:	4824      	ldr	r0, [pc, #144]	@ (80106fc <__d2b+0xac>)
 801066c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010670:	f000 f902 	bl	8010878 <__assert_func>
 8010674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801067c:	b10d      	cbz	r5, 8010682 <__d2b+0x32>
 801067e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010682:	9301      	str	r3, [sp, #4]
 8010684:	f1b8 0300 	subs.w	r3, r8, #0
 8010688:	d023      	beq.n	80106d2 <__d2b+0x82>
 801068a:	4668      	mov	r0, sp
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	f7ff fd7c 	bl	801018a <__lo0bits>
 8010692:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010696:	b1d0      	cbz	r0, 80106ce <__d2b+0x7e>
 8010698:	f1c0 0320 	rsb	r3, r0, #32
 801069c:	fa02 f303 	lsl.w	r3, r2, r3
 80106a0:	430b      	orrs	r3, r1
 80106a2:	40c2      	lsrs	r2, r0
 80106a4:	6163      	str	r3, [r4, #20]
 80106a6:	9201      	str	r2, [sp, #4]
 80106a8:	9b01      	ldr	r3, [sp, #4]
 80106aa:	61a3      	str	r3, [r4, #24]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	bf0c      	ite	eq
 80106b0:	2201      	moveq	r2, #1
 80106b2:	2202      	movne	r2, #2
 80106b4:	6122      	str	r2, [r4, #16]
 80106b6:	b1a5      	cbz	r5, 80106e2 <__d2b+0x92>
 80106b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80106bc:	4405      	add	r5, r0
 80106be:	603d      	str	r5, [r7, #0]
 80106c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80106c4:	6030      	str	r0, [r6, #0]
 80106c6:	4620      	mov	r0, r4
 80106c8:	b003      	add	sp, #12
 80106ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106ce:	6161      	str	r1, [r4, #20]
 80106d0:	e7ea      	b.n	80106a8 <__d2b+0x58>
 80106d2:	a801      	add	r0, sp, #4
 80106d4:	f7ff fd59 	bl	801018a <__lo0bits>
 80106d8:	9b01      	ldr	r3, [sp, #4]
 80106da:	6163      	str	r3, [r4, #20]
 80106dc:	3020      	adds	r0, #32
 80106de:	2201      	movs	r2, #1
 80106e0:	e7e8      	b.n	80106b4 <__d2b+0x64>
 80106e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80106ea:	6038      	str	r0, [r7, #0]
 80106ec:	6918      	ldr	r0, [r3, #16]
 80106ee:	f7ff fd2d 	bl	801014c <__hi0bits>
 80106f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80106f6:	e7e5      	b.n	80106c4 <__d2b+0x74>
 80106f8:	08011199 	.word	0x08011199
 80106fc:	080111aa 	.word	0x080111aa

08010700 <__sflush_r>:
 8010700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010708:	0716      	lsls	r6, r2, #28
 801070a:	4605      	mov	r5, r0
 801070c:	460c      	mov	r4, r1
 801070e:	d454      	bmi.n	80107ba <__sflush_r+0xba>
 8010710:	684b      	ldr	r3, [r1, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	dc02      	bgt.n	801071c <__sflush_r+0x1c>
 8010716:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010718:	2b00      	cmp	r3, #0
 801071a:	dd48      	ble.n	80107ae <__sflush_r+0xae>
 801071c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801071e:	2e00      	cmp	r6, #0
 8010720:	d045      	beq.n	80107ae <__sflush_r+0xae>
 8010722:	2300      	movs	r3, #0
 8010724:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010728:	682f      	ldr	r7, [r5, #0]
 801072a:	6a21      	ldr	r1, [r4, #32]
 801072c:	602b      	str	r3, [r5, #0]
 801072e:	d030      	beq.n	8010792 <__sflush_r+0x92>
 8010730:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	0759      	lsls	r1, r3, #29
 8010736:	d505      	bpl.n	8010744 <__sflush_r+0x44>
 8010738:	6863      	ldr	r3, [r4, #4]
 801073a:	1ad2      	subs	r2, r2, r3
 801073c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801073e:	b10b      	cbz	r3, 8010744 <__sflush_r+0x44>
 8010740:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010742:	1ad2      	subs	r2, r2, r3
 8010744:	2300      	movs	r3, #0
 8010746:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010748:	6a21      	ldr	r1, [r4, #32]
 801074a:	4628      	mov	r0, r5
 801074c:	47b0      	blx	r6
 801074e:	1c43      	adds	r3, r0, #1
 8010750:	89a3      	ldrh	r3, [r4, #12]
 8010752:	d106      	bne.n	8010762 <__sflush_r+0x62>
 8010754:	6829      	ldr	r1, [r5, #0]
 8010756:	291d      	cmp	r1, #29
 8010758:	d82b      	bhi.n	80107b2 <__sflush_r+0xb2>
 801075a:	4a2a      	ldr	r2, [pc, #168]	@ (8010804 <__sflush_r+0x104>)
 801075c:	410a      	asrs	r2, r1
 801075e:	07d6      	lsls	r6, r2, #31
 8010760:	d427      	bmi.n	80107b2 <__sflush_r+0xb2>
 8010762:	2200      	movs	r2, #0
 8010764:	6062      	str	r2, [r4, #4]
 8010766:	04d9      	lsls	r1, r3, #19
 8010768:	6922      	ldr	r2, [r4, #16]
 801076a:	6022      	str	r2, [r4, #0]
 801076c:	d504      	bpl.n	8010778 <__sflush_r+0x78>
 801076e:	1c42      	adds	r2, r0, #1
 8010770:	d101      	bne.n	8010776 <__sflush_r+0x76>
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	b903      	cbnz	r3, 8010778 <__sflush_r+0x78>
 8010776:	6560      	str	r0, [r4, #84]	@ 0x54
 8010778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801077a:	602f      	str	r7, [r5, #0]
 801077c:	b1b9      	cbz	r1, 80107ae <__sflush_r+0xae>
 801077e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010782:	4299      	cmp	r1, r3
 8010784:	d002      	beq.n	801078c <__sflush_r+0x8c>
 8010786:	4628      	mov	r0, r5
 8010788:	f7ff fb38 	bl	800fdfc <_free_r>
 801078c:	2300      	movs	r3, #0
 801078e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010790:	e00d      	b.n	80107ae <__sflush_r+0xae>
 8010792:	2301      	movs	r3, #1
 8010794:	4628      	mov	r0, r5
 8010796:	47b0      	blx	r6
 8010798:	4602      	mov	r2, r0
 801079a:	1c50      	adds	r0, r2, #1
 801079c:	d1c9      	bne.n	8010732 <__sflush_r+0x32>
 801079e:	682b      	ldr	r3, [r5, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d0c6      	beq.n	8010732 <__sflush_r+0x32>
 80107a4:	2b1d      	cmp	r3, #29
 80107a6:	d001      	beq.n	80107ac <__sflush_r+0xac>
 80107a8:	2b16      	cmp	r3, #22
 80107aa:	d11e      	bne.n	80107ea <__sflush_r+0xea>
 80107ac:	602f      	str	r7, [r5, #0]
 80107ae:	2000      	movs	r0, #0
 80107b0:	e022      	b.n	80107f8 <__sflush_r+0xf8>
 80107b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107b6:	b21b      	sxth	r3, r3
 80107b8:	e01b      	b.n	80107f2 <__sflush_r+0xf2>
 80107ba:	690f      	ldr	r7, [r1, #16]
 80107bc:	2f00      	cmp	r7, #0
 80107be:	d0f6      	beq.n	80107ae <__sflush_r+0xae>
 80107c0:	0793      	lsls	r3, r2, #30
 80107c2:	680e      	ldr	r6, [r1, #0]
 80107c4:	bf08      	it	eq
 80107c6:	694b      	ldreq	r3, [r1, #20]
 80107c8:	600f      	str	r7, [r1, #0]
 80107ca:	bf18      	it	ne
 80107cc:	2300      	movne	r3, #0
 80107ce:	eba6 0807 	sub.w	r8, r6, r7
 80107d2:	608b      	str	r3, [r1, #8]
 80107d4:	f1b8 0f00 	cmp.w	r8, #0
 80107d8:	dde9      	ble.n	80107ae <__sflush_r+0xae>
 80107da:	6a21      	ldr	r1, [r4, #32]
 80107dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107de:	4643      	mov	r3, r8
 80107e0:	463a      	mov	r2, r7
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b0      	blx	r6
 80107e6:	2800      	cmp	r0, #0
 80107e8:	dc08      	bgt.n	80107fc <__sflush_r+0xfc>
 80107ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107f2:	81a3      	strh	r3, [r4, #12]
 80107f4:	f04f 30ff 	mov.w	r0, #4294967295
 80107f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107fc:	4407      	add	r7, r0
 80107fe:	eba8 0800 	sub.w	r8, r8, r0
 8010802:	e7e7      	b.n	80107d4 <__sflush_r+0xd4>
 8010804:	dfbffffe 	.word	0xdfbffffe

08010808 <_fflush_r>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	690b      	ldr	r3, [r1, #16]
 801080c:	4605      	mov	r5, r0
 801080e:	460c      	mov	r4, r1
 8010810:	b913      	cbnz	r3, 8010818 <_fflush_r+0x10>
 8010812:	2500      	movs	r5, #0
 8010814:	4628      	mov	r0, r5
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	b118      	cbz	r0, 8010822 <_fflush_r+0x1a>
 801081a:	6a03      	ldr	r3, [r0, #32]
 801081c:	b90b      	cbnz	r3, 8010822 <_fflush_r+0x1a>
 801081e:	f7fe fc07 	bl	800f030 <__sinit>
 8010822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d0f3      	beq.n	8010812 <_fflush_r+0xa>
 801082a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801082c:	07d0      	lsls	r0, r2, #31
 801082e:	d404      	bmi.n	801083a <_fflush_r+0x32>
 8010830:	0599      	lsls	r1, r3, #22
 8010832:	d402      	bmi.n	801083a <_fflush_r+0x32>
 8010834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010836:	f7fe fcf2 	bl	800f21e <__retarget_lock_acquire_recursive>
 801083a:	4628      	mov	r0, r5
 801083c:	4621      	mov	r1, r4
 801083e:	f7ff ff5f 	bl	8010700 <__sflush_r>
 8010842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010844:	07da      	lsls	r2, r3, #31
 8010846:	4605      	mov	r5, r0
 8010848:	d4e4      	bmi.n	8010814 <_fflush_r+0xc>
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	059b      	lsls	r3, r3, #22
 801084e:	d4e1      	bmi.n	8010814 <_fflush_r+0xc>
 8010850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010852:	f7fe fce5 	bl	800f220 <__retarget_lock_release_recursive>
 8010856:	e7dd      	b.n	8010814 <_fflush_r+0xc>

08010858 <_sbrk_r>:
 8010858:	b538      	push	{r3, r4, r5, lr}
 801085a:	4d06      	ldr	r5, [pc, #24]	@ (8010874 <_sbrk_r+0x1c>)
 801085c:	2300      	movs	r3, #0
 801085e:	4604      	mov	r4, r0
 8010860:	4608      	mov	r0, r1
 8010862:	602b      	str	r3, [r5, #0]
 8010864:	f7f2 f888 	bl	8002978 <_sbrk>
 8010868:	1c43      	adds	r3, r0, #1
 801086a:	d102      	bne.n	8010872 <_sbrk_r+0x1a>
 801086c:	682b      	ldr	r3, [r5, #0]
 801086e:	b103      	cbz	r3, 8010872 <_sbrk_r+0x1a>
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	bd38      	pop	{r3, r4, r5, pc}
 8010874:	24004948 	.word	0x24004948

08010878 <__assert_func>:
 8010878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801087a:	4614      	mov	r4, r2
 801087c:	461a      	mov	r2, r3
 801087e:	4b09      	ldr	r3, [pc, #36]	@ (80108a4 <__assert_func+0x2c>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4605      	mov	r5, r0
 8010884:	68d8      	ldr	r0, [r3, #12]
 8010886:	b954      	cbnz	r4, 801089e <__assert_func+0x26>
 8010888:	4b07      	ldr	r3, [pc, #28]	@ (80108a8 <__assert_func+0x30>)
 801088a:	461c      	mov	r4, r3
 801088c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010890:	9100      	str	r1, [sp, #0]
 8010892:	462b      	mov	r3, r5
 8010894:	4905      	ldr	r1, [pc, #20]	@ (80108ac <__assert_func+0x34>)
 8010896:	f000 f841 	bl	801091c <fiprintf>
 801089a:	f000 f851 	bl	8010940 <abort>
 801089e:	4b04      	ldr	r3, [pc, #16]	@ (80108b0 <__assert_func+0x38>)
 80108a0:	e7f4      	b.n	801088c <__assert_func+0x14>
 80108a2:	bf00      	nop
 80108a4:	24000040 	.word	0x24000040
 80108a8:	08011345 	.word	0x08011345
 80108ac:	08011317 	.word	0x08011317
 80108b0:	0801130a 	.word	0x0801130a

080108b4 <_calloc_r>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	fba1 5402 	umull	r5, r4, r1, r2
 80108ba:	b93c      	cbnz	r4, 80108cc <_calloc_r+0x18>
 80108bc:	4629      	mov	r1, r5
 80108be:	f7ff fb11 	bl	800fee4 <_malloc_r>
 80108c2:	4606      	mov	r6, r0
 80108c4:	b928      	cbnz	r0, 80108d2 <_calloc_r+0x1e>
 80108c6:	2600      	movs	r6, #0
 80108c8:	4630      	mov	r0, r6
 80108ca:	bd70      	pop	{r4, r5, r6, pc}
 80108cc:	220c      	movs	r2, #12
 80108ce:	6002      	str	r2, [r0, #0]
 80108d0:	e7f9      	b.n	80108c6 <_calloc_r+0x12>
 80108d2:	462a      	mov	r2, r5
 80108d4:	4621      	mov	r1, r4
 80108d6:	f7fe fc24 	bl	800f122 <memset>
 80108da:	e7f5      	b.n	80108c8 <_calloc_r+0x14>

080108dc <__ascii_mbtowc>:
 80108dc:	b082      	sub	sp, #8
 80108de:	b901      	cbnz	r1, 80108e2 <__ascii_mbtowc+0x6>
 80108e0:	a901      	add	r1, sp, #4
 80108e2:	b142      	cbz	r2, 80108f6 <__ascii_mbtowc+0x1a>
 80108e4:	b14b      	cbz	r3, 80108fa <__ascii_mbtowc+0x1e>
 80108e6:	7813      	ldrb	r3, [r2, #0]
 80108e8:	600b      	str	r3, [r1, #0]
 80108ea:	7812      	ldrb	r2, [r2, #0]
 80108ec:	1e10      	subs	r0, r2, #0
 80108ee:	bf18      	it	ne
 80108f0:	2001      	movne	r0, #1
 80108f2:	b002      	add	sp, #8
 80108f4:	4770      	bx	lr
 80108f6:	4610      	mov	r0, r2
 80108f8:	e7fb      	b.n	80108f2 <__ascii_mbtowc+0x16>
 80108fa:	f06f 0001 	mvn.w	r0, #1
 80108fe:	e7f8      	b.n	80108f2 <__ascii_mbtowc+0x16>

08010900 <__ascii_wctomb>:
 8010900:	4603      	mov	r3, r0
 8010902:	4608      	mov	r0, r1
 8010904:	b141      	cbz	r1, 8010918 <__ascii_wctomb+0x18>
 8010906:	2aff      	cmp	r2, #255	@ 0xff
 8010908:	d904      	bls.n	8010914 <__ascii_wctomb+0x14>
 801090a:	228a      	movs	r2, #138	@ 0x8a
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	f04f 30ff 	mov.w	r0, #4294967295
 8010912:	4770      	bx	lr
 8010914:	700a      	strb	r2, [r1, #0]
 8010916:	2001      	movs	r0, #1
 8010918:	4770      	bx	lr
	...

0801091c <fiprintf>:
 801091c:	b40e      	push	{r1, r2, r3}
 801091e:	b503      	push	{r0, r1, lr}
 8010920:	4601      	mov	r1, r0
 8010922:	ab03      	add	r3, sp, #12
 8010924:	4805      	ldr	r0, [pc, #20]	@ (801093c <fiprintf+0x20>)
 8010926:	f853 2b04 	ldr.w	r2, [r3], #4
 801092a:	6800      	ldr	r0, [r0, #0]
 801092c:	9301      	str	r3, [sp, #4]
 801092e:	f000 f837 	bl	80109a0 <_vfiprintf_r>
 8010932:	b002      	add	sp, #8
 8010934:	f85d eb04 	ldr.w	lr, [sp], #4
 8010938:	b003      	add	sp, #12
 801093a:	4770      	bx	lr
 801093c:	24000040 	.word	0x24000040

08010940 <abort>:
 8010940:	b508      	push	{r3, lr}
 8010942:	2006      	movs	r0, #6
 8010944:	f000 fa00 	bl	8010d48 <raise>
 8010948:	2001      	movs	r0, #1
 801094a:	f7f1 ff9d 	bl	8002888 <_exit>

0801094e <__sfputc_r>:
 801094e:	6893      	ldr	r3, [r2, #8]
 8010950:	3b01      	subs	r3, #1
 8010952:	2b00      	cmp	r3, #0
 8010954:	b410      	push	{r4}
 8010956:	6093      	str	r3, [r2, #8]
 8010958:	da08      	bge.n	801096c <__sfputc_r+0x1e>
 801095a:	6994      	ldr	r4, [r2, #24]
 801095c:	42a3      	cmp	r3, r4
 801095e:	db01      	blt.n	8010964 <__sfputc_r+0x16>
 8010960:	290a      	cmp	r1, #10
 8010962:	d103      	bne.n	801096c <__sfputc_r+0x1e>
 8010964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010968:	f000 b932 	b.w	8010bd0 <__swbuf_r>
 801096c:	6813      	ldr	r3, [r2, #0]
 801096e:	1c58      	adds	r0, r3, #1
 8010970:	6010      	str	r0, [r2, #0]
 8010972:	7019      	strb	r1, [r3, #0]
 8010974:	4608      	mov	r0, r1
 8010976:	f85d 4b04 	ldr.w	r4, [sp], #4
 801097a:	4770      	bx	lr

0801097c <__sfputs_r>:
 801097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097e:	4606      	mov	r6, r0
 8010980:	460f      	mov	r7, r1
 8010982:	4614      	mov	r4, r2
 8010984:	18d5      	adds	r5, r2, r3
 8010986:	42ac      	cmp	r4, r5
 8010988:	d101      	bne.n	801098e <__sfputs_r+0x12>
 801098a:	2000      	movs	r0, #0
 801098c:	e007      	b.n	801099e <__sfputs_r+0x22>
 801098e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010992:	463a      	mov	r2, r7
 8010994:	4630      	mov	r0, r6
 8010996:	f7ff ffda 	bl	801094e <__sfputc_r>
 801099a:	1c43      	adds	r3, r0, #1
 801099c:	d1f3      	bne.n	8010986 <__sfputs_r+0xa>
 801099e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109a0 <_vfiprintf_r>:
 80109a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a4:	460d      	mov	r5, r1
 80109a6:	b09d      	sub	sp, #116	@ 0x74
 80109a8:	4614      	mov	r4, r2
 80109aa:	4698      	mov	r8, r3
 80109ac:	4606      	mov	r6, r0
 80109ae:	b118      	cbz	r0, 80109b8 <_vfiprintf_r+0x18>
 80109b0:	6a03      	ldr	r3, [r0, #32]
 80109b2:	b90b      	cbnz	r3, 80109b8 <_vfiprintf_r+0x18>
 80109b4:	f7fe fb3c 	bl	800f030 <__sinit>
 80109b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109ba:	07d9      	lsls	r1, r3, #31
 80109bc:	d405      	bmi.n	80109ca <_vfiprintf_r+0x2a>
 80109be:	89ab      	ldrh	r3, [r5, #12]
 80109c0:	059a      	lsls	r2, r3, #22
 80109c2:	d402      	bmi.n	80109ca <_vfiprintf_r+0x2a>
 80109c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109c6:	f7fe fc2a 	bl	800f21e <__retarget_lock_acquire_recursive>
 80109ca:	89ab      	ldrh	r3, [r5, #12]
 80109cc:	071b      	lsls	r3, r3, #28
 80109ce:	d501      	bpl.n	80109d4 <_vfiprintf_r+0x34>
 80109d0:	692b      	ldr	r3, [r5, #16]
 80109d2:	b99b      	cbnz	r3, 80109fc <_vfiprintf_r+0x5c>
 80109d4:	4629      	mov	r1, r5
 80109d6:	4630      	mov	r0, r6
 80109d8:	f000 f938 	bl	8010c4c <__swsetup_r>
 80109dc:	b170      	cbz	r0, 80109fc <_vfiprintf_r+0x5c>
 80109de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109e0:	07dc      	lsls	r4, r3, #31
 80109e2:	d504      	bpl.n	80109ee <_vfiprintf_r+0x4e>
 80109e4:	f04f 30ff 	mov.w	r0, #4294967295
 80109e8:	b01d      	add	sp, #116	@ 0x74
 80109ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ee:	89ab      	ldrh	r3, [r5, #12]
 80109f0:	0598      	lsls	r0, r3, #22
 80109f2:	d4f7      	bmi.n	80109e4 <_vfiprintf_r+0x44>
 80109f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109f6:	f7fe fc13 	bl	800f220 <__retarget_lock_release_recursive>
 80109fa:	e7f3      	b.n	80109e4 <_vfiprintf_r+0x44>
 80109fc:	2300      	movs	r3, #0
 80109fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a00:	2320      	movs	r3, #32
 8010a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a0a:	2330      	movs	r3, #48	@ 0x30
 8010a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010bbc <_vfiprintf_r+0x21c>
 8010a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a14:	f04f 0901 	mov.w	r9, #1
 8010a18:	4623      	mov	r3, r4
 8010a1a:	469a      	mov	sl, r3
 8010a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a20:	b10a      	cbz	r2, 8010a26 <_vfiprintf_r+0x86>
 8010a22:	2a25      	cmp	r2, #37	@ 0x25
 8010a24:	d1f9      	bne.n	8010a1a <_vfiprintf_r+0x7a>
 8010a26:	ebba 0b04 	subs.w	fp, sl, r4
 8010a2a:	d00b      	beq.n	8010a44 <_vfiprintf_r+0xa4>
 8010a2c:	465b      	mov	r3, fp
 8010a2e:	4622      	mov	r2, r4
 8010a30:	4629      	mov	r1, r5
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7ff ffa2 	bl	801097c <__sfputs_r>
 8010a38:	3001      	adds	r0, #1
 8010a3a:	f000 80a7 	beq.w	8010b8c <_vfiprintf_r+0x1ec>
 8010a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a40:	445a      	add	r2, fp
 8010a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a44:	f89a 3000 	ldrb.w	r3, [sl]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f000 809f 	beq.w	8010b8c <_vfiprintf_r+0x1ec>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f04f 32ff 	mov.w	r2, #4294967295
 8010a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a58:	f10a 0a01 	add.w	sl, sl, #1
 8010a5c:	9304      	str	r3, [sp, #16]
 8010a5e:	9307      	str	r3, [sp, #28]
 8010a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a66:	4654      	mov	r4, sl
 8010a68:	2205      	movs	r2, #5
 8010a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a6e:	4853      	ldr	r0, [pc, #332]	@ (8010bbc <_vfiprintf_r+0x21c>)
 8010a70:	f7ef fc36 	bl	80002e0 <memchr>
 8010a74:	9a04      	ldr	r2, [sp, #16]
 8010a76:	b9d8      	cbnz	r0, 8010ab0 <_vfiprintf_r+0x110>
 8010a78:	06d1      	lsls	r1, r2, #27
 8010a7a:	bf44      	itt	mi
 8010a7c:	2320      	movmi	r3, #32
 8010a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a82:	0713      	lsls	r3, r2, #28
 8010a84:	bf44      	itt	mi
 8010a86:	232b      	movmi	r3, #43	@ 0x2b
 8010a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a92:	d015      	beq.n	8010ac0 <_vfiprintf_r+0x120>
 8010a94:	9a07      	ldr	r2, [sp, #28]
 8010a96:	4654      	mov	r4, sl
 8010a98:	2000      	movs	r0, #0
 8010a9a:	f04f 0c0a 	mov.w	ip, #10
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010aa4:	3b30      	subs	r3, #48	@ 0x30
 8010aa6:	2b09      	cmp	r3, #9
 8010aa8:	d94b      	bls.n	8010b42 <_vfiprintf_r+0x1a2>
 8010aaa:	b1b0      	cbz	r0, 8010ada <_vfiprintf_r+0x13a>
 8010aac:	9207      	str	r2, [sp, #28]
 8010aae:	e014      	b.n	8010ada <_vfiprintf_r+0x13a>
 8010ab0:	eba0 0308 	sub.w	r3, r0, r8
 8010ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	9304      	str	r3, [sp, #16]
 8010abc:	46a2      	mov	sl, r4
 8010abe:	e7d2      	b.n	8010a66 <_vfiprintf_r+0xc6>
 8010ac0:	9b03      	ldr	r3, [sp, #12]
 8010ac2:	1d19      	adds	r1, r3, #4
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	9103      	str	r1, [sp, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	bfbb      	ittet	lt
 8010acc:	425b      	neglt	r3, r3
 8010ace:	f042 0202 	orrlt.w	r2, r2, #2
 8010ad2:	9307      	strge	r3, [sp, #28]
 8010ad4:	9307      	strlt	r3, [sp, #28]
 8010ad6:	bfb8      	it	lt
 8010ad8:	9204      	strlt	r2, [sp, #16]
 8010ada:	7823      	ldrb	r3, [r4, #0]
 8010adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ade:	d10a      	bne.n	8010af6 <_vfiprintf_r+0x156>
 8010ae0:	7863      	ldrb	r3, [r4, #1]
 8010ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ae4:	d132      	bne.n	8010b4c <_vfiprintf_r+0x1ac>
 8010ae6:	9b03      	ldr	r3, [sp, #12]
 8010ae8:	1d1a      	adds	r2, r3, #4
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	9203      	str	r2, [sp, #12]
 8010aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010af2:	3402      	adds	r4, #2
 8010af4:	9305      	str	r3, [sp, #20]
 8010af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010bcc <_vfiprintf_r+0x22c>
 8010afa:	7821      	ldrb	r1, [r4, #0]
 8010afc:	2203      	movs	r2, #3
 8010afe:	4650      	mov	r0, sl
 8010b00:	f7ef fbee 	bl	80002e0 <memchr>
 8010b04:	b138      	cbz	r0, 8010b16 <_vfiprintf_r+0x176>
 8010b06:	9b04      	ldr	r3, [sp, #16]
 8010b08:	eba0 000a 	sub.w	r0, r0, sl
 8010b0c:	2240      	movs	r2, #64	@ 0x40
 8010b0e:	4082      	lsls	r2, r0
 8010b10:	4313      	orrs	r3, r2
 8010b12:	3401      	adds	r4, #1
 8010b14:	9304      	str	r3, [sp, #16]
 8010b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b1a:	4829      	ldr	r0, [pc, #164]	@ (8010bc0 <_vfiprintf_r+0x220>)
 8010b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b20:	2206      	movs	r2, #6
 8010b22:	f7ef fbdd 	bl	80002e0 <memchr>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d03f      	beq.n	8010baa <_vfiprintf_r+0x20a>
 8010b2a:	4b26      	ldr	r3, [pc, #152]	@ (8010bc4 <_vfiprintf_r+0x224>)
 8010b2c:	bb1b      	cbnz	r3, 8010b76 <_vfiprintf_r+0x1d6>
 8010b2e:	9b03      	ldr	r3, [sp, #12]
 8010b30:	3307      	adds	r3, #7
 8010b32:	f023 0307 	bic.w	r3, r3, #7
 8010b36:	3308      	adds	r3, #8
 8010b38:	9303      	str	r3, [sp, #12]
 8010b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b3c:	443b      	add	r3, r7
 8010b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b40:	e76a      	b.n	8010a18 <_vfiprintf_r+0x78>
 8010b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b46:	460c      	mov	r4, r1
 8010b48:	2001      	movs	r0, #1
 8010b4a:	e7a8      	b.n	8010a9e <_vfiprintf_r+0xfe>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	3401      	adds	r4, #1
 8010b50:	9305      	str	r3, [sp, #20]
 8010b52:	4619      	mov	r1, r3
 8010b54:	f04f 0c0a 	mov.w	ip, #10
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b5e:	3a30      	subs	r2, #48	@ 0x30
 8010b60:	2a09      	cmp	r2, #9
 8010b62:	d903      	bls.n	8010b6c <_vfiprintf_r+0x1cc>
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d0c6      	beq.n	8010af6 <_vfiprintf_r+0x156>
 8010b68:	9105      	str	r1, [sp, #20]
 8010b6a:	e7c4      	b.n	8010af6 <_vfiprintf_r+0x156>
 8010b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b70:	4604      	mov	r4, r0
 8010b72:	2301      	movs	r3, #1
 8010b74:	e7f0      	b.n	8010b58 <_vfiprintf_r+0x1b8>
 8010b76:	ab03      	add	r3, sp, #12
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	462a      	mov	r2, r5
 8010b7c:	4b12      	ldr	r3, [pc, #72]	@ (8010bc8 <_vfiprintf_r+0x228>)
 8010b7e:	a904      	add	r1, sp, #16
 8010b80:	4630      	mov	r0, r6
 8010b82:	f7fd fe21 	bl	800e7c8 <_printf_float>
 8010b86:	4607      	mov	r7, r0
 8010b88:	1c78      	adds	r0, r7, #1
 8010b8a:	d1d6      	bne.n	8010b3a <_vfiprintf_r+0x19a>
 8010b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b8e:	07d9      	lsls	r1, r3, #31
 8010b90:	d405      	bmi.n	8010b9e <_vfiprintf_r+0x1fe>
 8010b92:	89ab      	ldrh	r3, [r5, #12]
 8010b94:	059a      	lsls	r2, r3, #22
 8010b96:	d402      	bmi.n	8010b9e <_vfiprintf_r+0x1fe>
 8010b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b9a:	f7fe fb41 	bl	800f220 <__retarget_lock_release_recursive>
 8010b9e:	89ab      	ldrh	r3, [r5, #12]
 8010ba0:	065b      	lsls	r3, r3, #25
 8010ba2:	f53f af1f 	bmi.w	80109e4 <_vfiprintf_r+0x44>
 8010ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ba8:	e71e      	b.n	80109e8 <_vfiprintf_r+0x48>
 8010baa:	ab03      	add	r3, sp, #12
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	462a      	mov	r2, r5
 8010bb0:	4b05      	ldr	r3, [pc, #20]	@ (8010bc8 <_vfiprintf_r+0x228>)
 8010bb2:	a904      	add	r1, sp, #16
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f7fe f88f 	bl	800ecd8 <_printf_i>
 8010bba:	e7e4      	b.n	8010b86 <_vfiprintf_r+0x1e6>
 8010bbc:	08011346 	.word	0x08011346
 8010bc0:	08011350 	.word	0x08011350
 8010bc4:	0800e7c9 	.word	0x0800e7c9
 8010bc8:	0801097d 	.word	0x0801097d
 8010bcc:	0801134c 	.word	0x0801134c

08010bd0 <__swbuf_r>:
 8010bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd2:	460e      	mov	r6, r1
 8010bd4:	4614      	mov	r4, r2
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	b118      	cbz	r0, 8010be2 <__swbuf_r+0x12>
 8010bda:	6a03      	ldr	r3, [r0, #32]
 8010bdc:	b90b      	cbnz	r3, 8010be2 <__swbuf_r+0x12>
 8010bde:	f7fe fa27 	bl	800f030 <__sinit>
 8010be2:	69a3      	ldr	r3, [r4, #24]
 8010be4:	60a3      	str	r3, [r4, #8]
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	071a      	lsls	r2, r3, #28
 8010bea:	d501      	bpl.n	8010bf0 <__swbuf_r+0x20>
 8010bec:	6923      	ldr	r3, [r4, #16]
 8010bee:	b943      	cbnz	r3, 8010c02 <__swbuf_r+0x32>
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f000 f82a 	bl	8010c4c <__swsetup_r>
 8010bf8:	b118      	cbz	r0, 8010c02 <__swbuf_r+0x32>
 8010bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8010bfe:	4638      	mov	r0, r7
 8010c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c02:	6823      	ldr	r3, [r4, #0]
 8010c04:	6922      	ldr	r2, [r4, #16]
 8010c06:	1a98      	subs	r0, r3, r2
 8010c08:	6963      	ldr	r3, [r4, #20]
 8010c0a:	b2f6      	uxtb	r6, r6
 8010c0c:	4283      	cmp	r3, r0
 8010c0e:	4637      	mov	r7, r6
 8010c10:	dc05      	bgt.n	8010c1e <__swbuf_r+0x4e>
 8010c12:	4621      	mov	r1, r4
 8010c14:	4628      	mov	r0, r5
 8010c16:	f7ff fdf7 	bl	8010808 <_fflush_r>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d1ed      	bne.n	8010bfa <__swbuf_r+0x2a>
 8010c1e:	68a3      	ldr	r3, [r4, #8]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	60a3      	str	r3, [r4, #8]
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	1c5a      	adds	r2, r3, #1
 8010c28:	6022      	str	r2, [r4, #0]
 8010c2a:	701e      	strb	r6, [r3, #0]
 8010c2c:	6962      	ldr	r2, [r4, #20]
 8010c2e:	1c43      	adds	r3, r0, #1
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d004      	beq.n	8010c3e <__swbuf_r+0x6e>
 8010c34:	89a3      	ldrh	r3, [r4, #12]
 8010c36:	07db      	lsls	r3, r3, #31
 8010c38:	d5e1      	bpl.n	8010bfe <__swbuf_r+0x2e>
 8010c3a:	2e0a      	cmp	r6, #10
 8010c3c:	d1df      	bne.n	8010bfe <__swbuf_r+0x2e>
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7ff fde1 	bl	8010808 <_fflush_r>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	d0d9      	beq.n	8010bfe <__swbuf_r+0x2e>
 8010c4a:	e7d6      	b.n	8010bfa <__swbuf_r+0x2a>

08010c4c <__swsetup_r>:
 8010c4c:	b538      	push	{r3, r4, r5, lr}
 8010c4e:	4b29      	ldr	r3, [pc, #164]	@ (8010cf4 <__swsetup_r+0xa8>)
 8010c50:	4605      	mov	r5, r0
 8010c52:	6818      	ldr	r0, [r3, #0]
 8010c54:	460c      	mov	r4, r1
 8010c56:	b118      	cbz	r0, 8010c60 <__swsetup_r+0x14>
 8010c58:	6a03      	ldr	r3, [r0, #32]
 8010c5a:	b90b      	cbnz	r3, 8010c60 <__swsetup_r+0x14>
 8010c5c:	f7fe f9e8 	bl	800f030 <__sinit>
 8010c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c64:	0719      	lsls	r1, r3, #28
 8010c66:	d422      	bmi.n	8010cae <__swsetup_r+0x62>
 8010c68:	06da      	lsls	r2, r3, #27
 8010c6a:	d407      	bmi.n	8010c7c <__swsetup_r+0x30>
 8010c6c:	2209      	movs	r2, #9
 8010c6e:	602a      	str	r2, [r5, #0]
 8010c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c74:	81a3      	strh	r3, [r4, #12]
 8010c76:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7a:	e033      	b.n	8010ce4 <__swsetup_r+0x98>
 8010c7c:	0758      	lsls	r0, r3, #29
 8010c7e:	d512      	bpl.n	8010ca6 <__swsetup_r+0x5a>
 8010c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c82:	b141      	cbz	r1, 8010c96 <__swsetup_r+0x4a>
 8010c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c88:	4299      	cmp	r1, r3
 8010c8a:	d002      	beq.n	8010c92 <__swsetup_r+0x46>
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f7ff f8b5 	bl	800fdfc <_free_r>
 8010c92:	2300      	movs	r3, #0
 8010c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c96:	89a3      	ldrh	r3, [r4, #12]
 8010c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c9c:	81a3      	strh	r3, [r4, #12]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	6063      	str	r3, [r4, #4]
 8010ca2:	6923      	ldr	r3, [r4, #16]
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	89a3      	ldrh	r3, [r4, #12]
 8010ca8:	f043 0308 	orr.w	r3, r3, #8
 8010cac:	81a3      	strh	r3, [r4, #12]
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	b94b      	cbnz	r3, 8010cc6 <__swsetup_r+0x7a>
 8010cb2:	89a3      	ldrh	r3, [r4, #12]
 8010cb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010cbc:	d003      	beq.n	8010cc6 <__swsetup_r+0x7a>
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f000 f883 	bl	8010dcc <__smakebuf_r>
 8010cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cca:	f013 0201 	ands.w	r2, r3, #1
 8010cce:	d00a      	beq.n	8010ce6 <__swsetup_r+0x9a>
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	60a2      	str	r2, [r4, #8]
 8010cd4:	6962      	ldr	r2, [r4, #20]
 8010cd6:	4252      	negs	r2, r2
 8010cd8:	61a2      	str	r2, [r4, #24]
 8010cda:	6922      	ldr	r2, [r4, #16]
 8010cdc:	b942      	cbnz	r2, 8010cf0 <__swsetup_r+0xa4>
 8010cde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ce2:	d1c5      	bne.n	8010c70 <__swsetup_r+0x24>
 8010ce4:	bd38      	pop	{r3, r4, r5, pc}
 8010ce6:	0799      	lsls	r1, r3, #30
 8010ce8:	bf58      	it	pl
 8010cea:	6962      	ldrpl	r2, [r4, #20]
 8010cec:	60a2      	str	r2, [r4, #8]
 8010cee:	e7f4      	b.n	8010cda <__swsetup_r+0x8e>
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	e7f7      	b.n	8010ce4 <__swsetup_r+0x98>
 8010cf4:	24000040 	.word	0x24000040

08010cf8 <_raise_r>:
 8010cf8:	291f      	cmp	r1, #31
 8010cfa:	b538      	push	{r3, r4, r5, lr}
 8010cfc:	4605      	mov	r5, r0
 8010cfe:	460c      	mov	r4, r1
 8010d00:	d904      	bls.n	8010d0c <_raise_r+0x14>
 8010d02:	2316      	movs	r3, #22
 8010d04:	6003      	str	r3, [r0, #0]
 8010d06:	f04f 30ff 	mov.w	r0, #4294967295
 8010d0a:	bd38      	pop	{r3, r4, r5, pc}
 8010d0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d0e:	b112      	cbz	r2, 8010d16 <_raise_r+0x1e>
 8010d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d14:	b94b      	cbnz	r3, 8010d2a <_raise_r+0x32>
 8010d16:	4628      	mov	r0, r5
 8010d18:	f000 f830 	bl	8010d7c <_getpid_r>
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	4601      	mov	r1, r0
 8010d20:	4628      	mov	r0, r5
 8010d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d26:	f000 b817 	b.w	8010d58 <_kill_r>
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d00a      	beq.n	8010d44 <_raise_r+0x4c>
 8010d2e:	1c59      	adds	r1, r3, #1
 8010d30:	d103      	bne.n	8010d3a <_raise_r+0x42>
 8010d32:	2316      	movs	r3, #22
 8010d34:	6003      	str	r3, [r0, #0]
 8010d36:	2001      	movs	r0, #1
 8010d38:	e7e7      	b.n	8010d0a <_raise_r+0x12>
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d40:	4620      	mov	r0, r4
 8010d42:	4798      	blx	r3
 8010d44:	2000      	movs	r0, #0
 8010d46:	e7e0      	b.n	8010d0a <_raise_r+0x12>

08010d48 <raise>:
 8010d48:	4b02      	ldr	r3, [pc, #8]	@ (8010d54 <raise+0xc>)
 8010d4a:	4601      	mov	r1, r0
 8010d4c:	6818      	ldr	r0, [r3, #0]
 8010d4e:	f7ff bfd3 	b.w	8010cf8 <_raise_r>
 8010d52:	bf00      	nop
 8010d54:	24000040 	.word	0x24000040

08010d58 <_kill_r>:
 8010d58:	b538      	push	{r3, r4, r5, lr}
 8010d5a:	4d07      	ldr	r5, [pc, #28]	@ (8010d78 <_kill_r+0x20>)
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	4604      	mov	r4, r0
 8010d60:	4608      	mov	r0, r1
 8010d62:	4611      	mov	r1, r2
 8010d64:	602b      	str	r3, [r5, #0]
 8010d66:	f7f1 fd7f 	bl	8002868 <_kill>
 8010d6a:	1c43      	adds	r3, r0, #1
 8010d6c:	d102      	bne.n	8010d74 <_kill_r+0x1c>
 8010d6e:	682b      	ldr	r3, [r5, #0]
 8010d70:	b103      	cbz	r3, 8010d74 <_kill_r+0x1c>
 8010d72:	6023      	str	r3, [r4, #0]
 8010d74:	bd38      	pop	{r3, r4, r5, pc}
 8010d76:	bf00      	nop
 8010d78:	24004948 	.word	0x24004948

08010d7c <_getpid_r>:
 8010d7c:	f7f1 bd6c 	b.w	8002858 <_getpid>

08010d80 <__swhatbuf_r>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	460c      	mov	r4, r1
 8010d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	b096      	sub	sp, #88	@ 0x58
 8010d8c:	4615      	mov	r5, r2
 8010d8e:	461e      	mov	r6, r3
 8010d90:	da0d      	bge.n	8010dae <__swhatbuf_r+0x2e>
 8010d92:	89a3      	ldrh	r3, [r4, #12]
 8010d94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d98:	f04f 0100 	mov.w	r1, #0
 8010d9c:	bf14      	ite	ne
 8010d9e:	2340      	movne	r3, #64	@ 0x40
 8010da0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010da4:	2000      	movs	r0, #0
 8010da6:	6031      	str	r1, [r6, #0]
 8010da8:	602b      	str	r3, [r5, #0]
 8010daa:	b016      	add	sp, #88	@ 0x58
 8010dac:	bd70      	pop	{r4, r5, r6, pc}
 8010dae:	466a      	mov	r2, sp
 8010db0:	f000 f848 	bl	8010e44 <_fstat_r>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	dbec      	blt.n	8010d92 <__swhatbuf_r+0x12>
 8010db8:	9901      	ldr	r1, [sp, #4]
 8010dba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010dbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010dc2:	4259      	negs	r1, r3
 8010dc4:	4159      	adcs	r1, r3
 8010dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dca:	e7eb      	b.n	8010da4 <__swhatbuf_r+0x24>

08010dcc <__smakebuf_r>:
 8010dcc:	898b      	ldrh	r3, [r1, #12]
 8010dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dd0:	079d      	lsls	r5, r3, #30
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	460c      	mov	r4, r1
 8010dd6:	d507      	bpl.n	8010de8 <__smakebuf_r+0x1c>
 8010dd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ddc:	6023      	str	r3, [r4, #0]
 8010dde:	6123      	str	r3, [r4, #16]
 8010de0:	2301      	movs	r3, #1
 8010de2:	6163      	str	r3, [r4, #20]
 8010de4:	b003      	add	sp, #12
 8010de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010de8:	ab01      	add	r3, sp, #4
 8010dea:	466a      	mov	r2, sp
 8010dec:	f7ff ffc8 	bl	8010d80 <__swhatbuf_r>
 8010df0:	9f00      	ldr	r7, [sp, #0]
 8010df2:	4605      	mov	r5, r0
 8010df4:	4639      	mov	r1, r7
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7ff f874 	bl	800fee4 <_malloc_r>
 8010dfc:	b948      	cbnz	r0, 8010e12 <__smakebuf_r+0x46>
 8010dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e02:	059a      	lsls	r2, r3, #22
 8010e04:	d4ee      	bmi.n	8010de4 <__smakebuf_r+0x18>
 8010e06:	f023 0303 	bic.w	r3, r3, #3
 8010e0a:	f043 0302 	orr.w	r3, r3, #2
 8010e0e:	81a3      	strh	r3, [r4, #12]
 8010e10:	e7e2      	b.n	8010dd8 <__smakebuf_r+0xc>
 8010e12:	89a3      	ldrh	r3, [r4, #12]
 8010e14:	6020      	str	r0, [r4, #0]
 8010e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e1a:	81a3      	strh	r3, [r4, #12]
 8010e1c:	9b01      	ldr	r3, [sp, #4]
 8010e1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e22:	b15b      	cbz	r3, 8010e3c <__smakebuf_r+0x70>
 8010e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f000 f81d 	bl	8010e68 <_isatty_r>
 8010e2e:	b128      	cbz	r0, 8010e3c <__smakebuf_r+0x70>
 8010e30:	89a3      	ldrh	r3, [r4, #12]
 8010e32:	f023 0303 	bic.w	r3, r3, #3
 8010e36:	f043 0301 	orr.w	r3, r3, #1
 8010e3a:	81a3      	strh	r3, [r4, #12]
 8010e3c:	89a3      	ldrh	r3, [r4, #12]
 8010e3e:	431d      	orrs	r5, r3
 8010e40:	81a5      	strh	r5, [r4, #12]
 8010e42:	e7cf      	b.n	8010de4 <__smakebuf_r+0x18>

08010e44 <_fstat_r>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4d07      	ldr	r5, [pc, #28]	@ (8010e64 <_fstat_r+0x20>)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	4608      	mov	r0, r1
 8010e4e:	4611      	mov	r1, r2
 8010e50:	602b      	str	r3, [r5, #0]
 8010e52:	f7f1 fd69 	bl	8002928 <_fstat>
 8010e56:	1c43      	adds	r3, r0, #1
 8010e58:	d102      	bne.n	8010e60 <_fstat_r+0x1c>
 8010e5a:	682b      	ldr	r3, [r5, #0]
 8010e5c:	b103      	cbz	r3, 8010e60 <_fstat_r+0x1c>
 8010e5e:	6023      	str	r3, [r4, #0]
 8010e60:	bd38      	pop	{r3, r4, r5, pc}
 8010e62:	bf00      	nop
 8010e64:	24004948 	.word	0x24004948

08010e68 <_isatty_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d06      	ldr	r5, [pc, #24]	@ (8010e84 <_isatty_r+0x1c>)
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	4608      	mov	r0, r1
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	f7f1 fd68 	bl	8002948 <_isatty>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_isatty_r+0x1a>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_isatty_r+0x1a>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	24004948 	.word	0x24004948

08010e88 <_init>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	bf00      	nop
 8010e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8e:	bc08      	pop	{r3}
 8010e90:	469e      	mov	lr, r3
 8010e92:	4770      	bx	lr

08010e94 <_fini>:
 8010e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e96:	bf00      	nop
 8010e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e9a:	bc08      	pop	{r3}
 8010e9c:	469e      	mov	lr, r3
 8010e9e:	4770      	bx	lr
