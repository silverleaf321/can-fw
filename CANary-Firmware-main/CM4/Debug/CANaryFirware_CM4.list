
CANaryFirware_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba98  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0810bd38  0810bd38  0000cd38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c130  0810c130  0000d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c138  0810c138  0000d138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c13c  0810c13c  0000d13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  10000000  0810c140  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000350  10000200  0810c340  0000e200  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000550  0810c340  0000e550  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012214  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029ba  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001228  00000000  00000000  00022e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000de6  00000000  00000000  00024028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000414e4  00000000  00000000  00024e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000163d8  00000000  00000000  000662f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a00e6  00000000  00000000  0007c6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021c7b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c98  00000000  00000000  0021c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0022248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000200 	.word	0x10000200
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810bd20 	.word	0x0810bd20

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000204 	.word	0x10000204
 81002dc:	0810bd20 	.word	0x0810bd20

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100d5c:	4b09      	ldr	r3, [pc, #36]	@ (8100d84 <SystemInit+0x2c>)
 8100d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100d62:	4a08      	ldr	r2, [pc, #32]	@ (8100d84 <SystemInit+0x2c>)
 8100d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100d6c:	4b05      	ldr	r3, [pc, #20]	@ (8100d84 <SystemInit+0x2c>)
 8100d6e:	691b      	ldr	r3, [r3, #16]
 8100d70:	4a04      	ldr	r2, [pc, #16]	@ (8100d84 <SystemInit+0x2c>)
 8100d72:	f043 0310 	orr.w	r3, r3, #16
 8100d76:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100d78:	bf00      	nop
 8100d7a:	46bd      	mov	sp, r7
 8100d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d80:	4770      	bx	lr
 8100d82:	bf00      	nop
 8100d84:	e000ed00 	.word	0xe000ed00

08100d88 <initFT81x>:
        sendCommandToDisplay(cmd, sizeof(d) / sizeof(uint8_t), d); \
    }  ///< Macro to automatically call sendCommandToDisplay

uint16_t cmdWriteAddress = 0;
//
void initFT81x() {
 8100d88:	b580      	push	{r7, lr}
 8100d8a:	af00      	add	r7, sp, #0
    // reset
    read8(FT81x_REG_ID);
 8100d8c:	484c      	ldr	r0, [pc, #304]	@ (8100ec0 <initFT81x+0x138>)
 8100d8e:	f000 fb98 	bl	81014c2 <read8>

	sendCommand(FT81x_CMD_RST_PULSE);
 8100d92:	f44f 00d0 	mov.w	r0, #6815744	@ 0x680000
 8100d96:	f000 fb7b 	bl	8101490 <sendCommand>
    HAL_Delay(300);
 8100d9a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8100d9e:	f004 fcc5 	bl	810572c <HAL_Delay>

    // select clock
    sendCommand(FT81x_CMD_CLKEXT);
 8100da2:	f44f 0088 	mov.w	r0, #4456448	@ 0x440000
 8100da6:	f000 fb73 	bl	8101490 <sendCommand>
    HAL_Delay(300);
 8100daa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8100dae:	f004 fcbd 	bl	810572c <HAL_Delay>

    // activate
    sendCommand(FT81x_CMD_ACTIVE);
 8100db2:	2000      	movs	r0, #0
 8100db4:	f000 fb6c 	bl	8101490 <sendCommand>

    // wait for boot-up to complete
    HAL_Delay(100);
 8100db8:	2064      	movs	r0, #100	@ 0x64
 8100dba:	f004 fcb7 	bl	810572c <HAL_Delay>
    while (read8(FT81x_REG_ID) != 0x7C) {
 8100dbe:	e000      	b.n	8100dc2 <initFT81x+0x3a>
        __asm__ volatile("nop");
 8100dc0:	bf00      	nop
    while (read8(FT81x_REG_ID) != 0x7C) {
 8100dc2:	483f      	ldr	r0, [pc, #252]	@ (8100ec0 <initFT81x+0x138>)
 8100dc4:	f000 fb7d 	bl	81014c2 <read8>
 8100dc8:	4603      	mov	r3, r0
 8100dca:	2b7c      	cmp	r3, #124	@ 0x7c
 8100dcc:	d1f8      	bne.n	8100dc0 <initFT81x+0x38>
    }
    while (read8(FT81x_REG_CPURESET) != 0x00) {
 8100dce:	e000      	b.n	8100dd2 <initFT81x+0x4a>
        __asm__ volatile("nop");
 8100dd0:	bf00      	nop
    while (read8(FT81x_REG_CPURESET) != 0x00) {
 8100dd2:	483c      	ldr	r0, [pc, #240]	@ (8100ec4 <initFT81x+0x13c>)
 8100dd4:	f000 fb75 	bl	81014c2 <read8>
 8100dd8:	4603      	mov	r3, r0
 8100dda:	2b00      	cmp	r3, #0
 8100ddc:	d1f8      	bne.n	8100dd0 <initFT81x+0x48>
    }

    // configure rgb interface
    write16(FT81x_REG_HCYCLE, 928);
 8100dde:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
 8100de2:	4839      	ldr	r0, [pc, #228]	@ (8100ec8 <initFT81x+0x140>)
 8100de4:	f000 fbdc 	bl	81015a0 <write16>
    write16(FT81x_REG_HOFFSET, 88);
 8100de8:	2158      	movs	r1, #88	@ 0x58
 8100dea:	4838      	ldr	r0, [pc, #224]	@ (8100ecc <initFT81x+0x144>)
 8100dec:	f000 fbd8 	bl	81015a0 <write16>
    write16(FT81x_REG_HSYNC0, 0);
 8100df0:	2100      	movs	r1, #0
 8100df2:	4837      	ldr	r0, [pc, #220]	@ (8100ed0 <initFT81x+0x148>)
 8100df4:	f000 fbd4 	bl	81015a0 <write16>
    write16(FT81x_REG_HSYNC1, 48);
 8100df8:	2130      	movs	r1, #48	@ 0x30
 8100dfa:	4836      	ldr	r0, [pc, #216]	@ (8100ed4 <initFT81x+0x14c>)
 8100dfc:	f000 fbd0 	bl	81015a0 <write16>
    write16(FT81x_REG_HSIZE, DISPLAY_WIDTH);
 8100e00:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8100e04:	4834      	ldr	r0, [pc, #208]	@ (8100ed8 <initFT81x+0x150>)
 8100e06:	f000 fbcb 	bl	81015a0 <write16>

    write16(FT81x_REG_VCYCLE, 525);
 8100e0a:	f240 210d 	movw	r1, #525	@ 0x20d
 8100e0e:	4833      	ldr	r0, [pc, #204]	@ (8100edc <initFT81x+0x154>)
 8100e10:	f000 fbc6 	bl	81015a0 <write16>
    write16(FT81x_REG_VOFFSET, 32);
 8100e14:	2120      	movs	r1, #32
 8100e16:	4832      	ldr	r0, [pc, #200]	@ (8100ee0 <initFT81x+0x158>)
 8100e18:	f000 fbc2 	bl	81015a0 <write16>
    write16(FT81x_REG_VSYNC0, 0);
 8100e1c:	2100      	movs	r1, #0
 8100e1e:	4831      	ldr	r0, [pc, #196]	@ (8100ee4 <initFT81x+0x15c>)
 8100e20:	f000 fbbe 	bl	81015a0 <write16>
    write16(FT81x_REG_VSYNC1, 3);
 8100e24:	2103      	movs	r1, #3
 8100e26:	4830      	ldr	r0, [pc, #192]	@ (8100ee8 <initFT81x+0x160>)
 8100e28:	f000 fbba 	bl	81015a0 <write16>
    write16(FT81x_REG_VSIZE, DISPLAY_HEIGHT);
 8100e2c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8100e30:	482e      	ldr	r0, [pc, #184]	@ (8100eec <initFT81x+0x164>)
 8100e32:	f000 fbb5 	bl	81015a0 <write16>

    write8(FT81x_REG_SWIZZLE, 0);
 8100e36:	2100      	movs	r1, #0
 8100e38:	482d      	ldr	r0, [pc, #180]	@ (8100ef0 <initFT81x+0x168>)
 8100e3a:	f000 fb90 	bl	810155e <write8>
    write8(FT81x_REG_PCLK_POL, 0);
 8100e3e:	2100      	movs	r1, #0
 8100e40:	482c      	ldr	r0, [pc, #176]	@ (8100ef4 <initFT81x+0x16c>)
 8100e42:	f000 fb8c 	bl	810155e <write8>
    write8(FT81x_REG_CSPREAD, 0);
 8100e46:	2100      	movs	r1, #0
 8100e48:	482b      	ldr	r0, [pc, #172]	@ (8100ef8 <initFT81x+0x170>)
 8100e4a:	f000 fb88 	bl	810155e <write8>
    write8(FT81x_REG_DITHER, 1);
 8100e4e:	2101      	movs	r1, #1
 8100e50:	482a      	ldr	r0, [pc, #168]	@ (8100efc <initFT81x+0x174>)
 8100e52:	f000 fb84 	bl	810155e <write8>
    write8(FT81x_REG_ROTATE, 0);
 8100e56:	2100      	movs	r1, #0
 8100e58:	4829      	ldr	r0, [pc, #164]	@ (8100f00 <initFT81x+0x178>)
 8100e5a:	f000 fb80 	bl	810155e <write8>

    write16(FT81x_REG_PWM_HZ, 10000);
 8100e5e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8100e62:	4828      	ldr	r0, [pc, #160]	@ (8100f04 <initFT81x+0x17c>)
 8100e64:	f000 fb9c 	bl	81015a0 <write16>
    write8(FT81x_REG_PWM_DUTY, 128);
 8100e68:	2180      	movs	r1, #128	@ 0x80
 8100e6a:	4827      	ldr	r0, [pc, #156]	@ (8100f08 <initFT81x+0x180>)
 8100e6c:	f000 fb77 	bl	810155e <write8>

    // write first display list
    beginDisplayList();
 8100e70:	f000 fa80 	bl	8101374 <beginDisplayList>
    clear(0xFFFFFF);
 8100e74:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8100e78:	f000 f84e 	bl	8100f18 <clear>
    swapScreen();
 8100e7c:	f000 fa8a 	bl	8101394 <swapScreen>

    // reset display on GPIO3
    write8(FT81x_REG_GPIO_DIR, 0x80 | read8(FT81x_REG_GPIO_DIR));
 8100e80:	4822      	ldr	r0, [pc, #136]	@ (8100f0c <initFT81x+0x184>)
 8100e82:	f000 fb1e 	bl	81014c2 <read8>
 8100e86:	4603      	mov	r3, r0
 8100e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8100e8c:	b2db      	uxtb	r3, r3
 8100e8e:	4619      	mov	r1, r3
 8100e90:	481e      	ldr	r0, [pc, #120]	@ (8100f0c <initFT81x+0x184>)
 8100e92:	f000 fb64 	bl	810155e <write8>
    write8(FT81x_REG_GPIO, 0x80 | read8(FT81x_REG_GPIO));
 8100e96:	481e      	ldr	r0, [pc, #120]	@ (8100f10 <initFT81x+0x188>)
 8100e98:	f000 fb13 	bl	81014c2 <read8>
 8100e9c:	4603      	mov	r3, r0
 8100e9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8100ea2:	b2db      	uxtb	r3, r3
 8100ea4:	4619      	mov	r1, r3
 8100ea6:	481a      	ldr	r0, [pc, #104]	@ (8100f10 <initFT81x+0x188>)
 8100ea8:	f000 fb59 	bl	810155e <write8>

    // enable pixel clock
    write8(FT81x_REG_PCLK, 2);
 8100eac:	2102      	movs	r1, #2
 8100eae:	4819      	ldr	r0, [pc, #100]	@ (8100f14 <initFT81x+0x18c>)
 8100eb0:	f000 fb55 	bl	810155e <write8>
    HAL_Delay(300);
 8100eb4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8100eb8:	f004 fc38 	bl	810572c <HAL_Delay>
}
 8100ebc:	bf00      	nop
 8100ebe:	bd80      	pop	{r7, pc}
 8100ec0:	00302000 	.word	0x00302000
 8100ec4:	00302020 	.word	0x00302020
 8100ec8:	0030202c 	.word	0x0030202c
 8100ecc:	00302030 	.word	0x00302030
 8100ed0:	00302038 	.word	0x00302038
 8100ed4:	0030203c 	.word	0x0030203c
 8100ed8:	00302034 	.word	0x00302034
 8100edc:	00302040 	.word	0x00302040
 8100ee0:	00302044 	.word	0x00302044
 8100ee4:	0030204c 	.word	0x0030204c
 8100ee8:	00302050 	.word	0x00302050
 8100eec:	00302048 	.word	0x00302048
 8100ef0:	00302064 	.word	0x00302064
 8100ef4:	0030206c 	.word	0x0030206c
 8100ef8:	00302068 	.word	0x00302068
 8100efc:	00302060 	.word	0x00302060
 8100f00:	00302058 	.word	0x00302058
 8100f04:	003020d0 	.word	0x003020d0
 8100f08:	003020d4 	.word	0x003020d4
 8100f0c:	00302090 	.word	0x00302090
 8100f10:	00302094 	.word	0x00302094
 8100f14:	00302070 	.word	0x00302070

08100f18 <clear>:

void clear(const uint32_t color) {
 8100f18:	b580      	push	{r7, lr}
 8100f1a:	b082      	sub	sp, #8
 8100f1c:	af00      	add	r7, sp, #0
 8100f1e:	6078      	str	r0, [r7, #4]
    dispCmd(CLEAR_COLOR(color));
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8100f26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100f2a:	4618      	mov	r0, r3
 8100f2c:	f000 fa9a 	bl	8101464 <dispCmd>
    dispCmd(CLEAR(1, 1, 1));
 8100f30:	4803      	ldr	r0, [pc, #12]	@ (8100f40 <clear+0x28>)
 8100f32:	f000 fa97 	bl	8101464 <dispCmd>
}
 8100f36:	bf00      	nop
 8100f38:	3708      	adds	r7, #8
 8100f3a:	46bd      	mov	sp, r7
 8100f3c:	bd80      	pop	{r7, pc}
 8100f3e:	bf00      	nop
 8100f40:	26000007 	.word	0x26000007

08100f44 <drawRect>:
//    dispCmd(BEGIN(POINTS));
//    dispCmd(VERTEX2F(x * 16, y * 16));
//    dispCmd(END());
//}

void drawRect(const int16_t x, const int16_t y, const uint16_t width, const uint16_t height, const uint8_t cornerRadius, const uint32_t color) {
 8100f44:	b590      	push	{r4, r7, lr}
 8100f46:	b083      	sub	sp, #12
 8100f48:	af00      	add	r7, sp, #0
 8100f4a:	4604      	mov	r4, r0
 8100f4c:	4608      	mov	r0, r1
 8100f4e:	4611      	mov	r1, r2
 8100f50:	461a      	mov	r2, r3
 8100f52:	4623      	mov	r3, r4
 8100f54:	80fb      	strh	r3, [r7, #6]
 8100f56:	4603      	mov	r3, r0
 8100f58:	80bb      	strh	r3, [r7, #4]
 8100f5a:	460b      	mov	r3, r1
 8100f5c:	807b      	strh	r3, [r7, #2]
 8100f5e:	4613      	mov	r3, r2
 8100f60:	803b      	strh	r3, [r7, #0]
    dispCmd(COLOR(color));
 8100f62:	69fb      	ldr	r3, [r7, #28]
 8100f64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8100f68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8100f6c:	4618      	mov	r0, r3
 8100f6e:	f000 fa79 	bl	8101464 <dispCmd>
    dispCmd(LINE_WIDTH(cornerRadius * 16));
 8100f72:	7e3b      	ldrb	r3, [r7, #24]
 8100f74:	011b      	lsls	r3, r3, #4
 8100f76:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8100f7a:	f043 6360 	orr.w	r3, r3, #234881024	@ 0xe000000
 8100f7e:	4618      	mov	r0, r3
 8100f80:	f000 fa70 	bl	8101464 <dispCmd>
    dispCmd(BEGIN(RECTS));
 8100f84:	4817      	ldr	r0, [pc, #92]	@ (8100fe4 <drawRect+0xa0>)
 8100f86:	f000 fa6d 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x * 16, y * 16));
 8100f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f8e:	011b      	lsls	r3, r3, #4
 8100f90:	03da      	lsls	r2, r3, #15
 8100f92:	4b15      	ldr	r3, [pc, #84]	@ (8100fe8 <drawRect+0xa4>)
 8100f94:	4013      	ands	r3, r2
 8100f96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8100f9a:	0112      	lsls	r2, r2, #4
 8100f9c:	b292      	uxth	r2, r2
 8100f9e:	4313      	orrs	r3, r2
 8100fa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8100fa4:	4618      	mov	r0, r3
 8100fa6:	f000 fa5d 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F((x + width) * 16, (y + height) * 16));
 8100faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100fae:	887b      	ldrh	r3, [r7, #2]
 8100fb0:	4413      	add	r3, r2
 8100fb2:	011b      	lsls	r3, r3, #4
 8100fb4:	03da      	lsls	r2, r3, #15
 8100fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8100fe8 <drawRect+0xa4>)
 8100fb8:	4013      	ands	r3, r2
 8100fba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8100fbe:	883a      	ldrh	r2, [r7, #0]
 8100fc0:	440a      	add	r2, r1
 8100fc2:	0112      	lsls	r2, r2, #4
 8100fc4:	b292      	uxth	r2, r2
 8100fc6:	4313      	orrs	r3, r2
 8100fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8100fcc:	4618      	mov	r0, r3
 8100fce:	f000 fa49 	bl	8101464 <dispCmd>
    dispCmd(END());
 8100fd2:	f04f 5004 	mov.w	r0, #553648128	@ 0x21000000
 8100fd6:	f000 fa45 	bl	8101464 <dispCmd>
}
 8100fda:	bf00      	nop
 8100fdc:	370c      	adds	r7, #12
 8100fde:	46bd      	mov	sp, r7
 8100fe0:	bd90      	pop	{r4, r7, pc}
 8100fe2:	bf00      	nop
 8100fe4:	1f000009 	.word	0x1f000009
 8100fe8:	3fff8000 	.word	0x3fff8000

08100fec <drawLine>:

void drawLine(const int16_t x1, const int16_t y1, const int16_t x2, const int16_t y2, const uint8_t width, const uint32_t color) {
 8100fec:	b590      	push	{r4, r7, lr}
 8100fee:	b083      	sub	sp, #12
 8100ff0:	af00      	add	r7, sp, #0
 8100ff2:	4604      	mov	r4, r0
 8100ff4:	4608      	mov	r0, r1
 8100ff6:	4611      	mov	r1, r2
 8100ff8:	461a      	mov	r2, r3
 8100ffa:	4623      	mov	r3, r4
 8100ffc:	80fb      	strh	r3, [r7, #6]
 8100ffe:	4603      	mov	r3, r0
 8101000:	80bb      	strh	r3, [r7, #4]
 8101002:	460b      	mov	r3, r1
 8101004:	807b      	strh	r3, [r7, #2]
 8101006:	4613      	mov	r3, r2
 8101008:	803b      	strh	r3, [r7, #0]
    dispCmd(COLOR(color));
 810100a:	69fb      	ldr	r3, [r7, #28]
 810100c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8101010:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8101014:	4618      	mov	r0, r3
 8101016:	f000 fa25 	bl	8101464 <dispCmd>
    dispCmd(LINE_WIDTH(width * 16));
 810101a:	7e3b      	ldrb	r3, [r7, #24]
 810101c:	011b      	lsls	r3, r3, #4
 810101e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8101022:	f043 6360 	orr.w	r3, r3, #234881024	@ 0xe000000
 8101026:	4618      	mov	r0, r3
 8101028:	f000 fa1c 	bl	8101464 <dispCmd>
    dispCmd(BEGIN(LINES));
 810102c:	4815      	ldr	r0, [pc, #84]	@ (8101084 <drawLine+0x98>)
 810102e:	f000 fa19 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x1 * 16, y1 * 16));
 8101032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101036:	011b      	lsls	r3, r3, #4
 8101038:	03da      	lsls	r2, r3, #15
 810103a:	4b13      	ldr	r3, [pc, #76]	@ (8101088 <drawLine+0x9c>)
 810103c:	4013      	ands	r3, r2
 810103e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8101042:	0112      	lsls	r2, r2, #4
 8101044:	b292      	uxth	r2, r2
 8101046:	4313      	orrs	r3, r2
 8101048:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810104c:	4618      	mov	r0, r3
 810104e:	f000 fa09 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x2 * 16, y2 * 16));
 8101052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8101056:	011b      	lsls	r3, r3, #4
 8101058:	03da      	lsls	r2, r3, #15
 810105a:	4b0b      	ldr	r3, [pc, #44]	@ (8101088 <drawLine+0x9c>)
 810105c:	4013      	ands	r3, r2
 810105e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8101062:	0112      	lsls	r2, r2, #4
 8101064:	b292      	uxth	r2, r2
 8101066:	4313      	orrs	r3, r2
 8101068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810106c:	4618      	mov	r0, r3
 810106e:	f000 f9f9 	bl	8101464 <dispCmd>
    dispCmd(END());
 8101072:	f04f 5004 	mov.w	r0, #553648128	@ 0x21000000
 8101076:	f000 f9f5 	bl	8101464 <dispCmd>
}
 810107a:	bf00      	nop
 810107c:	370c      	adds	r7, #12
 810107e:	46bd      	mov	sp, r7
 8101080:	bd90      	pop	{r4, r7, pc}
 8101082:	bf00      	nop
 8101084:	1f000003 	.word	0x1f000003
 8101088:	3fff8000 	.word	0x3fff8000

0810108c <drawUnfilledRect>:

void drawUnfilledRect(const int16_t x1, const int16_t y1, const uint16_t width, const uint16_t height, const uint8_t lineWidth, const uint32_t color) {
 810108c:	b590      	push	{r4, r7, lr}
 810108e:	b083      	sub	sp, #12
 8101090:	af00      	add	r7, sp, #0
 8101092:	4604      	mov	r4, r0
 8101094:	4608      	mov	r0, r1
 8101096:	4611      	mov	r1, r2
 8101098:	461a      	mov	r2, r3
 810109a:	4623      	mov	r3, r4
 810109c:	80fb      	strh	r3, [r7, #6]
 810109e:	4603      	mov	r3, r0
 81010a0:	80bb      	strh	r3, [r7, #4]
 81010a2:	460b      	mov	r3, r1
 81010a4:	807b      	strh	r3, [r7, #2]
 81010a6:	4613      	mov	r3, r2
 81010a8:	803b      	strh	r3, [r7, #0]
    dispCmd(COLOR(color));
 81010aa:	69fb      	ldr	r3, [r7, #28]
 81010ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81010b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81010b4:	4618      	mov	r0, r3
 81010b6:	f000 f9d5 	bl	8101464 <dispCmd>
    dispCmd(LINE_WIDTH(lineWidth * 16));
 81010ba:	7e3b      	ldrb	r3, [r7, #24]
 81010bc:	011b      	lsls	r3, r3, #4
 81010be:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 81010c2:	f043 6360 	orr.w	r3, r3, #234881024	@ 0xe000000
 81010c6:	4618      	mov	r0, r3
 81010c8:	f000 f9cc 	bl	8101464 <dispCmd>
    dispCmd(BEGIN(LINES));
 81010cc:	484d      	ldr	r0, [pc, #308]	@ (8101204 <drawUnfilledRect+0x178>)
 81010ce:	f000 f9c9 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x1 * 16, y1 * 16));
 81010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010d6:	011b      	lsls	r3, r3, #4
 81010d8:	03da      	lsls	r2, r3, #15
 81010da:	4b4b      	ldr	r3, [pc, #300]	@ (8101208 <drawUnfilledRect+0x17c>)
 81010dc:	4013      	ands	r3, r2
 81010de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 81010e2:	0112      	lsls	r2, r2, #4
 81010e4:	b292      	uxth	r2, r2
 81010e6:	4313      	orrs	r3, r2
 81010e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81010ec:	4618      	mov	r0, r3
 81010ee:	f000 f9b9 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F((x1 + width) * 16, y1 * 16));
 81010f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 81010f6:	887b      	ldrh	r3, [r7, #2]
 81010f8:	4413      	add	r3, r2
 81010fa:	011b      	lsls	r3, r3, #4
 81010fc:	03da      	lsls	r2, r3, #15
 81010fe:	4b42      	ldr	r3, [pc, #264]	@ (8101208 <drawUnfilledRect+0x17c>)
 8101100:	4013      	ands	r3, r2
 8101102:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8101106:	0112      	lsls	r2, r2, #4
 8101108:	b292      	uxth	r2, r2
 810110a:	4313      	orrs	r3, r2
 810110c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8101110:	4618      	mov	r0, r3
 8101112:	f000 f9a7 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F((x1 + width) * 16, y1 * 16));
 8101116:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810111a:	887b      	ldrh	r3, [r7, #2]
 810111c:	4413      	add	r3, r2
 810111e:	011b      	lsls	r3, r3, #4
 8101120:	03da      	lsls	r2, r3, #15
 8101122:	4b39      	ldr	r3, [pc, #228]	@ (8101208 <drawUnfilledRect+0x17c>)
 8101124:	4013      	ands	r3, r2
 8101126:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 810112a:	0112      	lsls	r2, r2, #4
 810112c:	b292      	uxth	r2, r2
 810112e:	4313      	orrs	r3, r2
 8101130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8101134:	4618      	mov	r0, r3
 8101136:	f000 f995 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F((x1 + width) * 16, (y1 + height) * 16));
 810113a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810113e:	887b      	ldrh	r3, [r7, #2]
 8101140:	4413      	add	r3, r2
 8101142:	011b      	lsls	r3, r3, #4
 8101144:	03da      	lsls	r2, r3, #15
 8101146:	4b30      	ldr	r3, [pc, #192]	@ (8101208 <drawUnfilledRect+0x17c>)
 8101148:	4013      	ands	r3, r2
 810114a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 810114e:	883a      	ldrh	r2, [r7, #0]
 8101150:	440a      	add	r2, r1
 8101152:	0112      	lsls	r2, r2, #4
 8101154:	b292      	uxth	r2, r2
 8101156:	4313      	orrs	r3, r2
 8101158:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810115c:	4618      	mov	r0, r3
 810115e:	f000 f981 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F((x1 + width) * 16, (y1 + height) * 16));
 8101162:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8101166:	887b      	ldrh	r3, [r7, #2]
 8101168:	4413      	add	r3, r2
 810116a:	011b      	lsls	r3, r3, #4
 810116c:	03da      	lsls	r2, r3, #15
 810116e:	4b26      	ldr	r3, [pc, #152]	@ (8101208 <drawUnfilledRect+0x17c>)
 8101170:	4013      	ands	r3, r2
 8101172:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8101176:	883a      	ldrh	r2, [r7, #0]
 8101178:	440a      	add	r2, r1
 810117a:	0112      	lsls	r2, r2, #4
 810117c:	b292      	uxth	r2, r2
 810117e:	4313      	orrs	r3, r2
 8101180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8101184:	4618      	mov	r0, r3
 8101186:	f000 f96d 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x1 * 16, (y1 + height) * 16));
 810118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810118e:	011b      	lsls	r3, r3, #4
 8101190:	03da      	lsls	r2, r3, #15
 8101192:	4b1d      	ldr	r3, [pc, #116]	@ (8101208 <drawUnfilledRect+0x17c>)
 8101194:	4013      	ands	r3, r2
 8101196:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 810119a:	883a      	ldrh	r2, [r7, #0]
 810119c:	440a      	add	r2, r1
 810119e:	0112      	lsls	r2, r2, #4
 81011a0:	b292      	uxth	r2, r2
 81011a2:	4313      	orrs	r3, r2
 81011a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81011a8:	4618      	mov	r0, r3
 81011aa:	f000 f95b 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x1 * 16, (y1 + height) * 16));
 81011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81011b2:	011b      	lsls	r3, r3, #4
 81011b4:	03da      	lsls	r2, r3, #15
 81011b6:	4b14      	ldr	r3, [pc, #80]	@ (8101208 <drawUnfilledRect+0x17c>)
 81011b8:	4013      	ands	r3, r2
 81011ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 81011be:	883a      	ldrh	r2, [r7, #0]
 81011c0:	440a      	add	r2, r1
 81011c2:	0112      	lsls	r2, r2, #4
 81011c4:	b292      	uxth	r2, r2
 81011c6:	4313      	orrs	r3, r2
 81011c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81011cc:	4618      	mov	r0, r3
 81011ce:	f000 f949 	bl	8101464 <dispCmd>
    dispCmd(VERTEX2F(x1 * 16, y1 * 16));
 81011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81011d6:	011b      	lsls	r3, r3, #4
 81011d8:	03da      	lsls	r2, r3, #15
 81011da:	4b0b      	ldr	r3, [pc, #44]	@ (8101208 <drawUnfilledRect+0x17c>)
 81011dc:	4013      	ands	r3, r2
 81011de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 81011e2:	0112      	lsls	r2, r2, #4
 81011e4:	b292      	uxth	r2, r2
 81011e6:	4313      	orrs	r3, r2
 81011e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81011ec:	4618      	mov	r0, r3
 81011ee:	f000 f939 	bl	8101464 <dispCmd>
    dispCmd(END());
 81011f2:	f04f 5004 	mov.w	r0, #553648128	@ 0x21000000
 81011f6:	f000 f935 	bl	8101464 <dispCmd>
}
 81011fa:	bf00      	nop
 81011fc:	370c      	adds	r7, #12
 81011fe:	46bd      	mov	sp, r7
 8101200:	bd90      	pop	{r4, r7, pc}
 8101202:	bf00      	nop
 8101204:	1f000003 	.word	0x1f000003
 8101208:	3fff8000 	.word	0x3fff8000

0810120c <drawText>:
//    dispCmd((uint32_t)scale * 65536);
//    dispCmd(SETMATRIX());
//    dispCmd(VERTEX2II(x, y, 0, 0));
//}
//
void drawText(const int16_t x, const int16_t y, const uint8_t font, const uint32_t color, const uint16_t options, const char text[]) {
 810120c:	b580      	push	{r7, lr}
 810120e:	b086      	sub	sp, #24
 8101210:	af00      	add	r7, sp, #0
 8101212:	607b      	str	r3, [r7, #4]
 8101214:	4603      	mov	r3, r0
 8101216:	81fb      	strh	r3, [r7, #14]
 8101218:	460b      	mov	r3, r1
 810121a:	81bb      	strh	r3, [r7, #12]
 810121c:	4613      	mov	r3, r2
 810121e:	72fb      	strb	r3, [r7, #11]
    dispCmd(COLOR(color));
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8101226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810122a:	4618      	mov	r0, r3
 810122c:	f000 f91a 	bl	8101464 <dispCmd>
    dispCmd(TEXT());
 8101230:	f06f 00f3 	mvn.w	r0, #243	@ 0xf3
 8101234:	f000 f916 	bl	8101464 <dispCmd>
    dispCmd(x | ((uint32_t) y << 16));
 8101238:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 810123c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8101240:	041b      	lsls	r3, r3, #16
 8101242:	4313      	orrs	r3, r2
 8101244:	4618      	mov	r0, r3
 8101246:	f000 f90d 	bl	8101464 <dispCmd>
    dispCmd(font | ((uint32_t) options << 16));
 810124a:	7afa      	ldrb	r2, [r7, #11]
 810124c:	8c3b      	ldrh	r3, [r7, #32]
 810124e:	041b      	lsls	r3, r3, #16
 8101250:	4313      	orrs	r3, r2
 8101252:	4618      	mov	r0, r3
 8101254:	f000 f906 	bl	8101464 <dispCmd>
    int len = strlen(text) + 1;
 8101258:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810125a:	f7ff f891 	bl	8100380 <strlen>
 810125e:	4603      	mov	r3, r0
 8101260:	3301      	adds	r3, #1
 8101262:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < (len / 4); i++) {
 8101264:	2300      	movs	r3, #0
 8101266:	617b      	str	r3, [r7, #20]
 8101268:	e027      	b.n	81012ba <drawText+0xae>
        dispCmd(text[0+(4*i)] | (text[1+(4*i)] << 8) | (text[2+(4*i)] << 16) | (text[3+(4*i)] << 24));
 810126a:	697b      	ldr	r3, [r7, #20]
 810126c:	009b      	lsls	r3, r3, #2
 810126e:	461a      	mov	r2, r3
 8101270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101272:	4413      	add	r3, r2
 8101274:	781b      	ldrb	r3, [r3, #0]
 8101276:	461a      	mov	r2, r3
 8101278:	697b      	ldr	r3, [r7, #20]
 810127a:	009b      	lsls	r3, r3, #2
 810127c:	3301      	adds	r3, #1
 810127e:	4619      	mov	r1, r3
 8101280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101282:	440b      	add	r3, r1
 8101284:	781b      	ldrb	r3, [r3, #0]
 8101286:	021b      	lsls	r3, r3, #8
 8101288:	431a      	orrs	r2, r3
 810128a:	697b      	ldr	r3, [r7, #20]
 810128c:	009b      	lsls	r3, r3, #2
 810128e:	3302      	adds	r3, #2
 8101290:	4619      	mov	r1, r3
 8101292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101294:	440b      	add	r3, r1
 8101296:	781b      	ldrb	r3, [r3, #0]
 8101298:	041b      	lsls	r3, r3, #16
 810129a:	431a      	orrs	r2, r3
 810129c:	697b      	ldr	r3, [r7, #20]
 810129e:	009b      	lsls	r3, r3, #2
 81012a0:	3303      	adds	r3, #3
 81012a2:	4619      	mov	r1, r3
 81012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81012a6:	440b      	add	r3, r1
 81012a8:	781b      	ldrb	r3, [r3, #0]
 81012aa:	061b      	lsls	r3, r3, #24
 81012ac:	4313      	orrs	r3, r2
 81012ae:	4618      	mov	r0, r3
 81012b0:	f000 f8d8 	bl	8101464 <dispCmd>
    for (int i = 0; i < (len / 4); i++) {
 81012b4:	697b      	ldr	r3, [r7, #20]
 81012b6:	3301      	adds	r3, #1
 81012b8:	617b      	str	r3, [r7, #20]
 81012ba:	693b      	ldr	r3, [r7, #16]
 81012bc:	2b00      	cmp	r3, #0
 81012be:	da00      	bge.n	81012c2 <drawText+0xb6>
 81012c0:	3303      	adds	r3, #3
 81012c2:	109b      	asrs	r3, r3, #2
 81012c4:	461a      	mov	r2, r3
 81012c6:	697b      	ldr	r3, [r7, #20]
 81012c8:	4293      	cmp	r3, r2
 81012ca:	dbce      	blt.n	810126a <drawText+0x5e>
    }
    if ((len % 4) == 1) {
 81012cc:	693b      	ldr	r3, [r7, #16]
 81012ce:	425a      	negs	r2, r3
 81012d0:	f003 0303 	and.w	r3, r3, #3
 81012d4:	f002 0203 	and.w	r2, r2, #3
 81012d8:	bf58      	it	pl
 81012da:	4253      	negpl	r3, r2
 81012dc:	2b01      	cmp	r3, #1
 81012de:	d108      	bne.n	81012f2 <drawText+0xe6>
        dispCmd(text[len-1]);
 81012e0:	693b      	ldr	r3, [r7, #16]
 81012e2:	3b01      	subs	r3, #1
 81012e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81012e6:	4413      	add	r3, r2
 81012e8:	781b      	ldrb	r3, [r3, #0]
 81012ea:	4618      	mov	r0, r3
 81012ec:	f000 f8ba 	bl	8101464 <dispCmd>
    } else if ((len % 4) == 2) {
        dispCmd(text[len-2] | text[len-1] << 8);
    } else if ((len % 4) == 3) {
        dispCmd(text[len-3] | text[len-2] << 8 | text[len-1] << 16);
    }
}
 81012f0:	e03c      	b.n	810136c <drawText+0x160>
    } else if ((len % 4) == 2) {
 81012f2:	693b      	ldr	r3, [r7, #16]
 81012f4:	425a      	negs	r2, r3
 81012f6:	f003 0303 	and.w	r3, r3, #3
 81012fa:	f002 0203 	and.w	r2, r2, #3
 81012fe:	bf58      	it	pl
 8101300:	4253      	negpl	r3, r2
 8101302:	2b02      	cmp	r3, #2
 8101304:	d110      	bne.n	8101328 <drawText+0x11c>
        dispCmd(text[len-2] | text[len-1] << 8);
 8101306:	693b      	ldr	r3, [r7, #16]
 8101308:	3b02      	subs	r3, #2
 810130a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810130c:	4413      	add	r3, r2
 810130e:	781b      	ldrb	r3, [r3, #0]
 8101310:	4619      	mov	r1, r3
 8101312:	693b      	ldr	r3, [r7, #16]
 8101314:	3b01      	subs	r3, #1
 8101316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101318:	4413      	add	r3, r2
 810131a:	781b      	ldrb	r3, [r3, #0]
 810131c:	021b      	lsls	r3, r3, #8
 810131e:	430b      	orrs	r3, r1
 8101320:	4618      	mov	r0, r3
 8101322:	f000 f89f 	bl	8101464 <dispCmd>
}
 8101326:	e021      	b.n	810136c <drawText+0x160>
    } else if ((len % 4) == 3) {
 8101328:	693b      	ldr	r3, [r7, #16]
 810132a:	425a      	negs	r2, r3
 810132c:	f003 0303 	and.w	r3, r3, #3
 8101330:	f002 0203 	and.w	r2, r2, #3
 8101334:	bf58      	it	pl
 8101336:	4253      	negpl	r3, r2
 8101338:	2b03      	cmp	r3, #3
 810133a:	d117      	bne.n	810136c <drawText+0x160>
        dispCmd(text[len-3] | text[len-2] << 8 | text[len-1] << 16);
 810133c:	693b      	ldr	r3, [r7, #16]
 810133e:	3b03      	subs	r3, #3
 8101340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101342:	4413      	add	r3, r2
 8101344:	781b      	ldrb	r3, [r3, #0]
 8101346:	4619      	mov	r1, r3
 8101348:	693b      	ldr	r3, [r7, #16]
 810134a:	3b02      	subs	r3, #2
 810134c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810134e:	4413      	add	r3, r2
 8101350:	781b      	ldrb	r3, [r3, #0]
 8101352:	021b      	lsls	r3, r3, #8
 8101354:	ea41 0203 	orr.w	r2, r1, r3
 8101358:	693b      	ldr	r3, [r7, #16]
 810135a:	3b01      	subs	r3, #1
 810135c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810135e:	440b      	add	r3, r1
 8101360:	781b      	ldrb	r3, [r3, #0]
 8101362:	041b      	lsls	r3, r3, #16
 8101364:	4313      	orrs	r3, r2
 8101366:	4618      	mov	r0, r3
 8101368:	f000 f87c 	bl	8101464 <dispCmd>
}
 810136c:	bf00      	nop
 810136e:	3718      	adds	r7, #24
 8101370:	46bd      	mov	sp, r7
 8101372:	bd80      	pop	{r7, pc}

08101374 <beginDisplayList>:
//    uint32_t addr = FT81x_RAM_CMD + cmdWrite;
//    write32(addr, cmd);
//    write16(FT81x_REG_CMD_WRITE, (cmdWrite + 4) % 4096);
//}

void beginDisplayList() {
 8101374:	b580      	push	{r7, lr}
 8101376:	af00      	add	r7, sp, #0
    waitForCommandBuffer();
 8101378:	f000 f81a 	bl	81013b0 <waitForCommandBuffer>
    dispCmd(DLSTART());
 810137c:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8101380:	f000 f870 	bl	8101464 <dispCmd>
    dispCmd(CLEAR(1, 1, 1));
 8101384:	4802      	ldr	r0, [pc, #8]	@ (8101390 <beginDisplayList+0x1c>)
 8101386:	f000 f86d 	bl	8101464 <dispCmd>
}
 810138a:	bf00      	nop
 810138c:	bd80      	pop	{r7, pc}
 810138e:	bf00      	nop
 8101390:	26000007 	.word	0x26000007

08101394 <swapScreen>:

void swapScreen() {
 8101394:	b580      	push	{r7, lr}
 8101396:	af00      	add	r7, sp, #0
    dispCmd(END_DL());
 8101398:	2000      	movs	r0, #0
 810139a:	f000 f863 	bl	8101464 <dispCmd>
    dispCmd(SWAP());
 810139e:	f06f 00fe 	mvn.w	r0, #254	@ 0xfe
 81013a2:	f000 f85f 	bl	8101464 <dispCmd>
    updateCmdWriteAddress();
 81013a6:	f000 f831 	bl	810140c <updateCmdWriteAddress>
}
 81013aa:	bf00      	nop
 81013ac:	bd80      	pop	{r7, pc}
	...

081013b0 <waitForCommandBuffer>:

void waitForCommandBuffer() {
 81013b0:	b598      	push	{r3, r4, r7, lr}
 81013b2:	af00      	add	r7, sp, #0
    // Wait for circular buffer to catch up
    while (read16(FT81x_REG_CMD_WRITE) != read16(FT81x_REG_CMD_READ)) {
 81013b4:	e000      	b.n	81013b8 <waitForCommandBuffer+0x8>
        __asm__ volatile("nop");
 81013b6:	bf00      	nop
    while (read16(FT81x_REG_CMD_WRITE) != read16(FT81x_REG_CMD_READ)) {
 81013b8:	4806      	ldr	r0, [pc, #24]	@ (81013d4 <waitForCommandBuffer+0x24>)
 81013ba:	f000 f8a4 	bl	8101506 <read16>
 81013be:	4603      	mov	r3, r0
 81013c0:	461c      	mov	r4, r3
 81013c2:	4805      	ldr	r0, [pc, #20]	@ (81013d8 <waitForCommandBuffer+0x28>)
 81013c4:	f000 f89f 	bl	8101506 <read16>
 81013c8:	4603      	mov	r3, r0
 81013ca:	429c      	cmp	r4, r3
 81013cc:	d1f3      	bne.n	81013b6 <waitForCommandBuffer+0x6>
    }
}
 81013ce:	bf00      	nop
 81013d0:	bf00      	nop
 81013d2:	bd98      	pop	{r3, r4, r7, pc}
 81013d4:	003020fc 	.word	0x003020fc
 81013d8:	003020f8 	.word	0x003020f8

081013dc <increaseCmdWriteAddress>:

void increaseCmdWriteAddress(uint16_t delta) {
 81013dc:	b480      	push	{r7}
 81013de:	b083      	sub	sp, #12
 81013e0:	af00      	add	r7, sp, #0
 81013e2:	4603      	mov	r3, r0
 81013e4:	80fb      	strh	r3, [r7, #6]
    cmdWriteAddress = (cmdWriteAddress + delta) % 4096;
 81013e6:	4b08      	ldr	r3, [pc, #32]	@ (8101408 <increaseCmdWriteAddress+0x2c>)
 81013e8:	881a      	ldrh	r2, [r3, #0]
 81013ea:	88fb      	ldrh	r3, [r7, #6]
 81013ec:	4413      	add	r3, r2
 81013ee:	b29b      	uxth	r3, r3
 81013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81013f4:	b29a      	uxth	r2, r3
 81013f6:	4b04      	ldr	r3, [pc, #16]	@ (8101408 <increaseCmdWriteAddress+0x2c>)
 81013f8:	801a      	strh	r2, [r3, #0]
}
 81013fa:	bf00      	nop
 81013fc:	370c      	adds	r7, #12
 81013fe:	46bd      	mov	sp, r7
 8101400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101404:	4770      	bx	lr
 8101406:	bf00      	nop
 8101408:	1000021c 	.word	0x1000021c

0810140c <updateCmdWriteAddress>:

inline void updateCmdWriteAddress() { write16(FT81x_REG_CMD_WRITE, cmdWriteAddress); }
 810140c:	b580      	push	{r7, lr}
 810140e:	af00      	add	r7, sp, #0
 8101410:	4b03      	ldr	r3, [pc, #12]	@ (8101420 <updateCmdWriteAddress+0x14>)
 8101412:	881b      	ldrh	r3, [r3, #0]
 8101414:	4619      	mov	r1, r3
 8101416:	4803      	ldr	r0, [pc, #12]	@ (8101424 <updateCmdWriteAddress+0x18>)
 8101418:	f000 f8c2 	bl	81015a0 <write16>
 810141c:	bf00      	nop
 810141e:	bd80      	pop	{r7, pc}
 8101420:	1000021c 	.word	0x1000021c
 8101424:	003020fc 	.word	0x003020fc

08101428 <initBitmapHandleForFont>:
//    if ((data >> 24) != 0) {
//        dispCmd(0);
//    }
//}

uint8_t initBitmapHandleForFont(uint8_t font1, uint8_t font2) {
 8101428:	b580      	push	{r7, lr}
 810142a:	b082      	sub	sp, #8
 810142c:	af00      	add	r7, sp, #0
 810142e:	4603      	mov	r3, r0
 8101430:	460a      	mov	r2, r1
 8101432:	71fb      	strb	r3, [r7, #7]
 8101434:	4613      	mov	r3, r2
 8101436:	71bb      	strb	r3, [r7, #6]
    if (font1 > 31) {
 8101438:	79fb      	ldrb	r3, [r7, #7]
 810143a:	2b1f      	cmp	r3, #31
 810143c:	d90d      	bls.n	810145a <initBitmapHandleForFont+0x32>
        dispCmd(ROMFONT());
 810143e:	f06f 00c0 	mvn.w	r0, #192	@ 0xc0
 8101442:	f000 f80f 	bl	8101464 <dispCmd>
        dispCmd(font2);
 8101446:	79bb      	ldrb	r3, [r7, #6]
 8101448:	4618      	mov	r0, r3
 810144a:	f000 f80b 	bl	8101464 <dispCmd>
        dispCmd(font1);
 810144e:	79fb      	ldrb	r3, [r7, #7]
 8101450:	4618      	mov	r0, r3
 8101452:	f000 f807 	bl	8101464 <dispCmd>
        return font2;
 8101456:	79bb      	ldrb	r3, [r7, #6]
 8101458:	e000      	b.n	810145c <initBitmapHandleForFont+0x34>
    }
    return font1;
 810145a:	79fb      	ldrb	r3, [r7, #7]
}
 810145c:	4618      	mov	r0, r3
 810145e:	3708      	adds	r7, #8
 8101460:	46bd      	mov	sp, r7
 8101462:	bd80      	pop	{r7, pc}

08101464 <dispCmd>:

void dispCmd(const uint32_t cmd) {
 8101464:	b580      	push	{r7, lr}
 8101466:	b082      	sub	sp, #8
 8101468:	af00      	add	r7, sp, #0
 810146a:	6078      	str	r0, [r7, #4]
    write32(FT81x_RAM_CMD + cmdWriteAddress, cmd);
 810146c:	4b07      	ldr	r3, [pc, #28]	@ (810148c <dispCmd+0x28>)
 810146e:	881b      	ldrh	r3, [r3, #0]
 8101470:	f503 1342 	add.w	r3, r3, #3178496	@ 0x308000
 8101474:	6879      	ldr	r1, [r7, #4]
 8101476:	4618      	mov	r0, r3
 8101478:	f000 f8b9 	bl	81015ee <write32>
    increaseCmdWriteAddress(4);
 810147c:	2004      	movs	r0, #4
 810147e:	f7ff ffad 	bl	81013dc <increaseCmdWriteAddress>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}
 810148a:	bf00      	nop
 810148c:	1000021c 	.word	0x1000021c

08101490 <sendCommand>:

void sendCommand(const uint32_t cmd) {
 8101490:	b580      	push	{r7, lr}
 8101492:	b084      	sub	sp, #16
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]
    uint8_t tx[3];
    tx[0] = cmd >> 16;
 8101498:	687b      	ldr	r3, [r7, #4]
 810149a:	0c1b      	lsrs	r3, r3, #16
 810149c:	b2db      	uxtb	r3, r3
 810149e:	733b      	strb	r3, [r7, #12]
    tx[1] = cmd >> 8;
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	0a1b      	lsrs	r3, r3, #8
 81014a4:	b2db      	uxtb	r3, r3
 81014a6:	737b      	strb	r3, [r7, #13]
    tx[2] = cmd;
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	b2db      	uxtb	r3, r3
 81014ac:	73bb      	strb	r3, [r7, #14]
	SPI_Transmit(tx, 3);
 81014ae:	f107 030c 	add.w	r3, r7, #12
 81014b2:	2103      	movs	r1, #3
 81014b4:	4618      	mov	r0, r3
 81014b6:	f003 fdff 	bl	81050b8 <SPI_Transmit>
}
 81014ba:	bf00      	nop
 81014bc:	3710      	adds	r7, #16
 81014be:	46bd      	mov	sp, r7
 81014c0:	bd80      	pop	{r7, pc}

081014c2 <read8>:

uint8_t read8(const uint32_t address) {
 81014c2:	b580      	push	{r7, lr}
 81014c4:	b086      	sub	sp, #24
 81014c6:	af00      	add	r7, sp, #0
 81014c8:	6078      	str	r0, [r7, #4]
	char tx[5];
	char rx[5];

    tx[0] = address >> 16;
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	0c1b      	lsrs	r3, r3, #16
 81014ce:	b2db      	uxtb	r3, r3
 81014d0:	743b      	strb	r3, [r7, #16]
    tx[1] = address >> 8;
 81014d2:	687b      	ldr	r3, [r7, #4]
 81014d4:	0a1b      	lsrs	r3, r3, #8
 81014d6:	b2db      	uxtb	r3, r3
 81014d8:	747b      	strb	r3, [r7, #17]
    tx[2] = address;
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	b2db      	uxtb	r3, r3
 81014de:	74bb      	strb	r3, [r7, #18]
    tx[3] = 0x00;
 81014e0:	2300      	movs	r3, #0
 81014e2:	74fb      	strb	r3, [r7, #19]
    tx[4] = 0x00;
 81014e4:	2300      	movs	r3, #0
 81014e6:	753b      	strb	r3, [r7, #20]

    SPI_Transmit_Receive(tx, rx, 5);
 81014e8:	f107 0108 	add.w	r1, r7, #8
 81014ec:	f107 0310 	add.w	r3, r7, #16
 81014f0:	2205      	movs	r2, #5
 81014f2:	4618      	mov	r0, r3
 81014f4:	f003 fdfe 	bl	81050f4 <SPI_Transmit_Receive>

    uint8_t result = rx[4];
 81014f8:	7b3b      	ldrb	r3, [r7, #12]
 81014fa:	75fb      	strb	r3, [r7, #23]

    return result;
 81014fc:	7dfb      	ldrb	r3, [r7, #23]
}
 81014fe:	4618      	mov	r0, r3
 8101500:	3718      	adds	r7, #24
 8101502:	46bd      	mov	sp, r7
 8101504:	bd80      	pop	{r7, pc}

08101506 <read16>:

uint16_t read16(const uint32_t address) {
 8101506:	b580      	push	{r7, lr}
 8101508:	b086      	sub	sp, #24
 810150a:	af00      	add	r7, sp, #0
 810150c:	6078      	str	r0, [r7, #4]
	char tx[6];
	char rx[6];

	tx[0] = address >> 16;
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	0c1b      	lsrs	r3, r3, #16
 8101512:	b2db      	uxtb	r3, r3
 8101514:	743b      	strb	r3, [r7, #16]
	tx[1] = address >> 8;
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	0a1b      	lsrs	r3, r3, #8
 810151a:	b2db      	uxtb	r3, r3
 810151c:	747b      	strb	r3, [r7, #17]
	tx[2] = address;
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	b2db      	uxtb	r3, r3
 8101522:	74bb      	strb	r3, [r7, #18]
	tx[3] = 0x00;
 8101524:	2300      	movs	r3, #0
 8101526:	74fb      	strb	r3, [r7, #19]
	tx[4] = 0x00;
 8101528:	2300      	movs	r3, #0
 810152a:	753b      	strb	r3, [r7, #20]
	tx[5] = 0x00;
 810152c:	2300      	movs	r3, #0
 810152e:	757b      	strb	r3, [r7, #21]

	SPI_Transmit_Receive(tx, rx, 6);
 8101530:	f107 0108 	add.w	r1, r7, #8
 8101534:	f107 0310 	add.w	r3, r7, #16
 8101538:	2206      	movs	r2, #6
 810153a:	4618      	mov	r0, r3
 810153c:	f003 fdda 	bl	81050f4 <SPI_Transmit_Receive>
    uint16_t result = rx[4];
 8101540:	7b3b      	ldrb	r3, [r7, #12]
 8101542:	82fb      	strh	r3, [r7, #22]
    result |= (rx[5] << 8);
 8101544:	7b7b      	ldrb	r3, [r7, #13]
 8101546:	021b      	lsls	r3, r3, #8
 8101548:	b21a      	sxth	r2, r3
 810154a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810154e:	4313      	orrs	r3, r2
 8101550:	b21b      	sxth	r3, r3
 8101552:	82fb      	strh	r3, [r7, #22]

    return result;
 8101554:	8afb      	ldrh	r3, [r7, #22]
}
 8101556:	4618      	mov	r0, r3
 8101558:	3718      	adds	r7, #24
 810155a:	46bd      	mov	sp, r7
 810155c:	bd80      	pop	{r7, pc}

0810155e <write8>:
    result |= ((uint32_t)rx[7] << 24);

    return result;
}

void write8(const uint32_t address, const uint8_t data) {
 810155e:	b580      	push	{r7, lr}
 8101560:	b084      	sub	sp, #16
 8101562:	af00      	add	r7, sp, #0
 8101564:	6078      	str	r0, [r7, #4]
 8101566:	460b      	mov	r3, r1
 8101568:	70fb      	strb	r3, [r7, #3]
    uint8_t tx[4];

	uint32_t cmd = address | WRITE;
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101570:	60fb      	str	r3, [r7, #12]

	tx[0] = cmd >> 16;
 8101572:	68fb      	ldr	r3, [r7, #12]
 8101574:	0c1b      	lsrs	r3, r3, #16
 8101576:	b2db      	uxtb	r3, r3
 8101578:	723b      	strb	r3, [r7, #8]
	tx[1] = cmd >> 8;
 810157a:	68fb      	ldr	r3, [r7, #12]
 810157c:	0a1b      	lsrs	r3, r3, #8
 810157e:	b2db      	uxtb	r3, r3
 8101580:	727b      	strb	r3, [r7, #9]
	tx[2] = cmd;
 8101582:	68fb      	ldr	r3, [r7, #12]
 8101584:	b2db      	uxtb	r3, r3
 8101586:	72bb      	strb	r3, [r7, #10]
	tx[3] = data;
 8101588:	78fb      	ldrb	r3, [r7, #3]
 810158a:	72fb      	strb	r3, [r7, #11]

    SPI_Transmit(tx, 4);
 810158c:	f107 0308 	add.w	r3, r7, #8
 8101590:	2104      	movs	r1, #4
 8101592:	4618      	mov	r0, r3
 8101594:	f003 fd90 	bl	81050b8 <SPI_Transmit>

}
 8101598:	bf00      	nop
 810159a:	3710      	adds	r7, #16
 810159c:	46bd      	mov	sp, r7
 810159e:	bd80      	pop	{r7, pc}

081015a0 <write16>:

void write16(const uint32_t address, const uint16_t data) {
 81015a0:	b580      	push	{r7, lr}
 81015a2:	b086      	sub	sp, #24
 81015a4:	af00      	add	r7, sp, #0
 81015a6:	6078      	str	r0, [r7, #4]
 81015a8:	460b      	mov	r3, r1
 81015aa:	807b      	strh	r3, [r7, #2]
	uint8_t tx[5];

	uint32_t cmd = address | WRITE;
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81015b2:	617b      	str	r3, [r7, #20]

	tx[0] = cmd >> 16;
 81015b4:	697b      	ldr	r3, [r7, #20]
 81015b6:	0c1b      	lsrs	r3, r3, #16
 81015b8:	b2db      	uxtb	r3, r3
 81015ba:	733b      	strb	r3, [r7, #12]
	tx[1] = cmd >> 8;
 81015bc:	697b      	ldr	r3, [r7, #20]
 81015be:	0a1b      	lsrs	r3, r3, #8
 81015c0:	b2db      	uxtb	r3, r3
 81015c2:	737b      	strb	r3, [r7, #13]
	tx[2] = cmd;
 81015c4:	697b      	ldr	r3, [r7, #20]
 81015c6:	b2db      	uxtb	r3, r3
 81015c8:	73bb      	strb	r3, [r7, #14]
	tx[3] = data;
 81015ca:	887b      	ldrh	r3, [r7, #2]
 81015cc:	b2db      	uxtb	r3, r3
 81015ce:	73fb      	strb	r3, [r7, #15]
	tx[4] = data >> 8;
 81015d0:	887b      	ldrh	r3, [r7, #2]
 81015d2:	0a1b      	lsrs	r3, r3, #8
 81015d4:	b29b      	uxth	r3, r3
 81015d6:	b2db      	uxtb	r3, r3
 81015d8:	743b      	strb	r3, [r7, #16]

	SPI_Transmit(tx, 5);
 81015da:	f107 030c 	add.w	r3, r7, #12
 81015de:	2105      	movs	r1, #5
 81015e0:	4618      	mov	r0, r3
 81015e2:	f003 fd69 	bl	81050b8 <SPI_Transmit>
}
 81015e6:	bf00      	nop
 81015e8:	3718      	adds	r7, #24
 81015ea:	46bd      	mov	sp, r7
 81015ec:	bd80      	pop	{r7, pc}

081015ee <write32>:

void write32(const uint32_t address, const uint32_t data) {
 81015ee:	b580      	push	{r7, lr}
 81015f0:	b086      	sub	sp, #24
 81015f2:	af00      	add	r7, sp, #0
 81015f4:	6078      	str	r0, [r7, #4]
 81015f6:	6039      	str	r1, [r7, #0]
	uint8_t tx[7];

	uint32_t cmd = address | WRITE;
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81015fe:	617b      	str	r3, [r7, #20]

	tx[0] = cmd >> 16;
 8101600:	697b      	ldr	r3, [r7, #20]
 8101602:	0c1b      	lsrs	r3, r3, #16
 8101604:	b2db      	uxtb	r3, r3
 8101606:	733b      	strb	r3, [r7, #12]
	tx[1] = cmd >> 8;
 8101608:	697b      	ldr	r3, [r7, #20]
 810160a:	0a1b      	lsrs	r3, r3, #8
 810160c:	b2db      	uxtb	r3, r3
 810160e:	737b      	strb	r3, [r7, #13]
	tx[2] = cmd;
 8101610:	697b      	ldr	r3, [r7, #20]
 8101612:	b2db      	uxtb	r3, r3
 8101614:	73bb      	strb	r3, [r7, #14]
	tx[3] = data;
 8101616:	683b      	ldr	r3, [r7, #0]
 8101618:	b2db      	uxtb	r3, r3
 810161a:	73fb      	strb	r3, [r7, #15]
	tx[4] = data >> 8;
 810161c:	683b      	ldr	r3, [r7, #0]
 810161e:	0a1b      	lsrs	r3, r3, #8
 8101620:	b2db      	uxtb	r3, r3
 8101622:	743b      	strb	r3, [r7, #16]
	tx[5] = data >> 16;
 8101624:	683b      	ldr	r3, [r7, #0]
 8101626:	0c1b      	lsrs	r3, r3, #16
 8101628:	b2db      	uxtb	r3, r3
 810162a:	747b      	strb	r3, [r7, #17]
	tx[6] = data >> 24;
 810162c:	683b      	ldr	r3, [r7, #0]
 810162e:	0e1b      	lsrs	r3, r3, #24
 8101630:	b2db      	uxtb	r3, r3
 8101632:	74bb      	strb	r3, [r7, #18]

	SPI_Transmit(tx, 7);
 8101634:	f107 030c 	add.w	r3, r7, #12
 8101638:	2107      	movs	r1, #7
 810163a:	4618      	mov	r0, r3
 810163c:	f003 fd3c 	bl	81050b8 <SPI_Transmit>
}
 8101640:	bf00      	nop
 8101642:	3718      	adds	r7, #24
 8101644:	46bd      	mov	sp, r7
 8101646:	bd80      	pop	{r7, pc}

08101648 <autox>:
float runtimeSec = 0.0;
float starttimeSec = 0.0;
bool engineActive = false;


void autox() {
 8101648:	b580      	push	{r7, lr}
 810164a:	b094      	sub	sp, #80	@ 0x50
 810164c:	af02      	add	r7, sp, #8

	blinkActive = (curTime & 0b1000000000000) == 0b1000000000000 ? 1 : 0;
 810164e:	4bc0      	ldr	r3, [pc, #768]	@ (8101950 <autox+0x308>)
 8101650:	881b      	ldrh	r3, [r3, #0]
 8101652:	131b      	asrs	r3, r3, #12
 8101654:	b2db      	uxtb	r3, r3
 8101656:	f003 0301 	and.w	r3, r3, #1
 810165a:	b2da      	uxtb	r2, r3
 810165c:	4bbd      	ldr	r3, [pc, #756]	@ (8101954 <autox+0x30c>)
 810165e:	701a      	strb	r2, [r3, #0]

	beginDisplayList();
 8101660:	f7ff fe88 	bl	8101374 <beginDisplayList>

	clear(black);
 8101664:	4bbc      	ldr	r3, [pc, #752]	@ (8101958 <autox+0x310>)
 8101666:	681b      	ldr	r3, [r3, #0]
 8101668:	4618      	mov	r0, r3
 810166a:	f7ff fc55 	bl	8100f18 <clear>

	/* RPM */
	initBitmapHandleForFont(32, 1);
 810166e:	2101      	movs	r1, #1
 8101670:	2020      	movs	r0, #32
 8101672:	f7ff fed9 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(33, 2);
 8101676:	2102      	movs	r1, #2
 8101678:	2021      	movs	r0, #33	@ 0x21
 810167a:	f7ff fed5 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(34, 3);
 810167e:	2103      	movs	r1, #3
 8101680:	2022      	movs	r0, #34	@ 0x22
 8101682:	f7ff fed1 	bl	8101428 <initBitmapHandleForFont>

	/* Log Number */
	char logNumVal[6];
	sprintf(logNumVal, "%i", logNumber);
 8101686:	4bb5      	ldr	r3, [pc, #724]	@ (810195c <autox+0x314>)
 8101688:	781b      	ldrb	r3, [r3, #0]
 810168a:	461a      	mov	r2, r3
 810168c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8101690:	49b3      	ldr	r1, [pc, #716]	@ (8101960 <autox+0x318>)
 8101692:	4618      	mov	r0, r3
 8101694:	f008 fa18 	bl	8109ac8 <siprintf>
	drawText(100, 30, 1, pink, FT81x_OPT_CENTER, logNumVal);
 8101698:	4bb2      	ldr	r3, [pc, #712]	@ (8101964 <autox+0x31c>)
 810169a:	681a      	ldr	r2, [r3, #0]
 810169c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81016a0:	9301      	str	r3, [sp, #4]
 81016a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81016a6:	9300      	str	r3, [sp, #0]
 81016a8:	4613      	mov	r3, r2
 81016aa:	2201      	movs	r2, #1
 81016ac:	211e      	movs	r1, #30
 81016ae:	2064      	movs	r0, #100	@ 0x64
 81016b0:	f7ff fdac 	bl	810120c <drawText>
	drawText(30,30,1,pink,FT81x_OPT_CENTER, "#");
 81016b4:	4bab      	ldr	r3, [pc, #684]	@ (8101964 <autox+0x31c>)
 81016b6:	681b      	ldr	r3, [r3, #0]
 81016b8:	4aab      	ldr	r2, [pc, #684]	@ (8101968 <autox+0x320>)
 81016ba:	9201      	str	r2, [sp, #4]
 81016bc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81016c0:	9200      	str	r2, [sp, #0]
 81016c2:	2201      	movs	r2, #1
 81016c4:	211e      	movs	r1, #30
 81016c6:	201e      	movs	r0, #30
 81016c8:	f7ff fda0 	bl	810120c <drawText>

	/* Map State */
	char mapStateVal[6];
	sprintf(mapStateVal, "%i", ECUMapState);
 81016cc:	4ba7      	ldr	r3, [pc, #668]	@ (810196c <autox+0x324>)
 81016ce:	781b      	ldrb	r3, [r3, #0]
 81016d0:	461a      	mov	r2, r3
 81016d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81016d6:	49a2      	ldr	r1, [pc, #648]	@ (8101960 <autox+0x318>)
 81016d8:	4618      	mov	r0, r3
 81016da:	f008 f9f5 	bl	8109ac8 <siprintf>
	drawText(750, 30, 1, pink, FT81x_OPT_CENTER, mapStateVal);
 81016de:	4ba1      	ldr	r3, [pc, #644]	@ (8101964 <autox+0x31c>)
 81016e0:	681a      	ldr	r2, [r3, #0]
 81016e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81016e6:	9301      	str	r3, [sp, #4]
 81016e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81016ec:	9300      	str	r3, [sp, #0]
 81016ee:	4613      	mov	r3, r2
 81016f0:	2201      	movs	r2, #1
 81016f2:	211e      	movs	r1, #30
 81016f4:	f240 20ee 	movw	r0, #750	@ 0x2ee
 81016f8:	f7ff fd88 	bl	810120c <drawText>
	drawText(670,30,1,pink,FT81x_OPT_CENTER, "Map:");
 81016fc:	4b99      	ldr	r3, [pc, #612]	@ (8101964 <autox+0x31c>)
 81016fe:	681b      	ldr	r3, [r3, #0]
 8101700:	4a9b      	ldr	r2, [pc, #620]	@ (8101970 <autox+0x328>)
 8101702:	9201      	str	r2, [sp, #4]
 8101704:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8101708:	9200      	str	r2, [sp, #0]
 810170a:	2201      	movs	r2, #1
 810170c:	211e      	movs	r1, #30
 810170e:	f240 209e 	movw	r0, #670	@ 0x29e
 8101712:	f7ff fd7b 	bl	810120c <drawText>

	/* RPM */
	char rpmVal[6];
	rpm = rpm - (rpm % 100);
 8101716:	4b97      	ldr	r3, [pc, #604]	@ (8101974 <autox+0x32c>)
 8101718:	881a      	ldrh	r2, [r3, #0]
 810171a:	4b96      	ldr	r3, [pc, #600]	@ (8101974 <autox+0x32c>)
 810171c:	881b      	ldrh	r3, [r3, #0]
 810171e:	4996      	ldr	r1, [pc, #600]	@ (8101978 <autox+0x330>)
 8101720:	fba1 0103 	umull	r0, r1, r1, r3
 8101724:	0949      	lsrs	r1, r1, #5
 8101726:	2064      	movs	r0, #100	@ 0x64
 8101728:	fb00 f101 	mul.w	r1, r0, r1
 810172c:	1a5b      	subs	r3, r3, r1
 810172e:	b29b      	uxth	r3, r3
 8101730:	1ad3      	subs	r3, r2, r3
 8101732:	b29a      	uxth	r2, r3
 8101734:	4b8f      	ldr	r3, [pc, #572]	@ (8101974 <autox+0x32c>)
 8101736:	801a      	strh	r2, [r3, #0]
	sprintf(rpmVal, "%i", rpm);
 8101738:	4b8e      	ldr	r3, [pc, #568]	@ (8101974 <autox+0x32c>)
 810173a:	881b      	ldrh	r3, [r3, #0]
 810173c:	461a      	mov	r2, r3
 810173e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101742:	4987      	ldr	r1, [pc, #540]	@ (8101960 <autox+0x318>)
 8101744:	4618      	mov	r0, r3
 8101746:	f008 f9bf 	bl	8109ac8 <siprintf>
	drawText(140, 150, 3, yellow, FT81x_OPT_CENTER, rpmVal);
 810174a:	4b8c      	ldr	r3, [pc, #560]	@ (810197c <autox+0x334>)
 810174c:	681a      	ldr	r2, [r3, #0]
 810174e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101752:	9301      	str	r3, [sp, #4]
 8101754:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8101758:	9300      	str	r3, [sp, #0]
 810175a:	4613      	mov	r3, r2
 810175c:	2203      	movs	r2, #3
 810175e:	2196      	movs	r1, #150	@ 0x96
 8101760:	208c      	movs	r0, #140	@ 0x8c
 8101762:	f7ff fd53 	bl	810120c <drawText>
	drawText(140,230,2,yellow,FT81x_OPT_CENTER, "RPM");
 8101766:	4b85      	ldr	r3, [pc, #532]	@ (810197c <autox+0x334>)
 8101768:	681b      	ldr	r3, [r3, #0]
 810176a:	4a85      	ldr	r2, [pc, #532]	@ (8101980 <autox+0x338>)
 810176c:	9201      	str	r2, [sp, #4]
 810176e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8101772:	9200      	str	r2, [sp, #0]
 8101774:	2202      	movs	r2, #2
 8101776:	21e6      	movs	r1, #230	@ 0xe6
 8101778:	208c      	movs	r0, #140	@ 0x8c
 810177a:	f7ff fd47 	bl	810120c <drawText>

	/* GEAR */
	switch (gear) {
 810177e:	4b81      	ldr	r3, [pc, #516]	@ (8101984 <autox+0x33c>)
 8101780:	881b      	ldrh	r3, [r3, #0]
 8101782:	2b05      	cmp	r3, #5
 8101784:	f200 816e 	bhi.w	8101a64 <autox+0x41c>
 8101788:	a201      	add	r2, pc, #4	@ (adr r2, 8101790 <autox+0x148>)
 810178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810178e:	bf00      	nop
 8101790:	081017a9 	.word	0x081017a9
 8101794:	081017ff 	.word	0x081017ff
 8101798:	08101855 	.word	0x08101855
 810179c:	081018df 	.word	0x081018df
 81017a0:	08101989 	.word	0x08101989
 81017a4:	081019db 	.word	0x081019db
		case 0:
			drawLine(320, 300, 320, 80, 8, pink);
 81017a8:	4b6e      	ldr	r3, [pc, #440]	@ (8101964 <autox+0x31c>)
 81017aa:	681b      	ldr	r3, [r3, #0]
 81017ac:	9301      	str	r3, [sp, #4]
 81017ae:	2308      	movs	r3, #8
 81017b0:	9300      	str	r3, [sp, #0]
 81017b2:	2350      	movs	r3, #80	@ 0x50
 81017b4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81017b8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81017bc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81017c0:	f7ff fc14 	bl	8100fec <drawLine>
			drawLine(320, 80, 480, 300, 8, pink);
 81017c4:	4b67      	ldr	r3, [pc, #412]	@ (8101964 <autox+0x31c>)
 81017c6:	681b      	ldr	r3, [r3, #0]
 81017c8:	9301      	str	r3, [sp, #4]
 81017ca:	2308      	movs	r3, #8
 81017cc:	9300      	str	r3, [sp, #0]
 81017ce:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81017d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81017d6:	2150      	movs	r1, #80	@ 0x50
 81017d8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81017dc:	f7ff fc06 	bl	8100fec <drawLine>
			drawLine(480, 300, 480, 80, 8, pink);
 81017e0:	4b60      	ldr	r3, [pc, #384]	@ (8101964 <autox+0x31c>)
 81017e2:	681b      	ldr	r3, [r3, #0]
 81017e4:	9301      	str	r3, [sp, #4]
 81017e6:	2308      	movs	r3, #8
 81017e8:	9300      	str	r3, [sp, #0]
 81017ea:	2350      	movs	r3, #80	@ 0x50
 81017ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81017f0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81017f4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 81017f8:	f7ff fbf8 	bl	8100fec <drawLine>
			break;
 81017fc:	e132      	b.n	8101a64 <autox+0x41c>

		case 1:
			drawLine(400, 300, 400, 80, 8, pink);
 81017fe:	4b59      	ldr	r3, [pc, #356]	@ (8101964 <autox+0x31c>)
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	9301      	str	r3, [sp, #4]
 8101804:	2308      	movs	r3, #8
 8101806:	9300      	str	r3, [sp, #0]
 8101808:	2350      	movs	r3, #80	@ 0x50
 810180a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 810180e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8101812:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8101816:	f7ff fbe9 	bl	8100fec <drawLine>
			drawLine(400, 80, 350, 110, 8, pink);
 810181a:	4b52      	ldr	r3, [pc, #328]	@ (8101964 <autox+0x31c>)
 810181c:	681b      	ldr	r3, [r3, #0]
 810181e:	9301      	str	r3, [sp, #4]
 8101820:	2308      	movs	r3, #8
 8101822:	9300      	str	r3, [sp, #0]
 8101824:	236e      	movs	r3, #110	@ 0x6e
 8101826:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 810182a:	2150      	movs	r1, #80	@ 0x50
 810182c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8101830:	f7ff fbdc 	bl	8100fec <drawLine>
			drawLine(340, 300, 460, 300, 8, pink);
 8101834:	4b4b      	ldr	r3, [pc, #300]	@ (8101964 <autox+0x31c>)
 8101836:	681b      	ldr	r3, [r3, #0]
 8101838:	9301      	str	r3, [sp, #4]
 810183a:	2308      	movs	r3, #8
 810183c:	9300      	str	r3, [sp, #0]
 810183e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8101842:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8101846:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 810184a:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 810184e:	f7ff fbcd 	bl	8100fec <drawLine>
			break;
 8101852:	e107      	b.n	8101a64 <autox+0x41c>

		case 2:
			drawLine(320, 80, 480, 80, 8, pink);
 8101854:	4b43      	ldr	r3, [pc, #268]	@ (8101964 <autox+0x31c>)
 8101856:	681b      	ldr	r3, [r3, #0]
 8101858:	9301      	str	r3, [sp, #4]
 810185a:	2308      	movs	r3, #8
 810185c:	9300      	str	r3, [sp, #0]
 810185e:	2350      	movs	r3, #80	@ 0x50
 8101860:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101864:	2150      	movs	r1, #80	@ 0x50
 8101866:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810186a:	f7ff fbbf 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 190, 8, pink);
 810186e:	4b3d      	ldr	r3, [pc, #244]	@ (8101964 <autox+0x31c>)
 8101870:	681b      	ldr	r3, [r3, #0]
 8101872:	9301      	str	r3, [sp, #4]
 8101874:	2308      	movs	r3, #8
 8101876:	9300      	str	r3, [sp, #0]
 8101878:	23be      	movs	r3, #190	@ 0xbe
 810187a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810187e:	2150      	movs	r1, #80	@ 0x50
 8101880:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8101884:	f7ff fbb2 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8101888:	4b36      	ldr	r3, [pc, #216]	@ (8101964 <autox+0x31c>)
 810188a:	681b      	ldr	r3, [r3, #0]
 810188c:	9301      	str	r3, [sp, #4]
 810188e:	2308      	movs	r3, #8
 8101890:	9300      	str	r3, [sp, #0]
 8101892:	23be      	movs	r3, #190	@ 0xbe
 8101894:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101898:	21be      	movs	r1, #190	@ 0xbe
 810189a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810189e:	f7ff fba5 	bl	8100fec <drawLine>
			drawLine(320, 190, 320, 300, 8, pink);
 81018a2:	4b30      	ldr	r3, [pc, #192]	@ (8101964 <autox+0x31c>)
 81018a4:	681b      	ldr	r3, [r3, #0]
 81018a6:	9301      	str	r3, [sp, #4]
 81018a8:	2308      	movs	r3, #8
 81018aa:	9300      	str	r3, [sp, #0]
 81018ac:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81018b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81018b4:	21be      	movs	r1, #190	@ 0xbe
 81018b6:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81018ba:	f7ff fb97 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 81018be:	4b29      	ldr	r3, [pc, #164]	@ (8101964 <autox+0x31c>)
 81018c0:	681b      	ldr	r3, [r3, #0]
 81018c2:	9301      	str	r3, [sp, #4]
 81018c4:	2308      	movs	r3, #8
 81018c6:	9300      	str	r3, [sp, #0]
 81018c8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81018cc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81018d0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81018d4:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81018d8:	f7ff fb88 	bl	8100fec <drawLine>
			break;
 81018dc:	e0c2      	b.n	8101a64 <autox+0x41c>

		case 3:
			drawLine(320, 80, 480, 80, 8, pink);
 81018de:	4b21      	ldr	r3, [pc, #132]	@ (8101964 <autox+0x31c>)
 81018e0:	681b      	ldr	r3, [r3, #0]
 81018e2:	9301      	str	r3, [sp, #4]
 81018e4:	2308      	movs	r3, #8
 81018e6:	9300      	str	r3, [sp, #0]
 81018e8:	2350      	movs	r3, #80	@ 0x50
 81018ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81018ee:	2150      	movs	r1, #80	@ 0x50
 81018f0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81018f4:	f7ff fb7a 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 300, 8, pink);
 81018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8101964 <autox+0x31c>)
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	9301      	str	r3, [sp, #4]
 81018fe:	2308      	movs	r3, #8
 8101900:	9300      	str	r3, [sp, #0]
 8101902:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8101906:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810190a:	2150      	movs	r1, #80	@ 0x50
 810190c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8101910:	f7ff fb6c 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8101914:	4b13      	ldr	r3, [pc, #76]	@ (8101964 <autox+0x31c>)
 8101916:	681b      	ldr	r3, [r3, #0]
 8101918:	9301      	str	r3, [sp, #4]
 810191a:	2308      	movs	r3, #8
 810191c:	9300      	str	r3, [sp, #0]
 810191e:	23be      	movs	r3, #190	@ 0xbe
 8101920:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101924:	21be      	movs	r1, #190	@ 0xbe
 8101926:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810192a:	f7ff fb5f 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 810192e:	4b0d      	ldr	r3, [pc, #52]	@ (8101964 <autox+0x31c>)
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	9301      	str	r3, [sp, #4]
 8101934:	2308      	movs	r3, #8
 8101936:	9300      	str	r3, [sp, #0]
 8101938:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 810193c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101940:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8101944:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8101948:	f7ff fb50 	bl	8100fec <drawLine>
			break;
 810194c:	e08a      	b.n	8101a64 <autox+0x41c>
 810194e:	bf00      	nop
 8101950:	10000224 	.word	0x10000224
 8101954:	10000226 	.word	0x10000226
 8101958:	10000220 	.word	0x10000220
 810195c:	100003f8 	.word	0x100003f8
 8101960:	0810bd38 	.word	0x0810bd38
 8101964:	1000001c 	.word	0x1000001c
 8101968:	0810bd3c 	.word	0x0810bd3c
 810196c:	100003f9 	.word	0x100003f9
 8101970:	0810bd40 	.word	0x0810bd40
 8101974:	100003ea 	.word	0x100003ea
 8101978:	51eb851f 	.word	0x51eb851f
 810197c:	10000010 	.word	0x10000010
 8101980:	0810bd48 	.word	0x0810bd48
 8101984:	100003e4 	.word	0x100003e4

		case 4:
			drawLine(420, 300, 420, 80, 8, pink);
 8101988:	4bb1      	ldr	r3, [pc, #708]	@ (8101c50 <autox+0x608>)
 810198a:	681b      	ldr	r3, [r3, #0]
 810198c:	9301      	str	r3, [sp, #4]
 810198e:	2308      	movs	r3, #8
 8101990:	9300      	str	r3, [sp, #0]
 8101992:	2350      	movs	r3, #80	@ 0x50
 8101994:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8101998:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 810199c:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 81019a0:	f7ff fb24 	bl	8100fec <drawLine>
			drawLine(420, 80, 320, 230, 8, pink);
 81019a4:	4baa      	ldr	r3, [pc, #680]	@ (8101c50 <autox+0x608>)
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	9301      	str	r3, [sp, #4]
 81019aa:	2308      	movs	r3, #8
 81019ac:	9300      	str	r3, [sp, #0]
 81019ae:	23e6      	movs	r3, #230	@ 0xe6
 81019b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81019b4:	2150      	movs	r1, #80	@ 0x50
 81019b6:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 81019ba:	f7ff fb17 	bl	8100fec <drawLine>
			drawLine(320, 230, 450, 230, 8, pink);
 81019be:	4ba4      	ldr	r3, [pc, #656]	@ (8101c50 <autox+0x608>)
 81019c0:	681b      	ldr	r3, [r3, #0]
 81019c2:	9301      	str	r3, [sp, #4]
 81019c4:	2308      	movs	r3, #8
 81019c6:	9300      	str	r3, [sp, #0]
 81019c8:	23e6      	movs	r3, #230	@ 0xe6
 81019ca:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 81019ce:	21e6      	movs	r1, #230	@ 0xe6
 81019d0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81019d4:	f7ff fb0a 	bl	8100fec <drawLine>
			break;
 81019d8:	e044      	b.n	8101a64 <autox+0x41c>

		case 5:
			drawLine(320, 80, 480, 80, 8, pink);
 81019da:	4b9d      	ldr	r3, [pc, #628]	@ (8101c50 <autox+0x608>)
 81019dc:	681b      	ldr	r3, [r3, #0]
 81019de:	9301      	str	r3, [sp, #4]
 81019e0:	2308      	movs	r3, #8
 81019e2:	9300      	str	r3, [sp, #0]
 81019e4:	2350      	movs	r3, #80	@ 0x50
 81019e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81019ea:	2150      	movs	r1, #80	@ 0x50
 81019ec:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81019f0:	f7ff fafc 	bl	8100fec <drawLine>
			drawLine(320, 80, 320, 190, 8, pink);
 81019f4:	4b96      	ldr	r3, [pc, #600]	@ (8101c50 <autox+0x608>)
 81019f6:	681b      	ldr	r3, [r3, #0]
 81019f8:	9301      	str	r3, [sp, #4]
 81019fa:	2308      	movs	r3, #8
 81019fc:	9300      	str	r3, [sp, #0]
 81019fe:	23be      	movs	r3, #190	@ 0xbe
 8101a00:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8101a04:	2150      	movs	r1, #80	@ 0x50
 8101a06:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8101a0a:	f7ff faef 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8101a0e:	4b90      	ldr	r3, [pc, #576]	@ (8101c50 <autox+0x608>)
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	9301      	str	r3, [sp, #4]
 8101a14:	2308      	movs	r3, #8
 8101a16:	9300      	str	r3, [sp, #0]
 8101a18:	23be      	movs	r3, #190	@ 0xbe
 8101a1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101a1e:	21be      	movs	r1, #190	@ 0xbe
 8101a20:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8101a24:	f7ff fae2 	bl	8100fec <drawLine>
			drawLine(480, 190, 480, 300, 8, pink);
 8101a28:	4b89      	ldr	r3, [pc, #548]	@ (8101c50 <autox+0x608>)
 8101a2a:	681b      	ldr	r3, [r3, #0]
 8101a2c:	9301      	str	r3, [sp, #4]
 8101a2e:	2308      	movs	r3, #8
 8101a30:	9300      	str	r3, [sp, #0]
 8101a32:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8101a36:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101a3a:	21be      	movs	r1, #190	@ 0xbe
 8101a3c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8101a40:	f7ff fad4 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 8101a44:	4b82      	ldr	r3, [pc, #520]	@ (8101c50 <autox+0x608>)
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	9301      	str	r3, [sp, #4]
 8101a4a:	2308      	movs	r3, #8
 8101a4c:	9300      	str	r3, [sp, #0]
 8101a4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8101a52:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8101a56:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8101a5a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8101a5e:	f7ff fac5 	bl	8100fec <drawLine>
			break;
 8101a62:	bf00      	nop
	}

	/* WTEMP */
	char tmpVal[6];
	sprintf(tmpVal, "%i", wtemp - 40);
 8101a64:	4b7b      	ldr	r3, [pc, #492]	@ (8101c54 <autox+0x60c>)
 8101a66:	881b      	ldrh	r3, [r3, #0]
 8101a68:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8101a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101a70:	4979      	ldr	r1, [pc, #484]	@ (8101c58 <autox+0x610>)
 8101a72:	4618      	mov	r0, r3
 8101a74:	f008 f828 	bl	8109ac8 <siprintf>
	if (wtemp >= 145 && blinkActive) {
 8101a78:	4b76      	ldr	r3, [pc, #472]	@ (8101c54 <autox+0x60c>)
 8101a7a:	881b      	ldrh	r3, [r3, #0]
 8101a7c:	2b90      	cmp	r3, #144	@ 0x90
 8101a7e:	d90f      	bls.n	8101aa0 <autox+0x458>
 8101a80:	4b76      	ldr	r3, [pc, #472]	@ (8101c5c <autox+0x614>)
 8101a82:	781b      	ldrb	r3, [r3, #0]
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d00b      	beq.n	8101aa0 <autox+0x458>
		drawRect(560, 50, 220, 80, 1, red);
 8101a88:	4b75      	ldr	r3, [pc, #468]	@ (8101c60 <autox+0x618>)
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	9301      	str	r3, [sp, #4]
 8101a8e:	2301      	movs	r3, #1
 8101a90:	9300      	str	r3, [sp, #0]
 8101a92:	2350      	movs	r3, #80	@ 0x50
 8101a94:	22dc      	movs	r2, #220	@ 0xdc
 8101a96:	2132      	movs	r1, #50	@ 0x32
 8101a98:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8101a9c:	f7ff fa52 	bl	8100f44 <drawRect>
	}
	drawText(710, 50, 2, lightBlue, FT81x_OPT_RIGHTX, tmpVal);
 8101aa0:	4b70      	ldr	r3, [pc, #448]	@ (8101c64 <autox+0x61c>)
 8101aa2:	681a      	ldr	r2, [r3, #0]
 8101aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101aa8:	9301      	str	r3, [sp, #4]
 8101aaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101aae:	9300      	str	r3, [sp, #0]
 8101ab0:	4613      	mov	r3, r2
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	2132      	movs	r1, #50	@ 0x32
 8101ab6:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8101aba:	f7ff fba7 	bl	810120c <drawText>
	drawText(770,50,2,lightBlue,FT81x_OPT_RIGHTX, "C");
 8101abe:	4b69      	ldr	r3, [pc, #420]	@ (8101c64 <autox+0x61c>)
 8101ac0:	681b      	ldr	r3, [r3, #0]
 8101ac2:	4a69      	ldr	r2, [pc, #420]	@ (8101c68 <autox+0x620>)
 8101ac4:	9201      	str	r2, [sp, #4]
 8101ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101aca:	9200      	str	r2, [sp, #0]
 8101acc:	2202      	movs	r2, #2
 8101ace:	2132      	movs	r1, #50	@ 0x32
 8101ad0:	f240 3002 	movw	r0, #770	@ 0x302
 8101ad4:	f7ff fb9a 	bl	810120c <drawText>

	/* LAMBDA */
	char mixVal[6];
	sprintf(mixVal, "%f", mix*0.001);
 8101ad8:	4b64      	ldr	r3, [pc, #400]	@ (8101c6c <autox+0x624>)
 8101ada:	881b      	ldrh	r3, [r3, #0]
 8101adc:	4618      	mov	r0, r3
 8101ade:	f7fe fda9 	bl	8100634 <__aeabi_i2d>
 8101ae2:	a353      	add	r3, pc, #332	@ (adr r3, 8101c30 <autox+0x5e8>)
 8101ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ae8:	f7fe fe0e 	bl	8100708 <__aeabi_dmul>
 8101aec:	4602      	mov	r2, r0
 8101aee:	460b      	mov	r3, r1
 8101af0:	f107 001c 	add.w	r0, r7, #28
 8101af4:	495e      	ldr	r1, [pc, #376]	@ (8101c70 <autox+0x628>)
 8101af6:	f007 ffe7 	bl	8109ac8 <siprintf>
	mixVal[4] = '\0';
 8101afa:	2300      	movs	r3, #0
 8101afc:	f887 3020 	strb.w	r3, [r7, #32]
	drawText(770, 140, 2, green, FT81x_OPT_RIGHTX, mixVal);
 8101b00:	4b5c      	ldr	r3, [pc, #368]	@ (8101c74 <autox+0x62c>)
 8101b02:	681a      	ldr	r2, [r3, #0]
 8101b04:	f107 031c 	add.w	r3, r7, #28
 8101b08:	9301      	str	r3, [sp, #4]
 8101b0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101b0e:	9300      	str	r3, [sp, #0]
 8101b10:	4613      	mov	r3, r2
 8101b12:	2202      	movs	r2, #2
 8101b14:	218c      	movs	r1, #140	@ 0x8c
 8101b16:	f240 3002 	movw	r0, #770	@ 0x302
 8101b1a:	f7ff fb77 	bl	810120c <drawText>

	/* VOLTAGE */
	char voltageVal[6];
	sprintf(voltageVal, "%f", voltage*0.1);
 8101b1e:	4b56      	ldr	r3, [pc, #344]	@ (8101c78 <autox+0x630>)
 8101b20:	881b      	ldrh	r3, [r3, #0]
 8101b22:	4618      	mov	r0, r3
 8101b24:	f7fe fd86 	bl	8100634 <__aeabi_i2d>
 8101b28:	a343      	add	r3, pc, #268	@ (adr r3, 8101c38 <autox+0x5f0>)
 8101b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b2e:	f7fe fdeb 	bl	8100708 <__aeabi_dmul>
 8101b32:	4602      	mov	r2, r0
 8101b34:	460b      	mov	r3, r1
 8101b36:	f107 0014 	add.w	r0, r7, #20
 8101b3a:	494d      	ldr	r1, [pc, #308]	@ (8101c70 <autox+0x628>)
 8101b3c:	f007 ffc4 	bl	8109ac8 <siprintf>
	voltageVal[4] = '\0';
 8101b40:	2300      	movs	r3, #0
 8101b42:	763b      	strb	r3, [r7, #24]
	if (voltage < 120 && blinkActive) {
 8101b44:	4b4c      	ldr	r3, [pc, #304]	@ (8101c78 <autox+0x630>)
 8101b46:	881b      	ldrh	r3, [r3, #0]
 8101b48:	2b77      	cmp	r3, #119	@ 0x77
 8101b4a:	d80f      	bhi.n	8101b6c <autox+0x524>
 8101b4c:	4b43      	ldr	r3, [pc, #268]	@ (8101c5c <autox+0x614>)
 8101b4e:	781b      	ldrb	r3, [r3, #0]
 8101b50:	2b00      	cmp	r3, #0
 8101b52:	d00b      	beq.n	8101b6c <autox+0x524>
		drawRect(560, 230, 220, 80, 1, red);
 8101b54:	4b42      	ldr	r3, [pc, #264]	@ (8101c60 <autox+0x618>)
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	9301      	str	r3, [sp, #4]
 8101b5a:	2301      	movs	r3, #1
 8101b5c:	9300      	str	r3, [sp, #0]
 8101b5e:	2350      	movs	r3, #80	@ 0x50
 8101b60:	22dc      	movs	r2, #220	@ 0xdc
 8101b62:	21e6      	movs	r1, #230	@ 0xe6
 8101b64:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8101b68:	f7ff f9ec 	bl	8100f44 <drawRect>
	}
	drawText(710, 230, 2, yellow, FT81x_OPT_RIGHTX, voltageVal);
 8101b6c:	4b43      	ldr	r3, [pc, #268]	@ (8101c7c <autox+0x634>)
 8101b6e:	681a      	ldr	r2, [r3, #0]
 8101b70:	f107 0314 	add.w	r3, r7, #20
 8101b74:	9301      	str	r3, [sp, #4]
 8101b76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101b7a:	9300      	str	r3, [sp, #0]
 8101b7c:	4613      	mov	r3, r2
 8101b7e:	2202      	movs	r2, #2
 8101b80:	21e6      	movs	r1, #230	@ 0xe6
 8101b82:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8101b86:	f7ff fb41 	bl	810120c <drawText>
	drawText(770,230,2,yellow,FT81x_OPT_RIGHTX, "V");
 8101b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8101c7c <autox+0x634>)
 8101b8c:	681b      	ldr	r3, [r3, #0]
 8101b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8101c80 <autox+0x638>)
 8101b90:	9201      	str	r2, [sp, #4]
 8101b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101b96:	9200      	str	r2, [sp, #0]
 8101b98:	2202      	movs	r2, #2
 8101b9a:	21e6      	movs	r1, #230	@ 0xe6
 8101b9c:	f240 3002 	movw	r0, #770	@ 0x302
 8101ba0:	f7ff fb34 	bl	810120c <drawText>

	/* Shifting Pressure */
    char tmpShiftingPressure[6];
    float scaledPressure;
    scaledPressure = ((shiftingPressure*0.00122070312)-0.5)*1250*0.001;
 8101ba4:	4b37      	ldr	r3, [pc, #220]	@ (8101c84 <autox+0x63c>)
 8101ba6:	881b      	ldrh	r3, [r3, #0]
 8101ba8:	4618      	mov	r0, r3
 8101baa:	f7fe fd43 	bl	8100634 <__aeabi_i2d>
 8101bae:	a324      	add	r3, pc, #144	@ (adr r3, 8101c40 <autox+0x5f8>)
 8101bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bb4:	f7fe fda8 	bl	8100708 <__aeabi_dmul>
 8101bb8:	4602      	mov	r2, r0
 8101bba:	460b      	mov	r3, r1
 8101bbc:	4610      	mov	r0, r2
 8101bbe:	4619      	mov	r1, r3
 8101bc0:	f04f 0200 	mov.w	r2, #0
 8101bc4:	4b30      	ldr	r3, [pc, #192]	@ (8101c88 <autox+0x640>)
 8101bc6:	f7fe fbe7 	bl	8100398 <__aeabi_dsub>
 8101bca:	4602      	mov	r2, r0
 8101bcc:	460b      	mov	r3, r1
 8101bce:	4610      	mov	r0, r2
 8101bd0:	4619      	mov	r1, r3
 8101bd2:	a31d      	add	r3, pc, #116	@ (adr r3, 8101c48 <autox+0x600>)
 8101bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bd8:	f7fe fd96 	bl	8100708 <__aeabi_dmul>
 8101bdc:	4602      	mov	r2, r0
 8101bde:	460b      	mov	r3, r1
 8101be0:	4610      	mov	r0, r2
 8101be2:	4619      	mov	r1, r3
 8101be4:	a312      	add	r3, pc, #72	@ (adr r3, 8101c30 <autox+0x5e8>)
 8101be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bea:	f7fe fd8d 	bl	8100708 <__aeabi_dmul>
 8101bee:	4602      	mov	r2, r0
 8101bf0:	460b      	mov	r3, r1
 8101bf2:	4610      	mov	r0, r2
 8101bf4:	4619      	mov	r1, r3
 8101bf6:	f7ff f85f 	bl	8100cb8 <__aeabi_d2f>
 8101bfa:	4603      	mov	r3, r0
 8101bfc:	647b      	str	r3, [r7, #68]	@ 0x44
    scaledPressure = scaledPressure >= 5.0 ? 0.0 : scaledPressure;
 8101bfe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8101c02:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8101c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101c0e:	db02      	blt.n	8101c16 <autox+0x5ce>
 8101c10:	f04f 0300 	mov.w	r3, #0
 8101c14:	e000      	b.n	8101c18 <autox+0x5d0>
 8101c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101c18:	647b      	str	r3, [r7, #68]	@ 0x44
    scaledPressure = scaledPressure <= 0.0 ? 0.0 : scaledPressure;
 8101c1a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8101c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101c26:	d831      	bhi.n	8101c8c <autox+0x644>
 8101c28:	f04f 0300 	mov.w	r3, #0
 8101c2c:	e02f      	b.n	8101c8e <autox+0x646>
 8101c2e:	bf00      	nop
 8101c30:	d2f1a9fc 	.word	0xd2f1a9fc
 8101c34:	3f50624d 	.word	0x3f50624d
 8101c38:	9999999a 	.word	0x9999999a
 8101c3c:	3fb99999 	.word	0x3fb99999
 8101c40:	fea02802 	.word	0xfea02802
 8101c44:	3f53ffff 	.word	0x3f53ffff
 8101c48:	00000000 	.word	0x00000000
 8101c4c:	40938800 	.word	0x40938800
 8101c50:	1000001c 	.word	0x1000001c
 8101c54:	100003e0 	.word	0x100003e0
 8101c58:	0810bd38 	.word	0x0810bd38
 8101c5c:	10000226 	.word	0x10000226
 8101c60:	10000014 	.word	0x10000014
 8101c64:	10000008 	.word	0x10000008
 8101c68:	0810bd4c 	.word	0x0810bd4c
 8101c6c:	100003e2 	.word	0x100003e2
 8101c70:	0810bd50 	.word	0x0810bd50
 8101c74:	10000018 	.word	0x10000018
 8101c78:	100003ee 	.word	0x100003ee
 8101c7c:	10000010 	.word	0x10000010
 8101c80:	0810bd54 	.word	0x0810bd54
 8101c84:	100003f0 	.word	0x100003f0
 8101c88:	3fe00000 	.word	0x3fe00000
 8101c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101c8e:	647b      	str	r3, [r7, #68]	@ 0x44
    sprintf(tmpShiftingPressure, "%f", scaledPressure);
 8101c90:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8101c92:	f7fe fce1 	bl	8100658 <__aeabi_f2d>
 8101c96:	4602      	mov	r2, r0
 8101c98:	460b      	mov	r3, r1
 8101c9a:	f107 000c 	add.w	r0, r7, #12
 8101c9e:	49a8      	ldr	r1, [pc, #672]	@ (8101f40 <autox+0x8f8>)
 8101ca0:	f007 ff12 	bl	8109ac8 <siprintf>
    tmpShiftingPressure[3] = 'K';
 8101ca4:	234b      	movs	r3, #75	@ 0x4b
 8101ca6:	73fb      	strb	r3, [r7, #15]
    tmpShiftingPressure[4] = '\0';
 8101ca8:	2300      	movs	r3, #0
 8101caa:	743b      	strb	r3, [r7, #16]
    if (scaledPressure == 0.0) {
 8101cac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8101cb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8101cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101cb8:	d107      	bne.n	8101cca <autox+0x682>
    	tmpShiftingPressure[0] = 'N';
 8101cba:	234e      	movs	r3, #78	@ 0x4e
 8101cbc:	733b      	strb	r3, [r7, #12]
    	tmpShiftingPressure[1] = 'a';
 8101cbe:	2361      	movs	r3, #97	@ 0x61
 8101cc0:	737b      	strb	r3, [r7, #13]
    	tmpShiftingPressure[2] = 'N';
 8101cc2:	234e      	movs	r3, #78	@ 0x4e
 8101cc4:	73bb      	strb	r3, [r7, #14]
    	tmpShiftingPressure[3] = '\0';
 8101cc6:	2300      	movs	r3, #0
 8101cc8:	73fb      	strb	r3, [r7, #15]
    }
    if (scaledPressure <= 1.5 && scaledPressure > 1.0) {
 8101cca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8101cce:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8101cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101cda:	d816      	bhi.n	8101d0a <autox+0x6c2>
 8101cdc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8101ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101cec:	dd0d      	ble.n	8101d0a <autox+0x6c2>
		drawRect(10, 340, 270, 120, 1, yellow);
 8101cee:	4b95      	ldr	r3, [pc, #596]	@ (8101f44 <autox+0x8fc>)
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	9301      	str	r3, [sp, #4]
 8101cf4:	2301      	movs	r3, #1
 8101cf6:	9300      	str	r3, [sp, #0]
 8101cf8:	2378      	movs	r3, #120	@ 0x78
 8101cfa:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8101cfe:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8101d02:	200a      	movs	r0, #10
 8101d04:	f7ff f91e 	bl	8100f44 <drawRect>
 8101d08:	e019      	b.n	8101d3e <autox+0x6f6>
    } else if (scaledPressure <= 1.0 && blinkActive == 1) {
 8101d0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8101d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101d1a:	d810      	bhi.n	8101d3e <autox+0x6f6>
 8101d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8101f48 <autox+0x900>)
 8101d1e:	781b      	ldrb	r3, [r3, #0]
 8101d20:	2b01      	cmp	r3, #1
 8101d22:	d10c      	bne.n	8101d3e <autox+0x6f6>
    	drawRect(10, 340, 270, 120, 1, red);
 8101d24:	4b89      	ldr	r3, [pc, #548]	@ (8101f4c <autox+0x904>)
 8101d26:	681b      	ldr	r3, [r3, #0]
 8101d28:	9301      	str	r3, [sp, #4]
 8101d2a:	2301      	movs	r3, #1
 8101d2c:	9300      	str	r3, [sp, #0]
 8101d2e:	2378      	movs	r3, #120	@ 0x78
 8101d30:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8101d34:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8101d38:	200a      	movs	r0, #10
 8101d3a:	f7ff f903 	bl	8100f44 <drawRect>
    }
	drawRect(20,350,scaledPressure/5*250,40,1,lilac);
 8101d3e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8101d42:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8101d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101d4a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8101f50 <autox+0x908>
 8101d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d56:	ee17 3a90 	vmov	r3, s15
 8101d5a:	b29a      	uxth	r2, r3
 8101d5c:	4b7d      	ldr	r3, [pc, #500]	@ (8101f54 <autox+0x90c>)
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	9301      	str	r3, [sp, #4]
 8101d62:	2301      	movs	r3, #1
 8101d64:	9300      	str	r3, [sp, #0]
 8101d66:	2328      	movs	r3, #40	@ 0x28
 8101d68:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8101d6c:	2014      	movs	r0, #20
 8101d6e:	f7ff f8e9 	bl	8100f44 <drawRect>
	drawUnfilledRect(20,350,250,40,2,lilac);
 8101d72:	4b78      	ldr	r3, [pc, #480]	@ (8101f54 <autox+0x90c>)
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	9301      	str	r3, [sp, #4]
 8101d78:	2302      	movs	r3, #2
 8101d7a:	9300      	str	r3, [sp, #0]
 8101d7c:	2328      	movs	r3, #40	@ 0x28
 8101d7e:	22fa      	movs	r2, #250	@ 0xfa
 8101d80:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8101d84:	2014      	movs	r0, #20
 8101d86:	f7ff f981 	bl	810108c <drawUnfilledRect>
    drawText(130,405,31,lilac,FT81x_OPT_RIGHTX, "SHIFT");
 8101d8a:	4b72      	ldr	r3, [pc, #456]	@ (8101f54 <autox+0x90c>)
 8101d8c:	681b      	ldr	r3, [r3, #0]
 8101d8e:	4a72      	ldr	r2, [pc, #456]	@ (8101f58 <autox+0x910>)
 8101d90:	9201      	str	r2, [sp, #4]
 8101d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101d96:	9200      	str	r2, [sp, #0]
 8101d98:	221f      	movs	r2, #31
 8101d9a:	f240 1195 	movw	r1, #405	@ 0x195
 8101d9e:	2082      	movs	r0, #130	@ 0x82
 8101da0:	f7ff fa34 	bl	810120c <drawText>
    drawText(270,395,1,lilac,FT81x_OPT_RIGHTX, tmpShiftingPressure);
 8101da4:	4b6b      	ldr	r3, [pc, #428]	@ (8101f54 <autox+0x90c>)
 8101da6:	681a      	ldr	r2, [r3, #0]
 8101da8:	f107 030c 	add.w	r3, r7, #12
 8101dac:	9301      	str	r3, [sp, #4]
 8101dae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101db2:	9300      	str	r3, [sp, #0]
 8101db4:	4613      	mov	r3, r2
 8101db6:	2201      	movs	r2, #1
 8101db8:	f240 118b 	movw	r1, #395	@ 0x18b
 8101dbc:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8101dc0:	f7ff fa24 	bl	810120c <drawText>

	/* Fuel Used */
    char tmpFuelLeft[6];
    sprintf(tmpFuelLeft, "%f", (530 - fuelUsed) <= 0 ? 0.0 : (530-fuelUsed)*0.01);
 8101dc4:	4b65      	ldr	r3, [pc, #404]	@ (8101f5c <autox+0x914>)
 8101dc6:	881b      	ldrh	r3, [r3, #0]
 8101dc8:	f5c3 7304 	rsb	r3, r3, #528	@ 0x210
 8101dcc:	3302      	adds	r3, #2
 8101dce:	2b00      	cmp	r3, #0
 8101dd0:	dd0f      	ble.n	8101df2 <autox+0x7aa>
 8101dd2:	4b62      	ldr	r3, [pc, #392]	@ (8101f5c <autox+0x914>)
 8101dd4:	881b      	ldrh	r3, [r3, #0]
 8101dd6:	f5c3 7304 	rsb	r3, r3, #528	@ 0x210
 8101dda:	3302      	adds	r3, #2
 8101ddc:	4618      	mov	r0, r3
 8101dde:	f7fe fc29 	bl	8100634 <__aeabi_i2d>
 8101de2:	a355      	add	r3, pc, #340	@ (adr r3, 8101f38 <autox+0x8f0>)
 8101de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101de8:	f7fe fc8e 	bl	8100708 <__aeabi_dmul>
 8101dec:	4602      	mov	r2, r0
 8101dee:	460b      	mov	r3, r1
 8101df0:	e003      	b.n	8101dfa <autox+0x7b2>
 8101df2:	f04f 0200 	mov.w	r2, #0
 8101df6:	f04f 0300 	mov.w	r3, #0
 8101dfa:	1d38      	adds	r0, r7, #4
 8101dfc:	4950      	ldr	r1, [pc, #320]	@ (8101f40 <autox+0x8f8>)
 8101dfe:	f007 fe63 	bl	8109ac8 <siprintf>
    tmpFuelLeft[3] = 'L';
 8101e02:	234c      	movs	r3, #76	@ 0x4c
 8101e04:	71fb      	strb	r3, [r7, #7]
    tmpFuelLeft[4] = '\0';
 8101e06:	2300      	movs	r3, #0
 8101e08:	723b      	strb	r3, [r7, #8]
    if (fuelUsed >= 330 && fuelUsed < 430) {
 8101e0a:	4b54      	ldr	r3, [pc, #336]	@ (8101f5c <autox+0x914>)
 8101e0c:	881b      	ldrh	r3, [r3, #0]
 8101e0e:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8101e12:	d313      	bcc.n	8101e3c <autox+0x7f4>
 8101e14:	4b51      	ldr	r3, [pc, #324]	@ (8101f5c <autox+0x914>)
 8101e16:	881b      	ldrh	r3, [r3, #0]
 8101e18:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8101e1c:	d20e      	bcs.n	8101e3c <autox+0x7f4>
		drawRect(510, 340, 270, 120, 1, yellow);
 8101e1e:	4b49      	ldr	r3, [pc, #292]	@ (8101f44 <autox+0x8fc>)
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	9301      	str	r3, [sp, #4]
 8101e24:	2301      	movs	r3, #1
 8101e26:	9300      	str	r3, [sp, #0]
 8101e28:	2378      	movs	r3, #120	@ 0x78
 8101e2a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8101e2e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8101e32:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8101e36:	f7ff f885 	bl	8100f44 <drawRect>
 8101e3a:	e016      	b.n	8101e6a <autox+0x822>
    } else if (fuelUsed >= 430 && blinkActive == 1) {
 8101e3c:	4b47      	ldr	r3, [pc, #284]	@ (8101f5c <autox+0x914>)
 8101e3e:	881b      	ldrh	r3, [r3, #0]
 8101e40:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8101e44:	d311      	bcc.n	8101e6a <autox+0x822>
 8101e46:	4b40      	ldr	r3, [pc, #256]	@ (8101f48 <autox+0x900>)
 8101e48:	781b      	ldrb	r3, [r3, #0]
 8101e4a:	2b01      	cmp	r3, #1
 8101e4c:	d10d      	bne.n	8101e6a <autox+0x822>
    	drawRect(510, 340, 270, 120, 1, red);
 8101e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8101f4c <autox+0x904>)
 8101e50:	681b      	ldr	r3, [r3, #0]
 8101e52:	9301      	str	r3, [sp, #4]
 8101e54:	2301      	movs	r3, #1
 8101e56:	9300      	str	r3, [sp, #0]
 8101e58:	2378      	movs	r3, #120	@ 0x78
 8101e5a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8101e5e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8101e62:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8101e66:	f7ff f86d 	bl	8100f44 <drawRect>
    }
	//drawRect(520,350,(fuelUsed >= 530 ? 0 : ((530.0-(1.0*fuelUsed))/530.0))*250,40,1,lightBlue);
	drawUnfilledRect(520,350,250,40,2,lightBlue);
 8101e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8101f60 <autox+0x918>)
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	9301      	str	r3, [sp, #4]
 8101e70:	2302      	movs	r3, #2
 8101e72:	9300      	str	r3, [sp, #0]
 8101e74:	2328      	movs	r3, #40	@ 0x28
 8101e76:	22fa      	movs	r2, #250	@ 0xfa
 8101e78:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8101e7c:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8101e80:	f7ff f904 	bl	810108c <drawUnfilledRect>
    drawText(615,405,31,lightBlue,FT81x_OPT_RIGHTX, "FUEL");
 8101e84:	4b36      	ldr	r3, [pc, #216]	@ (8101f60 <autox+0x918>)
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	4a36      	ldr	r2, [pc, #216]	@ (8101f64 <autox+0x91c>)
 8101e8a:	9201      	str	r2, [sp, #4]
 8101e8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101e90:	9200      	str	r2, [sp, #0]
 8101e92:	221f      	movs	r2, #31
 8101e94:	f240 1195 	movw	r1, #405	@ 0x195
 8101e98:	f240 2067 	movw	r0, #615	@ 0x267
 8101e9c:	f7ff f9b6 	bl	810120c <drawText>
    drawText(770,395,1,lightBlue,FT81x_OPT_RIGHTX, tmpFuelLeft);
 8101ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8101f60 <autox+0x918>)
 8101ea2:	681a      	ldr	r2, [r3, #0]
 8101ea4:	1d3b      	adds	r3, r7, #4
 8101ea6:	9301      	str	r3, [sp, #4]
 8101ea8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101eac:	9300      	str	r3, [sp, #0]
 8101eae:	4613      	mov	r3, r2
 8101eb0:	2201      	movs	r2, #1
 8101eb2:	f240 118b 	movw	r1, #395	@ 0x18b
 8101eb6:	f240 3002 	movw	r0, #770	@ 0x302
 8101eba:	f7ff f9a7 	bl	810120c <drawText>

    //SD Warning
	if (!(sdInitialized && sdPresent)) {
 8101ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8101f68 <autox+0x920>)
 8101ec0:	781b      	ldrb	r3, [r3, #0]
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	d003      	beq.n	8101ece <autox+0x886>
 8101ec6:	4b29      	ldr	r3, [pc, #164]	@ (8101f6c <autox+0x924>)
 8101ec8:	781b      	ldrb	r3, [r3, #0]
 8101eca:	2b00      	cmp	r3, #0
 8101ecc:	d10e      	bne.n	8101eec <autox+0x8a4>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "NO SD");
 8101ece:	4b1f      	ldr	r3, [pc, #124]	@ (8101f4c <autox+0x904>)
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	4a27      	ldr	r2, [pc, #156]	@ (8101f70 <autox+0x928>)
 8101ed4:	9201      	str	r2, [sp, #4]
 8101ed6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8101eda:	9200      	str	r2, [sp, #0]
 8101edc:	2201      	movs	r2, #1
 8101ede:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8101ee2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8101ee6:	f7ff f991 	bl	810120c <drawText>
 8101eea:	e011      	b.n	8101f10 <autox+0x8c8>
	} else if (loggingStatus == 0) {
 8101eec:	4b21      	ldr	r3, [pc, #132]	@ (8101f74 <autox+0x92c>)
 8101eee:	781b      	ldrb	r3, [r3, #0]
 8101ef0:	2b00      	cmp	r3, #0
 8101ef2:	d10d      	bne.n	8101f10 <autox+0x8c8>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "LOG OFF");
 8101ef4:	4b15      	ldr	r3, [pc, #84]	@ (8101f4c <autox+0x904>)
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8101f78 <autox+0x930>)
 8101efa:	9201      	str	r2, [sp, #4]
 8101efc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8101f00:	9200      	str	r2, [sp, #0]
 8101f02:	2201      	movs	r2, #1
 8101f04:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8101f08:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8101f0c:	f7ff f97e 	bl	810120c <drawText>
	}

	drawText(400, 450, 31, white, FT81x_OPT_CENTER, "AUTOX");
 8101f10:	4b1a      	ldr	r3, [pc, #104]	@ (8101f7c <autox+0x934>)
 8101f12:	681b      	ldr	r3, [r3, #0]
 8101f14:	4a1a      	ldr	r2, [pc, #104]	@ (8101f80 <autox+0x938>)
 8101f16:	9201      	str	r2, [sp, #4]
 8101f18:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8101f1c:	9200      	str	r2, [sp, #0]
 8101f1e:	221f      	movs	r2, #31
 8101f20:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8101f24:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8101f28:	f7ff f970 	bl	810120c <drawText>

	swapScreen();
 8101f2c:	f7ff fa32 	bl	8101394 <swapScreen>
}
 8101f30:	bf00      	nop
 8101f32:	3748      	adds	r7, #72	@ 0x48
 8101f34:	46bd      	mov	sp, r7
 8101f36:	bd80      	pop	{r7, pc}
 8101f38:	47ae147b 	.word	0x47ae147b
 8101f3c:	3f847ae1 	.word	0x3f847ae1
 8101f40:	0810bd50 	.word	0x0810bd50
 8101f44:	10000010 	.word	0x10000010
 8101f48:	10000226 	.word	0x10000226
 8101f4c:	10000014 	.word	0x10000014
 8101f50:	437a0000 	.word	0x437a0000
 8101f54:	1000000c 	.word	0x1000000c
 8101f58:	0810bd58 	.word	0x0810bd58
 8101f5c:	100003ec 	.word	0x100003ec
 8101f60:	10000008 	.word	0x10000008
 8101f64:	0810bd60 	.word	0x0810bd60
 8101f68:	100003f3 	.word	0x100003f3
 8101f6c:	100003f4 	.word	0x100003f4
 8101f70:	0810bd68 	.word	0x0810bd68
 8101f74:	100003f7 	.word	0x100003f7
 8101f78:	0810bd70 	.word	0x0810bd70
 8101f7c:	10000020 	.word	0x10000020
 8101f80:	0810bd78 	.word	0x0810bd78
 8101f84:	00000000 	.word	0x00000000

08101f88 <skidpad>:

void skidpad() {
 8101f88:	b580      	push	{r7, lr}
 8101f8a:	b092      	sub	sp, #72	@ 0x48
 8101f8c:	af02      	add	r7, sp, #8

	blinkActive = (curTime & 0b1000000000000) == 0b1000000000000 ? 1 : 0;
 8101f8e:	4bad      	ldr	r3, [pc, #692]	@ (8102244 <skidpad+0x2bc>)
 8101f90:	881b      	ldrh	r3, [r3, #0]
 8101f92:	131b      	asrs	r3, r3, #12
 8101f94:	b2db      	uxtb	r3, r3
 8101f96:	f003 0301 	and.w	r3, r3, #1
 8101f9a:	b2da      	uxtb	r2, r3
 8101f9c:	4baa      	ldr	r3, [pc, #680]	@ (8102248 <skidpad+0x2c0>)
 8101f9e:	701a      	strb	r2, [r3, #0]

	beginDisplayList();
 8101fa0:	f7ff f9e8 	bl	8101374 <beginDisplayList>

	clear(black);
 8101fa4:	4ba9      	ldr	r3, [pc, #676]	@ (810224c <skidpad+0x2c4>)
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4618      	mov	r0, r3
 8101faa:	f7fe ffb5 	bl	8100f18 <clear>

	initBitmapHandleForFont(32, 1);
 8101fae:	2101      	movs	r1, #1
 8101fb0:	2020      	movs	r0, #32
 8101fb2:	f7ff fa39 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(33, 2);
 8101fb6:	2102      	movs	r1, #2
 8101fb8:	2021      	movs	r0, #33	@ 0x21
 8101fba:	f7ff fa35 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(34, 3);
 8101fbe:	2103      	movs	r1, #3
 8101fc0:	2022      	movs	r0, #34	@ 0x22
 8101fc2:	f7ff fa31 	bl	8101428 <initBitmapHandleForFont>

	/* Log Number */
	char logNumVal[6];
	sprintf(logNumVal, "%i", logNumber);
 8101fc6:	4ba2      	ldr	r3, [pc, #648]	@ (8102250 <skidpad+0x2c8>)
 8101fc8:	781b      	ldrb	r3, [r3, #0]
 8101fca:	461a      	mov	r2, r3
 8101fcc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101fd0:	49a0      	ldr	r1, [pc, #640]	@ (8102254 <skidpad+0x2cc>)
 8101fd2:	4618      	mov	r0, r3
 8101fd4:	f007 fd78 	bl	8109ac8 <siprintf>
	drawText(100, 30, 1, pink, FT81x_OPT_CENTER, logNumVal);
 8101fd8:	4b9f      	ldr	r3, [pc, #636]	@ (8102258 <skidpad+0x2d0>)
 8101fda:	681a      	ldr	r2, [r3, #0]
 8101fdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101fe0:	9301      	str	r3, [sp, #4]
 8101fe2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8101fe6:	9300      	str	r3, [sp, #0]
 8101fe8:	4613      	mov	r3, r2
 8101fea:	2201      	movs	r2, #1
 8101fec:	211e      	movs	r1, #30
 8101fee:	2064      	movs	r0, #100	@ 0x64
 8101ff0:	f7ff f90c 	bl	810120c <drawText>
	drawText(30,30,1,pink,FT81x_OPT_CENTER, "#");
 8101ff4:	4b98      	ldr	r3, [pc, #608]	@ (8102258 <skidpad+0x2d0>)
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	4a98      	ldr	r2, [pc, #608]	@ (810225c <skidpad+0x2d4>)
 8101ffa:	9201      	str	r2, [sp, #4]
 8101ffc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8102000:	9200      	str	r2, [sp, #0]
 8102002:	2201      	movs	r2, #1
 8102004:	211e      	movs	r1, #30
 8102006:	201e      	movs	r0, #30
 8102008:	f7ff f900 	bl	810120c <drawText>

	/* RPM */
	char rpmVal[6];
	rpm = rpm - (rpm % 100);
 810200c:	4b94      	ldr	r3, [pc, #592]	@ (8102260 <skidpad+0x2d8>)
 810200e:	881a      	ldrh	r2, [r3, #0]
 8102010:	4b93      	ldr	r3, [pc, #588]	@ (8102260 <skidpad+0x2d8>)
 8102012:	881b      	ldrh	r3, [r3, #0]
 8102014:	4993      	ldr	r1, [pc, #588]	@ (8102264 <skidpad+0x2dc>)
 8102016:	fba1 0103 	umull	r0, r1, r1, r3
 810201a:	0949      	lsrs	r1, r1, #5
 810201c:	2064      	movs	r0, #100	@ 0x64
 810201e:	fb00 f101 	mul.w	r1, r0, r1
 8102022:	1a5b      	subs	r3, r3, r1
 8102024:	b29b      	uxth	r3, r3
 8102026:	1ad3      	subs	r3, r2, r3
 8102028:	b29a      	uxth	r2, r3
 810202a:	4b8d      	ldr	r3, [pc, #564]	@ (8102260 <skidpad+0x2d8>)
 810202c:	801a      	strh	r2, [r3, #0]
	sprintf(rpmVal, "%i", rpm);
 810202e:	4b8c      	ldr	r3, [pc, #560]	@ (8102260 <skidpad+0x2d8>)
 8102030:	881b      	ldrh	r3, [r3, #0]
 8102032:	461a      	mov	r2, r3
 8102034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102038:	4986      	ldr	r1, [pc, #536]	@ (8102254 <skidpad+0x2cc>)
 810203a:	4618      	mov	r0, r3
 810203c:	f007 fd44 	bl	8109ac8 <siprintf>
	drawText(140, 150, 3, yellow, FT81x_OPT_CENTER, rpmVal);
 8102040:	4b89      	ldr	r3, [pc, #548]	@ (8102268 <skidpad+0x2e0>)
 8102042:	681a      	ldr	r2, [r3, #0]
 8102044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102048:	9301      	str	r3, [sp, #4]
 810204a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 810204e:	9300      	str	r3, [sp, #0]
 8102050:	4613      	mov	r3, r2
 8102052:	2203      	movs	r2, #3
 8102054:	2196      	movs	r1, #150	@ 0x96
 8102056:	208c      	movs	r0, #140	@ 0x8c
 8102058:	f7ff f8d8 	bl	810120c <drawText>
	drawText(140,230,2,yellow,FT81x_OPT_CENTER, "RPM");
 810205c:	4b82      	ldr	r3, [pc, #520]	@ (8102268 <skidpad+0x2e0>)
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	4a82      	ldr	r2, [pc, #520]	@ (810226c <skidpad+0x2e4>)
 8102062:	9201      	str	r2, [sp, #4]
 8102064:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8102068:	9200      	str	r2, [sp, #0]
 810206a:	2202      	movs	r2, #2
 810206c:	21e6      	movs	r1, #230	@ 0xe6
 810206e:	208c      	movs	r0, #140	@ 0x8c
 8102070:	f7ff f8cc 	bl	810120c <drawText>

	/* GEAR */
	switch (gear) {
 8102074:	4b7e      	ldr	r3, [pc, #504]	@ (8102270 <skidpad+0x2e8>)
 8102076:	881b      	ldrh	r3, [r3, #0]
 8102078:	2b05      	cmp	r3, #5
 810207a:	f200 8169 	bhi.w	8102350 <skidpad+0x3c8>
 810207e:	a201      	add	r2, pc, #4	@ (adr r2, 8102084 <skidpad+0xfc>)
 8102080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102084:	0810209d 	.word	0x0810209d
 8102088:	081020f3 	.word	0x081020f3
 810208c:	08102149 	.word	0x08102149
 8102090:	081021d3 	.word	0x081021d3
 8102094:	08102275 	.word	0x08102275
 8102098:	081022c7 	.word	0x081022c7
		case 0:
			drawLine(320, 300, 320, 80, 8, pink);
 810209c:	4b6e      	ldr	r3, [pc, #440]	@ (8102258 <skidpad+0x2d0>)
 810209e:	681b      	ldr	r3, [r3, #0]
 81020a0:	9301      	str	r3, [sp, #4]
 81020a2:	2308      	movs	r3, #8
 81020a4:	9300      	str	r3, [sp, #0]
 81020a6:	2350      	movs	r3, #80	@ 0x50
 81020a8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81020ac:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81020b0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81020b4:	f7fe ff9a 	bl	8100fec <drawLine>
			drawLine(320, 80, 480, 300, 8, pink);
 81020b8:	4b67      	ldr	r3, [pc, #412]	@ (8102258 <skidpad+0x2d0>)
 81020ba:	681b      	ldr	r3, [r3, #0]
 81020bc:	9301      	str	r3, [sp, #4]
 81020be:	2308      	movs	r3, #8
 81020c0:	9300      	str	r3, [sp, #0]
 81020c2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81020c6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81020ca:	2150      	movs	r1, #80	@ 0x50
 81020cc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81020d0:	f7fe ff8c 	bl	8100fec <drawLine>
			drawLine(480, 300, 480, 80, 8, pink);
 81020d4:	4b60      	ldr	r3, [pc, #384]	@ (8102258 <skidpad+0x2d0>)
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	9301      	str	r3, [sp, #4]
 81020da:	2308      	movs	r3, #8
 81020dc:	9300      	str	r3, [sp, #0]
 81020de:	2350      	movs	r3, #80	@ 0x50
 81020e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81020e4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81020e8:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 81020ec:	f7fe ff7e 	bl	8100fec <drawLine>
			break;
 81020f0:	e12e      	b.n	8102350 <skidpad+0x3c8>

		case 1:
			drawLine(400, 300, 400, 80, 8, pink);
 81020f2:	4b59      	ldr	r3, [pc, #356]	@ (8102258 <skidpad+0x2d0>)
 81020f4:	681b      	ldr	r3, [r3, #0]
 81020f6:	9301      	str	r3, [sp, #4]
 81020f8:	2308      	movs	r3, #8
 81020fa:	9300      	str	r3, [sp, #0]
 81020fc:	2350      	movs	r3, #80	@ 0x50
 81020fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8102102:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102106:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 810210a:	f7fe ff6f 	bl	8100fec <drawLine>
			drawLine(400, 80, 350, 110, 8, pink);
 810210e:	4b52      	ldr	r3, [pc, #328]	@ (8102258 <skidpad+0x2d0>)
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	9301      	str	r3, [sp, #4]
 8102114:	2308      	movs	r3, #8
 8102116:	9300      	str	r3, [sp, #0]
 8102118:	236e      	movs	r3, #110	@ 0x6e
 810211a:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 810211e:	2150      	movs	r1, #80	@ 0x50
 8102120:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8102124:	f7fe ff62 	bl	8100fec <drawLine>
			drawLine(340, 300, 460, 300, 8, pink);
 8102128:	4b4b      	ldr	r3, [pc, #300]	@ (8102258 <skidpad+0x2d0>)
 810212a:	681b      	ldr	r3, [r3, #0]
 810212c:	9301      	str	r3, [sp, #4]
 810212e:	2308      	movs	r3, #8
 8102130:	9300      	str	r3, [sp, #0]
 8102132:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102136:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 810213a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 810213e:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8102142:	f7fe ff53 	bl	8100fec <drawLine>
			break;
 8102146:	e103      	b.n	8102350 <skidpad+0x3c8>

		case 2:
			drawLine(320, 80, 480, 80, 8, pink);
 8102148:	4b43      	ldr	r3, [pc, #268]	@ (8102258 <skidpad+0x2d0>)
 810214a:	681b      	ldr	r3, [r3, #0]
 810214c:	9301      	str	r3, [sp, #4]
 810214e:	2308      	movs	r3, #8
 8102150:	9300      	str	r3, [sp, #0]
 8102152:	2350      	movs	r3, #80	@ 0x50
 8102154:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102158:	2150      	movs	r1, #80	@ 0x50
 810215a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810215e:	f7fe ff45 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 190, 8, pink);
 8102162:	4b3d      	ldr	r3, [pc, #244]	@ (8102258 <skidpad+0x2d0>)
 8102164:	681b      	ldr	r3, [r3, #0]
 8102166:	9301      	str	r3, [sp, #4]
 8102168:	2308      	movs	r3, #8
 810216a:	9300      	str	r3, [sp, #0]
 810216c:	23be      	movs	r3, #190	@ 0xbe
 810216e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102172:	2150      	movs	r1, #80	@ 0x50
 8102174:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8102178:	f7fe ff38 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 810217c:	4b36      	ldr	r3, [pc, #216]	@ (8102258 <skidpad+0x2d0>)
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	9301      	str	r3, [sp, #4]
 8102182:	2308      	movs	r3, #8
 8102184:	9300      	str	r3, [sp, #0]
 8102186:	23be      	movs	r3, #190	@ 0xbe
 8102188:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810218c:	21be      	movs	r1, #190	@ 0xbe
 810218e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102192:	f7fe ff2b 	bl	8100fec <drawLine>
			drawLine(320, 190, 320, 300, 8, pink);
 8102196:	4b30      	ldr	r3, [pc, #192]	@ (8102258 <skidpad+0x2d0>)
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	9301      	str	r3, [sp, #4]
 810219c:	2308      	movs	r3, #8
 810219e:	9300      	str	r3, [sp, #0]
 81021a0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81021a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81021a8:	21be      	movs	r1, #190	@ 0xbe
 81021aa:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81021ae:	f7fe ff1d 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 81021b2:	4b29      	ldr	r3, [pc, #164]	@ (8102258 <skidpad+0x2d0>)
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	9301      	str	r3, [sp, #4]
 81021b8:	2308      	movs	r3, #8
 81021ba:	9300      	str	r3, [sp, #0]
 81021bc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81021c0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81021c4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81021c8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81021cc:	f7fe ff0e 	bl	8100fec <drawLine>
			break;
 81021d0:	e0be      	b.n	8102350 <skidpad+0x3c8>

		case 3:
			drawLine(320, 80, 480, 80, 8, pink);
 81021d2:	4b21      	ldr	r3, [pc, #132]	@ (8102258 <skidpad+0x2d0>)
 81021d4:	681b      	ldr	r3, [r3, #0]
 81021d6:	9301      	str	r3, [sp, #4]
 81021d8:	2308      	movs	r3, #8
 81021da:	9300      	str	r3, [sp, #0]
 81021dc:	2350      	movs	r3, #80	@ 0x50
 81021de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81021e2:	2150      	movs	r1, #80	@ 0x50
 81021e4:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81021e8:	f7fe ff00 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 300, 8, pink);
 81021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8102258 <skidpad+0x2d0>)
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	9301      	str	r3, [sp, #4]
 81021f2:	2308      	movs	r3, #8
 81021f4:	9300      	str	r3, [sp, #0]
 81021f6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81021fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81021fe:	2150      	movs	r1, #80	@ 0x50
 8102200:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8102204:	f7fe fef2 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8102208:	4b13      	ldr	r3, [pc, #76]	@ (8102258 <skidpad+0x2d0>)
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	9301      	str	r3, [sp, #4]
 810220e:	2308      	movs	r3, #8
 8102210:	9300      	str	r3, [sp, #0]
 8102212:	23be      	movs	r3, #190	@ 0xbe
 8102214:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102218:	21be      	movs	r1, #190	@ 0xbe
 810221a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810221e:	f7fe fee5 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 8102222:	4b0d      	ldr	r3, [pc, #52]	@ (8102258 <skidpad+0x2d0>)
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	9301      	str	r3, [sp, #4]
 8102228:	2308      	movs	r3, #8
 810222a:	9300      	str	r3, [sp, #0]
 810222c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102230:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102234:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102238:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810223c:	f7fe fed6 	bl	8100fec <drawLine>
			break;
 8102240:	e086      	b.n	8102350 <skidpad+0x3c8>
 8102242:	bf00      	nop
 8102244:	10000224 	.word	0x10000224
 8102248:	10000226 	.word	0x10000226
 810224c:	10000220 	.word	0x10000220
 8102250:	100003f8 	.word	0x100003f8
 8102254:	0810bd38 	.word	0x0810bd38
 8102258:	1000001c 	.word	0x1000001c
 810225c:	0810bd3c 	.word	0x0810bd3c
 8102260:	100003ea 	.word	0x100003ea
 8102264:	51eb851f 	.word	0x51eb851f
 8102268:	10000010 	.word	0x10000010
 810226c:	0810bd48 	.word	0x0810bd48
 8102270:	100003e4 	.word	0x100003e4

		case 4:
			drawLine(420, 300, 420, 80, 8, pink);
 8102274:	4bb2      	ldr	r3, [pc, #712]	@ (8102540 <skidpad+0x5b8>)
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	9301      	str	r3, [sp, #4]
 810227a:	2308      	movs	r3, #8
 810227c:	9300      	str	r3, [sp, #0]
 810227e:	2350      	movs	r3, #80	@ 0x50
 8102280:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8102284:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102288:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 810228c:	f7fe feae 	bl	8100fec <drawLine>
			drawLine(420, 80, 320, 230, 8, pink);
 8102290:	4bab      	ldr	r3, [pc, #684]	@ (8102540 <skidpad+0x5b8>)
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	9301      	str	r3, [sp, #4]
 8102296:	2308      	movs	r3, #8
 8102298:	9300      	str	r3, [sp, #0]
 810229a:	23e6      	movs	r3, #230	@ 0xe6
 810229c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81022a0:	2150      	movs	r1, #80	@ 0x50
 81022a2:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 81022a6:	f7fe fea1 	bl	8100fec <drawLine>
			drawLine(320, 230, 450, 230, 8, pink);
 81022aa:	4ba5      	ldr	r3, [pc, #660]	@ (8102540 <skidpad+0x5b8>)
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	9301      	str	r3, [sp, #4]
 81022b0:	2308      	movs	r3, #8
 81022b2:	9300      	str	r3, [sp, #0]
 81022b4:	23e6      	movs	r3, #230	@ 0xe6
 81022b6:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 81022ba:	21e6      	movs	r1, #230	@ 0xe6
 81022bc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81022c0:	f7fe fe94 	bl	8100fec <drawLine>
			break;
 81022c4:	e044      	b.n	8102350 <skidpad+0x3c8>

		case 5:
			drawLine(320, 80, 480, 80, 8, pink);
 81022c6:	4b9e      	ldr	r3, [pc, #632]	@ (8102540 <skidpad+0x5b8>)
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	9301      	str	r3, [sp, #4]
 81022cc:	2308      	movs	r3, #8
 81022ce:	9300      	str	r3, [sp, #0]
 81022d0:	2350      	movs	r3, #80	@ 0x50
 81022d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81022d6:	2150      	movs	r1, #80	@ 0x50
 81022d8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81022dc:	f7fe fe86 	bl	8100fec <drawLine>
			drawLine(320, 80, 320, 190, 8, pink);
 81022e0:	4b97      	ldr	r3, [pc, #604]	@ (8102540 <skidpad+0x5b8>)
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	9301      	str	r3, [sp, #4]
 81022e6:	2308      	movs	r3, #8
 81022e8:	9300      	str	r3, [sp, #0]
 81022ea:	23be      	movs	r3, #190	@ 0xbe
 81022ec:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81022f0:	2150      	movs	r1, #80	@ 0x50
 81022f2:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81022f6:	f7fe fe79 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 81022fa:	4b91      	ldr	r3, [pc, #580]	@ (8102540 <skidpad+0x5b8>)
 81022fc:	681b      	ldr	r3, [r3, #0]
 81022fe:	9301      	str	r3, [sp, #4]
 8102300:	2308      	movs	r3, #8
 8102302:	9300      	str	r3, [sp, #0]
 8102304:	23be      	movs	r3, #190	@ 0xbe
 8102306:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810230a:	21be      	movs	r1, #190	@ 0xbe
 810230c:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102310:	f7fe fe6c 	bl	8100fec <drawLine>
			drawLine(480, 190, 480, 300, 8, pink);
 8102314:	4b8a      	ldr	r3, [pc, #552]	@ (8102540 <skidpad+0x5b8>)
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	9301      	str	r3, [sp, #4]
 810231a:	2308      	movs	r3, #8
 810231c:	9300      	str	r3, [sp, #0]
 810231e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102322:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102326:	21be      	movs	r1, #190	@ 0xbe
 8102328:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 810232c:	f7fe fe5e 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 8102330:	4b83      	ldr	r3, [pc, #524]	@ (8102540 <skidpad+0x5b8>)
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	9301      	str	r3, [sp, #4]
 8102336:	2308      	movs	r3, #8
 8102338:	9300      	str	r3, [sp, #0]
 810233a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 810233e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102342:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102346:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810234a:	f7fe fe4f 	bl	8100fec <drawLine>
			break;
 810234e:	bf00      	nop
	}

	/* WTEMP */
	char tmpVal[6];
	sprintf(tmpVal, "%i", wtemp - 40);
 8102350:	4b7c      	ldr	r3, [pc, #496]	@ (8102544 <skidpad+0x5bc>)
 8102352:	881b      	ldrh	r3, [r3, #0]
 8102354:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8102358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810235c:	497a      	ldr	r1, [pc, #488]	@ (8102548 <skidpad+0x5c0>)
 810235e:	4618      	mov	r0, r3
 8102360:	f007 fbb2 	bl	8109ac8 <siprintf>
	if (wtemp >= 145 && blinkActive) {
 8102364:	4b77      	ldr	r3, [pc, #476]	@ (8102544 <skidpad+0x5bc>)
 8102366:	881b      	ldrh	r3, [r3, #0]
 8102368:	2b90      	cmp	r3, #144	@ 0x90
 810236a:	d90f      	bls.n	810238c <skidpad+0x404>
 810236c:	4b77      	ldr	r3, [pc, #476]	@ (810254c <skidpad+0x5c4>)
 810236e:	781b      	ldrb	r3, [r3, #0]
 8102370:	2b00      	cmp	r3, #0
 8102372:	d00b      	beq.n	810238c <skidpad+0x404>
		drawRect(560, 50, 220, 80, 1, red);
 8102374:	4b76      	ldr	r3, [pc, #472]	@ (8102550 <skidpad+0x5c8>)
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	9301      	str	r3, [sp, #4]
 810237a:	2301      	movs	r3, #1
 810237c:	9300      	str	r3, [sp, #0]
 810237e:	2350      	movs	r3, #80	@ 0x50
 8102380:	22dc      	movs	r2, #220	@ 0xdc
 8102382:	2132      	movs	r1, #50	@ 0x32
 8102384:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8102388:	f7fe fddc 	bl	8100f44 <drawRect>
	}
	drawText(710, 50, 2, lightBlue, FT81x_OPT_RIGHTX, tmpVal);
 810238c:	4b71      	ldr	r3, [pc, #452]	@ (8102554 <skidpad+0x5cc>)
 810238e:	681a      	ldr	r2, [r3, #0]
 8102390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102394:	9301      	str	r3, [sp, #4]
 8102396:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810239a:	9300      	str	r3, [sp, #0]
 810239c:	4613      	mov	r3, r2
 810239e:	2202      	movs	r2, #2
 81023a0:	2132      	movs	r1, #50	@ 0x32
 81023a2:	f240 20c6 	movw	r0, #710	@ 0x2c6
 81023a6:	f7fe ff31 	bl	810120c <drawText>
	drawText(770,50,2,lightBlue,FT81x_OPT_RIGHTX, "C");
 81023aa:	4b6a      	ldr	r3, [pc, #424]	@ (8102554 <skidpad+0x5cc>)
 81023ac:	681b      	ldr	r3, [r3, #0]
 81023ae:	4a6a      	ldr	r2, [pc, #424]	@ (8102558 <skidpad+0x5d0>)
 81023b0:	9201      	str	r2, [sp, #4]
 81023b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81023b6:	9200      	str	r2, [sp, #0]
 81023b8:	2202      	movs	r2, #2
 81023ba:	2132      	movs	r1, #50	@ 0x32
 81023bc:	f240 3002 	movw	r0, #770	@ 0x302
 81023c0:	f7fe ff24 	bl	810120c <drawText>

	/* LAMBDA */
	char mixVal[6];
	sprintf(mixVal, "%f", mix*0.001);
 81023c4:	4b65      	ldr	r3, [pc, #404]	@ (810255c <skidpad+0x5d4>)
 81023c6:	881b      	ldrh	r3, [r3, #0]
 81023c8:	4618      	mov	r0, r3
 81023ca:	f7fe f933 	bl	8100634 <__aeabi_i2d>
 81023ce:	a354      	add	r3, pc, #336	@ (adr r3, 8102520 <skidpad+0x598>)
 81023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023d4:	f7fe f998 	bl	8100708 <__aeabi_dmul>
 81023d8:	4602      	mov	r2, r0
 81023da:	460b      	mov	r3, r1
 81023dc:	f107 001c 	add.w	r0, r7, #28
 81023e0:	495f      	ldr	r1, [pc, #380]	@ (8102560 <skidpad+0x5d8>)
 81023e2:	f007 fb71 	bl	8109ac8 <siprintf>
	mixVal[4] = '\0';
 81023e6:	2300      	movs	r3, #0
 81023e8:	f887 3020 	strb.w	r3, [r7, #32]
	drawText(770, 140, 2, green, FT81x_OPT_RIGHTX, mixVal);
 81023ec:	4b5d      	ldr	r3, [pc, #372]	@ (8102564 <skidpad+0x5dc>)
 81023ee:	681a      	ldr	r2, [r3, #0]
 81023f0:	f107 031c 	add.w	r3, r7, #28
 81023f4:	9301      	str	r3, [sp, #4]
 81023f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81023fa:	9300      	str	r3, [sp, #0]
 81023fc:	4613      	mov	r3, r2
 81023fe:	2202      	movs	r2, #2
 8102400:	218c      	movs	r1, #140	@ 0x8c
 8102402:	f240 3002 	movw	r0, #770	@ 0x302
 8102406:	f7fe ff01 	bl	810120c <drawText>

	/* VOLTAGE */
	char voltageVal[6];
	sprintf(voltageVal, "%f", voltage*0.1);
 810240a:	4b57      	ldr	r3, [pc, #348]	@ (8102568 <skidpad+0x5e0>)
 810240c:	881b      	ldrh	r3, [r3, #0]
 810240e:	4618      	mov	r0, r3
 8102410:	f7fe f910 	bl	8100634 <__aeabi_i2d>
 8102414:	a344      	add	r3, pc, #272	@ (adr r3, 8102528 <skidpad+0x5a0>)
 8102416:	e9d3 2300 	ldrd	r2, r3, [r3]
 810241a:	f7fe f975 	bl	8100708 <__aeabi_dmul>
 810241e:	4602      	mov	r2, r0
 8102420:	460b      	mov	r3, r1
 8102422:	f107 0014 	add.w	r0, r7, #20
 8102426:	494e      	ldr	r1, [pc, #312]	@ (8102560 <skidpad+0x5d8>)
 8102428:	f007 fb4e 	bl	8109ac8 <siprintf>
	voltageVal[4] = '\0';
 810242c:	2300      	movs	r3, #0
 810242e:	763b      	strb	r3, [r7, #24]
	if (voltage < 120 && blinkActive) {
 8102430:	4b4d      	ldr	r3, [pc, #308]	@ (8102568 <skidpad+0x5e0>)
 8102432:	881b      	ldrh	r3, [r3, #0]
 8102434:	2b77      	cmp	r3, #119	@ 0x77
 8102436:	d80f      	bhi.n	8102458 <skidpad+0x4d0>
 8102438:	4b44      	ldr	r3, [pc, #272]	@ (810254c <skidpad+0x5c4>)
 810243a:	781b      	ldrb	r3, [r3, #0]
 810243c:	2b00      	cmp	r3, #0
 810243e:	d00b      	beq.n	8102458 <skidpad+0x4d0>
		drawRect(560, 230, 220, 80, 1, red);
 8102440:	4b43      	ldr	r3, [pc, #268]	@ (8102550 <skidpad+0x5c8>)
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	9301      	str	r3, [sp, #4]
 8102446:	2301      	movs	r3, #1
 8102448:	9300      	str	r3, [sp, #0]
 810244a:	2350      	movs	r3, #80	@ 0x50
 810244c:	22dc      	movs	r2, #220	@ 0xdc
 810244e:	21e6      	movs	r1, #230	@ 0xe6
 8102450:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8102454:	f7fe fd76 	bl	8100f44 <drawRect>
	}
	drawText(710, 230, 2, yellow, FT81x_OPT_RIGHTX, voltageVal);
 8102458:	4b44      	ldr	r3, [pc, #272]	@ (810256c <skidpad+0x5e4>)
 810245a:	681a      	ldr	r2, [r3, #0]
 810245c:	f107 0314 	add.w	r3, r7, #20
 8102460:	9301      	str	r3, [sp, #4]
 8102462:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102466:	9300      	str	r3, [sp, #0]
 8102468:	4613      	mov	r3, r2
 810246a:	2202      	movs	r2, #2
 810246c:	21e6      	movs	r1, #230	@ 0xe6
 810246e:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8102472:	f7fe fecb 	bl	810120c <drawText>
	drawText(770,230,2,yellow,FT81x_OPT_RIGHTX, "V");
 8102476:	4b3d      	ldr	r3, [pc, #244]	@ (810256c <skidpad+0x5e4>)
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	4a3d      	ldr	r2, [pc, #244]	@ (8102570 <skidpad+0x5e8>)
 810247c:	9201      	str	r2, [sp, #4]
 810247e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102482:	9200      	str	r2, [sp, #0]
 8102484:	2202      	movs	r2, #2
 8102486:	21e6      	movs	r1, #230	@ 0xe6
 8102488:	f240 3002 	movw	r0, #770	@ 0x302
 810248c:	f7fe febe 	bl	810120c <drawText>

	/* Shifting Pressure */
    char tmpShiftingPressure[6];
    float scaledPressure;
    scaledPressure = ((shiftingPressure*0.00122070312)-0.5)*1250*0.001;
 8102490:	4b38      	ldr	r3, [pc, #224]	@ (8102574 <skidpad+0x5ec>)
 8102492:	881b      	ldrh	r3, [r3, #0]
 8102494:	4618      	mov	r0, r3
 8102496:	f7fe f8cd 	bl	8100634 <__aeabi_i2d>
 810249a:	a325      	add	r3, pc, #148	@ (adr r3, 8102530 <skidpad+0x5a8>)
 810249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024a0:	f7fe f932 	bl	8100708 <__aeabi_dmul>
 81024a4:	4602      	mov	r2, r0
 81024a6:	460b      	mov	r3, r1
 81024a8:	4610      	mov	r0, r2
 81024aa:	4619      	mov	r1, r3
 81024ac:	f04f 0200 	mov.w	r2, #0
 81024b0:	4b31      	ldr	r3, [pc, #196]	@ (8102578 <skidpad+0x5f0>)
 81024b2:	f7fd ff71 	bl	8100398 <__aeabi_dsub>
 81024b6:	4602      	mov	r2, r0
 81024b8:	460b      	mov	r3, r1
 81024ba:	4610      	mov	r0, r2
 81024bc:	4619      	mov	r1, r3
 81024be:	a31e      	add	r3, pc, #120	@ (adr r3, 8102538 <skidpad+0x5b0>)
 81024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024c4:	f7fe f920 	bl	8100708 <__aeabi_dmul>
 81024c8:	4602      	mov	r2, r0
 81024ca:	460b      	mov	r3, r1
 81024cc:	4610      	mov	r0, r2
 81024ce:	4619      	mov	r1, r3
 81024d0:	a313      	add	r3, pc, #76	@ (adr r3, 8102520 <skidpad+0x598>)
 81024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024d6:	f7fe f917 	bl	8100708 <__aeabi_dmul>
 81024da:	4602      	mov	r2, r0
 81024dc:	460b      	mov	r3, r1
 81024de:	4610      	mov	r0, r2
 81024e0:	4619      	mov	r1, r3
 81024e2:	f7fe fbe9 	bl	8100cb8 <__aeabi_d2f>
 81024e6:	4603      	mov	r3, r0
 81024e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    scaledPressure = scaledPressure >= 5.0 ? 0.0 : scaledPressure;
 81024ea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 81024ee:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 81024f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81024fa:	db02      	blt.n	8102502 <skidpad+0x57a>
 81024fc:	f04f 0300 	mov.w	r3, #0
 8102500:	e000      	b.n	8102504 <skidpad+0x57c>
 8102502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    scaledPressure = scaledPressure <= 0.0 ? 0.0 : scaledPressure;
 8102506:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 810250a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102512:	d833      	bhi.n	810257c <skidpad+0x5f4>
 8102514:	f04f 0300 	mov.w	r3, #0
 8102518:	e031      	b.n	810257e <skidpad+0x5f6>
 810251a:	bf00      	nop
 810251c:	f3af 8000 	nop.w
 8102520:	d2f1a9fc 	.word	0xd2f1a9fc
 8102524:	3f50624d 	.word	0x3f50624d
 8102528:	9999999a 	.word	0x9999999a
 810252c:	3fb99999 	.word	0x3fb99999
 8102530:	fea02802 	.word	0xfea02802
 8102534:	3f53ffff 	.word	0x3f53ffff
 8102538:	00000000 	.word	0x00000000
 810253c:	40938800 	.word	0x40938800
 8102540:	1000001c 	.word	0x1000001c
 8102544:	100003e0 	.word	0x100003e0
 8102548:	0810bd38 	.word	0x0810bd38
 810254c:	10000226 	.word	0x10000226
 8102550:	10000014 	.word	0x10000014
 8102554:	10000008 	.word	0x10000008
 8102558:	0810bd4c 	.word	0x0810bd4c
 810255c:	100003e2 	.word	0x100003e2
 8102560:	0810bd50 	.word	0x0810bd50
 8102564:	10000018 	.word	0x10000018
 8102568:	100003ee 	.word	0x100003ee
 810256c:	10000010 	.word	0x10000010
 8102570:	0810bd54 	.word	0x0810bd54
 8102574:	100003f0 	.word	0x100003f0
 8102578:	3fe00000 	.word	0x3fe00000
 810257c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sprintf(tmpShiftingPressure, "%f", scaledPressure);
 8102580:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8102582:	f7fe f869 	bl	8100658 <__aeabi_f2d>
 8102586:	4602      	mov	r2, r0
 8102588:	460b      	mov	r3, r1
 810258a:	f107 000c 	add.w	r0, r7, #12
 810258e:	49a8      	ldr	r1, [pc, #672]	@ (8102830 <skidpad+0x8a8>)
 8102590:	f007 fa9a 	bl	8109ac8 <siprintf>
    tmpShiftingPressure[3] = 'K';
 8102594:	234b      	movs	r3, #75	@ 0x4b
 8102596:	73fb      	strb	r3, [r7, #15]
    tmpShiftingPressure[4] = '\0';
 8102598:	2300      	movs	r3, #0
 810259a:	743b      	strb	r3, [r7, #16]
    if (scaledPressure == 0.0) {
 810259c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 81025a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 81025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025a8:	d107      	bne.n	81025ba <skidpad+0x632>
    	tmpShiftingPressure[0] = 'N';
 81025aa:	234e      	movs	r3, #78	@ 0x4e
 81025ac:	733b      	strb	r3, [r7, #12]
    	tmpShiftingPressure[1] = 'a';
 81025ae:	2361      	movs	r3, #97	@ 0x61
 81025b0:	737b      	strb	r3, [r7, #13]
    	tmpShiftingPressure[2] = 'N';
 81025b2:	234e      	movs	r3, #78	@ 0x4e
 81025b4:	73bb      	strb	r3, [r7, #14]
    	tmpShiftingPressure[3] = '\0';
 81025b6:	2300      	movs	r3, #0
 81025b8:	73fb      	strb	r3, [r7, #15]
    }
    if (scaledPressure <= 1.5 && scaledPressure > 1.0) {
 81025ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 81025be:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 81025c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025ca:	d816      	bhi.n	81025fa <skidpad+0x672>
 81025cc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 81025d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81025d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 81025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025dc:	dd0d      	ble.n	81025fa <skidpad+0x672>
		drawRect(10, 340, 270, 120, 1, yellow);
 81025de:	4b95      	ldr	r3, [pc, #596]	@ (8102834 <skidpad+0x8ac>)
 81025e0:	681b      	ldr	r3, [r3, #0]
 81025e2:	9301      	str	r3, [sp, #4]
 81025e4:	2301      	movs	r3, #1
 81025e6:	9300      	str	r3, [sp, #0]
 81025e8:	2378      	movs	r3, #120	@ 0x78
 81025ea:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 81025ee:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 81025f2:	200a      	movs	r0, #10
 81025f4:	f7fe fca6 	bl	8100f44 <drawRect>
 81025f8:	e019      	b.n	810262e <skidpad+0x6a6>
    } else if (scaledPressure <= 1.0 && blinkActive == 1) {
 81025fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 81025fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810260a:	d810      	bhi.n	810262e <skidpad+0x6a6>
 810260c:	4b8a      	ldr	r3, [pc, #552]	@ (8102838 <skidpad+0x8b0>)
 810260e:	781b      	ldrb	r3, [r3, #0]
 8102610:	2b01      	cmp	r3, #1
 8102612:	d10c      	bne.n	810262e <skidpad+0x6a6>
    	drawRect(10, 340, 270, 120, 1, red);
 8102614:	4b89      	ldr	r3, [pc, #548]	@ (810283c <skidpad+0x8b4>)
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	9301      	str	r3, [sp, #4]
 810261a:	2301      	movs	r3, #1
 810261c:	9300      	str	r3, [sp, #0]
 810261e:	2378      	movs	r3, #120	@ 0x78
 8102620:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8102624:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8102628:	200a      	movs	r0, #10
 810262a:	f7fe fc8b 	bl	8100f44 <drawRect>
    }
	drawRect(20,350,scaledPressure/5*250,40,1,lilac);
 810262e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8102632:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8102636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810263a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8102840 <skidpad+0x8b8>
 810263e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102646:	ee17 3a90 	vmov	r3, s15
 810264a:	b29a      	uxth	r2, r3
 810264c:	4b7d      	ldr	r3, [pc, #500]	@ (8102844 <skidpad+0x8bc>)
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	9301      	str	r3, [sp, #4]
 8102652:	2301      	movs	r3, #1
 8102654:	9300      	str	r3, [sp, #0]
 8102656:	2328      	movs	r3, #40	@ 0x28
 8102658:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 810265c:	2014      	movs	r0, #20
 810265e:	f7fe fc71 	bl	8100f44 <drawRect>
	drawUnfilledRect(20,350,250,40,2,lilac);
 8102662:	4b78      	ldr	r3, [pc, #480]	@ (8102844 <skidpad+0x8bc>)
 8102664:	681b      	ldr	r3, [r3, #0]
 8102666:	9301      	str	r3, [sp, #4]
 8102668:	2302      	movs	r3, #2
 810266a:	9300      	str	r3, [sp, #0]
 810266c:	2328      	movs	r3, #40	@ 0x28
 810266e:	22fa      	movs	r2, #250	@ 0xfa
 8102670:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8102674:	2014      	movs	r0, #20
 8102676:	f7fe fd09 	bl	810108c <drawUnfilledRect>
    drawText(130,405,31,lilac,FT81x_OPT_RIGHTX, "SHIFT");
 810267a:	4b72      	ldr	r3, [pc, #456]	@ (8102844 <skidpad+0x8bc>)
 810267c:	681b      	ldr	r3, [r3, #0]
 810267e:	4a72      	ldr	r2, [pc, #456]	@ (8102848 <skidpad+0x8c0>)
 8102680:	9201      	str	r2, [sp, #4]
 8102682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102686:	9200      	str	r2, [sp, #0]
 8102688:	221f      	movs	r2, #31
 810268a:	f240 1195 	movw	r1, #405	@ 0x195
 810268e:	2082      	movs	r0, #130	@ 0x82
 8102690:	f7fe fdbc 	bl	810120c <drawText>
    drawText(270,395,1,lilac,FT81x_OPT_RIGHTX, tmpShiftingPressure);
 8102694:	4b6b      	ldr	r3, [pc, #428]	@ (8102844 <skidpad+0x8bc>)
 8102696:	681a      	ldr	r2, [r3, #0]
 8102698:	f107 030c 	add.w	r3, r7, #12
 810269c:	9301      	str	r3, [sp, #4]
 810269e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81026a2:	9300      	str	r3, [sp, #0]
 81026a4:	4613      	mov	r3, r2
 81026a6:	2201      	movs	r2, #1
 81026a8:	f240 118b 	movw	r1, #395	@ 0x18b
 81026ac:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 81026b0:	f7fe fdac 	bl	810120c <drawText>

    /* Fuel Used */
	char tmpFuelLeft[6];
	sprintf(tmpFuelLeft, "%f", (530 - fuelUsed) <= 0 ? 0.0 : (530-fuelUsed)*0.01);
 81026b4:	4b65      	ldr	r3, [pc, #404]	@ (810284c <skidpad+0x8c4>)
 81026b6:	881b      	ldrh	r3, [r3, #0]
 81026b8:	f5c3 7304 	rsb	r3, r3, #528	@ 0x210
 81026bc:	3302      	adds	r3, #2
 81026be:	2b00      	cmp	r3, #0
 81026c0:	dd0f      	ble.n	81026e2 <skidpad+0x75a>
 81026c2:	4b62      	ldr	r3, [pc, #392]	@ (810284c <skidpad+0x8c4>)
 81026c4:	881b      	ldrh	r3, [r3, #0]
 81026c6:	f5c3 7304 	rsb	r3, r3, #528	@ 0x210
 81026ca:	3302      	adds	r3, #2
 81026cc:	4618      	mov	r0, r3
 81026ce:	f7fd ffb1 	bl	8100634 <__aeabi_i2d>
 81026d2:	a355      	add	r3, pc, #340	@ (adr r3, 8102828 <skidpad+0x8a0>)
 81026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026d8:	f7fe f816 	bl	8100708 <__aeabi_dmul>
 81026dc:	4602      	mov	r2, r0
 81026de:	460b      	mov	r3, r1
 81026e0:	e003      	b.n	81026ea <skidpad+0x762>
 81026e2:	f04f 0200 	mov.w	r2, #0
 81026e6:	f04f 0300 	mov.w	r3, #0
 81026ea:	1d38      	adds	r0, r7, #4
 81026ec:	4950      	ldr	r1, [pc, #320]	@ (8102830 <skidpad+0x8a8>)
 81026ee:	f007 f9eb 	bl	8109ac8 <siprintf>
	tmpFuelLeft[3] = 'L';
 81026f2:	234c      	movs	r3, #76	@ 0x4c
 81026f4:	71fb      	strb	r3, [r7, #7]
	tmpFuelLeft[4] = '\0';
 81026f6:	2300      	movs	r3, #0
 81026f8:	723b      	strb	r3, [r7, #8]
	if (fuelUsed >= 330 && fuelUsed < 430) {
 81026fa:	4b54      	ldr	r3, [pc, #336]	@ (810284c <skidpad+0x8c4>)
 81026fc:	881b      	ldrh	r3, [r3, #0]
 81026fe:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8102702:	d313      	bcc.n	810272c <skidpad+0x7a4>
 8102704:	4b51      	ldr	r3, [pc, #324]	@ (810284c <skidpad+0x8c4>)
 8102706:	881b      	ldrh	r3, [r3, #0]
 8102708:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 810270c:	d20e      	bcs.n	810272c <skidpad+0x7a4>
		drawRect(510, 340, 270, 120, 1, yellow);
 810270e:	4b49      	ldr	r3, [pc, #292]	@ (8102834 <skidpad+0x8ac>)
 8102710:	681b      	ldr	r3, [r3, #0]
 8102712:	9301      	str	r3, [sp, #4]
 8102714:	2301      	movs	r3, #1
 8102716:	9300      	str	r3, [sp, #0]
 8102718:	2378      	movs	r3, #120	@ 0x78
 810271a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 810271e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8102722:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8102726:	f7fe fc0d 	bl	8100f44 <drawRect>
 810272a:	e016      	b.n	810275a <skidpad+0x7d2>
	} else if (fuelUsed >= 430 && blinkActive == 1) {
 810272c:	4b47      	ldr	r3, [pc, #284]	@ (810284c <skidpad+0x8c4>)
 810272e:	881b      	ldrh	r3, [r3, #0]
 8102730:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8102734:	d311      	bcc.n	810275a <skidpad+0x7d2>
 8102736:	4b40      	ldr	r3, [pc, #256]	@ (8102838 <skidpad+0x8b0>)
 8102738:	781b      	ldrb	r3, [r3, #0]
 810273a:	2b01      	cmp	r3, #1
 810273c:	d10d      	bne.n	810275a <skidpad+0x7d2>
		drawRect(510, 340, 270, 120, 1, red);
 810273e:	4b3f      	ldr	r3, [pc, #252]	@ (810283c <skidpad+0x8b4>)
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	9301      	str	r3, [sp, #4]
 8102744:	2301      	movs	r3, #1
 8102746:	9300      	str	r3, [sp, #0]
 8102748:	2378      	movs	r3, #120	@ 0x78
 810274a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 810274e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8102752:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8102756:	f7fe fbf5 	bl	8100f44 <drawRect>
	}
	//drawRect(520,350,(fuelUsed >= 530 ? 0 : ((530.0-fuelUsed)/530.0))*250,40,1,lightBlue);
	drawUnfilledRect(520,350,250,40,2,lightBlue);
 810275a:	4b3d      	ldr	r3, [pc, #244]	@ (8102850 <skidpad+0x8c8>)
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	9301      	str	r3, [sp, #4]
 8102760:	2302      	movs	r3, #2
 8102762:	9300      	str	r3, [sp, #0]
 8102764:	2328      	movs	r3, #40	@ 0x28
 8102766:	22fa      	movs	r2, #250	@ 0xfa
 8102768:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 810276c:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8102770:	f7fe fc8c 	bl	810108c <drawUnfilledRect>
	drawText(615,405,31,lightBlue,FT81x_OPT_RIGHTX, "FUEL");
 8102774:	4b36      	ldr	r3, [pc, #216]	@ (8102850 <skidpad+0x8c8>)
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	4a36      	ldr	r2, [pc, #216]	@ (8102854 <skidpad+0x8cc>)
 810277a:	9201      	str	r2, [sp, #4]
 810277c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102780:	9200      	str	r2, [sp, #0]
 8102782:	221f      	movs	r2, #31
 8102784:	f240 1195 	movw	r1, #405	@ 0x195
 8102788:	f240 2067 	movw	r0, #615	@ 0x267
 810278c:	f7fe fd3e 	bl	810120c <drawText>
	drawText(770,395,1,lightBlue,FT81x_OPT_RIGHTX, tmpFuelLeft);
 8102790:	4b2f      	ldr	r3, [pc, #188]	@ (8102850 <skidpad+0x8c8>)
 8102792:	681a      	ldr	r2, [r3, #0]
 8102794:	1d3b      	adds	r3, r7, #4
 8102796:	9301      	str	r3, [sp, #4]
 8102798:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810279c:	9300      	str	r3, [sp, #0]
 810279e:	4613      	mov	r3, r2
 81027a0:	2201      	movs	r2, #1
 81027a2:	f240 118b 	movw	r1, #395	@ 0x18b
 81027a6:	f240 3002 	movw	r0, #770	@ 0x302
 81027aa:	f7fe fd2f 	bl	810120c <drawText>

    //SD Warning
    if (!(sdInitialized && sdPresent)) {
 81027ae:	4b2a      	ldr	r3, [pc, #168]	@ (8102858 <skidpad+0x8d0>)
 81027b0:	781b      	ldrb	r3, [r3, #0]
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d003      	beq.n	81027be <skidpad+0x836>
 81027b6:	4b29      	ldr	r3, [pc, #164]	@ (810285c <skidpad+0x8d4>)
 81027b8:	781b      	ldrb	r3, [r3, #0]
 81027ba:	2b00      	cmp	r3, #0
 81027bc:	d10e      	bne.n	81027dc <skidpad+0x854>
    	drawText(400, 370, 1, red, FT81x_OPT_CENTER, "NO SD");
 81027be:	4b1f      	ldr	r3, [pc, #124]	@ (810283c <skidpad+0x8b4>)
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	4a27      	ldr	r2, [pc, #156]	@ (8102860 <skidpad+0x8d8>)
 81027c4:	9201      	str	r2, [sp, #4]
 81027c6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81027ca:	9200      	str	r2, [sp, #0]
 81027cc:	2201      	movs	r2, #1
 81027ce:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 81027d2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 81027d6:	f7fe fd19 	bl	810120c <drawText>
 81027da:	e011      	b.n	8102800 <skidpad+0x878>
    } else if (loggingStatus == 0) {
 81027dc:	4b21      	ldr	r3, [pc, #132]	@ (8102864 <skidpad+0x8dc>)
 81027de:	781b      	ldrb	r3, [r3, #0]
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d10d      	bne.n	8102800 <skidpad+0x878>
    	drawText(400, 370, 1, red, FT81x_OPT_CENTER, "LOG OFF");
 81027e4:	4b15      	ldr	r3, [pc, #84]	@ (810283c <skidpad+0x8b4>)
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	4a1f      	ldr	r2, [pc, #124]	@ (8102868 <skidpad+0x8e0>)
 81027ea:	9201      	str	r2, [sp, #4]
 81027ec:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81027f0:	9200      	str	r2, [sp, #0]
 81027f2:	2201      	movs	r2, #1
 81027f4:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 81027f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 81027fc:	f7fe fd06 	bl	810120c <drawText>
    }

	drawText(400, 450, 31, white, FT81x_OPT_CENTER, "SKIDPAD");
 8102800:	4b1a      	ldr	r3, [pc, #104]	@ (810286c <skidpad+0x8e4>)
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	4a1a      	ldr	r2, [pc, #104]	@ (8102870 <skidpad+0x8e8>)
 8102806:	9201      	str	r2, [sp, #4]
 8102808:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810280c:	9200      	str	r2, [sp, #0]
 810280e:	221f      	movs	r2, #31
 8102810:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8102814:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8102818:	f7fe fcf8 	bl	810120c <drawText>

	swapScreen();
 810281c:	f7fe fdba 	bl	8101394 <swapScreen>
}
 8102820:	bf00      	nop
 8102822:	3740      	adds	r7, #64	@ 0x40
 8102824:	46bd      	mov	sp, r7
 8102826:	bd80      	pop	{r7, pc}
 8102828:	47ae147b 	.word	0x47ae147b
 810282c:	3f847ae1 	.word	0x3f847ae1
 8102830:	0810bd50 	.word	0x0810bd50
 8102834:	10000010 	.word	0x10000010
 8102838:	10000226 	.word	0x10000226
 810283c:	10000014 	.word	0x10000014
 8102840:	437a0000 	.word	0x437a0000
 8102844:	1000000c 	.word	0x1000000c
 8102848:	0810bd58 	.word	0x0810bd58
 810284c:	100003ec 	.word	0x100003ec
 8102850:	10000008 	.word	0x10000008
 8102854:	0810bd60 	.word	0x0810bd60
 8102858:	100003f3 	.word	0x100003f3
 810285c:	100003f4 	.word	0x100003f4
 8102860:	0810bd68 	.word	0x0810bd68
 8102864:	100003f7 	.word	0x100003f7
 8102868:	0810bd70 	.word	0x0810bd70
 810286c:	10000020 	.word	0x10000020
 8102870:	0810bd80 	.word	0x0810bd80
 8102874:	00000000 	.word	0x00000000

08102878 <sound>:

void sound() {
 8102878:	b580      	push	{r7, lr}
 810287a:	b094      	sub	sp, #80	@ 0x50
 810287c:	af02      	add	r7, sp, #8

	blinkActive = (curTime & 0b1000000000000) == 0b1000000000000 ? 1 : 0;
 810287e:	4bc0      	ldr	r3, [pc, #768]	@ (8102b80 <sound+0x308>)
 8102880:	881b      	ldrh	r3, [r3, #0]
 8102882:	131b      	asrs	r3, r3, #12
 8102884:	b2db      	uxtb	r3, r3
 8102886:	f003 0301 	and.w	r3, r3, #1
 810288a:	b2da      	uxtb	r2, r3
 810288c:	4bbd      	ldr	r3, [pc, #756]	@ (8102b84 <sound+0x30c>)
 810288e:	701a      	strb	r2, [r3, #0]

	beginDisplayList();
 8102890:	f7fe fd70 	bl	8101374 <beginDisplayList>

	clear(black);
 8102894:	4bbc      	ldr	r3, [pc, #752]	@ (8102b88 <sound+0x310>)
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4618      	mov	r0, r3
 810289a:	f7fe fb3d 	bl	8100f18 <clear>

	initBitmapHandleForFont(32, 1);
 810289e:	2101      	movs	r1, #1
 81028a0:	2020      	movs	r0, #32
 81028a2:	f7fe fdc1 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(33, 2);
 81028a6:	2102      	movs	r1, #2
 81028a8:	2021      	movs	r0, #33	@ 0x21
 81028aa:	f7fe fdbd 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(34, 3);
 81028ae:	2103      	movs	r1, #3
 81028b0:	2022      	movs	r0, #34	@ 0x22
 81028b2:	f7fe fdb9 	bl	8101428 <initBitmapHandleForFont>

	/* Log Number */
	char logNumVal[6];
	sprintf(logNumVal, "%i", logNumber);
 81028b6:	4bb5      	ldr	r3, [pc, #724]	@ (8102b8c <sound+0x314>)
 81028b8:	781b      	ldrb	r3, [r3, #0]
 81028ba:	461a      	mov	r2, r3
 81028bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81028c0:	49b3      	ldr	r1, [pc, #716]	@ (8102b90 <sound+0x318>)
 81028c2:	4618      	mov	r0, r3
 81028c4:	f007 f900 	bl	8109ac8 <siprintf>
	drawText(100, 30, 1, pink, FT81x_OPT_CENTER, logNumVal);
 81028c8:	4bb2      	ldr	r3, [pc, #712]	@ (8102b94 <sound+0x31c>)
 81028ca:	681a      	ldr	r2, [r3, #0]
 81028cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81028d0:	9301      	str	r3, [sp, #4]
 81028d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81028d6:	9300      	str	r3, [sp, #0]
 81028d8:	4613      	mov	r3, r2
 81028da:	2201      	movs	r2, #1
 81028dc:	211e      	movs	r1, #30
 81028de:	2064      	movs	r0, #100	@ 0x64
 81028e0:	f7fe fc94 	bl	810120c <drawText>
	drawText(30,30,1,pink,FT81x_OPT_CENTER, "#");
 81028e4:	4bab      	ldr	r3, [pc, #684]	@ (8102b94 <sound+0x31c>)
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	4aab      	ldr	r2, [pc, #684]	@ (8102b98 <sound+0x320>)
 81028ea:	9201      	str	r2, [sp, #4]
 81028ec:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81028f0:	9200      	str	r2, [sp, #0]
 81028f2:	2201      	movs	r2, #1
 81028f4:	211e      	movs	r1, #30
 81028f6:	201e      	movs	r0, #30
 81028f8:	f7fe fc88 	bl	810120c <drawText>

	/* Map State */
	char mapStateVal[6];
	sprintf(mapStateVal, "%i", ECUMapState);
 81028fc:	4ba7      	ldr	r3, [pc, #668]	@ (8102b9c <sound+0x324>)
 81028fe:	781b      	ldrb	r3, [r3, #0]
 8102900:	461a      	mov	r2, r3
 8102902:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8102906:	49a2      	ldr	r1, [pc, #648]	@ (8102b90 <sound+0x318>)
 8102908:	4618      	mov	r0, r3
 810290a:	f007 f8dd 	bl	8109ac8 <siprintf>
	drawText(750, 30, 1, pink, FT81x_OPT_CENTER, mapStateVal);
 810290e:	4ba1      	ldr	r3, [pc, #644]	@ (8102b94 <sound+0x31c>)
 8102910:	681a      	ldr	r2, [r3, #0]
 8102912:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8102916:	9301      	str	r3, [sp, #4]
 8102918:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 810291c:	9300      	str	r3, [sp, #0]
 810291e:	4613      	mov	r3, r2
 8102920:	2201      	movs	r2, #1
 8102922:	211e      	movs	r1, #30
 8102924:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8102928:	f7fe fc70 	bl	810120c <drawText>
	drawText(670,30,1,pink,FT81x_OPT_CENTER, "Map:");
 810292c:	4b99      	ldr	r3, [pc, #612]	@ (8102b94 <sound+0x31c>)
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	4a9b      	ldr	r2, [pc, #620]	@ (8102ba0 <sound+0x328>)
 8102932:	9201      	str	r2, [sp, #4]
 8102934:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8102938:	9200      	str	r2, [sp, #0]
 810293a:	2201      	movs	r2, #1
 810293c:	211e      	movs	r1, #30
 810293e:	f240 209e 	movw	r0, #670	@ 0x29e
 8102942:	f7fe fc63 	bl	810120c <drawText>

	/* RPM */
	char rpmVal[6];
	rpm = (rpm * rpmSoundScale) / 1;
 8102946:	4b97      	ldr	r3, [pc, #604]	@ (8102ba4 <sound+0x32c>)
 8102948:	881b      	ldrh	r3, [r3, #0]
 810294a:	ee07 3a90 	vmov	s15, r3
 810294e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102952:	4b95      	ldr	r3, [pc, #596]	@ (8102ba8 <sound+0x330>)
 8102954:	edd3 7a00 	vldr	s15, [r3]
 8102958:	ee67 7a27 	vmul.f32	s15, s14, s15
 810295c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102960:	ee17 3a90 	vmov	r3, s15
 8102964:	b29a      	uxth	r2, r3
 8102966:	4b8f      	ldr	r3, [pc, #572]	@ (8102ba4 <sound+0x32c>)
 8102968:	801a      	strh	r2, [r3, #0]
	sprintf(rpmVal, "%i", rpm);
 810296a:	4b8e      	ldr	r3, [pc, #568]	@ (8102ba4 <sound+0x32c>)
 810296c:	881b      	ldrh	r3, [r3, #0]
 810296e:	461a      	mov	r2, r3
 8102970:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102974:	4986      	ldr	r1, [pc, #536]	@ (8102b90 <sound+0x318>)
 8102976:	4618      	mov	r0, r3
 8102978:	f007 f8a6 	bl	8109ac8 <siprintf>
	drawText(140, 150, 3, yellow, FT81x_OPT_CENTER, rpmVal);
 810297c:	4b8b      	ldr	r3, [pc, #556]	@ (8102bac <sound+0x334>)
 810297e:	681a      	ldr	r2, [r3, #0]
 8102980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102984:	9301      	str	r3, [sp, #4]
 8102986:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 810298a:	9300      	str	r3, [sp, #0]
 810298c:	4613      	mov	r3, r2
 810298e:	2203      	movs	r2, #3
 8102990:	2196      	movs	r1, #150	@ 0x96
 8102992:	208c      	movs	r0, #140	@ 0x8c
 8102994:	f7fe fc3a 	bl	810120c <drawText>
	drawText(140,230,2,yellow,FT81x_OPT_CENTER, "RPM");
 8102998:	4b84      	ldr	r3, [pc, #528]	@ (8102bac <sound+0x334>)
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	4a84      	ldr	r2, [pc, #528]	@ (8102bb0 <sound+0x338>)
 810299e:	9201      	str	r2, [sp, #4]
 81029a0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81029a4:	9200      	str	r2, [sp, #0]
 81029a6:	2202      	movs	r2, #2
 81029a8:	21e6      	movs	r1, #230	@ 0xe6
 81029aa:	208c      	movs	r0, #140	@ 0x8c
 81029ac:	f7fe fc2e 	bl	810120c <drawText>

	/* GEAR */
	switch (gear) {
 81029b0:	4b80      	ldr	r3, [pc, #512]	@ (8102bb4 <sound+0x33c>)
 81029b2:	881b      	ldrh	r3, [r3, #0]
 81029b4:	2b05      	cmp	r3, #5
 81029b6:	f200 816d 	bhi.w	8102c94 <sound+0x41c>
 81029ba:	a201      	add	r2, pc, #4	@ (adr r2, 81029c0 <sound+0x148>)
 81029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029c0:	081029d9 	.word	0x081029d9
 81029c4:	08102a2f 	.word	0x08102a2f
 81029c8:	08102a85 	.word	0x08102a85
 81029cc:	08102b0f 	.word	0x08102b0f
 81029d0:	08102bb9 	.word	0x08102bb9
 81029d4:	08102c0b 	.word	0x08102c0b
		case 0:
			drawLine(320, 300, 320, 80, 8, pink);
 81029d8:	4b6e      	ldr	r3, [pc, #440]	@ (8102b94 <sound+0x31c>)
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	9301      	str	r3, [sp, #4]
 81029de:	2308      	movs	r3, #8
 81029e0:	9300      	str	r3, [sp, #0]
 81029e2:	2350      	movs	r3, #80	@ 0x50
 81029e4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81029e8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81029ec:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81029f0:	f7fe fafc 	bl	8100fec <drawLine>
			drawLine(320, 80, 480, 300, 8, pink);
 81029f4:	4b67      	ldr	r3, [pc, #412]	@ (8102b94 <sound+0x31c>)
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	9301      	str	r3, [sp, #4]
 81029fa:	2308      	movs	r3, #8
 81029fc:	9300      	str	r3, [sp, #0]
 81029fe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102a02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102a06:	2150      	movs	r1, #80	@ 0x50
 8102a08:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102a0c:	f7fe faee 	bl	8100fec <drawLine>
			drawLine(480, 300, 480, 80, 8, pink);
 8102a10:	4b60      	ldr	r3, [pc, #384]	@ (8102b94 <sound+0x31c>)
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	9301      	str	r3, [sp, #4]
 8102a16:	2308      	movs	r3, #8
 8102a18:	9300      	str	r3, [sp, #0]
 8102a1a:	2350      	movs	r3, #80	@ 0x50
 8102a1c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102a20:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102a24:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8102a28:	f7fe fae0 	bl	8100fec <drawLine>
			break;
 8102a2c:	e132      	b.n	8102c94 <sound+0x41c>

		case 1:
			drawLine(400, 300, 400, 80, 8, pink);
 8102a2e:	4b59      	ldr	r3, [pc, #356]	@ (8102b94 <sound+0x31c>)
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	9301      	str	r3, [sp, #4]
 8102a34:	2308      	movs	r3, #8
 8102a36:	9300      	str	r3, [sp, #0]
 8102a38:	2350      	movs	r3, #80	@ 0x50
 8102a3a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8102a3e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102a42:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8102a46:	f7fe fad1 	bl	8100fec <drawLine>
			drawLine(400, 80, 350, 110, 8, pink);
 8102a4a:	4b52      	ldr	r3, [pc, #328]	@ (8102b94 <sound+0x31c>)
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	9301      	str	r3, [sp, #4]
 8102a50:	2308      	movs	r3, #8
 8102a52:	9300      	str	r3, [sp, #0]
 8102a54:	236e      	movs	r3, #110	@ 0x6e
 8102a56:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8102a5a:	2150      	movs	r1, #80	@ 0x50
 8102a5c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8102a60:	f7fe fac4 	bl	8100fec <drawLine>
			drawLine(340, 300, 460, 300, 8, pink);
 8102a64:	4b4b      	ldr	r3, [pc, #300]	@ (8102b94 <sound+0x31c>)
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	9301      	str	r3, [sp, #4]
 8102a6a:	2308      	movs	r3, #8
 8102a6c:	9300      	str	r3, [sp, #0]
 8102a6e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102a72:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8102a76:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102a7a:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8102a7e:	f7fe fab5 	bl	8100fec <drawLine>
			break;
 8102a82:	e107      	b.n	8102c94 <sound+0x41c>

		case 2:
			drawLine(320, 80, 480, 80, 8, pink);
 8102a84:	4b43      	ldr	r3, [pc, #268]	@ (8102b94 <sound+0x31c>)
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	9301      	str	r3, [sp, #4]
 8102a8a:	2308      	movs	r3, #8
 8102a8c:	9300      	str	r3, [sp, #0]
 8102a8e:	2350      	movs	r3, #80	@ 0x50
 8102a90:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102a94:	2150      	movs	r1, #80	@ 0x50
 8102a96:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102a9a:	f7fe faa7 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 190, 8, pink);
 8102a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8102b94 <sound+0x31c>)
 8102aa0:	681b      	ldr	r3, [r3, #0]
 8102aa2:	9301      	str	r3, [sp, #4]
 8102aa4:	2308      	movs	r3, #8
 8102aa6:	9300      	str	r3, [sp, #0]
 8102aa8:	23be      	movs	r3, #190	@ 0xbe
 8102aaa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102aae:	2150      	movs	r1, #80	@ 0x50
 8102ab0:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8102ab4:	f7fe fa9a 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8102ab8:	4b36      	ldr	r3, [pc, #216]	@ (8102b94 <sound+0x31c>)
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	9301      	str	r3, [sp, #4]
 8102abe:	2308      	movs	r3, #8
 8102ac0:	9300      	str	r3, [sp, #0]
 8102ac2:	23be      	movs	r3, #190	@ 0xbe
 8102ac4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102ac8:	21be      	movs	r1, #190	@ 0xbe
 8102aca:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102ace:	f7fe fa8d 	bl	8100fec <drawLine>
			drawLine(320, 190, 320, 300, 8, pink);
 8102ad2:	4b30      	ldr	r3, [pc, #192]	@ (8102b94 <sound+0x31c>)
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	9301      	str	r3, [sp, #4]
 8102ad8:	2308      	movs	r3, #8
 8102ada:	9300      	str	r3, [sp, #0]
 8102adc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102ae0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8102ae4:	21be      	movs	r1, #190	@ 0xbe
 8102ae6:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102aea:	f7fe fa7f 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 8102aee:	4b29      	ldr	r3, [pc, #164]	@ (8102b94 <sound+0x31c>)
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	9301      	str	r3, [sp, #4]
 8102af4:	2308      	movs	r3, #8
 8102af6:	9300      	str	r3, [sp, #0]
 8102af8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102afc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102b00:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102b04:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102b08:	f7fe fa70 	bl	8100fec <drawLine>
			break;
 8102b0c:	e0c2      	b.n	8102c94 <sound+0x41c>

		case 3:
			drawLine(320, 80, 480, 80, 8, pink);
 8102b0e:	4b21      	ldr	r3, [pc, #132]	@ (8102b94 <sound+0x31c>)
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	9301      	str	r3, [sp, #4]
 8102b14:	2308      	movs	r3, #8
 8102b16:	9300      	str	r3, [sp, #0]
 8102b18:	2350      	movs	r3, #80	@ 0x50
 8102b1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102b1e:	2150      	movs	r1, #80	@ 0x50
 8102b20:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102b24:	f7fe fa62 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 300, 8, pink);
 8102b28:	4b1a      	ldr	r3, [pc, #104]	@ (8102b94 <sound+0x31c>)
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	9301      	str	r3, [sp, #4]
 8102b2e:	2308      	movs	r3, #8
 8102b30:	9300      	str	r3, [sp, #0]
 8102b32:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102b36:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102b3a:	2150      	movs	r1, #80	@ 0x50
 8102b3c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8102b40:	f7fe fa54 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8102b44:	4b13      	ldr	r3, [pc, #76]	@ (8102b94 <sound+0x31c>)
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	9301      	str	r3, [sp, #4]
 8102b4a:	2308      	movs	r3, #8
 8102b4c:	9300      	str	r3, [sp, #0]
 8102b4e:	23be      	movs	r3, #190	@ 0xbe
 8102b50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102b54:	21be      	movs	r1, #190	@ 0xbe
 8102b56:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102b5a:	f7fe fa47 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 8102b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8102b94 <sound+0x31c>)
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	9301      	str	r3, [sp, #4]
 8102b64:	2308      	movs	r3, #8
 8102b66:	9300      	str	r3, [sp, #0]
 8102b68:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102b6c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102b70:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102b74:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102b78:	f7fe fa38 	bl	8100fec <drawLine>
			break;
 8102b7c:	e08a      	b.n	8102c94 <sound+0x41c>
 8102b7e:	bf00      	nop
 8102b80:	10000224 	.word	0x10000224
 8102b84:	10000226 	.word	0x10000226
 8102b88:	10000220 	.word	0x10000220
 8102b8c:	100003f8 	.word	0x100003f8
 8102b90:	0810bd38 	.word	0x0810bd38
 8102b94:	1000001c 	.word	0x1000001c
 8102b98:	0810bd3c 	.word	0x0810bd3c
 8102b9c:	100003f9 	.word	0x100003f9
 8102ba0:	0810bd40 	.word	0x0810bd40
 8102ba4:	100003ea 	.word	0x100003ea
 8102ba8:	10000024 	.word	0x10000024
 8102bac:	10000010 	.word	0x10000010
 8102bb0:	0810bd48 	.word	0x0810bd48
 8102bb4:	100003e4 	.word	0x100003e4

		case 4:
			drawLine(420, 300, 420, 80, 8, pink);
 8102bb8:	4bb1      	ldr	r3, [pc, #708]	@ (8102e80 <sound+0x608>)
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	9301      	str	r3, [sp, #4]
 8102bbe:	2308      	movs	r3, #8
 8102bc0:	9300      	str	r3, [sp, #0]
 8102bc2:	2350      	movs	r3, #80	@ 0x50
 8102bc4:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8102bc8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102bcc:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8102bd0:	f7fe fa0c 	bl	8100fec <drawLine>
			drawLine(420, 80, 320, 230, 8, pink);
 8102bd4:	4baa      	ldr	r3, [pc, #680]	@ (8102e80 <sound+0x608>)
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	9301      	str	r3, [sp, #4]
 8102bda:	2308      	movs	r3, #8
 8102bdc:	9300      	str	r3, [sp, #0]
 8102bde:	23e6      	movs	r3, #230	@ 0xe6
 8102be0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8102be4:	2150      	movs	r1, #80	@ 0x50
 8102be6:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8102bea:	f7fe f9ff 	bl	8100fec <drawLine>
			drawLine(320, 230, 450, 230, 8, pink);
 8102bee:	4ba4      	ldr	r3, [pc, #656]	@ (8102e80 <sound+0x608>)
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	9301      	str	r3, [sp, #4]
 8102bf4:	2308      	movs	r3, #8
 8102bf6:	9300      	str	r3, [sp, #0]
 8102bf8:	23e6      	movs	r3, #230	@ 0xe6
 8102bfa:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8102bfe:	21e6      	movs	r1, #230	@ 0xe6
 8102c00:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102c04:	f7fe f9f2 	bl	8100fec <drawLine>
			break;
 8102c08:	e044      	b.n	8102c94 <sound+0x41c>

		case 5:
			drawLine(320, 80, 480, 80, 8, pink);
 8102c0a:	4b9d      	ldr	r3, [pc, #628]	@ (8102e80 <sound+0x608>)
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	9301      	str	r3, [sp, #4]
 8102c10:	2308      	movs	r3, #8
 8102c12:	9300      	str	r3, [sp, #0]
 8102c14:	2350      	movs	r3, #80	@ 0x50
 8102c16:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102c1a:	2150      	movs	r1, #80	@ 0x50
 8102c1c:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102c20:	f7fe f9e4 	bl	8100fec <drawLine>
			drawLine(320, 80, 320, 190, 8, pink);
 8102c24:	4b96      	ldr	r3, [pc, #600]	@ (8102e80 <sound+0x608>)
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	9301      	str	r3, [sp, #4]
 8102c2a:	2308      	movs	r3, #8
 8102c2c:	9300      	str	r3, [sp, #0]
 8102c2e:	23be      	movs	r3, #190	@ 0xbe
 8102c30:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8102c34:	2150      	movs	r1, #80	@ 0x50
 8102c36:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102c3a:	f7fe f9d7 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, pink);
 8102c3e:	4b90      	ldr	r3, [pc, #576]	@ (8102e80 <sound+0x608>)
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	9301      	str	r3, [sp, #4]
 8102c44:	2308      	movs	r3, #8
 8102c46:	9300      	str	r3, [sp, #0]
 8102c48:	23be      	movs	r3, #190	@ 0xbe
 8102c4a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102c4e:	21be      	movs	r1, #190	@ 0xbe
 8102c50:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102c54:	f7fe f9ca 	bl	8100fec <drawLine>
			drawLine(480, 190, 480, 300, 8, pink);
 8102c58:	4b89      	ldr	r3, [pc, #548]	@ (8102e80 <sound+0x608>)
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	9301      	str	r3, [sp, #4]
 8102c5e:	2308      	movs	r3, #8
 8102c60:	9300      	str	r3, [sp, #0]
 8102c62:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102c66:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102c6a:	21be      	movs	r1, #190	@ 0xbe
 8102c6c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8102c70:	f7fe f9bc 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, pink);
 8102c74:	4b82      	ldr	r3, [pc, #520]	@ (8102e80 <sound+0x608>)
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	9301      	str	r3, [sp, #4]
 8102c7a:	2308      	movs	r3, #8
 8102c7c:	9300      	str	r3, [sp, #0]
 8102c7e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8102c82:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8102c86:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8102c8a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8102c8e:	f7fe f9ad 	bl	8100fec <drawLine>
			break;
 8102c92:	bf00      	nop
	}

	/* WTEMP */
	char tmpVal[6];
	sprintf(tmpVal, "%i", wtemp - 40);
 8102c94:	4b7b      	ldr	r3, [pc, #492]	@ (8102e84 <sound+0x60c>)
 8102c96:	881b      	ldrh	r3, [r3, #0]
 8102c98:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8102c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102ca0:	4979      	ldr	r1, [pc, #484]	@ (8102e88 <sound+0x610>)
 8102ca2:	4618      	mov	r0, r3
 8102ca4:	f006 ff10 	bl	8109ac8 <siprintf>
	if (wtemp >= 145 && blinkActive) {
 8102ca8:	4b76      	ldr	r3, [pc, #472]	@ (8102e84 <sound+0x60c>)
 8102caa:	881b      	ldrh	r3, [r3, #0]
 8102cac:	2b90      	cmp	r3, #144	@ 0x90
 8102cae:	d90f      	bls.n	8102cd0 <sound+0x458>
 8102cb0:	4b76      	ldr	r3, [pc, #472]	@ (8102e8c <sound+0x614>)
 8102cb2:	781b      	ldrb	r3, [r3, #0]
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	d00b      	beq.n	8102cd0 <sound+0x458>
		drawRect(560, 50, 220, 80, 1, red);
 8102cb8:	4b75      	ldr	r3, [pc, #468]	@ (8102e90 <sound+0x618>)
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	9301      	str	r3, [sp, #4]
 8102cbe:	2301      	movs	r3, #1
 8102cc0:	9300      	str	r3, [sp, #0]
 8102cc2:	2350      	movs	r3, #80	@ 0x50
 8102cc4:	22dc      	movs	r2, #220	@ 0xdc
 8102cc6:	2132      	movs	r1, #50	@ 0x32
 8102cc8:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8102ccc:	f7fe f93a 	bl	8100f44 <drawRect>
	}
	drawText(710, 50, 2, lightBlue, FT81x_OPT_RIGHTX, tmpVal);
 8102cd0:	4b70      	ldr	r3, [pc, #448]	@ (8102e94 <sound+0x61c>)
 8102cd2:	681a      	ldr	r2, [r3, #0]
 8102cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102cd8:	9301      	str	r3, [sp, #4]
 8102cda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102cde:	9300      	str	r3, [sp, #0]
 8102ce0:	4613      	mov	r3, r2
 8102ce2:	2202      	movs	r2, #2
 8102ce4:	2132      	movs	r1, #50	@ 0x32
 8102ce6:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8102cea:	f7fe fa8f 	bl	810120c <drawText>
	drawText(770,50,2,lightBlue,FT81x_OPT_RIGHTX, "C");
 8102cee:	4b69      	ldr	r3, [pc, #420]	@ (8102e94 <sound+0x61c>)
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	4a69      	ldr	r2, [pc, #420]	@ (8102e98 <sound+0x620>)
 8102cf4:	9201      	str	r2, [sp, #4]
 8102cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102cfa:	9200      	str	r2, [sp, #0]
 8102cfc:	2202      	movs	r2, #2
 8102cfe:	2132      	movs	r1, #50	@ 0x32
 8102d00:	f240 3002 	movw	r0, #770	@ 0x302
 8102d04:	f7fe fa82 	bl	810120c <drawText>

	/* LAMBDA */
	char mixVal[6];
	sprintf(mixVal, "%f", mix*0.001);
 8102d08:	4b64      	ldr	r3, [pc, #400]	@ (8102e9c <sound+0x624>)
 8102d0a:	881b      	ldrh	r3, [r3, #0]
 8102d0c:	4618      	mov	r0, r3
 8102d0e:	f7fd fc91 	bl	8100634 <__aeabi_i2d>
 8102d12:	a353      	add	r3, pc, #332	@ (adr r3, 8102e60 <sound+0x5e8>)
 8102d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d18:	f7fd fcf6 	bl	8100708 <__aeabi_dmul>
 8102d1c:	4602      	mov	r2, r0
 8102d1e:	460b      	mov	r3, r1
 8102d20:	f107 001c 	add.w	r0, r7, #28
 8102d24:	495e      	ldr	r1, [pc, #376]	@ (8102ea0 <sound+0x628>)
 8102d26:	f006 fecf 	bl	8109ac8 <siprintf>
	mixVal[4] = '\0';
 8102d2a:	2300      	movs	r3, #0
 8102d2c:	f887 3020 	strb.w	r3, [r7, #32]
	drawText(770, 140, 2, green, FT81x_OPT_RIGHTX, mixVal);
 8102d30:	4b5c      	ldr	r3, [pc, #368]	@ (8102ea4 <sound+0x62c>)
 8102d32:	681a      	ldr	r2, [r3, #0]
 8102d34:	f107 031c 	add.w	r3, r7, #28
 8102d38:	9301      	str	r3, [sp, #4]
 8102d3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102d3e:	9300      	str	r3, [sp, #0]
 8102d40:	4613      	mov	r3, r2
 8102d42:	2202      	movs	r2, #2
 8102d44:	218c      	movs	r1, #140	@ 0x8c
 8102d46:	f240 3002 	movw	r0, #770	@ 0x302
 8102d4a:	f7fe fa5f 	bl	810120c <drawText>

	/* VOLTAGE */
	char voltageVal[6];
	sprintf(voltageVal, "%f", voltage*0.1);
 8102d4e:	4b56      	ldr	r3, [pc, #344]	@ (8102ea8 <sound+0x630>)
 8102d50:	881b      	ldrh	r3, [r3, #0]
 8102d52:	4618      	mov	r0, r3
 8102d54:	f7fd fc6e 	bl	8100634 <__aeabi_i2d>
 8102d58:	a343      	add	r3, pc, #268	@ (adr r3, 8102e68 <sound+0x5f0>)
 8102d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d5e:	f7fd fcd3 	bl	8100708 <__aeabi_dmul>
 8102d62:	4602      	mov	r2, r0
 8102d64:	460b      	mov	r3, r1
 8102d66:	f107 0014 	add.w	r0, r7, #20
 8102d6a:	494d      	ldr	r1, [pc, #308]	@ (8102ea0 <sound+0x628>)
 8102d6c:	f006 feac 	bl	8109ac8 <siprintf>
	voltageVal[4] = '\0';
 8102d70:	2300      	movs	r3, #0
 8102d72:	763b      	strb	r3, [r7, #24]
	if (voltage < 120 && blinkActive) {
 8102d74:	4b4c      	ldr	r3, [pc, #304]	@ (8102ea8 <sound+0x630>)
 8102d76:	881b      	ldrh	r3, [r3, #0]
 8102d78:	2b77      	cmp	r3, #119	@ 0x77
 8102d7a:	d80f      	bhi.n	8102d9c <sound+0x524>
 8102d7c:	4b43      	ldr	r3, [pc, #268]	@ (8102e8c <sound+0x614>)
 8102d7e:	781b      	ldrb	r3, [r3, #0]
 8102d80:	2b00      	cmp	r3, #0
 8102d82:	d00b      	beq.n	8102d9c <sound+0x524>
		drawRect(560, 230, 220, 80, 1, red);
 8102d84:	4b42      	ldr	r3, [pc, #264]	@ (8102e90 <sound+0x618>)
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	9301      	str	r3, [sp, #4]
 8102d8a:	2301      	movs	r3, #1
 8102d8c:	9300      	str	r3, [sp, #0]
 8102d8e:	2350      	movs	r3, #80	@ 0x50
 8102d90:	22dc      	movs	r2, #220	@ 0xdc
 8102d92:	21e6      	movs	r1, #230	@ 0xe6
 8102d94:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8102d98:	f7fe f8d4 	bl	8100f44 <drawRect>
	}
	drawText(710, 230, 2, yellow, FT81x_OPT_RIGHTX, voltageVal);
 8102d9c:	4b43      	ldr	r3, [pc, #268]	@ (8102eac <sound+0x634>)
 8102d9e:	681a      	ldr	r2, [r3, #0]
 8102da0:	f107 0314 	add.w	r3, r7, #20
 8102da4:	9301      	str	r3, [sp, #4]
 8102da6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102daa:	9300      	str	r3, [sp, #0]
 8102dac:	4613      	mov	r3, r2
 8102dae:	2202      	movs	r2, #2
 8102db0:	21e6      	movs	r1, #230	@ 0xe6
 8102db2:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8102db6:	f7fe fa29 	bl	810120c <drawText>
	drawText(770,230,2,yellow,FT81x_OPT_RIGHTX, "V");
 8102dba:	4b3c      	ldr	r3, [pc, #240]	@ (8102eac <sound+0x634>)
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8102eb0 <sound+0x638>)
 8102dc0:	9201      	str	r2, [sp, #4]
 8102dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102dc6:	9200      	str	r2, [sp, #0]
 8102dc8:	2202      	movs	r2, #2
 8102dca:	21e6      	movs	r1, #230	@ 0xe6
 8102dcc:	f240 3002 	movw	r0, #770	@ 0x302
 8102dd0:	f7fe fa1c 	bl	810120c <drawText>

	/* Shifting Pressure */
    char tmpShiftingPressure[6];
    float scaledPressure;
    scaledPressure = ((shiftingPressure*0.00122070312)-0.5)*1250*0.001;
 8102dd4:	4b37      	ldr	r3, [pc, #220]	@ (8102eb4 <sound+0x63c>)
 8102dd6:	881b      	ldrh	r3, [r3, #0]
 8102dd8:	4618      	mov	r0, r3
 8102dda:	f7fd fc2b 	bl	8100634 <__aeabi_i2d>
 8102dde:	a324      	add	r3, pc, #144	@ (adr r3, 8102e70 <sound+0x5f8>)
 8102de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102de4:	f7fd fc90 	bl	8100708 <__aeabi_dmul>
 8102de8:	4602      	mov	r2, r0
 8102dea:	460b      	mov	r3, r1
 8102dec:	4610      	mov	r0, r2
 8102dee:	4619      	mov	r1, r3
 8102df0:	f04f 0200 	mov.w	r2, #0
 8102df4:	4b30      	ldr	r3, [pc, #192]	@ (8102eb8 <sound+0x640>)
 8102df6:	f7fd facf 	bl	8100398 <__aeabi_dsub>
 8102dfa:	4602      	mov	r2, r0
 8102dfc:	460b      	mov	r3, r1
 8102dfe:	4610      	mov	r0, r2
 8102e00:	4619      	mov	r1, r3
 8102e02:	a31d      	add	r3, pc, #116	@ (adr r3, 8102e78 <sound+0x600>)
 8102e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e08:	f7fd fc7e 	bl	8100708 <__aeabi_dmul>
 8102e0c:	4602      	mov	r2, r0
 8102e0e:	460b      	mov	r3, r1
 8102e10:	4610      	mov	r0, r2
 8102e12:	4619      	mov	r1, r3
 8102e14:	a312      	add	r3, pc, #72	@ (adr r3, 8102e60 <sound+0x5e8>)
 8102e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e1a:	f7fd fc75 	bl	8100708 <__aeabi_dmul>
 8102e1e:	4602      	mov	r2, r0
 8102e20:	460b      	mov	r3, r1
 8102e22:	4610      	mov	r0, r2
 8102e24:	4619      	mov	r1, r3
 8102e26:	f7fd ff47 	bl	8100cb8 <__aeabi_d2f>
 8102e2a:	4603      	mov	r3, r0
 8102e2c:	647b      	str	r3, [r7, #68]	@ 0x44
    scaledPressure = scaledPressure >= 5.0 ? 0.0 : scaledPressure;
 8102e2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102e32:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8102e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102e3e:	db02      	blt.n	8102e46 <sound+0x5ce>
 8102e40:	f04f 0300 	mov.w	r3, #0
 8102e44:	e000      	b.n	8102e48 <sound+0x5d0>
 8102e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102e48:	647b      	str	r3, [r7, #68]	@ 0x44
    scaledPressure = scaledPressure <= 0.0 ? 0.0 : scaledPressure;
 8102e4a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102e56:	d831      	bhi.n	8102ebc <sound+0x644>
 8102e58:	f04f 0300 	mov.w	r3, #0
 8102e5c:	e02f      	b.n	8102ebe <sound+0x646>
 8102e5e:	bf00      	nop
 8102e60:	d2f1a9fc 	.word	0xd2f1a9fc
 8102e64:	3f50624d 	.word	0x3f50624d
 8102e68:	9999999a 	.word	0x9999999a
 8102e6c:	3fb99999 	.word	0x3fb99999
 8102e70:	fea02802 	.word	0xfea02802
 8102e74:	3f53ffff 	.word	0x3f53ffff
 8102e78:	00000000 	.word	0x00000000
 8102e7c:	40938800 	.word	0x40938800
 8102e80:	1000001c 	.word	0x1000001c
 8102e84:	100003e0 	.word	0x100003e0
 8102e88:	0810bd38 	.word	0x0810bd38
 8102e8c:	10000226 	.word	0x10000226
 8102e90:	10000014 	.word	0x10000014
 8102e94:	10000008 	.word	0x10000008
 8102e98:	0810bd4c 	.word	0x0810bd4c
 8102e9c:	100003e2 	.word	0x100003e2
 8102ea0:	0810bd50 	.word	0x0810bd50
 8102ea4:	10000018 	.word	0x10000018
 8102ea8:	100003ee 	.word	0x100003ee
 8102eac:	10000010 	.word	0x10000010
 8102eb0:	0810bd54 	.word	0x0810bd54
 8102eb4:	100003f0 	.word	0x100003f0
 8102eb8:	3fe00000 	.word	0x3fe00000
 8102ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102ebe:	647b      	str	r3, [r7, #68]	@ 0x44
    sprintf(tmpShiftingPressure, "%f", scaledPressure);
 8102ec0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8102ec2:	f7fd fbc9 	bl	8100658 <__aeabi_f2d>
 8102ec6:	4602      	mov	r2, r0
 8102ec8:	460b      	mov	r3, r1
 8102eca:	f107 000c 	add.w	r0, r7, #12
 8102ece:	49a8      	ldr	r1, [pc, #672]	@ (8103170 <sound+0x8f8>)
 8102ed0:	f006 fdfa 	bl	8109ac8 <siprintf>
    tmpShiftingPressure[3] = 'K';
 8102ed4:	234b      	movs	r3, #75	@ 0x4b
 8102ed6:	73fb      	strb	r3, [r7, #15]
    tmpShiftingPressure[4] = '\0';
 8102ed8:	2300      	movs	r3, #0
 8102eda:	743b      	strb	r3, [r7, #16]
    if (scaledPressure == 0.0) {
 8102edc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102ee0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8102ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102ee8:	d107      	bne.n	8102efa <sound+0x682>
    	tmpShiftingPressure[0] = 'N';
 8102eea:	234e      	movs	r3, #78	@ 0x4e
 8102eec:	733b      	strb	r3, [r7, #12]
    	tmpShiftingPressure[1] = 'a';
 8102eee:	2361      	movs	r3, #97	@ 0x61
 8102ef0:	737b      	strb	r3, [r7, #13]
    	tmpShiftingPressure[2] = 'N';
 8102ef2:	234e      	movs	r3, #78	@ 0x4e
 8102ef4:	73bb      	strb	r3, [r7, #14]
    	tmpShiftingPressure[3] = '\0';
 8102ef6:	2300      	movs	r3, #0
 8102ef8:	73fb      	strb	r3, [r7, #15]
    }
    if (scaledPressure <= 1.5 && scaledPressure > 1.0) {
 8102efa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102efe:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8102f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102f0a:	d816      	bhi.n	8102f3a <sound+0x6c2>
 8102f0c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102f1c:	dd0d      	ble.n	8102f3a <sound+0x6c2>
		drawRect(10, 340, 270, 120, 1, yellow);
 8102f1e:	4b95      	ldr	r3, [pc, #596]	@ (8103174 <sound+0x8fc>)
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	9301      	str	r3, [sp, #4]
 8102f24:	2301      	movs	r3, #1
 8102f26:	9300      	str	r3, [sp, #0]
 8102f28:	2378      	movs	r3, #120	@ 0x78
 8102f2a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8102f2e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8102f32:	200a      	movs	r0, #10
 8102f34:	f7fe f806 	bl	8100f44 <drawRect>
 8102f38:	e019      	b.n	8102f6e <sound+0x6f6>
    } else if (scaledPressure <= 1.0 && blinkActive == 1) {
 8102f3a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102f4a:	d810      	bhi.n	8102f6e <sound+0x6f6>
 8102f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8103178 <sound+0x900>)
 8102f4e:	781b      	ldrb	r3, [r3, #0]
 8102f50:	2b01      	cmp	r3, #1
 8102f52:	d10c      	bne.n	8102f6e <sound+0x6f6>
    	drawRect(10, 340, 270, 120, 1, red);
 8102f54:	4b89      	ldr	r3, [pc, #548]	@ (810317c <sound+0x904>)
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	9301      	str	r3, [sp, #4]
 8102f5a:	2301      	movs	r3, #1
 8102f5c:	9300      	str	r3, [sp, #0]
 8102f5e:	2378      	movs	r3, #120	@ 0x78
 8102f60:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8102f64:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8102f68:	200a      	movs	r0, #10
 8102f6a:	f7fd ffeb 	bl	8100f44 <drawRect>
    }
	drawRect(20,350,scaledPressure/5*250,40,1,lilac);
 8102f6e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8102f72:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8102f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102f7a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8103180 <sound+0x908>
 8102f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102f86:	ee17 3a90 	vmov	r3, s15
 8102f8a:	b29a      	uxth	r2, r3
 8102f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8103184 <sound+0x90c>)
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	9301      	str	r3, [sp, #4]
 8102f92:	2301      	movs	r3, #1
 8102f94:	9300      	str	r3, [sp, #0]
 8102f96:	2328      	movs	r3, #40	@ 0x28
 8102f98:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8102f9c:	2014      	movs	r0, #20
 8102f9e:	f7fd ffd1 	bl	8100f44 <drawRect>
	drawUnfilledRect(20,350,250,40,2,lilac);
 8102fa2:	4b78      	ldr	r3, [pc, #480]	@ (8103184 <sound+0x90c>)
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	9301      	str	r3, [sp, #4]
 8102fa8:	2302      	movs	r3, #2
 8102faa:	9300      	str	r3, [sp, #0]
 8102fac:	2328      	movs	r3, #40	@ 0x28
 8102fae:	22fa      	movs	r2, #250	@ 0xfa
 8102fb0:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8102fb4:	2014      	movs	r0, #20
 8102fb6:	f7fe f869 	bl	810108c <drawUnfilledRect>
    drawText(130,405,31,lilac,FT81x_OPT_RIGHTX, "SHIFT");
 8102fba:	4b72      	ldr	r3, [pc, #456]	@ (8103184 <sound+0x90c>)
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	4a72      	ldr	r2, [pc, #456]	@ (8103188 <sound+0x910>)
 8102fc0:	9201      	str	r2, [sp, #4]
 8102fc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102fc6:	9200      	str	r2, [sp, #0]
 8102fc8:	221f      	movs	r2, #31
 8102fca:	f240 1195 	movw	r1, #405	@ 0x195
 8102fce:	2082      	movs	r0, #130	@ 0x82
 8102fd0:	f7fe f91c 	bl	810120c <drawText>
    drawText(270,395,1,lilac,FT81x_OPT_RIGHTX, tmpShiftingPressure);
 8102fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8103184 <sound+0x90c>)
 8102fd6:	681a      	ldr	r2, [r3, #0]
 8102fd8:	f107 030c 	add.w	r3, r7, #12
 8102fdc:	9301      	str	r3, [sp, #4]
 8102fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102fe2:	9300      	str	r3, [sp, #0]
 8102fe4:	4613      	mov	r3, r2
 8102fe6:	2201      	movs	r2, #1
 8102fe8:	f240 118b 	movw	r1, #395	@ 0x18b
 8102fec:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8102ff0:	f7fe f90c 	bl	810120c <drawText>

    /* Fuel Used */
	char tmpFuelLeft[6];
	sprintf(tmpFuelLeft, "%f", (530 - fuelUsed) <= 0 ? 0.0 : (530-fuelUsed)*0.01);
 8102ff4:	4b65      	ldr	r3, [pc, #404]	@ (810318c <sound+0x914>)
 8102ff6:	881b      	ldrh	r3, [r3, #0]
 8102ff8:	f5c3 7304 	rsb	r3, r3, #528	@ 0x210
 8102ffc:	3302      	adds	r3, #2
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	dd0f      	ble.n	8103022 <sound+0x7aa>
 8103002:	4b62      	ldr	r3, [pc, #392]	@ (810318c <sound+0x914>)
 8103004:	881b      	ldrh	r3, [r3, #0]
 8103006:	f5c3 7304 	rsb	r3, r3, #528	@ 0x210
 810300a:	3302      	adds	r3, #2
 810300c:	4618      	mov	r0, r3
 810300e:	f7fd fb11 	bl	8100634 <__aeabi_i2d>
 8103012:	a355      	add	r3, pc, #340	@ (adr r3, 8103168 <sound+0x8f0>)
 8103014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103018:	f7fd fb76 	bl	8100708 <__aeabi_dmul>
 810301c:	4602      	mov	r2, r0
 810301e:	460b      	mov	r3, r1
 8103020:	e003      	b.n	810302a <sound+0x7b2>
 8103022:	f04f 0200 	mov.w	r2, #0
 8103026:	f04f 0300 	mov.w	r3, #0
 810302a:	1d38      	adds	r0, r7, #4
 810302c:	4950      	ldr	r1, [pc, #320]	@ (8103170 <sound+0x8f8>)
 810302e:	f006 fd4b 	bl	8109ac8 <siprintf>
	tmpFuelLeft[3] = 'L';
 8103032:	234c      	movs	r3, #76	@ 0x4c
 8103034:	71fb      	strb	r3, [r7, #7]
	tmpFuelLeft[4] = '\0';
 8103036:	2300      	movs	r3, #0
 8103038:	723b      	strb	r3, [r7, #8]
	if (fuelUsed >= 330 && fuelUsed < 430) {
 810303a:	4b54      	ldr	r3, [pc, #336]	@ (810318c <sound+0x914>)
 810303c:	881b      	ldrh	r3, [r3, #0]
 810303e:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8103042:	d313      	bcc.n	810306c <sound+0x7f4>
 8103044:	4b51      	ldr	r3, [pc, #324]	@ (810318c <sound+0x914>)
 8103046:	881b      	ldrh	r3, [r3, #0]
 8103048:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 810304c:	d20e      	bcs.n	810306c <sound+0x7f4>
		drawRect(510, 340, 270, 120, 1, yellow);
 810304e:	4b49      	ldr	r3, [pc, #292]	@ (8103174 <sound+0x8fc>)
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	9301      	str	r3, [sp, #4]
 8103054:	2301      	movs	r3, #1
 8103056:	9300      	str	r3, [sp, #0]
 8103058:	2378      	movs	r3, #120	@ 0x78
 810305a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 810305e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8103062:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8103066:	f7fd ff6d 	bl	8100f44 <drawRect>
 810306a:	e016      	b.n	810309a <sound+0x822>
	} else if (fuelUsed >= 430 && blinkActive == 1) {
 810306c:	4b47      	ldr	r3, [pc, #284]	@ (810318c <sound+0x914>)
 810306e:	881b      	ldrh	r3, [r3, #0]
 8103070:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8103074:	d311      	bcc.n	810309a <sound+0x822>
 8103076:	4b40      	ldr	r3, [pc, #256]	@ (8103178 <sound+0x900>)
 8103078:	781b      	ldrb	r3, [r3, #0]
 810307a:	2b01      	cmp	r3, #1
 810307c:	d10d      	bne.n	810309a <sound+0x822>
		drawRect(510, 340, 270, 120, 1, red);
 810307e:	4b3f      	ldr	r3, [pc, #252]	@ (810317c <sound+0x904>)
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	9301      	str	r3, [sp, #4]
 8103084:	2301      	movs	r3, #1
 8103086:	9300      	str	r3, [sp, #0]
 8103088:	2378      	movs	r3, #120	@ 0x78
 810308a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 810308e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8103092:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8103096:	f7fd ff55 	bl	8100f44 <drawRect>
	}
	//drawRect(520,350,(fuelUsed >= 530 ? 0 : ((530.0-fuelUsed)/530.0))*250,40,1,lightBlue);
	drawUnfilledRect(520,350,250,40,2,lightBlue);
 810309a:	4b3d      	ldr	r3, [pc, #244]	@ (8103190 <sound+0x918>)
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	9301      	str	r3, [sp, #4]
 81030a0:	2302      	movs	r3, #2
 81030a2:	9300      	str	r3, [sp, #0]
 81030a4:	2328      	movs	r3, #40	@ 0x28
 81030a6:	22fa      	movs	r2, #250	@ 0xfa
 81030a8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 81030ac:	f44f 7002 	mov.w	r0, #520	@ 0x208
 81030b0:	f7fd ffec 	bl	810108c <drawUnfilledRect>
	drawText(615,405,31,lightBlue,FT81x_OPT_RIGHTX, "FUEL");
 81030b4:	4b36      	ldr	r3, [pc, #216]	@ (8103190 <sound+0x918>)
 81030b6:	681b      	ldr	r3, [r3, #0]
 81030b8:	4a36      	ldr	r2, [pc, #216]	@ (8103194 <sound+0x91c>)
 81030ba:	9201      	str	r2, [sp, #4]
 81030bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81030c0:	9200      	str	r2, [sp, #0]
 81030c2:	221f      	movs	r2, #31
 81030c4:	f240 1195 	movw	r1, #405	@ 0x195
 81030c8:	f240 2067 	movw	r0, #615	@ 0x267
 81030cc:	f7fe f89e 	bl	810120c <drawText>
	drawText(770,395,1,lightBlue,FT81x_OPT_RIGHTX, tmpFuelLeft);
 81030d0:	4b2f      	ldr	r3, [pc, #188]	@ (8103190 <sound+0x918>)
 81030d2:	681a      	ldr	r2, [r3, #0]
 81030d4:	1d3b      	adds	r3, r7, #4
 81030d6:	9301      	str	r3, [sp, #4]
 81030d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81030dc:	9300      	str	r3, [sp, #0]
 81030de:	4613      	mov	r3, r2
 81030e0:	2201      	movs	r2, #1
 81030e2:	f240 118b 	movw	r1, #395	@ 0x18b
 81030e6:	f240 3002 	movw	r0, #770	@ 0x302
 81030ea:	f7fe f88f 	bl	810120c <drawText>

    //SD Warning
	if (!(sdInitialized && sdPresent)) {
 81030ee:	4b2a      	ldr	r3, [pc, #168]	@ (8103198 <sound+0x920>)
 81030f0:	781b      	ldrb	r3, [r3, #0]
 81030f2:	2b00      	cmp	r3, #0
 81030f4:	d003      	beq.n	81030fe <sound+0x886>
 81030f6:	4b29      	ldr	r3, [pc, #164]	@ (810319c <sound+0x924>)
 81030f8:	781b      	ldrb	r3, [r3, #0]
 81030fa:	2b00      	cmp	r3, #0
 81030fc:	d10e      	bne.n	810311c <sound+0x8a4>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "NO SD");
 81030fe:	4b1f      	ldr	r3, [pc, #124]	@ (810317c <sound+0x904>)
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a27      	ldr	r2, [pc, #156]	@ (81031a0 <sound+0x928>)
 8103104:	9201      	str	r2, [sp, #4]
 8103106:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810310a:	9200      	str	r2, [sp, #0]
 810310c:	2201      	movs	r2, #1
 810310e:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8103112:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103116:	f7fe f879 	bl	810120c <drawText>
 810311a:	e011      	b.n	8103140 <sound+0x8c8>
	} else if (loggingStatus == 0) {
 810311c:	4b21      	ldr	r3, [pc, #132]	@ (81031a4 <sound+0x92c>)
 810311e:	781b      	ldrb	r3, [r3, #0]
 8103120:	2b00      	cmp	r3, #0
 8103122:	d10d      	bne.n	8103140 <sound+0x8c8>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "LOG OFF");
 8103124:	4b15      	ldr	r3, [pc, #84]	@ (810317c <sound+0x904>)
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	4a1f      	ldr	r2, [pc, #124]	@ (81031a8 <sound+0x930>)
 810312a:	9201      	str	r2, [sp, #4]
 810312c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8103130:	9200      	str	r2, [sp, #0]
 8103132:	2201      	movs	r2, #1
 8103134:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8103138:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 810313c:	f7fe f866 	bl	810120c <drawText>
	}

	drawText(400, 450, 31, white, FT81x_OPT_CENTER, "AUTOCROSS");
 8103140:	4b1a      	ldr	r3, [pc, #104]	@ (81031ac <sound+0x934>)
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	4a1a      	ldr	r2, [pc, #104]	@ (81031b0 <sound+0x938>)
 8103146:	9201      	str	r2, [sp, #4]
 8103148:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810314c:	9200      	str	r2, [sp, #0]
 810314e:	221f      	movs	r2, #31
 8103150:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8103154:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103158:	f7fe f858 	bl	810120c <drawText>

	swapScreen();
 810315c:	f7fe f91a 	bl	8101394 <swapScreen>
}
 8103160:	bf00      	nop
 8103162:	3748      	adds	r7, #72	@ 0x48
 8103164:	46bd      	mov	sp, r7
 8103166:	bd80      	pop	{r7, pc}
 8103168:	47ae147b 	.word	0x47ae147b
 810316c:	3f847ae1 	.word	0x3f847ae1
 8103170:	0810bd50 	.word	0x0810bd50
 8103174:	10000010 	.word	0x10000010
 8103178:	10000226 	.word	0x10000226
 810317c:	10000014 	.word	0x10000014
 8103180:	437a0000 	.word	0x437a0000
 8103184:	1000000c 	.word	0x1000000c
 8103188:	0810bd58 	.word	0x0810bd58
 810318c:	100003ec 	.word	0x100003ec
 8103190:	10000008 	.word	0x10000008
 8103194:	0810bd60 	.word	0x0810bd60
 8103198:	100003f3 	.word	0x100003f3
 810319c:	100003f4 	.word	0x100003f4
 81031a0:	0810bd68 	.word	0x0810bd68
 81031a4:	100003f7 	.word	0x100003f7
 81031a8:	0810bd70 	.word	0x0810bd70
 81031ac:	10000020 	.word	0x10000020
 81031b0:	0810bd88 	.word	0x0810bd88

081031b4 <accel>:

void accel() {
 81031b4:	b580      	push	{r7, lr}
 81031b6:	b086      	sub	sp, #24
 81031b8:	af02      	add	r7, sp, #8

	blinkActive = (curTime & 0b1000000000000) == 0b1000000000000 ? 1 : 0;
 81031ba:	4ba6      	ldr	r3, [pc, #664]	@ (8103454 <accel+0x2a0>)
 81031bc:	881b      	ldrh	r3, [r3, #0]
 81031be:	131b      	asrs	r3, r3, #12
 81031c0:	b2db      	uxtb	r3, r3
 81031c2:	f003 0301 	and.w	r3, r3, #1
 81031c6:	b2da      	uxtb	r2, r3
 81031c8:	4ba3      	ldr	r3, [pc, #652]	@ (8103458 <accel+0x2a4>)
 81031ca:	701a      	strb	r2, [r3, #0]
	// Set whether we need to shift or not
	if (rpm >= 9500) {
 81031cc:	4ba3      	ldr	r3, [pc, #652]	@ (810345c <accel+0x2a8>)
 81031ce:	881b      	ldrh	r3, [r3, #0]
 81031d0:	f242 521b 	movw	r2, #9499	@ 0x251b
 81031d4:	4293      	cmp	r3, r2
 81031d6:	d90d      	bls.n	81031f4 <accel+0x40>
		if ((curTime & 0b100000000000) == 0b100000000000) {
 81031d8:	4b9e      	ldr	r3, [pc, #632]	@ (8103454 <accel+0x2a0>)
 81031da:	881b      	ldrh	r3, [r3, #0]
 81031dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81031e0:	2b00      	cmp	r3, #0
 81031e2:	d003      	beq.n	81031ec <accel+0x38>
			shiftActive = 1;
 81031e4:	4b9e      	ldr	r3, [pc, #632]	@ (8103460 <accel+0x2ac>)
 81031e6:	2201      	movs	r2, #1
 81031e8:	701a      	strb	r2, [r3, #0]
 81031ea:	e006      	b.n	81031fa <accel+0x46>
		} else {
			shiftActive = 0;
 81031ec:	4b9c      	ldr	r3, [pc, #624]	@ (8103460 <accel+0x2ac>)
 81031ee:	2200      	movs	r2, #0
 81031f0:	701a      	strb	r2, [r3, #0]
 81031f2:	e002      	b.n	81031fa <accel+0x46>
		}
	} else {
		shiftActive = 0;
 81031f4:	4b9a      	ldr	r3, [pc, #616]	@ (8103460 <accel+0x2ac>)
 81031f6:	2200      	movs	r2, #0
 81031f8:	701a      	strb	r2, [r3, #0]
	}
	//does the above
	//shiftActive = rpm >= 9500 ? ((curTime & 0b100000000000) == 0b100000000000 ? 1 : 0) : 0;

	beginDisplayList();
 81031fa:	f7fe f8bb 	bl	8101374 <beginDisplayList>

	clear(shiftActive == 1 ? red : black);
 81031fe:	4b98      	ldr	r3, [pc, #608]	@ (8103460 <accel+0x2ac>)
 8103200:	781b      	ldrb	r3, [r3, #0]
 8103202:	2b01      	cmp	r3, #1
 8103204:	d102      	bne.n	810320c <accel+0x58>
 8103206:	4b97      	ldr	r3, [pc, #604]	@ (8103464 <accel+0x2b0>)
 8103208:	681b      	ldr	r3, [r3, #0]
 810320a:	e001      	b.n	8103210 <accel+0x5c>
 810320c:	4b96      	ldr	r3, [pc, #600]	@ (8103468 <accel+0x2b4>)
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4618      	mov	r0, r3
 8103212:	f7fd fe81 	bl	8100f18 <clear>

	initBitmapHandleForFont(32, 1);
 8103216:	2101      	movs	r1, #1
 8103218:	2020      	movs	r0, #32
 810321a:	f7fe f905 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(33, 2);
 810321e:	2102      	movs	r1, #2
 8103220:	2021      	movs	r0, #33	@ 0x21
 8103222:	f7fe f901 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(34, 3);
 8103226:	2103      	movs	r1, #3
 8103228:	2022      	movs	r0, #34	@ 0x22
 810322a:	f7fe f8fd 	bl	8101428 <initBitmapHandleForFont>

	/* Log Number */
	char logNumVal[6];
	sprintf(logNumVal, "%i", logNumber);
 810322e:	4b8f      	ldr	r3, [pc, #572]	@ (810346c <accel+0x2b8>)
 8103230:	781b      	ldrb	r3, [r3, #0]
 8103232:	461a      	mov	r2, r3
 8103234:	f107 0308 	add.w	r3, r7, #8
 8103238:	498d      	ldr	r1, [pc, #564]	@ (8103470 <accel+0x2bc>)
 810323a:	4618      	mov	r0, r3
 810323c:	f006 fc44 	bl	8109ac8 <siprintf>
	drawText(100, 30, 1, pink, FT81x_OPT_CENTER, logNumVal);
 8103240:	4b8c      	ldr	r3, [pc, #560]	@ (8103474 <accel+0x2c0>)
 8103242:	681a      	ldr	r2, [r3, #0]
 8103244:	f107 0308 	add.w	r3, r7, #8
 8103248:	9301      	str	r3, [sp, #4]
 810324a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 810324e:	9300      	str	r3, [sp, #0]
 8103250:	4613      	mov	r3, r2
 8103252:	2201      	movs	r2, #1
 8103254:	211e      	movs	r1, #30
 8103256:	2064      	movs	r0, #100	@ 0x64
 8103258:	f7fd ffd8 	bl	810120c <drawText>
	drawText(30,30,1,pink,FT81x_OPT_CENTER, "#");
 810325c:	4b85      	ldr	r3, [pc, #532]	@ (8103474 <accel+0x2c0>)
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a85      	ldr	r2, [pc, #532]	@ (8103478 <accel+0x2c4>)
 8103262:	9201      	str	r2, [sp, #4]
 8103264:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8103268:	9200      	str	r2, [sp, #0]
 810326a:	2201      	movs	r2, #1
 810326c:	211e      	movs	r1, #30
 810326e:	201e      	movs	r0, #30
 8103270:	f7fd ffcc 	bl	810120c <drawText>

	/* RPM */
	char rpmVal[6];
	rpm = rpm - (rpm % 100);
 8103274:	4b79      	ldr	r3, [pc, #484]	@ (810345c <accel+0x2a8>)
 8103276:	881a      	ldrh	r2, [r3, #0]
 8103278:	4b78      	ldr	r3, [pc, #480]	@ (810345c <accel+0x2a8>)
 810327a:	881b      	ldrh	r3, [r3, #0]
 810327c:	497f      	ldr	r1, [pc, #508]	@ (810347c <accel+0x2c8>)
 810327e:	fba1 0103 	umull	r0, r1, r1, r3
 8103282:	0949      	lsrs	r1, r1, #5
 8103284:	2064      	movs	r0, #100	@ 0x64
 8103286:	fb00 f101 	mul.w	r1, r0, r1
 810328a:	1a5b      	subs	r3, r3, r1
 810328c:	b29b      	uxth	r3, r3
 810328e:	1ad3      	subs	r3, r2, r3
 8103290:	b29a      	uxth	r2, r3
 8103292:	4b72      	ldr	r3, [pc, #456]	@ (810345c <accel+0x2a8>)
 8103294:	801a      	strh	r2, [r3, #0]
	sprintf(rpmVal, "%i", rpm);
 8103296:	4b71      	ldr	r3, [pc, #452]	@ (810345c <accel+0x2a8>)
 8103298:	881b      	ldrh	r3, [r3, #0]
 810329a:	461a      	mov	r2, r3
 810329c:	463b      	mov	r3, r7
 810329e:	4974      	ldr	r1, [pc, #464]	@ (8103470 <accel+0x2bc>)
 81032a0:	4618      	mov	r0, r3
 81032a2:	f006 fc11 	bl	8109ac8 <siprintf>
	drawText(140, 150, 3, shiftActive == 1 ? black : yellow, FT81x_OPT_CENTER, rpmVal);
 81032a6:	4b6e      	ldr	r3, [pc, #440]	@ (8103460 <accel+0x2ac>)
 81032a8:	781b      	ldrb	r3, [r3, #0]
 81032aa:	2b01      	cmp	r3, #1
 81032ac:	d102      	bne.n	81032b4 <accel+0x100>
 81032ae:	4b6e      	ldr	r3, [pc, #440]	@ (8103468 <accel+0x2b4>)
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	e001      	b.n	81032b8 <accel+0x104>
 81032b4:	4b72      	ldr	r3, [pc, #456]	@ (8103480 <accel+0x2cc>)
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	463a      	mov	r2, r7
 81032ba:	9201      	str	r2, [sp, #4]
 81032bc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81032c0:	9200      	str	r2, [sp, #0]
 81032c2:	2203      	movs	r2, #3
 81032c4:	2196      	movs	r1, #150	@ 0x96
 81032c6:	208c      	movs	r0, #140	@ 0x8c
 81032c8:	f7fd ffa0 	bl	810120c <drawText>
	drawText(140,230,2,shiftActive == 1 ? black : yellow,FT81x_OPT_CENTER, "RPM");
 81032cc:	4b64      	ldr	r3, [pc, #400]	@ (8103460 <accel+0x2ac>)
 81032ce:	781b      	ldrb	r3, [r3, #0]
 81032d0:	2b01      	cmp	r3, #1
 81032d2:	d102      	bne.n	81032da <accel+0x126>
 81032d4:	4b64      	ldr	r3, [pc, #400]	@ (8103468 <accel+0x2b4>)
 81032d6:	681b      	ldr	r3, [r3, #0]
 81032d8:	e001      	b.n	81032de <accel+0x12a>
 81032da:	4b69      	ldr	r3, [pc, #420]	@ (8103480 <accel+0x2cc>)
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	4a69      	ldr	r2, [pc, #420]	@ (8103484 <accel+0x2d0>)
 81032e0:	9201      	str	r2, [sp, #4]
 81032e2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81032e6:	9200      	str	r2, [sp, #0]
 81032e8:	2202      	movs	r2, #2
 81032ea:	21e6      	movs	r1, #230	@ 0xe6
 81032ec:	208c      	movs	r0, #140	@ 0x8c
 81032ee:	f7fd ff8d 	bl	810120c <drawText>

	/* GEAR */
	switch (gear) {
 81032f2:	4b65      	ldr	r3, [pc, #404]	@ (8103488 <accel+0x2d4>)
 81032f4:	881b      	ldrh	r3, [r3, #0]
 81032f6:	2b05      	cmp	r3, #5
 81032f8:	f200 8216 	bhi.w	8103728 <accel+0x574>
 81032fc:	a201      	add	r2, pc, #4	@ (adr r2, 8103304 <accel+0x150>)
 81032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103302:	bf00      	nop
 8103304:	0810331d 	.word	0x0810331d
 8103308:	0810339d 	.word	0x0810339d
 810330c:	0810341d 	.word	0x0810341d
 8103310:	08103527 	.word	0x08103527
 8103314:	081035cf 	.word	0x081035cf
 8103318:	0810364b 	.word	0x0810364b
		case 0:
			drawLine(320, 300, 320, 80, 8, shiftActive == 1 ? black : pink);
 810331c:	4b50      	ldr	r3, [pc, #320]	@ (8103460 <accel+0x2ac>)
 810331e:	781b      	ldrb	r3, [r3, #0]
 8103320:	2b01      	cmp	r3, #1
 8103322:	d102      	bne.n	810332a <accel+0x176>
 8103324:	4b50      	ldr	r3, [pc, #320]	@ (8103468 <accel+0x2b4>)
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	e001      	b.n	810332e <accel+0x17a>
 810332a:	4b52      	ldr	r3, [pc, #328]	@ (8103474 <accel+0x2c0>)
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	9301      	str	r3, [sp, #4]
 8103330:	2308      	movs	r3, #8
 8103332:	9300      	str	r3, [sp, #0]
 8103334:	2350      	movs	r3, #80	@ 0x50
 8103336:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 810333a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 810333e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103342:	f7fd fe53 	bl	8100fec <drawLine>
			drawLine(320, 80, 480, 300, 8, shiftActive == 1 ? black : pink);
 8103346:	4b46      	ldr	r3, [pc, #280]	@ (8103460 <accel+0x2ac>)
 8103348:	781b      	ldrb	r3, [r3, #0]
 810334a:	2b01      	cmp	r3, #1
 810334c:	d102      	bne.n	8103354 <accel+0x1a0>
 810334e:	4b46      	ldr	r3, [pc, #280]	@ (8103468 <accel+0x2b4>)
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	e001      	b.n	8103358 <accel+0x1a4>
 8103354:	4b47      	ldr	r3, [pc, #284]	@ (8103474 <accel+0x2c0>)
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	9301      	str	r3, [sp, #4]
 810335a:	2308      	movs	r3, #8
 810335c:	9300      	str	r3, [sp, #0]
 810335e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103362:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103366:	2150      	movs	r1, #80	@ 0x50
 8103368:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810336c:	f7fd fe3e 	bl	8100fec <drawLine>
			drawLine(480, 300, 480, 80, 8, shiftActive == 1 ? black : pink);
 8103370:	4b3b      	ldr	r3, [pc, #236]	@ (8103460 <accel+0x2ac>)
 8103372:	781b      	ldrb	r3, [r3, #0]
 8103374:	2b01      	cmp	r3, #1
 8103376:	d102      	bne.n	810337e <accel+0x1ca>
 8103378:	4b3b      	ldr	r3, [pc, #236]	@ (8103468 <accel+0x2b4>)
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	e001      	b.n	8103382 <accel+0x1ce>
 810337e:	4b3d      	ldr	r3, [pc, #244]	@ (8103474 <accel+0x2c0>)
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	9301      	str	r3, [sp, #4]
 8103384:	2308      	movs	r3, #8
 8103386:	9300      	str	r3, [sp, #0]
 8103388:	2350      	movs	r3, #80	@ 0x50
 810338a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810338e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103392:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8103396:	f7fd fe29 	bl	8100fec <drawLine>
			break;
 810339a:	e1c5      	b.n	8103728 <accel+0x574>

		case 1:
			drawLine(400, 300, 400, 80, 8, shiftActive == 1 ? black : pink);
 810339c:	4b30      	ldr	r3, [pc, #192]	@ (8103460 <accel+0x2ac>)
 810339e:	781b      	ldrb	r3, [r3, #0]
 81033a0:	2b01      	cmp	r3, #1
 81033a2:	d102      	bne.n	81033aa <accel+0x1f6>
 81033a4:	4b30      	ldr	r3, [pc, #192]	@ (8103468 <accel+0x2b4>)
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	e001      	b.n	81033ae <accel+0x1fa>
 81033aa:	4b32      	ldr	r3, [pc, #200]	@ (8103474 <accel+0x2c0>)
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	9301      	str	r3, [sp, #4]
 81033b0:	2308      	movs	r3, #8
 81033b2:	9300      	str	r3, [sp, #0]
 81033b4:	2350      	movs	r3, #80	@ 0x50
 81033b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 81033ba:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81033be:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 81033c2:	f7fd fe13 	bl	8100fec <drawLine>
			drawLine(400, 80, 350, 110, 8, shiftActive == 1 ? black : pink);
 81033c6:	4b26      	ldr	r3, [pc, #152]	@ (8103460 <accel+0x2ac>)
 81033c8:	781b      	ldrb	r3, [r3, #0]
 81033ca:	2b01      	cmp	r3, #1
 81033cc:	d102      	bne.n	81033d4 <accel+0x220>
 81033ce:	4b26      	ldr	r3, [pc, #152]	@ (8103468 <accel+0x2b4>)
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	e001      	b.n	81033d8 <accel+0x224>
 81033d4:	4b27      	ldr	r3, [pc, #156]	@ (8103474 <accel+0x2c0>)
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	9301      	str	r3, [sp, #4]
 81033da:	2308      	movs	r3, #8
 81033dc:	9300      	str	r3, [sp, #0]
 81033de:	236e      	movs	r3, #110	@ 0x6e
 81033e0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 81033e4:	2150      	movs	r1, #80	@ 0x50
 81033e6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 81033ea:	f7fd fdff 	bl	8100fec <drawLine>
			drawLine(340, 300, 460, 300, 8, shiftActive == 1 ? black : pink);
 81033ee:	4b1c      	ldr	r3, [pc, #112]	@ (8103460 <accel+0x2ac>)
 81033f0:	781b      	ldrb	r3, [r3, #0]
 81033f2:	2b01      	cmp	r3, #1
 81033f4:	d102      	bne.n	81033fc <accel+0x248>
 81033f6:	4b1c      	ldr	r3, [pc, #112]	@ (8103468 <accel+0x2b4>)
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	e001      	b.n	8103400 <accel+0x24c>
 81033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8103474 <accel+0x2c0>)
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	9301      	str	r3, [sp, #4]
 8103402:	2308      	movs	r3, #8
 8103404:	9300      	str	r3, [sp, #0]
 8103406:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 810340a:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 810340e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103412:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8103416:	f7fd fde9 	bl	8100fec <drawLine>
			break;
 810341a:	e185      	b.n	8103728 <accel+0x574>

		case 2:
			drawLine(320, 80, 480, 80, 8, shiftActive == 1 ? black : pink);
 810341c:	4b10      	ldr	r3, [pc, #64]	@ (8103460 <accel+0x2ac>)
 810341e:	781b      	ldrb	r3, [r3, #0]
 8103420:	2b01      	cmp	r3, #1
 8103422:	d102      	bne.n	810342a <accel+0x276>
 8103424:	4b10      	ldr	r3, [pc, #64]	@ (8103468 <accel+0x2b4>)
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	e001      	b.n	810342e <accel+0x27a>
 810342a:	4b12      	ldr	r3, [pc, #72]	@ (8103474 <accel+0x2c0>)
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	9301      	str	r3, [sp, #4]
 8103430:	2308      	movs	r3, #8
 8103432:	9300      	str	r3, [sp, #0]
 8103434:	2350      	movs	r3, #80	@ 0x50
 8103436:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810343a:	2150      	movs	r1, #80	@ 0x50
 810343c:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103440:	f7fd fdd4 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 190, 8, shiftActive == 1 ? black : pink);
 8103444:	4b06      	ldr	r3, [pc, #24]	@ (8103460 <accel+0x2ac>)
 8103446:	781b      	ldrb	r3, [r3, #0]
 8103448:	2b01      	cmp	r3, #1
 810344a:	d11f      	bne.n	810348c <accel+0x2d8>
 810344c:	4b06      	ldr	r3, [pc, #24]	@ (8103468 <accel+0x2b4>)
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	e01e      	b.n	8103490 <accel+0x2dc>
 8103452:	bf00      	nop
 8103454:	10000224 	.word	0x10000224
 8103458:	10000226 	.word	0x10000226
 810345c:	100003f2 	.word	0x100003f2
 8103460:	10000227 	.word	0x10000227
 8103464:	10000014 	.word	0x10000014
 8103468:	10000220 	.word	0x10000220
 810346c:	100003f8 	.word	0x100003f8
 8103470:	0810bd38 	.word	0x0810bd38
 8103474:	1000001c 	.word	0x1000001c
 8103478:	0810bd3c 	.word	0x0810bd3c
 810347c:	51eb851f 	.word	0x51eb851f
 8103480:	10000010 	.word	0x10000010
 8103484:	0810bd48 	.word	0x0810bd48
 8103488:	100003e4 	.word	0x100003e4
 810348c:	4b9b      	ldr	r3, [pc, #620]	@ (81036fc <accel+0x548>)
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	9301      	str	r3, [sp, #4]
 8103492:	2308      	movs	r3, #8
 8103494:	9300      	str	r3, [sp, #0]
 8103496:	23be      	movs	r3, #190	@ 0xbe
 8103498:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810349c:	2150      	movs	r1, #80	@ 0x50
 810349e:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 81034a2:	f7fd fda3 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, shiftActive == 1 ? black : pink);
 81034a6:	4b96      	ldr	r3, [pc, #600]	@ (8103700 <accel+0x54c>)
 81034a8:	781b      	ldrb	r3, [r3, #0]
 81034aa:	2b01      	cmp	r3, #1
 81034ac:	d102      	bne.n	81034b4 <accel+0x300>
 81034ae:	4b95      	ldr	r3, [pc, #596]	@ (8103704 <accel+0x550>)
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	e001      	b.n	81034b8 <accel+0x304>
 81034b4:	4b91      	ldr	r3, [pc, #580]	@ (81036fc <accel+0x548>)
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	9301      	str	r3, [sp, #4]
 81034ba:	2308      	movs	r3, #8
 81034bc:	9300      	str	r3, [sp, #0]
 81034be:	23be      	movs	r3, #190	@ 0xbe
 81034c0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81034c4:	21be      	movs	r1, #190	@ 0xbe
 81034c6:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81034ca:	f7fd fd8f 	bl	8100fec <drawLine>
			drawLine(320, 190, 320, 300, 8, shiftActive == 1 ? black : pink);
 81034ce:	4b8c      	ldr	r3, [pc, #560]	@ (8103700 <accel+0x54c>)
 81034d0:	781b      	ldrb	r3, [r3, #0]
 81034d2:	2b01      	cmp	r3, #1
 81034d4:	d102      	bne.n	81034dc <accel+0x328>
 81034d6:	4b8b      	ldr	r3, [pc, #556]	@ (8103704 <accel+0x550>)
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	e001      	b.n	81034e0 <accel+0x32c>
 81034dc:	4b87      	ldr	r3, [pc, #540]	@ (81036fc <accel+0x548>)
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	9301      	str	r3, [sp, #4]
 81034e2:	2308      	movs	r3, #8
 81034e4:	9300      	str	r3, [sp, #0]
 81034e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81034ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 81034ee:	21be      	movs	r1, #190	@ 0xbe
 81034f0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81034f4:	f7fd fd7a 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, shiftActive == 1 ? black : pink);
 81034f8:	4b81      	ldr	r3, [pc, #516]	@ (8103700 <accel+0x54c>)
 81034fa:	781b      	ldrb	r3, [r3, #0]
 81034fc:	2b01      	cmp	r3, #1
 81034fe:	d102      	bne.n	8103506 <accel+0x352>
 8103500:	4b80      	ldr	r3, [pc, #512]	@ (8103704 <accel+0x550>)
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	e001      	b.n	810350a <accel+0x356>
 8103506:	4b7d      	ldr	r3, [pc, #500]	@ (81036fc <accel+0x548>)
 8103508:	681b      	ldr	r3, [r3, #0]
 810350a:	9301      	str	r3, [sp, #4]
 810350c:	2308      	movs	r3, #8
 810350e:	9300      	str	r3, [sp, #0]
 8103510:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103514:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103518:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 810351c:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103520:	f7fd fd64 	bl	8100fec <drawLine>
			break;
 8103524:	e100      	b.n	8103728 <accel+0x574>

		case 3:
			drawLine(320, 80, 480, 80, 8, shiftActive == 1 ? black : pink);
 8103526:	4b76      	ldr	r3, [pc, #472]	@ (8103700 <accel+0x54c>)
 8103528:	781b      	ldrb	r3, [r3, #0]
 810352a:	2b01      	cmp	r3, #1
 810352c:	d102      	bne.n	8103534 <accel+0x380>
 810352e:	4b75      	ldr	r3, [pc, #468]	@ (8103704 <accel+0x550>)
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	e001      	b.n	8103538 <accel+0x384>
 8103534:	4b71      	ldr	r3, [pc, #452]	@ (81036fc <accel+0x548>)
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	9301      	str	r3, [sp, #4]
 810353a:	2308      	movs	r3, #8
 810353c:	9300      	str	r3, [sp, #0]
 810353e:	2350      	movs	r3, #80	@ 0x50
 8103540:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103544:	2150      	movs	r1, #80	@ 0x50
 8103546:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810354a:	f7fd fd4f 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 300, 8, shiftActive == 1 ? black : pink);
 810354e:	4b6c      	ldr	r3, [pc, #432]	@ (8103700 <accel+0x54c>)
 8103550:	781b      	ldrb	r3, [r3, #0]
 8103552:	2b01      	cmp	r3, #1
 8103554:	d102      	bne.n	810355c <accel+0x3a8>
 8103556:	4b6b      	ldr	r3, [pc, #428]	@ (8103704 <accel+0x550>)
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	e001      	b.n	8103560 <accel+0x3ac>
 810355c:	4b67      	ldr	r3, [pc, #412]	@ (81036fc <accel+0x548>)
 810355e:	681b      	ldr	r3, [r3, #0]
 8103560:	9301      	str	r3, [sp, #4]
 8103562:	2308      	movs	r3, #8
 8103564:	9300      	str	r3, [sp, #0]
 8103566:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 810356a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810356e:	2150      	movs	r1, #80	@ 0x50
 8103570:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8103574:	f7fd fd3a 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, shiftActive == 1 ? black : pink);
 8103578:	4b61      	ldr	r3, [pc, #388]	@ (8103700 <accel+0x54c>)
 810357a:	781b      	ldrb	r3, [r3, #0]
 810357c:	2b01      	cmp	r3, #1
 810357e:	d102      	bne.n	8103586 <accel+0x3d2>
 8103580:	4b60      	ldr	r3, [pc, #384]	@ (8103704 <accel+0x550>)
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	e001      	b.n	810358a <accel+0x3d6>
 8103586:	4b5d      	ldr	r3, [pc, #372]	@ (81036fc <accel+0x548>)
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	9301      	str	r3, [sp, #4]
 810358c:	2308      	movs	r3, #8
 810358e:	9300      	str	r3, [sp, #0]
 8103590:	23be      	movs	r3, #190	@ 0xbe
 8103592:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103596:	21be      	movs	r1, #190	@ 0xbe
 8103598:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810359c:	f7fd fd26 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, shiftActive == 1 ? black : pink);
 81035a0:	4b57      	ldr	r3, [pc, #348]	@ (8103700 <accel+0x54c>)
 81035a2:	781b      	ldrb	r3, [r3, #0]
 81035a4:	2b01      	cmp	r3, #1
 81035a6:	d102      	bne.n	81035ae <accel+0x3fa>
 81035a8:	4b56      	ldr	r3, [pc, #344]	@ (8103704 <accel+0x550>)
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	e001      	b.n	81035b2 <accel+0x3fe>
 81035ae:	4b53      	ldr	r3, [pc, #332]	@ (81036fc <accel+0x548>)
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	9301      	str	r3, [sp, #4]
 81035b4:	2308      	movs	r3, #8
 81035b6:	9300      	str	r3, [sp, #0]
 81035b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81035bc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81035c0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81035c4:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81035c8:	f7fd fd10 	bl	8100fec <drawLine>
			break;
 81035cc:	e0ac      	b.n	8103728 <accel+0x574>

		case 4:
			drawLine(420, 300, 420, 80, 8, shiftActive == 1 ? black : pink);
 81035ce:	4b4c      	ldr	r3, [pc, #304]	@ (8103700 <accel+0x54c>)
 81035d0:	781b      	ldrb	r3, [r3, #0]
 81035d2:	2b01      	cmp	r3, #1
 81035d4:	d102      	bne.n	81035dc <accel+0x428>
 81035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8103704 <accel+0x550>)
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	e001      	b.n	81035e0 <accel+0x42c>
 81035dc:	4b47      	ldr	r3, [pc, #284]	@ (81036fc <accel+0x548>)
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	9301      	str	r3, [sp, #4]
 81035e2:	2308      	movs	r3, #8
 81035e4:	9300      	str	r3, [sp, #0]
 81035e6:	2350      	movs	r3, #80	@ 0x50
 81035e8:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 81035ec:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81035f0:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 81035f4:	f7fd fcfa 	bl	8100fec <drawLine>
			drawLine(420, 80, 320, 230, 8, shiftActive == 1 ? black : pink);
 81035f8:	4b41      	ldr	r3, [pc, #260]	@ (8103700 <accel+0x54c>)
 81035fa:	781b      	ldrb	r3, [r3, #0]
 81035fc:	2b01      	cmp	r3, #1
 81035fe:	d102      	bne.n	8103606 <accel+0x452>
 8103600:	4b40      	ldr	r3, [pc, #256]	@ (8103704 <accel+0x550>)
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	e001      	b.n	810360a <accel+0x456>
 8103606:	4b3d      	ldr	r3, [pc, #244]	@ (81036fc <accel+0x548>)
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	9301      	str	r3, [sp, #4]
 810360c:	2308      	movs	r3, #8
 810360e:	9300      	str	r3, [sp, #0]
 8103610:	23e6      	movs	r3, #230	@ 0xe6
 8103612:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8103616:	2150      	movs	r1, #80	@ 0x50
 8103618:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 810361c:	f7fd fce6 	bl	8100fec <drawLine>
			drawLine(320, 230, 450, 230, 8, shiftActive == 1 ? black : pink);
 8103620:	4b37      	ldr	r3, [pc, #220]	@ (8103700 <accel+0x54c>)
 8103622:	781b      	ldrb	r3, [r3, #0]
 8103624:	2b01      	cmp	r3, #1
 8103626:	d102      	bne.n	810362e <accel+0x47a>
 8103628:	4b36      	ldr	r3, [pc, #216]	@ (8103704 <accel+0x550>)
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	e001      	b.n	8103632 <accel+0x47e>
 810362e:	4b33      	ldr	r3, [pc, #204]	@ (81036fc <accel+0x548>)
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	9301      	str	r3, [sp, #4]
 8103634:	2308      	movs	r3, #8
 8103636:	9300      	str	r3, [sp, #0]
 8103638:	23e6      	movs	r3, #230	@ 0xe6
 810363a:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 810363e:	21e6      	movs	r1, #230	@ 0xe6
 8103640:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103644:	f7fd fcd2 	bl	8100fec <drawLine>
			break;
 8103648:	e06e      	b.n	8103728 <accel+0x574>

		case 5:
			drawLine(320, 80, 480, 80, 8, shiftActive == 1 ? black : pink);
 810364a:	4b2d      	ldr	r3, [pc, #180]	@ (8103700 <accel+0x54c>)
 810364c:	781b      	ldrb	r3, [r3, #0]
 810364e:	2b01      	cmp	r3, #1
 8103650:	d102      	bne.n	8103658 <accel+0x4a4>
 8103652:	4b2c      	ldr	r3, [pc, #176]	@ (8103704 <accel+0x550>)
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	e001      	b.n	810365c <accel+0x4a8>
 8103658:	4b28      	ldr	r3, [pc, #160]	@ (81036fc <accel+0x548>)
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	9301      	str	r3, [sp, #4]
 810365e:	2308      	movs	r3, #8
 8103660:	9300      	str	r3, [sp, #0]
 8103662:	2350      	movs	r3, #80	@ 0x50
 8103664:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103668:	2150      	movs	r1, #80	@ 0x50
 810366a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810366e:	f7fd fcbd 	bl	8100fec <drawLine>
			drawLine(320, 80, 320, 190, 8, shiftActive == 1 ? black : pink);
 8103672:	4b23      	ldr	r3, [pc, #140]	@ (8103700 <accel+0x54c>)
 8103674:	781b      	ldrb	r3, [r3, #0]
 8103676:	2b01      	cmp	r3, #1
 8103678:	d102      	bne.n	8103680 <accel+0x4cc>
 810367a:	4b22      	ldr	r3, [pc, #136]	@ (8103704 <accel+0x550>)
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	e001      	b.n	8103684 <accel+0x4d0>
 8103680:	4b1e      	ldr	r3, [pc, #120]	@ (81036fc <accel+0x548>)
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	9301      	str	r3, [sp, #4]
 8103686:	2308      	movs	r3, #8
 8103688:	9300      	str	r3, [sp, #0]
 810368a:	23be      	movs	r3, #190	@ 0xbe
 810368c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8103690:	2150      	movs	r1, #80	@ 0x50
 8103692:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103696:	f7fd fca9 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, shiftActive == 1 ? black : pink);
 810369a:	4b19      	ldr	r3, [pc, #100]	@ (8103700 <accel+0x54c>)
 810369c:	781b      	ldrb	r3, [r3, #0]
 810369e:	2b01      	cmp	r3, #1
 81036a0:	d102      	bne.n	81036a8 <accel+0x4f4>
 81036a2:	4b18      	ldr	r3, [pc, #96]	@ (8103704 <accel+0x550>)
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	e001      	b.n	81036ac <accel+0x4f8>
 81036a8:	4b14      	ldr	r3, [pc, #80]	@ (81036fc <accel+0x548>)
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	9301      	str	r3, [sp, #4]
 81036ae:	2308      	movs	r3, #8
 81036b0:	9300      	str	r3, [sp, #0]
 81036b2:	23be      	movs	r3, #190	@ 0xbe
 81036b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81036b8:	21be      	movs	r1, #190	@ 0xbe
 81036ba:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 81036be:	f7fd fc95 	bl	8100fec <drawLine>
			drawLine(480, 190, 480, 300, 8, shiftActive == 1 ? black : pink);
 81036c2:	4b0f      	ldr	r3, [pc, #60]	@ (8103700 <accel+0x54c>)
 81036c4:	781b      	ldrb	r3, [r3, #0]
 81036c6:	2b01      	cmp	r3, #1
 81036c8:	d102      	bne.n	81036d0 <accel+0x51c>
 81036ca:	4b0e      	ldr	r3, [pc, #56]	@ (8103704 <accel+0x550>)
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	e001      	b.n	81036d4 <accel+0x520>
 81036d0:	4b0a      	ldr	r3, [pc, #40]	@ (81036fc <accel+0x548>)
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	9301      	str	r3, [sp, #4]
 81036d6:	2308      	movs	r3, #8
 81036d8:	9300      	str	r3, [sp, #0]
 81036da:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 81036de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81036e2:	21be      	movs	r1, #190	@ 0xbe
 81036e4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 81036e8:	f7fd fc80 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, shiftActive == 1 ? black : pink);
 81036ec:	4b04      	ldr	r3, [pc, #16]	@ (8103700 <accel+0x54c>)
 81036ee:	781b      	ldrb	r3, [r3, #0]
 81036f0:	2b01      	cmp	r3, #1
 81036f2:	d109      	bne.n	8103708 <accel+0x554>
 81036f4:	4b03      	ldr	r3, [pc, #12]	@ (8103704 <accel+0x550>)
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	e008      	b.n	810370c <accel+0x558>
 81036fa:	bf00      	nop
 81036fc:	1000001c 	.word	0x1000001c
 8103700:	10000227 	.word	0x10000227
 8103704:	10000220 	.word	0x10000220
 8103708:	4b26      	ldr	r3, [pc, #152]	@ (81037a4 <accel+0x5f0>)
 810370a:	681b      	ldr	r3, [r3, #0]
 810370c:	9301      	str	r3, [sp, #4]
 810370e:	2308      	movs	r3, #8
 8103710:	9300      	str	r3, [sp, #0]
 8103712:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103716:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810371a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 810371e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103722:	f7fd fc63 	bl	8100fec <drawLine>
			break;
 8103726:	bf00      	nop
	}

	//SD Warning
	if (!(sdInitialized && sdPresent)) {
 8103728:	4b1f      	ldr	r3, [pc, #124]	@ (81037a8 <accel+0x5f4>)
 810372a:	781b      	ldrb	r3, [r3, #0]
 810372c:	2b00      	cmp	r3, #0
 810372e:	d003      	beq.n	8103738 <accel+0x584>
 8103730:	4b1e      	ldr	r3, [pc, #120]	@ (81037ac <accel+0x5f8>)
 8103732:	781b      	ldrb	r3, [r3, #0]
 8103734:	2b00      	cmp	r3, #0
 8103736:	d10e      	bne.n	8103756 <accel+0x5a2>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "NO SD");
 8103738:	4b1d      	ldr	r3, [pc, #116]	@ (81037b0 <accel+0x5fc>)
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	4a1d      	ldr	r2, [pc, #116]	@ (81037b4 <accel+0x600>)
 810373e:	9201      	str	r2, [sp, #4]
 8103740:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8103744:	9200      	str	r2, [sp, #0]
 8103746:	2201      	movs	r2, #1
 8103748:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 810374c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103750:	f7fd fd5c 	bl	810120c <drawText>
 8103754:	e011      	b.n	810377a <accel+0x5c6>
	} else if (loggingStatus == 0) {
 8103756:	4b18      	ldr	r3, [pc, #96]	@ (81037b8 <accel+0x604>)
 8103758:	781b      	ldrb	r3, [r3, #0]
 810375a:	2b00      	cmp	r3, #0
 810375c:	d10d      	bne.n	810377a <accel+0x5c6>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "LOG OFF");
 810375e:	4b14      	ldr	r3, [pc, #80]	@ (81037b0 <accel+0x5fc>)
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	4a16      	ldr	r2, [pc, #88]	@ (81037bc <accel+0x608>)
 8103764:	9201      	str	r2, [sp, #4]
 8103766:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810376a:	9200      	str	r2, [sp, #0]
 810376c:	2201      	movs	r2, #1
 810376e:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8103772:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103776:	f7fd fd49 	bl	810120c <drawText>
	}

	drawText(400, 450, 31, white, FT81x_OPT_CENTER, "ACCEL");
 810377a:	4b11      	ldr	r3, [pc, #68]	@ (81037c0 <accel+0x60c>)
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	4a11      	ldr	r2, [pc, #68]	@ (81037c4 <accel+0x610>)
 8103780:	9201      	str	r2, [sp, #4]
 8103782:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8103786:	9200      	str	r2, [sp, #0]
 8103788:	221f      	movs	r2, #31
 810378a:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 810378e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103792:	f7fd fd3b 	bl	810120c <drawText>

	swapScreen();
 8103796:	f7fd fdfd 	bl	8101394 <swapScreen>
}
 810379a:	bf00      	nop
 810379c:	3710      	adds	r7, #16
 810379e:	46bd      	mov	sp, r7
 81037a0:	bd80      	pop	{r7, pc}
 81037a2:	bf00      	nop
 81037a4:	1000001c 	.word	0x1000001c
 81037a8:	100003fd 	.word	0x100003fd
 81037ac:	100003fe 	.word	0x100003fe
 81037b0:	10000014 	.word	0x10000014
 81037b4:	0810bd68 	.word	0x0810bd68
 81037b8:	100003f7 	.word	0x100003f7
 81037bc:	0810bd70 	.word	0x0810bd70
 81037c0:	10000020 	.word	0x10000020
 81037c4:	0810bd94 	.word	0x0810bd94

081037c8 <sensors>:
	drawText(400, 450, 31, white, FT81x_OPT_CENTER, "DIAG");

	swapScreen();
}

void sensors() {
 81037c8:	b580      	push	{r7, lr}
 81037ca:	b08c      	sub	sp, #48	@ 0x30
 81037cc:	af02      	add	r7, sp, #8
	blinkActive = (curTime & 0b1000000000000) == 0b1000000000000 ? 1 : 0;
 81037ce:	4ba7      	ldr	r3, [pc, #668]	@ (8103a6c <sensors+0x2a4>)
 81037d0:	881b      	ldrh	r3, [r3, #0]
 81037d2:	131b      	asrs	r3, r3, #12
 81037d4:	b2db      	uxtb	r3, r3
 81037d6:	f003 0301 	and.w	r3, r3, #1
 81037da:	b2da      	uxtb	r2, r3
 81037dc:	4ba4      	ldr	r3, [pc, #656]	@ (8103a70 <sensors+0x2a8>)
 81037de:	701a      	strb	r2, [r3, #0]
	// Set whether we need to shift or not
	if (rpm >= 9500) {
 81037e0:	4ba4      	ldr	r3, [pc, #656]	@ (8103a74 <sensors+0x2ac>)
 81037e2:	881b      	ldrh	r3, [r3, #0]
 81037e4:	f242 521b 	movw	r2, #9499	@ 0x251b
 81037e8:	4293      	cmp	r3, r2
 81037ea:	d90d      	bls.n	8103808 <sensors+0x40>
		if ((curTime & 0b100000000000) == 0b100000000000) {
 81037ec:	4b9f      	ldr	r3, [pc, #636]	@ (8103a6c <sensors+0x2a4>)
 81037ee:	881b      	ldrh	r3, [r3, #0]
 81037f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81037f4:	2b00      	cmp	r3, #0
 81037f6:	d003      	beq.n	8103800 <sensors+0x38>
			shiftActive = 1;
 81037f8:	4b9f      	ldr	r3, [pc, #636]	@ (8103a78 <sensors+0x2b0>)
 81037fa:	2201      	movs	r2, #1
 81037fc:	701a      	strb	r2, [r3, #0]
 81037fe:	e006      	b.n	810380e <sensors+0x46>
		} else {
			shiftActive = 0;
 8103800:	4b9d      	ldr	r3, [pc, #628]	@ (8103a78 <sensors+0x2b0>)
 8103802:	2200      	movs	r2, #0
 8103804:	701a      	strb	r2, [r3, #0]
 8103806:	e002      	b.n	810380e <sensors+0x46>
		}
	} else {
		shiftActive = 0;
 8103808:	4b9b      	ldr	r3, [pc, #620]	@ (8103a78 <sensors+0x2b0>)
 810380a:	2200      	movs	r2, #0
 810380c:	701a      	strb	r2, [r3, #0]
	}
	//does the above
	//shiftActive = rpm >= 9500 ? ((curTime & 0b100000000000) == 0b100000000000 ? 1 : 0) : 0;

	beginDisplayList();
 810380e:	f7fd fdb1 	bl	8101374 <beginDisplayList>

	clear(shiftActive == 1 ? red : black);
 8103812:	4b99      	ldr	r3, [pc, #612]	@ (8103a78 <sensors+0x2b0>)
 8103814:	781b      	ldrb	r3, [r3, #0]
 8103816:	2b01      	cmp	r3, #1
 8103818:	d102      	bne.n	8103820 <sensors+0x58>
 810381a:	4b98      	ldr	r3, [pc, #608]	@ (8103a7c <sensors+0x2b4>)
 810381c:	681b      	ldr	r3, [r3, #0]
 810381e:	e001      	b.n	8103824 <sensors+0x5c>
 8103820:	4b97      	ldr	r3, [pc, #604]	@ (8103a80 <sensors+0x2b8>)
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	4618      	mov	r0, r3
 8103826:	f7fd fb77 	bl	8100f18 <clear>

	initBitmapHandleForFont(32, 1);
 810382a:	2101      	movs	r1, #1
 810382c:	2020      	movs	r0, #32
 810382e:	f7fd fdfb 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(33, 2);
 8103832:	2102      	movs	r1, #2
 8103834:	2021      	movs	r0, #33	@ 0x21
 8103836:	f7fd fdf7 	bl	8101428 <initBitmapHandleForFont>
	initBitmapHandleForFont(34, 3);
 810383a:	2103      	movs	r1, #3
 810383c:	2022      	movs	r0, #34	@ 0x22
 810383e:	f7fd fdf3 	bl	8101428 <initBitmapHandleForFont>

	/* Log Number */
	char logNumVal[6];
	sprintf(logNumVal, "%i", logNumber);
 8103842:	4b90      	ldr	r3, [pc, #576]	@ (8103a84 <sensors+0x2bc>)
 8103844:	781b      	ldrb	r3, [r3, #0]
 8103846:	461a      	mov	r2, r3
 8103848:	f107 0318 	add.w	r3, r7, #24
 810384c:	498e      	ldr	r1, [pc, #568]	@ (8103a88 <sensors+0x2c0>)
 810384e:	4618      	mov	r0, r3
 8103850:	f006 fe52 	bl	810a4f8 <siprintf>
	drawText(100, 30, 1, pink, FT81x_OPT_CENTER, logNumVal);
 8103854:	4b8d      	ldr	r3, [pc, #564]	@ (8103a8c <sensors+0x2c4>)
 8103856:	681a      	ldr	r2, [r3, #0]
 8103858:	f107 0318 	add.w	r3, r7, #24
 810385c:	9301      	str	r3, [sp, #4]
 810385e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8103862:	9300      	str	r3, [sp, #0]
 8103864:	4613      	mov	r3, r2
 8103866:	2201      	movs	r2, #1
 8103868:	211e      	movs	r1, #30
 810386a:	2064      	movs	r0, #100	@ 0x64
 810386c:	f7fd fcce 	bl	810120c <drawText>
	drawText(30,30,1,pink,FT81x_OPT_CENTER, "#");
 8103870:	4b86      	ldr	r3, [pc, #536]	@ (8103a8c <sensors+0x2c4>)
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	4a86      	ldr	r2, [pc, #536]	@ (8103a90 <sensors+0x2c8>)
 8103876:	9201      	str	r2, [sp, #4]
 8103878:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810387c:	9200      	str	r2, [sp, #0]
 810387e:	2201      	movs	r2, #1
 8103880:	211e      	movs	r1, #30
 8103882:	201e      	movs	r0, #30
 8103884:	f7fd fcc2 	bl	810120c <drawText>

	/* RPM */
	char rpmVal[6];
	rpm = rpm - (rpm % 100);
 8103888:	4b7a      	ldr	r3, [pc, #488]	@ (8103a74 <sensors+0x2ac>)
 810388a:	881a      	ldrh	r2, [r3, #0]
 810388c:	4b79      	ldr	r3, [pc, #484]	@ (8103a74 <sensors+0x2ac>)
 810388e:	881b      	ldrh	r3, [r3, #0]
 8103890:	4980      	ldr	r1, [pc, #512]	@ (8103a94 <sensors+0x2cc>)
 8103892:	fba1 0103 	umull	r0, r1, r1, r3
 8103896:	0949      	lsrs	r1, r1, #5
 8103898:	2064      	movs	r0, #100	@ 0x64
 810389a:	fb00 f101 	mul.w	r1, r0, r1
 810389e:	1a5b      	subs	r3, r3, r1
 81038a0:	b29b      	uxth	r3, r3
 81038a2:	1ad3      	subs	r3, r2, r3
 81038a4:	b29a      	uxth	r2, r3
 81038a6:	4b73      	ldr	r3, [pc, #460]	@ (8103a74 <sensors+0x2ac>)
 81038a8:	801a      	strh	r2, [r3, #0]
	sprintf(rpmVal, "%i", rpm);
 81038aa:	4b72      	ldr	r3, [pc, #456]	@ (8103a74 <sensors+0x2ac>)
 81038ac:	881b      	ldrh	r3, [r3, #0]
 81038ae:	461a      	mov	r2, r3
 81038b0:	f107 0310 	add.w	r3, r7, #16
 81038b4:	4974      	ldr	r1, [pc, #464]	@ (8103a88 <sensors+0x2c0>)
 81038b6:	4618      	mov	r0, r3
 81038b8:	f006 fe1e 	bl	810a4f8 <siprintf>
	drawText(140, 150, 3, shiftActive == 1 ? black : yellow, FT81x_OPT_CENTER, rpmVal);
 81038bc:	4b6e      	ldr	r3, [pc, #440]	@ (8103a78 <sensors+0x2b0>)
 81038be:	781b      	ldrb	r3, [r3, #0]
 81038c0:	2b01      	cmp	r3, #1
 81038c2:	d102      	bne.n	81038ca <sensors+0x102>
 81038c4:	4b6e      	ldr	r3, [pc, #440]	@ (8103a80 <sensors+0x2b8>)
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	e001      	b.n	81038ce <sensors+0x106>
 81038ca:	4b73      	ldr	r3, [pc, #460]	@ (8103a98 <sensors+0x2d0>)
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	f107 0210 	add.w	r2, r7, #16
 81038d2:	9201      	str	r2, [sp, #4]
 81038d4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81038d8:	9200      	str	r2, [sp, #0]
 81038da:	2203      	movs	r2, #3
 81038dc:	2196      	movs	r1, #150	@ 0x96
 81038de:	208c      	movs	r0, #140	@ 0x8c
 81038e0:	f7fd fc94 	bl	810120c <drawText>
	drawText(140,230,2,shiftActive == 1 ? black : yellow,FT81x_OPT_CENTER, "RPM");
 81038e4:	4b64      	ldr	r3, [pc, #400]	@ (8103a78 <sensors+0x2b0>)
 81038e6:	781b      	ldrb	r3, [r3, #0]
 81038e8:	2b01      	cmp	r3, #1
 81038ea:	d102      	bne.n	81038f2 <sensors+0x12a>
 81038ec:	4b64      	ldr	r3, [pc, #400]	@ (8103a80 <sensors+0x2b8>)
 81038ee:	681b      	ldr	r3, [r3, #0]
 81038f0:	e001      	b.n	81038f6 <sensors+0x12e>
 81038f2:	4b69      	ldr	r3, [pc, #420]	@ (8103a98 <sensors+0x2d0>)
 81038f4:	681b      	ldr	r3, [r3, #0]
 81038f6:	4a69      	ldr	r2, [pc, #420]	@ (8103a9c <sensors+0x2d4>)
 81038f8:	9201      	str	r2, [sp, #4]
 81038fa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81038fe:	9200      	str	r2, [sp, #0]
 8103900:	2202      	movs	r2, #2
 8103902:	21e6      	movs	r1, #230	@ 0xe6
 8103904:	208c      	movs	r0, #140	@ 0x8c
 8103906:	f7fd fc81 	bl	810120c <drawText>

	/* GEAR */
	switch (gear) {
 810390a:	4b65      	ldr	r3, [pc, #404]	@ (8103aa0 <sensors+0x2d8>)
 810390c:	881b      	ldrh	r3, [r3, #0]
 810390e:	2b05      	cmp	r3, #5
 8103910:	f200 8216 	bhi.w	8103d40 <sensors+0x578>
 8103914:	a201      	add	r2, pc, #4	@ (adr r2, 810391c <sensors+0x154>)
 8103916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810391a:	bf00      	nop
 810391c:	08103935 	.word	0x08103935
 8103920:	081039b5 	.word	0x081039b5
 8103924:	08103a35 	.word	0x08103a35
 8103928:	08103b3f 	.word	0x08103b3f
 810392c:	08103be7 	.word	0x08103be7
 8103930:	08103c63 	.word	0x08103c63
		case 0:
			drawLine(320, 300, 320, 80, 8, shiftActive == 1 ? black : pink);
 8103934:	4b50      	ldr	r3, [pc, #320]	@ (8103a78 <sensors+0x2b0>)
 8103936:	781b      	ldrb	r3, [r3, #0]
 8103938:	2b01      	cmp	r3, #1
 810393a:	d102      	bne.n	8103942 <sensors+0x17a>
 810393c:	4b50      	ldr	r3, [pc, #320]	@ (8103a80 <sensors+0x2b8>)
 810393e:	681b      	ldr	r3, [r3, #0]
 8103940:	e001      	b.n	8103946 <sensors+0x17e>
 8103942:	4b52      	ldr	r3, [pc, #328]	@ (8103a8c <sensors+0x2c4>)
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	9301      	str	r3, [sp, #4]
 8103948:	2308      	movs	r3, #8
 810394a:	9300      	str	r3, [sp, #0]
 810394c:	2350      	movs	r3, #80	@ 0x50
 810394e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8103952:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103956:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 810395a:	f7fd fb47 	bl	8100fec <drawLine>
			drawLine(320, 80, 480, 300, 8, shiftActive == 1 ? black : pink);
 810395e:	4b46      	ldr	r3, [pc, #280]	@ (8103a78 <sensors+0x2b0>)
 8103960:	781b      	ldrb	r3, [r3, #0]
 8103962:	2b01      	cmp	r3, #1
 8103964:	d102      	bne.n	810396c <sensors+0x1a4>
 8103966:	4b46      	ldr	r3, [pc, #280]	@ (8103a80 <sensors+0x2b8>)
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	e001      	b.n	8103970 <sensors+0x1a8>
 810396c:	4b47      	ldr	r3, [pc, #284]	@ (8103a8c <sensors+0x2c4>)
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	9301      	str	r3, [sp, #4]
 8103972:	2308      	movs	r3, #8
 8103974:	9300      	str	r3, [sp, #0]
 8103976:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 810397a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810397e:	2150      	movs	r1, #80	@ 0x50
 8103980:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103984:	f7fd fb32 	bl	8100fec <drawLine>
			drawLine(480, 300, 480, 80, 8, shiftActive == 1 ? black : pink);
 8103988:	4b3b      	ldr	r3, [pc, #236]	@ (8103a78 <sensors+0x2b0>)
 810398a:	781b      	ldrb	r3, [r3, #0]
 810398c:	2b01      	cmp	r3, #1
 810398e:	d102      	bne.n	8103996 <sensors+0x1ce>
 8103990:	4b3b      	ldr	r3, [pc, #236]	@ (8103a80 <sensors+0x2b8>)
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	e001      	b.n	810399a <sensors+0x1d2>
 8103996:	4b3d      	ldr	r3, [pc, #244]	@ (8103a8c <sensors+0x2c4>)
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	9301      	str	r3, [sp, #4]
 810399c:	2308      	movs	r3, #8
 810399e:	9300      	str	r3, [sp, #0]
 81039a0:	2350      	movs	r3, #80	@ 0x50
 81039a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81039a6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81039aa:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 81039ae:	f7fd fb1d 	bl	8100fec <drawLine>
			break;
 81039b2:	e1c5      	b.n	8103d40 <sensors+0x578>

		case 1:
			drawLine(400, 300, 400, 80, 8, shiftActive == 1 ? black : pink);
 81039b4:	4b30      	ldr	r3, [pc, #192]	@ (8103a78 <sensors+0x2b0>)
 81039b6:	781b      	ldrb	r3, [r3, #0]
 81039b8:	2b01      	cmp	r3, #1
 81039ba:	d102      	bne.n	81039c2 <sensors+0x1fa>
 81039bc:	4b30      	ldr	r3, [pc, #192]	@ (8103a80 <sensors+0x2b8>)
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	e001      	b.n	81039c6 <sensors+0x1fe>
 81039c2:	4b32      	ldr	r3, [pc, #200]	@ (8103a8c <sensors+0x2c4>)
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	9301      	str	r3, [sp, #4]
 81039c8:	2308      	movs	r3, #8
 81039ca:	9300      	str	r3, [sp, #0]
 81039cc:	2350      	movs	r3, #80	@ 0x50
 81039ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 81039d2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 81039d6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 81039da:	f7fd fb07 	bl	8100fec <drawLine>
			drawLine(400, 80, 350, 110, 8, shiftActive == 1 ? black : pink);
 81039de:	4b26      	ldr	r3, [pc, #152]	@ (8103a78 <sensors+0x2b0>)
 81039e0:	781b      	ldrb	r3, [r3, #0]
 81039e2:	2b01      	cmp	r3, #1
 81039e4:	d102      	bne.n	81039ec <sensors+0x224>
 81039e6:	4b26      	ldr	r3, [pc, #152]	@ (8103a80 <sensors+0x2b8>)
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	e001      	b.n	81039f0 <sensors+0x228>
 81039ec:	4b27      	ldr	r3, [pc, #156]	@ (8103a8c <sensors+0x2c4>)
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	9301      	str	r3, [sp, #4]
 81039f2:	2308      	movs	r3, #8
 81039f4:	9300      	str	r3, [sp, #0]
 81039f6:	236e      	movs	r3, #110	@ 0x6e
 81039f8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 81039fc:	2150      	movs	r1, #80	@ 0x50
 81039fe:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103a02:	f7fd faf3 	bl	8100fec <drawLine>
			drawLine(340, 300, 460, 300, 8, shiftActive == 1 ? black : pink);
 8103a06:	4b1c      	ldr	r3, [pc, #112]	@ (8103a78 <sensors+0x2b0>)
 8103a08:	781b      	ldrb	r3, [r3, #0]
 8103a0a:	2b01      	cmp	r3, #1
 8103a0c:	d102      	bne.n	8103a14 <sensors+0x24c>
 8103a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8103a80 <sensors+0x2b8>)
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	e001      	b.n	8103a18 <sensors+0x250>
 8103a14:	4b1d      	ldr	r3, [pc, #116]	@ (8103a8c <sensors+0x2c4>)
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	9301      	str	r3, [sp, #4]
 8103a1a:	2308      	movs	r3, #8
 8103a1c:	9300      	str	r3, [sp, #0]
 8103a1e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103a22:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8103a26:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103a2a:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8103a2e:	f7fd fadd 	bl	8100fec <drawLine>
			break;
 8103a32:	e185      	b.n	8103d40 <sensors+0x578>

		case 2:
			drawLine(320, 80, 480, 80, 8, shiftActive == 1 ? black : pink);
 8103a34:	4b10      	ldr	r3, [pc, #64]	@ (8103a78 <sensors+0x2b0>)
 8103a36:	781b      	ldrb	r3, [r3, #0]
 8103a38:	2b01      	cmp	r3, #1
 8103a3a:	d102      	bne.n	8103a42 <sensors+0x27a>
 8103a3c:	4b10      	ldr	r3, [pc, #64]	@ (8103a80 <sensors+0x2b8>)
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	e001      	b.n	8103a46 <sensors+0x27e>
 8103a42:	4b12      	ldr	r3, [pc, #72]	@ (8103a8c <sensors+0x2c4>)
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	9301      	str	r3, [sp, #4]
 8103a48:	2308      	movs	r3, #8
 8103a4a:	9300      	str	r3, [sp, #0]
 8103a4c:	2350      	movs	r3, #80	@ 0x50
 8103a4e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103a52:	2150      	movs	r1, #80	@ 0x50
 8103a54:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103a58:	f7fd fac8 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 190, 8, shiftActive == 1 ? black : pink);
 8103a5c:	4b06      	ldr	r3, [pc, #24]	@ (8103a78 <sensors+0x2b0>)
 8103a5e:	781b      	ldrb	r3, [r3, #0]
 8103a60:	2b01      	cmp	r3, #1
 8103a62:	d11f      	bne.n	8103aa4 <sensors+0x2dc>
 8103a64:	4b06      	ldr	r3, [pc, #24]	@ (8103a80 <sensors+0x2b8>)
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	e01e      	b.n	8103aa8 <sensors+0x2e0>
 8103a6a:	bf00      	nop
 8103a6c:	10000224 	.word	0x10000224
 8103a70:	10000226 	.word	0x10000226
 8103a74:	100003f2 	.word	0x100003f2
 8103a78:	10000227 	.word	0x10000227
 8103a7c:	10000014 	.word	0x10000014
 8103a80:	10000220 	.word	0x10000220
 8103a84:	10000402 	.word	0x10000402
 8103a88:	0810c768 	.word	0x0810c768
 8103a8c:	1000001c 	.word	0x1000001c
 8103a90:	0810c76c 	.word	0x0810c76c
 8103a94:	51eb851f 	.word	0x51eb851f
 8103a98:	10000010 	.word	0x10000010
 8103a9c:	0810c778 	.word	0x0810c778
 8103aa0:	100003ec 	.word	0x100003ec
 8103aa4:	4b9b      	ldr	r3, [pc, #620]	@ (8103d14 <sensors+0x54c>)
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	9301      	str	r3, [sp, #4]
 8103aaa:	2308      	movs	r3, #8
 8103aac:	9300      	str	r3, [sp, #0]
 8103aae:	23be      	movs	r3, #190	@ 0xbe
 8103ab0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103ab4:	2150      	movs	r1, #80	@ 0x50
 8103ab6:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8103aba:	f7fd fa97 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, shiftActive == 1 ? black : pink);
 8103abe:	4b96      	ldr	r3, [pc, #600]	@ (8103d18 <sensors+0x550>)
 8103ac0:	781b      	ldrb	r3, [r3, #0]
 8103ac2:	2b01      	cmp	r3, #1
 8103ac4:	d102      	bne.n	8103acc <sensors+0x304>
 8103ac6:	4b95      	ldr	r3, [pc, #596]	@ (8103d1c <sensors+0x554>)
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	e001      	b.n	8103ad0 <sensors+0x308>
 8103acc:	4b91      	ldr	r3, [pc, #580]	@ (8103d14 <sensors+0x54c>)
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	9301      	str	r3, [sp, #4]
 8103ad2:	2308      	movs	r3, #8
 8103ad4:	9300      	str	r3, [sp, #0]
 8103ad6:	23be      	movs	r3, #190	@ 0xbe
 8103ad8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103adc:	21be      	movs	r1, #190	@ 0xbe
 8103ade:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103ae2:	f7fd fa83 	bl	8100fec <drawLine>
			drawLine(320, 190, 320, 300, 8, shiftActive == 1 ? black : pink);
 8103ae6:	4b8c      	ldr	r3, [pc, #560]	@ (8103d18 <sensors+0x550>)
 8103ae8:	781b      	ldrb	r3, [r3, #0]
 8103aea:	2b01      	cmp	r3, #1
 8103aec:	d102      	bne.n	8103af4 <sensors+0x32c>
 8103aee:	4b8b      	ldr	r3, [pc, #556]	@ (8103d1c <sensors+0x554>)
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	e001      	b.n	8103af8 <sensors+0x330>
 8103af4:	4b87      	ldr	r3, [pc, #540]	@ (8103d14 <sensors+0x54c>)
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	9301      	str	r3, [sp, #4]
 8103afa:	2308      	movs	r3, #8
 8103afc:	9300      	str	r3, [sp, #0]
 8103afe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103b02:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8103b06:	21be      	movs	r1, #190	@ 0xbe
 8103b08:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103b0c:	f7fd fa6e 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, shiftActive == 1 ? black : pink);
 8103b10:	4b81      	ldr	r3, [pc, #516]	@ (8103d18 <sensors+0x550>)
 8103b12:	781b      	ldrb	r3, [r3, #0]
 8103b14:	2b01      	cmp	r3, #1
 8103b16:	d102      	bne.n	8103b1e <sensors+0x356>
 8103b18:	4b80      	ldr	r3, [pc, #512]	@ (8103d1c <sensors+0x554>)
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	e001      	b.n	8103b22 <sensors+0x35a>
 8103b1e:	4b7d      	ldr	r3, [pc, #500]	@ (8103d14 <sensors+0x54c>)
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	9301      	str	r3, [sp, #4]
 8103b24:	2308      	movs	r3, #8
 8103b26:	9300      	str	r3, [sp, #0]
 8103b28:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103b2c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103b30:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103b34:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103b38:	f7fd fa58 	bl	8100fec <drawLine>
			break;
 8103b3c:	e100      	b.n	8103d40 <sensors+0x578>

		case 3:
			drawLine(320, 80, 480, 80, 8, shiftActive == 1 ? black : pink);
 8103b3e:	4b76      	ldr	r3, [pc, #472]	@ (8103d18 <sensors+0x550>)
 8103b40:	781b      	ldrb	r3, [r3, #0]
 8103b42:	2b01      	cmp	r3, #1
 8103b44:	d102      	bne.n	8103b4c <sensors+0x384>
 8103b46:	4b75      	ldr	r3, [pc, #468]	@ (8103d1c <sensors+0x554>)
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	e001      	b.n	8103b50 <sensors+0x388>
 8103b4c:	4b71      	ldr	r3, [pc, #452]	@ (8103d14 <sensors+0x54c>)
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	9301      	str	r3, [sp, #4]
 8103b52:	2308      	movs	r3, #8
 8103b54:	9300      	str	r3, [sp, #0]
 8103b56:	2350      	movs	r3, #80	@ 0x50
 8103b58:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103b5c:	2150      	movs	r1, #80	@ 0x50
 8103b5e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103b62:	f7fd fa43 	bl	8100fec <drawLine>
			drawLine(480, 80, 480, 300, 8, shiftActive == 1 ? black : pink);
 8103b66:	4b6c      	ldr	r3, [pc, #432]	@ (8103d18 <sensors+0x550>)
 8103b68:	781b      	ldrb	r3, [r3, #0]
 8103b6a:	2b01      	cmp	r3, #1
 8103b6c:	d102      	bne.n	8103b74 <sensors+0x3ac>
 8103b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8103d1c <sensors+0x554>)
 8103b70:	681b      	ldr	r3, [r3, #0]
 8103b72:	e001      	b.n	8103b78 <sensors+0x3b0>
 8103b74:	4b67      	ldr	r3, [pc, #412]	@ (8103d14 <sensors+0x54c>)
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	9301      	str	r3, [sp, #4]
 8103b7a:	2308      	movs	r3, #8
 8103b7c:	9300      	str	r3, [sp, #0]
 8103b7e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103b82:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103b86:	2150      	movs	r1, #80	@ 0x50
 8103b88:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8103b8c:	f7fd fa2e 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, shiftActive == 1 ? black : pink);
 8103b90:	4b61      	ldr	r3, [pc, #388]	@ (8103d18 <sensors+0x550>)
 8103b92:	781b      	ldrb	r3, [r3, #0]
 8103b94:	2b01      	cmp	r3, #1
 8103b96:	d102      	bne.n	8103b9e <sensors+0x3d6>
 8103b98:	4b60      	ldr	r3, [pc, #384]	@ (8103d1c <sensors+0x554>)
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	e001      	b.n	8103ba2 <sensors+0x3da>
 8103b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8103d14 <sensors+0x54c>)
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	9301      	str	r3, [sp, #4]
 8103ba4:	2308      	movs	r3, #8
 8103ba6:	9300      	str	r3, [sp, #0]
 8103ba8:	23be      	movs	r3, #190	@ 0xbe
 8103baa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103bae:	21be      	movs	r1, #190	@ 0xbe
 8103bb0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103bb4:	f7fd fa1a 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, shiftActive == 1 ? black : pink);
 8103bb8:	4b57      	ldr	r3, [pc, #348]	@ (8103d18 <sensors+0x550>)
 8103bba:	781b      	ldrb	r3, [r3, #0]
 8103bbc:	2b01      	cmp	r3, #1
 8103bbe:	d102      	bne.n	8103bc6 <sensors+0x3fe>
 8103bc0:	4b56      	ldr	r3, [pc, #344]	@ (8103d1c <sensors+0x554>)
 8103bc2:	681b      	ldr	r3, [r3, #0]
 8103bc4:	e001      	b.n	8103bca <sensors+0x402>
 8103bc6:	4b53      	ldr	r3, [pc, #332]	@ (8103d14 <sensors+0x54c>)
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	9301      	str	r3, [sp, #4]
 8103bcc:	2308      	movs	r3, #8
 8103bce:	9300      	str	r3, [sp, #0]
 8103bd0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103bd4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103bd8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103bdc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103be0:	f7fd fa04 	bl	8100fec <drawLine>
			break;
 8103be4:	e0ac      	b.n	8103d40 <sensors+0x578>

		case 4:
			drawLine(420, 300, 420, 80, 8, shiftActive == 1 ? black : pink);
 8103be6:	4b4c      	ldr	r3, [pc, #304]	@ (8103d18 <sensors+0x550>)
 8103be8:	781b      	ldrb	r3, [r3, #0]
 8103bea:	2b01      	cmp	r3, #1
 8103bec:	d102      	bne.n	8103bf4 <sensors+0x42c>
 8103bee:	4b4b      	ldr	r3, [pc, #300]	@ (8103d1c <sensors+0x554>)
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	e001      	b.n	8103bf8 <sensors+0x430>
 8103bf4:	4b47      	ldr	r3, [pc, #284]	@ (8103d14 <sensors+0x54c>)
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	9301      	str	r3, [sp, #4]
 8103bfa:	2308      	movs	r3, #8
 8103bfc:	9300      	str	r3, [sp, #0]
 8103bfe:	2350      	movs	r3, #80	@ 0x50
 8103c00:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8103c04:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103c08:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8103c0c:	f7fd f9ee 	bl	8100fec <drawLine>
			drawLine(420, 80, 320, 230, 8, shiftActive == 1 ? black : pink);
 8103c10:	4b41      	ldr	r3, [pc, #260]	@ (8103d18 <sensors+0x550>)
 8103c12:	781b      	ldrb	r3, [r3, #0]
 8103c14:	2b01      	cmp	r3, #1
 8103c16:	d102      	bne.n	8103c1e <sensors+0x456>
 8103c18:	4b40      	ldr	r3, [pc, #256]	@ (8103d1c <sensors+0x554>)
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	e001      	b.n	8103c22 <sensors+0x45a>
 8103c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8103d14 <sensors+0x54c>)
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	9301      	str	r3, [sp, #4]
 8103c24:	2308      	movs	r3, #8
 8103c26:	9300      	str	r3, [sp, #0]
 8103c28:	23e6      	movs	r3, #230	@ 0xe6
 8103c2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8103c2e:	2150      	movs	r1, #80	@ 0x50
 8103c30:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8103c34:	f7fd f9da 	bl	8100fec <drawLine>
			drawLine(320, 230, 450, 230, 8, shiftActive == 1 ? black : pink);
 8103c38:	4b37      	ldr	r3, [pc, #220]	@ (8103d18 <sensors+0x550>)
 8103c3a:	781b      	ldrb	r3, [r3, #0]
 8103c3c:	2b01      	cmp	r3, #1
 8103c3e:	d102      	bne.n	8103c46 <sensors+0x47e>
 8103c40:	4b36      	ldr	r3, [pc, #216]	@ (8103d1c <sensors+0x554>)
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	e001      	b.n	8103c4a <sensors+0x482>
 8103c46:	4b33      	ldr	r3, [pc, #204]	@ (8103d14 <sensors+0x54c>)
 8103c48:	681b      	ldr	r3, [r3, #0]
 8103c4a:	9301      	str	r3, [sp, #4]
 8103c4c:	2308      	movs	r3, #8
 8103c4e:	9300      	str	r3, [sp, #0]
 8103c50:	23e6      	movs	r3, #230	@ 0xe6
 8103c52:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8103c56:	21e6      	movs	r1, #230	@ 0xe6
 8103c58:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103c5c:	f7fd f9c6 	bl	8100fec <drawLine>
			break;
 8103c60:	e06e      	b.n	8103d40 <sensors+0x578>

		case 5:
			drawLine(320, 80, 480, 80, 8, shiftActive == 1 ? black : pink);
 8103c62:	4b2d      	ldr	r3, [pc, #180]	@ (8103d18 <sensors+0x550>)
 8103c64:	781b      	ldrb	r3, [r3, #0]
 8103c66:	2b01      	cmp	r3, #1
 8103c68:	d102      	bne.n	8103c70 <sensors+0x4a8>
 8103c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8103d1c <sensors+0x554>)
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	e001      	b.n	8103c74 <sensors+0x4ac>
 8103c70:	4b28      	ldr	r3, [pc, #160]	@ (8103d14 <sensors+0x54c>)
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	9301      	str	r3, [sp, #4]
 8103c76:	2308      	movs	r3, #8
 8103c78:	9300      	str	r3, [sp, #0]
 8103c7a:	2350      	movs	r3, #80	@ 0x50
 8103c7c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103c80:	2150      	movs	r1, #80	@ 0x50
 8103c82:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103c86:	f7fd f9b1 	bl	8100fec <drawLine>
			drawLine(320, 80, 320, 190, 8, shiftActive == 1 ? black : pink);
 8103c8a:	4b23      	ldr	r3, [pc, #140]	@ (8103d18 <sensors+0x550>)
 8103c8c:	781b      	ldrb	r3, [r3, #0]
 8103c8e:	2b01      	cmp	r3, #1
 8103c90:	d102      	bne.n	8103c98 <sensors+0x4d0>
 8103c92:	4b22      	ldr	r3, [pc, #136]	@ (8103d1c <sensors+0x554>)
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	e001      	b.n	8103c9c <sensors+0x4d4>
 8103c98:	4b1e      	ldr	r3, [pc, #120]	@ (8103d14 <sensors+0x54c>)
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	9301      	str	r3, [sp, #4]
 8103c9e:	2308      	movs	r3, #8
 8103ca0:	9300      	str	r3, [sp, #0]
 8103ca2:	23be      	movs	r3, #190	@ 0xbe
 8103ca4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8103ca8:	2150      	movs	r1, #80	@ 0x50
 8103caa:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103cae:	f7fd f99d 	bl	8100fec <drawLine>
			drawLine(320, 190, 480, 190, 8, shiftActive == 1 ? black : pink);
 8103cb2:	4b19      	ldr	r3, [pc, #100]	@ (8103d18 <sensors+0x550>)
 8103cb4:	781b      	ldrb	r3, [r3, #0]
 8103cb6:	2b01      	cmp	r3, #1
 8103cb8:	d102      	bne.n	8103cc0 <sensors+0x4f8>
 8103cba:	4b18      	ldr	r3, [pc, #96]	@ (8103d1c <sensors+0x554>)
 8103cbc:	681b      	ldr	r3, [r3, #0]
 8103cbe:	e001      	b.n	8103cc4 <sensors+0x4fc>
 8103cc0:	4b14      	ldr	r3, [pc, #80]	@ (8103d14 <sensors+0x54c>)
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	9301      	str	r3, [sp, #4]
 8103cc6:	2308      	movs	r3, #8
 8103cc8:	9300      	str	r3, [sp, #0]
 8103cca:	23be      	movs	r3, #190	@ 0xbe
 8103ccc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103cd0:	21be      	movs	r1, #190	@ 0xbe
 8103cd2:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103cd6:	f7fd f989 	bl	8100fec <drawLine>
			drawLine(480, 190, 480, 300, 8, shiftActive == 1 ? black : pink);
 8103cda:	4b0f      	ldr	r3, [pc, #60]	@ (8103d18 <sensors+0x550>)
 8103cdc:	781b      	ldrb	r3, [r3, #0]
 8103cde:	2b01      	cmp	r3, #1
 8103ce0:	d102      	bne.n	8103ce8 <sensors+0x520>
 8103ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8103d1c <sensors+0x554>)
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	e001      	b.n	8103cec <sensors+0x524>
 8103ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8103d14 <sensors+0x54c>)
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	9301      	str	r3, [sp, #4]
 8103cee:	2308      	movs	r3, #8
 8103cf0:	9300      	str	r3, [sp, #0]
 8103cf2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103cf6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103cfa:	21be      	movs	r1, #190	@ 0xbe
 8103cfc:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8103d00:	f7fd f974 	bl	8100fec <drawLine>
			drawLine(320, 300, 480, 300, 8, shiftActive == 1 ? black : pink);
 8103d04:	4b04      	ldr	r3, [pc, #16]	@ (8103d18 <sensors+0x550>)
 8103d06:	781b      	ldrb	r3, [r3, #0]
 8103d08:	2b01      	cmp	r3, #1
 8103d0a:	d109      	bne.n	8103d20 <sensors+0x558>
 8103d0c:	4b03      	ldr	r3, [pc, #12]	@ (8103d1c <sensors+0x554>)
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	e008      	b.n	8103d24 <sensors+0x55c>
 8103d12:	bf00      	nop
 8103d14:	1000001c 	.word	0x1000001c
 8103d18:	10000227 	.word	0x10000227
 8103d1c:	10000220 	.word	0x10000220
 8103d20:	4bbf      	ldr	r3, [pc, #764]	@ (8104020 <sensors+0x858>)
 8103d22:	681b      	ldr	r3, [r3, #0]
 8103d24:	9301      	str	r3, [sp, #4]
 8103d26:	2308      	movs	r3, #8
 8103d28:	9300      	str	r3, [sp, #0]
 8103d2a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8103d2e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8103d32:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8103d36:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8103d3a:	f7fd f957 	bl	8100fec <drawLine>
			break;
 8103d3e:	bf00      	nop
	}

	/* Shifting Pressure */
    char tmpShiftingPressure[6];
    float scaledPressure;
    scaledPressure = ((shiftingPressure*0.00122070312)-0.5)*1250*0.001;
 8103d40:	4bb8      	ldr	r3, [pc, #736]	@ (8104024 <sensors+0x85c>)
 8103d42:	881b      	ldrh	r3, [r3, #0]
 8103d44:	4618      	mov	r0, r3
 8103d46:	f7fc fc75 	bl	8100634 <__aeabi_i2d>
 8103d4a:	a3af      	add	r3, pc, #700	@ (adr r3, 8104008 <sensors+0x840>)
 8103d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d50:	f7fc fcda 	bl	8100708 <__aeabi_dmul>
 8103d54:	4602      	mov	r2, r0
 8103d56:	460b      	mov	r3, r1
 8103d58:	4610      	mov	r0, r2
 8103d5a:	4619      	mov	r1, r3
 8103d5c:	f04f 0200 	mov.w	r2, #0
 8103d60:	4bb1      	ldr	r3, [pc, #708]	@ (8104028 <sensors+0x860>)
 8103d62:	f7fc fb19 	bl	8100398 <__aeabi_dsub>
 8103d66:	4602      	mov	r2, r0
 8103d68:	460b      	mov	r3, r1
 8103d6a:	4610      	mov	r0, r2
 8103d6c:	4619      	mov	r1, r3
 8103d6e:	a3a8      	add	r3, pc, #672	@ (adr r3, 8104010 <sensors+0x848>)
 8103d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d74:	f7fc fcc8 	bl	8100708 <__aeabi_dmul>
 8103d78:	4602      	mov	r2, r0
 8103d7a:	460b      	mov	r3, r1
 8103d7c:	4610      	mov	r0, r2
 8103d7e:	4619      	mov	r1, r3
 8103d80:	a3a5      	add	r3, pc, #660	@ (adr r3, 8104018 <sensors+0x850>)
 8103d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d86:	f7fc fcbf 	bl	8100708 <__aeabi_dmul>
 8103d8a:	4602      	mov	r2, r0
 8103d8c:	460b      	mov	r3, r1
 8103d8e:	4610      	mov	r0, r2
 8103d90:	4619      	mov	r1, r3
 8103d92:	f7fc ff91 	bl	8100cb8 <__aeabi_d2f>
 8103d96:	4603      	mov	r3, r0
 8103d98:	627b      	str	r3, [r7, #36]	@ 0x24
//    scaledPressure = ((shiftingPressure*0.00122070312)-0.5)*50*0.001;

    scaledPressure = scaledPressure >= 200.0 ? 0.0 : scaledPressure;
 8103d9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8103d9e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 810402c <sensors+0x864>
 8103da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103daa:	db02      	blt.n	8103db2 <sensors+0x5ea>
 8103dac:	f04f 0300 	mov.w	r3, #0
 8103db0:	e000      	b.n	8103db4 <sensors+0x5ec>
 8103db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103db4:	627b      	str	r3, [r7, #36]	@ 0x24
    scaledPressure = scaledPressure <= 0.0 ? 0.0 : scaledPressure;
 8103db6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8103dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8103dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103dc2:	d802      	bhi.n	8103dca <sensors+0x602>
 8103dc4:	f04f 0300 	mov.w	r3, #0
 8103dc8:	e000      	b.n	8103dcc <sensors+0x604>
 8103dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    sprintf(tmpShiftingPressure, "%f", scaledPressure);
 8103dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8103dd0:	f7fc fc42 	bl	8100658 <__aeabi_f2d>
 8103dd4:	4602      	mov	r2, r0
 8103dd6:	460b      	mov	r3, r1
 8103dd8:	f107 0008 	add.w	r0, r7, #8
 8103ddc:	4994      	ldr	r1, [pc, #592]	@ (8104030 <sensors+0x868>)
 8103dde:	f006 fb8b 	bl	810a4f8 <siprintf>
    tmpShiftingPressure[3] = 'K';
 8103de2:	234b      	movs	r3, #75	@ 0x4b
 8103de4:	72fb      	strb	r3, [r7, #11]
    tmpShiftingPressure[4] = '\0';
 8103de6:	2300      	movs	r3, #0
 8103de8:	733b      	strb	r3, [r7, #12]
    if (scaledPressure == 0.0) {
 8103dea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8103dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8103df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103df6:	d107      	bne.n	8103e08 <sensors+0x640>
    	tmpShiftingPressure[0] = 'N';
 8103df8:	234e      	movs	r3, #78	@ 0x4e
 8103dfa:	723b      	strb	r3, [r7, #8]
    	tmpShiftingPressure[1] = 'a';
 8103dfc:	2361      	movs	r3, #97	@ 0x61
 8103dfe:	727b      	strb	r3, [r7, #9]
    	tmpShiftingPressure[2] = 'N';
 8103e00:	234e      	movs	r3, #78	@ 0x4e
 8103e02:	72bb      	strb	r3, [r7, #10]
    	tmpShiftingPressure[3] = '\0';
 8103e04:	2300      	movs	r3, #0
 8103e06:	72fb      	strb	r3, [r7, #11]
    }
    if (scaledPressure <= 1.5 && scaledPressure > 1.0) {
 8103e08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8103e0c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8103e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103e18:	d816      	bhi.n	8103e48 <sensors+0x680>
 8103e1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8103e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103e2a:	dd0d      	ble.n	8103e48 <sensors+0x680>
		drawRect(10, 340, 270, 120, 1, yellow);
 8103e2c:	4b81      	ldr	r3, [pc, #516]	@ (8104034 <sensors+0x86c>)
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	9301      	str	r3, [sp, #4]
 8103e32:	2301      	movs	r3, #1
 8103e34:	9300      	str	r3, [sp, #0]
 8103e36:	2378      	movs	r3, #120	@ 0x78
 8103e38:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8103e3c:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8103e40:	200a      	movs	r0, #10
 8103e42:	f7fd f87f 	bl	8100f44 <drawRect>
 8103e46:	e019      	b.n	8103e7c <sensors+0x6b4>
    } else if (scaledPressure <= 1.0 && blinkActive == 1) {
 8103e48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8103e4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103e58:	d810      	bhi.n	8103e7c <sensors+0x6b4>
 8103e5a:	4b77      	ldr	r3, [pc, #476]	@ (8104038 <sensors+0x870>)
 8103e5c:	781b      	ldrb	r3, [r3, #0]
 8103e5e:	2b01      	cmp	r3, #1
 8103e60:	d10c      	bne.n	8103e7c <sensors+0x6b4>
    	drawRect(10, 340, 270, 120, 1, red);
 8103e62:	4b76      	ldr	r3, [pc, #472]	@ (810403c <sensors+0x874>)
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	9301      	str	r3, [sp, #4]
 8103e68:	2301      	movs	r3, #1
 8103e6a:	9300      	str	r3, [sp, #0]
 8103e6c:	2378      	movs	r3, #120	@ 0x78
 8103e6e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8103e72:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8103e76:	200a      	movs	r0, #10
 8103e78:	f7fd f864 	bl	8100f44 <drawRect>
    }
	drawRect(20,350,scaledPressure/5*250,40,1,lilac);
 8103e7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8103e80:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8103e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103e88:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8104040 <sensors+0x878>
 8103e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8103e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103e94:	ee17 3a90 	vmov	r3, s15
 8103e98:	b29a      	uxth	r2, r3
 8103e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8104044 <sensors+0x87c>)
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	9301      	str	r3, [sp, #4]
 8103ea0:	2301      	movs	r3, #1
 8103ea2:	9300      	str	r3, [sp, #0]
 8103ea4:	2328      	movs	r3, #40	@ 0x28
 8103ea6:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8103eaa:	2014      	movs	r0, #20
 8103eac:	f7fd f84a 	bl	8100f44 <drawRect>
	drawUnfilledRect(20,350,250,40,2,lilac);
 8103eb0:	4b64      	ldr	r3, [pc, #400]	@ (8104044 <sensors+0x87c>)
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	9301      	str	r3, [sp, #4]
 8103eb6:	2302      	movs	r3, #2
 8103eb8:	9300      	str	r3, [sp, #0]
 8103eba:	2328      	movs	r3, #40	@ 0x28
 8103ebc:	22fa      	movs	r2, #250	@ 0xfa
 8103ebe:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8103ec2:	2014      	movs	r0, #20
 8103ec4:	f7fd f8e2 	bl	810108c <drawUnfilledRect>
    drawText(130,405,31,lilac,FT81x_OPT_RIGHTX, "SHIFT");
 8103ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8104044 <sensors+0x87c>)
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8104048 <sensors+0x880>)
 8103ece:	9201      	str	r2, [sp, #4]
 8103ed0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8103ed4:	9200      	str	r2, [sp, #0]
 8103ed6:	221f      	movs	r2, #31
 8103ed8:	f240 1195 	movw	r1, #405	@ 0x195
 8103edc:	2082      	movs	r0, #130	@ 0x82
 8103ede:	f7fd f995 	bl	810120c <drawText>
    drawText(270,395,1,lilac,FT81x_OPT_RIGHTX, tmpShiftingPressure);
 8103ee2:	4b58      	ldr	r3, [pc, #352]	@ (8104044 <sensors+0x87c>)
 8103ee4:	681a      	ldr	r2, [r3, #0]
 8103ee6:	f107 0308 	add.w	r3, r7, #8
 8103eea:	9301      	str	r3, [sp, #4]
 8103eec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103ef0:	9300      	str	r3, [sp, #0]
 8103ef2:	4613      	mov	r3, r2
 8103ef4:	2201      	movs	r2, #1
 8103ef6:	f240 118b 	movw	r1, #395	@ 0x18b
 8103efa:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8103efe:	f7fd f985 	bl	810120c <drawText>

	/* Shifting Pressure */
    char tmpLowShiftingPressure[6];
    float scaledLowPressure;
    scaledLowPressure = (((shiftingLowPressure*0.00122070312)-0.5)/5.0) * 200;
 8103f02:	4b52      	ldr	r3, [pc, #328]	@ (810404c <sensors+0x884>)
 8103f04:	881b      	ldrh	r3, [r3, #0]
 8103f06:	4618      	mov	r0, r3
 8103f08:	f7fc fb94 	bl	8100634 <__aeabi_i2d>
 8103f0c:	a33e      	add	r3, pc, #248	@ (adr r3, 8104008 <sensors+0x840>)
 8103f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f12:	f7fc fbf9 	bl	8100708 <__aeabi_dmul>
 8103f16:	4602      	mov	r2, r0
 8103f18:	460b      	mov	r3, r1
 8103f1a:	4610      	mov	r0, r2
 8103f1c:	4619      	mov	r1, r3
 8103f1e:	f04f 0200 	mov.w	r2, #0
 8103f22:	4b41      	ldr	r3, [pc, #260]	@ (8104028 <sensors+0x860>)
 8103f24:	f7fc fa38 	bl	8100398 <__aeabi_dsub>
 8103f28:	4602      	mov	r2, r0
 8103f2a:	460b      	mov	r3, r1
 8103f2c:	4610      	mov	r0, r2
 8103f2e:	4619      	mov	r1, r3
 8103f30:	f04f 0200 	mov.w	r2, #0
 8103f34:	4b46      	ldr	r3, [pc, #280]	@ (8104050 <sensors+0x888>)
 8103f36:	f7fc fd11 	bl	810095c <__aeabi_ddiv>
 8103f3a:	4602      	mov	r2, r0
 8103f3c:	460b      	mov	r3, r1
 8103f3e:	4610      	mov	r0, r2
 8103f40:	4619      	mov	r1, r3
 8103f42:	f04f 0200 	mov.w	r2, #0
 8103f46:	4b43      	ldr	r3, [pc, #268]	@ (8104054 <sensors+0x88c>)
 8103f48:	f7fc fbde 	bl	8100708 <__aeabi_dmul>
 8103f4c:	4602      	mov	r2, r0
 8103f4e:	460b      	mov	r3, r1
 8103f50:	4610      	mov	r0, r2
 8103f52:	4619      	mov	r1, r3
 8103f54:	f7fc feb0 	bl	8100cb8 <__aeabi_d2f>
 8103f58:	4603      	mov	r3, r0
 8103f5a:	623b      	str	r3, [r7, #32]
//    scaledLowPressure = shiftingLowPressure;
    scaledLowPressure = scaledLowPressure >= 200.0 ? 0.0 : scaledLowPressure;
 8103f5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8103f60:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 810402c <sensors+0x864>
 8103f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103f6c:	db02      	blt.n	8103f74 <sensors+0x7ac>
 8103f6e:	f04f 0300 	mov.w	r3, #0
 8103f72:	e000      	b.n	8103f76 <sensors+0x7ae>
 8103f74:	6a3b      	ldr	r3, [r7, #32]
 8103f76:	623b      	str	r3, [r7, #32]
    scaledLowPressure = scaledLowPressure <= 0.0 ? 0.0 : scaledLowPressure;
 8103f78:	edd7 7a08 	vldr	s15, [r7, #32]
 8103f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8103f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103f84:	d802      	bhi.n	8103f8c <sensors+0x7c4>
 8103f86:	f04f 0300 	mov.w	r3, #0
 8103f8a:	e000      	b.n	8103f8e <sensors+0x7c6>
 8103f8c:	6a3b      	ldr	r3, [r7, #32]
 8103f8e:	623b      	str	r3, [r7, #32]
    sprintf(tmpLowShiftingPressure, "%f", scaledLowPressure);
 8103f90:	6a38      	ldr	r0, [r7, #32]
 8103f92:	f7fc fb61 	bl	8100658 <__aeabi_f2d>
 8103f96:	4602      	mov	r2, r0
 8103f98:	460b      	mov	r3, r1
 8103f9a:	4638      	mov	r0, r7
 8103f9c:	4924      	ldr	r1, [pc, #144]	@ (8104030 <sensors+0x868>)
 8103f9e:	f006 faab 	bl	810a4f8 <siprintf>
    tmpLowShiftingPressure[3] = '\0';
 8103fa2:	2300      	movs	r3, #0
 8103fa4:	70fb      	strb	r3, [r7, #3]
    if (scaledLowPressure == 0.0) {
 8103fa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8103faa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8103fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103fb2:	d107      	bne.n	8103fc4 <sensors+0x7fc>
    	tmpLowShiftingPressure[0] = 'N';
 8103fb4:	234e      	movs	r3, #78	@ 0x4e
 8103fb6:	703b      	strb	r3, [r7, #0]
    	tmpLowShiftingPressure[1] = 'a';
 8103fb8:	2361      	movs	r3, #97	@ 0x61
 8103fba:	707b      	strb	r3, [r7, #1]
    	tmpLowShiftingPressure[2] = 'N';
 8103fbc:	234e      	movs	r3, #78	@ 0x4e
 8103fbe:	70bb      	strb	r3, [r7, #2]
    	tmpLowShiftingPressure[3] = '\0';
 8103fc0:	2300      	movs	r3, #0
 8103fc2:	70fb      	strb	r3, [r7, #3]
    }
    if (scaledLowPressure <= 1.5 && scaledLowPressure > 1.0) {
 8103fc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8103fc8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8103fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103fd4:	d840      	bhi.n	8104058 <sensors+0x890>
 8103fd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8103fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103fe6:	dd37      	ble.n	8104058 <sensors+0x890>
		drawRect(520, 340, 270, 120, 1, yellow);
 8103fe8:	4b12      	ldr	r3, [pc, #72]	@ (8104034 <sensors+0x86c>)
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	9301      	str	r3, [sp, #4]
 8103fee:	2301      	movs	r3, #1
 8103ff0:	9300      	str	r3, [sp, #0]
 8103ff2:	2378      	movs	r3, #120	@ 0x78
 8103ff4:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8103ff8:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8103ffc:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8104000:	f7fc ffa0 	bl	8100f44 <drawRect>
 8104004:	e043      	b.n	810408e <sensors+0x8c6>
 8104006:	bf00      	nop
 8104008:	fea02802 	.word	0xfea02802
 810400c:	3f53ffff 	.word	0x3f53ffff
 8104010:	00000000 	.word	0x00000000
 8104014:	40938800 	.word	0x40938800
 8104018:	d2f1a9fc 	.word	0xd2f1a9fc
 810401c:	3f50624d 	.word	0x3f50624d
 8104020:	1000001c 	.word	0x1000001c
 8104024:	100003f8 	.word	0x100003f8
 8104028:	3fe00000 	.word	0x3fe00000
 810402c:	43480000 	.word	0x43480000
 8104030:	0810c780 	.word	0x0810c780
 8104034:	10000010 	.word	0x10000010
 8104038:	10000226 	.word	0x10000226
 810403c:	10000014 	.word	0x10000014
 8104040:	437a0000 	.word	0x437a0000
 8104044:	1000000c 	.word	0x1000000c
 8104048:	0810c788 	.word	0x0810c788
 810404c:	100003fa 	.word	0x100003fa
 8104050:	40140000 	.word	0x40140000
 8104054:	40690000 	.word	0x40690000
    } else if (scaledLowPressure <= 1.0 && blinkActive == 1) {
 8104058:	edd7 7a08 	vldr	s15, [r7, #32]
 810405c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8104064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8104068:	d811      	bhi.n	810408e <sensors+0x8c6>
 810406a:	4b4a      	ldr	r3, [pc, #296]	@ (8104194 <sensors+0x9cc>)
 810406c:	781b      	ldrb	r3, [r3, #0]
 810406e:	2b01      	cmp	r3, #1
 8104070:	d10d      	bne.n	810408e <sensors+0x8c6>
    	drawRect(520, 340, 270, 120, 1, red);
 8104072:	4b49      	ldr	r3, [pc, #292]	@ (8104198 <sensors+0x9d0>)
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	9301      	str	r3, [sp, #4]
 8104078:	2301      	movs	r3, #1
 810407a:	9300      	str	r3, [sp, #0]
 810407c:	2378      	movs	r3, #120	@ 0x78
 810407e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8104082:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8104086:	f44f 7002 	mov.w	r0, #520	@ 0x208
 810408a:	f7fc ff5b 	bl	8100f44 <drawRect>
    }
	drawRect(530,350,scaledLowPressure/5*250,40,1,lilac);
 810408e:	ed97 7a08 	vldr	s14, [r7, #32]
 8104092:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8104096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810409a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 810419c <sensors+0x9d4>
 810409e:	ee67 7a87 	vmul.f32	s15, s15, s14
 81040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81040a6:	ee17 3a90 	vmov	r3, s15
 81040aa:	b29a      	uxth	r2, r3
 81040ac:	4b3c      	ldr	r3, [pc, #240]	@ (81041a0 <sensors+0x9d8>)
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	9301      	str	r3, [sp, #4]
 81040b2:	2301      	movs	r3, #1
 81040b4:	9300      	str	r3, [sp, #0]
 81040b6:	2328      	movs	r3, #40	@ 0x28
 81040b8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 81040bc:	f240 2012 	movw	r0, #530	@ 0x212
 81040c0:	f7fc ff40 	bl	8100f44 <drawRect>
	drawUnfilledRect(530,350,250,40,2,lilac);
 81040c4:	4b36      	ldr	r3, [pc, #216]	@ (81041a0 <sensors+0x9d8>)
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	9301      	str	r3, [sp, #4]
 81040ca:	2302      	movs	r3, #2
 81040cc:	9300      	str	r3, [sp, #0]
 81040ce:	2328      	movs	r3, #40	@ 0x28
 81040d0:	22fa      	movs	r2, #250	@ 0xfa
 81040d2:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 81040d6:	f240 2012 	movw	r0, #530	@ 0x212
 81040da:	f7fc ffd7 	bl	810108c <drawUnfilledRect>
    drawText(640,405,31,lilac,FT81x_OPT_RIGHTX, "LOW SHIFT");
 81040de:	4b30      	ldr	r3, [pc, #192]	@ (81041a0 <sensors+0x9d8>)
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4a30      	ldr	r2, [pc, #192]	@ (81041a4 <sensors+0x9dc>)
 81040e4:	9201      	str	r2, [sp, #4]
 81040e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81040ea:	9200      	str	r2, [sp, #0]
 81040ec:	221f      	movs	r2, #31
 81040ee:	f240 1195 	movw	r1, #405	@ 0x195
 81040f2:	f44f 7020 	mov.w	r0, #640	@ 0x280
 81040f6:	f7fd f889 	bl	810120c <drawText>
    drawText(780,395,1,lilac,FT81x_OPT_RIGHTX, tmpLowShiftingPressure);
 81040fa:	4b29      	ldr	r3, [pc, #164]	@ (81041a0 <sensors+0x9d8>)
 81040fc:	681a      	ldr	r2, [r3, #0]
 81040fe:	463b      	mov	r3, r7
 8104100:	9301      	str	r3, [sp, #4]
 8104102:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8104106:	9300      	str	r3, [sp, #0]
 8104108:	4613      	mov	r3, r2
 810410a:	2201      	movs	r2, #1
 810410c:	f240 118b 	movw	r1, #395	@ 0x18b
 8104110:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8104114:	f7fd f87a 	bl	810120c <drawText>

	//SD Warning
	if (!(sdInitialized && sdPresent)) {
 8104118:	4b23      	ldr	r3, [pc, #140]	@ (81041a8 <sensors+0x9e0>)
 810411a:	781b      	ldrb	r3, [r3, #0]
 810411c:	2b00      	cmp	r3, #0
 810411e:	d003      	beq.n	8104128 <sensors+0x960>
 8104120:	4b22      	ldr	r3, [pc, #136]	@ (81041ac <sensors+0x9e4>)
 8104122:	781b      	ldrb	r3, [r3, #0]
 8104124:	2b00      	cmp	r3, #0
 8104126:	d10e      	bne.n	8104146 <sensors+0x97e>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "NO SD");
 8104128:	4b1b      	ldr	r3, [pc, #108]	@ (8104198 <sensors+0x9d0>)
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a20      	ldr	r2, [pc, #128]	@ (81041b0 <sensors+0x9e8>)
 810412e:	9201      	str	r2, [sp, #4]
 8104130:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8104134:	9200      	str	r2, [sp, #0]
 8104136:	2201      	movs	r2, #1
 8104138:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 810413c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8104140:	f7fd f864 	bl	810120c <drawText>
 8104144:	e011      	b.n	810416a <sensors+0x9a2>
	} else if (loggingStatus == 0) {
 8104146:	4b1b      	ldr	r3, [pc, #108]	@ (81041b4 <sensors+0x9ec>)
 8104148:	781b      	ldrb	r3, [r3, #0]
 810414a:	2b00      	cmp	r3, #0
 810414c:	d10d      	bne.n	810416a <sensors+0x9a2>
		drawText(400, 370, 1, red, FT81x_OPT_CENTER, "LOG OFF");
 810414e:	4b12      	ldr	r3, [pc, #72]	@ (8104198 <sensors+0x9d0>)
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	4a19      	ldr	r2, [pc, #100]	@ (81041b8 <sensors+0x9f0>)
 8104154:	9201      	str	r2, [sp, #4]
 8104156:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810415a:	9200      	str	r2, [sp, #0]
 810415c:	2201      	movs	r2, #1
 810415e:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8104162:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8104166:	f7fd f851 	bl	810120c <drawText>
	}

	drawText(400, 450, 31, white, FT81x_OPT_CENTER, "SENSORS");
 810416a:	4b14      	ldr	r3, [pc, #80]	@ (81041bc <sensors+0x9f4>)
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	4a14      	ldr	r2, [pc, #80]	@ (81041c0 <sensors+0x9f8>)
 8104170:	9201      	str	r2, [sp, #4]
 8104172:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8104176:	9200      	str	r2, [sp, #0]
 8104178:	221f      	movs	r2, #31
 810417a:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 810417e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8104182:	f7fd f843 	bl	810120c <drawText>

	swapScreen();
 8104186:	f7fd f905 	bl	8101394 <swapScreen>



}
 810418a:	bf00      	nop
 810418c:	3728      	adds	r7, #40	@ 0x28
 810418e:	46bd      	mov	sp, r7
 8104190:	bd80      	pop	{r7, pc}
 8104192:	bf00      	nop
 8104194:	10000226 	.word	0x10000226
 8104198:	10000014 	.word	0x10000014
 810419c:	437a0000 	.word	0x437a0000
 81041a0:	1000000c 	.word	0x1000000c
 81041a4:	0810c7d4 	.word	0x0810c7d4
 81041a8:	100003fd 	.word	0x100003fd
 81041ac:	100003fe 	.word	0x100003fe
 81041b0:	0810c798 	.word	0x0810c798
 81041b4:	10000401 	.word	0x10000401
 81041b8:	0810c7a0 	.word	0x0810c7a0
 81041bc:	10000020 	.word	0x10000020
 81041c0:	0810c7e0 	.word	0x0810c7e0

081041c4 <screenWelcome>:


void screenWelcome() {
 81041c4:	b580      	push	{r7, lr}
 81041c6:	b082      	sub	sp, #8
 81041c8:	af02      	add	r7, sp, #8
  beginDisplayList();
 81041ca:	f7fd f8d3 	bl	8101374 <beginDisplayList>
  clear(0x003262);
 81041ce:	f243 2062 	movw	r0, #12898	@ 0x3262
 81041d2:	f7fc fea1 	bl	8100f18 <clear>
  initBitmapHandleForFont(33, 2);
 81041d6:	2102      	movs	r1, #2
 81041d8:	2021      	movs	r0, #33	@ 0x21
 81041da:	f7fd f925 	bl	8101428 <initBitmapHandleForFont>
  drawText(400, 240, 2, 0xFDB515, FT81x_OPT_CENTER, "Overheard this ;)\0");
 81041de:	4b08      	ldr	r3, [pc, #32]	@ (8104200 <screenWelcome+0x3c>)
 81041e0:	9301      	str	r3, [sp, #4]
 81041e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81041e6:	9300      	str	r3, [sp, #0]
 81041e8:	4b06      	ldr	r3, [pc, #24]	@ (8104204 <screenWelcome+0x40>)
 81041ea:	2202      	movs	r2, #2
 81041ec:	21f0      	movs	r1, #240	@ 0xf0
 81041ee:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 81041f2:	f7fd f80b 	bl	810120c <drawText>
  swapScreen();
 81041f6:	f7fd f8cd 	bl	8101394 <swapScreen>
}
 81037fe:	bf00      	nop
 8103800:	46bd      	mov	sp, r7
 8103802:	bd80      	pop	{r7, pc}
 8103804:	0810bda4 	.word	0x0810bda4
 8103808:	00fdb515 	.word	0x00fdb515

08104208 <displayScreen>:
		screenBrightness = 128;
	}
	write8(FT81x_REG_PWM_DUTY, screenBrightness);
}

void displayScreen() {
 8104208:	b580      	push	{r7, lr}
 810420a:	af00      	add	r7, sp, #0
	 curTime = getTime();
 8103810:	f001 fc44 	bl	810509c <getTime>
 8103814:	4603      	mov	r3, r0
 8103816:	461a      	mov	r2, r3
 8103818:	4b15      	ldr	r3, [pc, #84]	@ (8103870 <displayScreen+0x64>)
 810381a:	801a      	strh	r2, [r3, #0]
	 switch (curScreen) {
 810424e:	4b1a      	ldr	r3, [pc, #104]	@ (81042b8 <displayScreen+0xb0>)
 8104250:	781b      	ldrb	r3, [r3, #0]
 8104252:	2b04      	cmp	r3, #4
 8104254:	dc10      	bgt.n	8104278 <displayScreen+0x70>
 8104256:	2b00      	cmp	r3, #0
 8104258:	db23      	blt.n	81042a2 <displayScreen+0x9a>
 810425a:	2b04      	cmp	r3, #4
 810425c:	d821      	bhi.n	81042a2 <displayScreen+0x9a>
 810425e:	a201      	add	r2, pc, #4	@ (adr r2, 8104264 <displayScreen+0x5c>)
 8104260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104264:	0810427f 	.word	0x0810427f
 8104268:	08104285 	.word	0x08104285
 810426c:	0810428b 	.word	0x0810428b
 8104270:	08104291 	.word	0x08104291
 8104274:	08104297 	.word	0x08104297
 8104278:	2b63      	cmp	r3, #99	@ 0x63
 810427a:	d00f      	beq.n	810429c <displayScreen+0x94>
	 		 break;
	 	 case 99:
	 		 screenWelcome();
	 		 break;
	 	 default:
	 		 break;
 810427c:	e011      	b.n	81042a2 <displayScreen+0x9a>
	 		 autox();
 810427e:	f7fd f9e3 	bl	8101648 <autox>
	 		 break;
 8104282:	e00f      	b.n	81042a4 <displayScreen+0x9c>
	 		 skidpad();
 8104284:	f7fd fe80 	bl	8101f88 <skidpad>
	 		 break;
 8104288:	e00c      	b.n	81042a4 <displayScreen+0x9c>
	 		 accel();
 810428a:	f7fe ff93 	bl	81031b4 <accel>
	 		 break;
 810428e:	e009      	b.n	81042a4 <displayScreen+0x9c>
	 		 sound();
 8104290:	f7fe faf2 	bl	8102878 <sound>
			 break;
 8104294:	e006      	b.n	81042a4 <displayScreen+0x9c>
	 		 sensors();
 8104296:	f7ff fa97 	bl	81037c8 <sensors>
	 		 break;
 810429a:	e003      	b.n	81042a4 <displayScreen+0x9c>
	 		 screenWelcome();
 810429c:	f7ff ff92 	bl	81041c4 <screenWelcome>
	 		 break;
 81042a0:	e000      	b.n	81042a4 <displayScreen+0x9c>
	 		 break;
 81042a2:	bf00      	nop
	  }
}
 81042a4:	bf00      	nop
 81042a6:	bd80      	pop	{r7, pc}
 81042a8:	10000224 	.word	0x10000224
 81042ac:	100003f2 	.word	0x100003f2
 81042b0:	1000022c 	.word	0x1000022c
 81042b4:	10000228 	.word	0x10000228
 81042b8:	100003ff 	.word	0x100003ff

081042bc <writeLed>:
void rpm10000();
void rpm10500();


void writeLed(uint8_t r, uint8_t g, uint8_t b, bool latch)
{
 81042bc:	b590      	push	{r4, r7, lr}
 81042be:	b083      	sub	sp, #12
 81042c0:	af00      	add	r7, sp, #0
 81042c2:	4604      	mov	r4, r0
 81042c4:	4608      	mov	r0, r1
 81042c6:	4611      	mov	r1, r2
 81042c8:	461a      	mov	r2, r3
 81042ca:	4623      	mov	r3, r4
 81042cc:	71fb      	strb	r3, [r7, #7]
 81042ce:	4603      	mov	r3, r0
 81042d0:	71bb      	strb	r3, [r7, #6]
 81042d2:	460b      	mov	r3, r1
 81042d4:	717b      	strb	r3, [r7, #5]
 81042d6:	4613      	mov	r3, r2
 81042d8:	713b      	strb	r3, [r7, #4]
	writeByte(0b00111010);
 81042da:	203a      	movs	r0, #58	@ 0x3a
 81042dc:	f000 f84c 	bl	8104378 <writeByte>

	writeByte((uint8_t)(b * brightness / 10));
 81042e0:	797b      	ldrb	r3, [r7, #5]
 81042e2:	4a22      	ldr	r2, [pc, #136]	@ (810436c <writeLed+0xb0>)
 81042e4:	7812      	ldrb	r2, [r2, #0]
 81042e6:	fb02 f303 	mul.w	r3, r2, r3
 81042ea:	4a21      	ldr	r2, [pc, #132]	@ (8104370 <writeLed+0xb4>)
 81042ec:	fb82 1203 	smull	r1, r2, r2, r3
 81042f0:	1092      	asrs	r2, r2, #2
 81042f2:	17db      	asrs	r3, r3, #31
 81042f4:	1ad3      	subs	r3, r2, r3
 81042f6:	b2db      	uxtb	r3, r3
 81042f8:	4618      	mov	r0, r3
 81042fa:	f000 f83d 	bl	8104378 <writeByte>
	writeByte((uint8_t)(g * brightness / 10));
 81042fe:	79bb      	ldrb	r3, [r7, #6]
 8104300:	4a1a      	ldr	r2, [pc, #104]	@ (810436c <writeLed+0xb0>)
 8104302:	7812      	ldrb	r2, [r2, #0]
 8104304:	fb02 f303 	mul.w	r3, r2, r3
 8104308:	4a19      	ldr	r2, [pc, #100]	@ (8104370 <writeLed+0xb4>)
 810430a:	fb82 1203 	smull	r1, r2, r2, r3
 810430e:	1092      	asrs	r2, r2, #2
 8104310:	17db      	asrs	r3, r3, #31
 8104312:	1ad3      	subs	r3, r2, r3
 8104314:	b2db      	uxtb	r3, r3
 8104316:	4618      	mov	r0, r3
 8104318:	f000 f82e 	bl	8104378 <writeByte>
	writeByte((uint8_t)(r * brightness / 10));
 810431c:	79fb      	ldrb	r3, [r7, #7]
 810431e:	4a13      	ldr	r2, [pc, #76]	@ (810436c <writeLed+0xb0>)
 8104320:	7812      	ldrb	r2, [r2, #0]
 8104322:	fb02 f303 	mul.w	r3, r2, r3
 8104326:	4a12      	ldr	r2, [pc, #72]	@ (8104370 <writeLed+0xb4>)
 8104328:	fb82 1203 	smull	r1, r2, r2, r3
 810432c:	1092      	asrs	r2, r2, #2
 810432e:	17db      	asrs	r3, r3, #31
 8104330:	1ad3      	subs	r3, r2, r3
 8104332:	b2db      	uxtb	r3, r3
 8104334:	4618      	mov	r0, r3
 8104336:	f000 f81f 	bl	8104378 <writeByte>

	if (latch) {
 810433a:	793b      	ldrb	r3, [r7, #4]
 810433c:	2b00      	cmp	r3, #0
 810433e:	d009      	beq.n	8104354 <writeLed+0x98>
	  delayMicro(10*tcycle);
 81038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8103930 <writeLed+0xb8>)
 81038fe:	681a      	ldr	r2, [r3, #0]
 8103900:	4613      	mov	r3, r2
 8103902:	009b      	lsls	r3, r3, #2
 8103904:	4413      	add	r3, r2
 8103906:	005b      	lsls	r3, r3, #1
 8103908:	4618      	mov	r0, r3
 810390a:	f001 fba3 	bl	8105054 <delayMicro>
	} else {
	  delayMicro(3*tcycle);
	}
}
 8104352:	e007      	b.n	8104364 <writeLed+0xa8>
	  delayMicro(3*tcycle);
 8103910:	4b07      	ldr	r3, [pc, #28]	@ (8103930 <writeLed+0xb8>)
 8103912:	681a      	ldr	r2, [r3, #0]
 8103914:	4613      	mov	r3, r2
 8103916:	005b      	lsls	r3, r3, #1
 8103918:	4413      	add	r3, r2
 810391a:	4618      	mov	r0, r3
 810391c:	f001 fb9a 	bl	8105054 <delayMicro>
}
 8104364:	bf00      	nop
 8104366:	370c      	adds	r7, #12
 8104368:	46bd      	mov	sp, r7
 810436a:	bd90      	pop	{r4, r7, pc}
 810436c:	1000002c 	.word	0x1000002c
 8104370:	66666667 	.word	0x66666667
 8104374:	10000028 	.word	0x10000028

08104378 <writeByte>:

void writeByte(uint8_t data)
{
 8104378:	b580      	push	{r7, lr}
 810437a:	b082      	sub	sp, #8
 810437c:	af00      	add	r7, sp, #0
 810437e:	4603      	mov	r3, r0
 8104380:	71fb      	strb	r3, [r7, #7]
  writeBit(data & (1<<7));
 8104382:	79fb      	ldrb	r3, [r7, #7]
 8104384:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8104388:	b2db      	uxtb	r3, r3
 810438a:	4618      	mov	r0, r3
 810438c:	f000 f836 	bl	81043fc <writeBit>
  writeBit(data & (1<<6));
 8104390:	79fb      	ldrb	r3, [r7, #7]
 8104392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104396:	b2db      	uxtb	r3, r3
 8104398:	4618      	mov	r0, r3
 810439a:	f000 f82f 	bl	81043fc <writeBit>
  writeBit(data & (1<<5));
 810439e:	79fb      	ldrb	r3, [r7, #7]
 81043a0:	f003 0320 	and.w	r3, r3, #32
 81043a4:	b2db      	uxtb	r3, r3
 81043a6:	4618      	mov	r0, r3
 81043a8:	f000 f828 	bl	81043fc <writeBit>
  writeBit(data & (1<<4));
 81043ac:	79fb      	ldrb	r3, [r7, #7]
 81043ae:	f003 0310 	and.w	r3, r3, #16
 81043b2:	b2db      	uxtb	r3, r3
 81043b4:	4618      	mov	r0, r3
 81043b6:	f000 f821 	bl	81043fc <writeBit>
  writeBit(data & (1<<3));
 81043ba:	79fb      	ldrb	r3, [r7, #7]
 81043bc:	f003 0308 	and.w	r3, r3, #8
 81043c0:	b2db      	uxtb	r3, r3
 81043c2:	4618      	mov	r0, r3
 81043c4:	f000 f81a 	bl	81043fc <writeBit>
  writeBit(data & (1<<2));
 81043c8:	79fb      	ldrb	r3, [r7, #7]
 81043ca:	f003 0304 	and.w	r3, r3, #4
 81043ce:	b2db      	uxtb	r3, r3
 81043d0:	4618      	mov	r0, r3
 81043d2:	f000 f813 	bl	81043fc <writeBit>
  writeBit(data & (1<<1));
 81043d6:	79fb      	ldrb	r3, [r7, #7]
 81043d8:	f003 0302 	and.w	r3, r3, #2
 81043dc:	b2db      	uxtb	r3, r3
 81043de:	4618      	mov	r0, r3
 81043e0:	f000 f80c 	bl	81043fc <writeBit>
  writeBit(data & (1<<0));
 81043e4:	79fb      	ldrb	r3, [r7, #7]
 81043e6:	f003 0301 	and.w	r3, r3, #1
 81043ea:	b2db      	uxtb	r3, r3
 81043ec:	4618      	mov	r0, r3
 81043ee:	f000 f805 	bl	81043fc <writeBit>
}
 81043f2:	bf00      	nop
 81043f4:	3708      	adds	r7, #8
 81043f6:	46bd      	mov	sp, r7
 81043f8:	bd80      	pop	{r7, pc}
	...

081043fc <writeBit>:

void writeBit(uint8_t data) {
 81043fc:	b580      	push	{r7, lr}
 81043fe:	b082      	sub	sp, #8
 8104400:	af00      	add	r7, sp, #0
 8104402:	4603      	mov	r3, r0
 8104404:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 81039c2:	2201      	movs	r2, #1
 81039c4:	2180      	movs	r1, #128	@ 0x80
 81039c6:	4812      	ldr	r0, [pc, #72]	@ (8103a10 <writeBit+0x58>)
 81039c8:	f002 f9c0 	bl	8105d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 81039cc:	2200      	movs	r2, #0
 81039ce:	2180      	movs	r1, #128	@ 0x80
 81039d0:	480f      	ldr	r0, [pc, #60]	@ (8103a10 <writeBit+0x58>)
 81039d2:	f002 f9bb 	bl	8105d4c <HAL_GPIO_WritePin>

  if (data)
 810441a:	79fb      	ldrb	r3, [r7, #7]
 810441c:	2b00      	cmp	r3, #0
 810441e:	d00f      	beq.n	8104440 <writeBit+0x44>
  {
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 81039dc:	2201      	movs	r2, #1
 81039de:	2180      	movs	r1, #128	@ 0x80
 81039e0:	480b      	ldr	r0, [pc, #44]	@ (8103a10 <writeBit+0x58>)
 81039e2:	f002 f9b3 	bl	8105d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 81039e6:	2200      	movs	r2, #0
 81039e8:	2180      	movs	r1, #128	@ 0x80
 81039ea:	4809      	ldr	r0, [pc, #36]	@ (8103a10 <writeBit+0x58>)
 81039ec:	f002 f9ae 	bl	8105d4c <HAL_GPIO_WritePin>
    delayMicro(tcycle);
 81039f0:	4b08      	ldr	r3, [pc, #32]	@ (8103a14 <writeBit+0x5c>)
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	4618      	mov	r0, r3
 81039f6:	f001 fb2d 	bl	8105054 <delayMicro>
  }
  else
  {
    delayMicro(tcycle);
  }
}
 810443e:	e004      	b.n	810444a <writeBit+0x4e>
    delayMicro(tcycle);
 81039fc:	4b05      	ldr	r3, [pc, #20]	@ (8103a14 <writeBit+0x5c>)
 81039fe:	681b      	ldr	r3, [r3, #0]
 8103a00:	4618      	mov	r0, r3
 8103a02:	f001 fb27 	bl	8105054 <delayMicro>
}
 810444a:	bf00      	nop
 810444c:	3708      	adds	r7, #8
 810444e:	46bd      	mov	sp, r7
 8104450:	bd80      	pop	{r7, pc}
 8104452:	bf00      	nop
 8104454:	58021000 	.word	0x58021000
 8104458:	10000028 	.word	0x10000028

08103a18 <cycleBrightness>:

void cycleBrightness()
{
 8103a18:	b480      	push	{r7}
 8103a1a:	af00      	add	r7, sp, #0
	brightness = brightness - 2 == 0 ? 10 : brightness - 2;
 8103a1c:	4b08      	ldr	r3, [pc, #32]	@ (8103a40 <cycleBrightness+0x28>)
 8103a1e:	781b      	ldrb	r3, [r3, #0]
 8103a20:	2b02      	cmp	r3, #2
 8103a22:	d004      	beq.n	8103a2e <cycleBrightness+0x16>
 8103a24:	4b06      	ldr	r3, [pc, #24]	@ (8103a40 <cycleBrightness+0x28>)
 8103a26:	781b      	ldrb	r3, [r3, #0]
 8103a28:	3b02      	subs	r3, #2
 8103a2a:	b2db      	uxtb	r3, r3
 8103a2c:	e000      	b.n	8103a30 <cycleBrightness+0x18>
 8103a2e:	230a      	movs	r3, #10
 8103a30:	4a03      	ldr	r2, [pc, #12]	@ (8103a40 <cycleBrightness+0x28>)
 8103a32:	7013      	strb	r3, [r2, #0]
}
 8103a34:	bf00      	nop
 8103a36:	46bd      	mov	sp, r7
 8103a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a3c:	4770      	bx	lr
 8103a3e:	bf00      	nop
 8103a40:	1000002c 	.word	0x1000002c

08103a44 <rpm6000>:

void rpm6000()
{
 8103a44:	b580      	push	{r7, lr}
 8103a46:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103a48:	2300      	movs	r3, #0
 8103a4a:	22ff      	movs	r2, #255	@ 0xff
 8103a4c:	2100      	movs	r1, #0
 8103a4e:	2000      	movs	r0, #0
 8103a50:	f7ff ff12 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a54:	2300      	movs	r3, #0
 8103a56:	2200      	movs	r2, #0
 8103a58:	2100      	movs	r1, #0
 8103a5a:	2000      	movs	r0, #0
 8103a5c:	f7ff ff0c 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a60:	2300      	movs	r3, #0
 8103a62:	2200      	movs	r2, #0
 8103a64:	2100      	movs	r1, #0
 8103a66:	2000      	movs	r0, #0
 8103a68:	f7ff ff06 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a6c:	2300      	movs	r3, #0
 8103a6e:	2200      	movs	r2, #0
 8103a70:	2100      	movs	r1, #0
 8103a72:	2000      	movs	r0, #0
 8103a74:	f7ff ff00 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a78:	2300      	movs	r3, #0
 8103a7a:	2200      	movs	r2, #0
 8103a7c:	2100      	movs	r1, #0
 8103a7e:	2000      	movs	r0, #0
 8103a80:	f7ff fefa 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a84:	2300      	movs	r3, #0
 8103a86:	2200      	movs	r2, #0
 8103a88:	2100      	movs	r1, #0
 8103a8a:	2000      	movs	r0, #0
 8103a8c:	f7ff fef4 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a90:	2300      	movs	r3, #0
 8103a92:	2200      	movs	r2, #0
 8103a94:	2100      	movs	r1, #0
 8103a96:	2000      	movs	r0, #0
 8103a98:	f7ff feee 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103a9c:	2300      	movs	r3, #0
 8103a9e:	2200      	movs	r2, #0
 8103aa0:	2100      	movs	r1, #0
 8103aa2:	2000      	movs	r0, #0
 8103aa4:	f7ff fee8 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103aa8:	2301      	movs	r3, #1
 8103aaa:	2200      	movs	r2, #0
 8103aac:	2100      	movs	r1, #0
 8103aae:	2000      	movs	r0, #0
 8103ab0:	f7ff fee2 	bl	8103878 <writeLed>
}
 8103ab4:	bf00      	nop
 8103ab6:	bd80      	pop	{r7, pc}

08103ab8 <rpm6500>:

void rpm6500()
{
 8103ab8:	b580      	push	{r7, lr}
 8103aba:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103abc:	2300      	movs	r3, #0
 8103abe:	22ff      	movs	r2, #255	@ 0xff
 8103ac0:	2100      	movs	r1, #0
 8103ac2:	2000      	movs	r0, #0
 8103ac4:	f7ff fed8 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103ac8:	2300      	movs	r3, #0
 8103aca:	2200      	movs	r2, #0
 8103acc:	21ff      	movs	r1, #255	@ 0xff
 8103ace:	2000      	movs	r0, #0
 8103ad0:	f7ff fed2 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103ad4:	2300      	movs	r3, #0
 8103ad6:	2200      	movs	r2, #0
 8103ad8:	2100      	movs	r1, #0
 8103ada:	2000      	movs	r0, #0
 8103adc:	f7ff fecc 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103ae0:	2300      	movs	r3, #0
 8103ae2:	2200      	movs	r2, #0
 8103ae4:	2100      	movs	r1, #0
 8103ae6:	2000      	movs	r0, #0
 8103ae8:	f7ff fec6 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103aec:	2300      	movs	r3, #0
 8103aee:	2200      	movs	r2, #0
 8103af0:	2100      	movs	r1, #0
 8103af2:	2000      	movs	r0, #0
 8103af4:	f7ff fec0 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103af8:	2300      	movs	r3, #0
 8103afa:	2200      	movs	r2, #0
 8103afc:	2100      	movs	r1, #0
 8103afe:	2000      	movs	r0, #0
 8103b00:	f7ff feba 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b04:	2300      	movs	r3, #0
 8103b06:	2200      	movs	r2, #0
 8103b08:	2100      	movs	r1, #0
 8103b0a:	2000      	movs	r0, #0
 8103b0c:	f7ff feb4 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b10:	2300      	movs	r3, #0
 8103b12:	2200      	movs	r2, #0
 8103b14:	2100      	movs	r1, #0
 8103b16:	2000      	movs	r0, #0
 8103b18:	f7ff feae 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103b1c:	2301      	movs	r3, #1
 8103b1e:	2200      	movs	r2, #0
 8103b20:	2100      	movs	r1, #0
 8103b22:	2000      	movs	r0, #0
 8103b24:	f7ff fea8 	bl	8103878 <writeLed>
}
 8103b28:	bf00      	nop
 8103b2a:	bd80      	pop	{r7, pc}

08103b2c <rpm7000>:

void rpm7000()
{
 8103b2c:	b580      	push	{r7, lr}
 8103b2e:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103b30:	2300      	movs	r3, #0
 8103b32:	22ff      	movs	r2, #255	@ 0xff
 8103b34:	2100      	movs	r1, #0
 8103b36:	2000      	movs	r0, #0
 8103b38:	f7ff fe9e 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103b3c:	2300      	movs	r3, #0
 8103b3e:	2200      	movs	r2, #0
 8103b40:	21ff      	movs	r1, #255	@ 0xff
 8103b42:	2000      	movs	r0, #0
 8103b44:	f7ff fe98 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103b48:	2300      	movs	r3, #0
 8103b4a:	2200      	movs	r2, #0
 8103b4c:	21ff      	movs	r1, #255	@ 0xff
 8103b4e:	2000      	movs	r0, #0
 8103b50:	f7ff fe92 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b54:	2300      	movs	r3, #0
 8103b56:	2200      	movs	r2, #0
 8103b58:	2100      	movs	r1, #0
 8103b5a:	2000      	movs	r0, #0
 8103b5c:	f7ff fe8c 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b60:	2300      	movs	r3, #0
 8103b62:	2200      	movs	r2, #0
 8103b64:	2100      	movs	r1, #0
 8103b66:	2000      	movs	r0, #0
 8103b68:	f7ff fe86 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b6c:	2300      	movs	r3, #0
 8103b6e:	2200      	movs	r2, #0
 8103b70:	2100      	movs	r1, #0
 8103b72:	2000      	movs	r0, #0
 8103b74:	f7ff fe80 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b78:	2300      	movs	r3, #0
 8103b7a:	2200      	movs	r2, #0
 8103b7c:	2100      	movs	r1, #0
 8103b7e:	2000      	movs	r0, #0
 8103b80:	f7ff fe7a 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103b84:	2300      	movs	r3, #0
 8103b86:	2200      	movs	r2, #0
 8103b88:	2100      	movs	r1, #0
 8103b8a:	2000      	movs	r0, #0
 8103b8c:	f7ff fe74 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103b90:	2301      	movs	r3, #1
 8103b92:	2200      	movs	r2, #0
 8103b94:	2100      	movs	r1, #0
 8103b96:	2000      	movs	r0, #0
 8103b98:	f7ff fe6e 	bl	8103878 <writeLed>
}
 8103b9c:	bf00      	nop
 8103b9e:	bd80      	pop	{r7, pc}

08103ba0 <rpm7500>:

void rpm7500()
{
 8103ba0:	b580      	push	{r7, lr}
 8103ba2:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103ba4:	2300      	movs	r3, #0
 8103ba6:	22ff      	movs	r2, #255	@ 0xff
 8103ba8:	2100      	movs	r1, #0
 8103baa:	2000      	movs	r0, #0
 8103bac:	f7ff fe64 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103bb0:	2300      	movs	r3, #0
 8103bb2:	2200      	movs	r2, #0
 8103bb4:	21ff      	movs	r1, #255	@ 0xff
 8103bb6:	2000      	movs	r0, #0
 8103bb8:	f7ff fe5e 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103bbc:	2300      	movs	r3, #0
 8103bbe:	2200      	movs	r2, #0
 8103bc0:	21ff      	movs	r1, #255	@ 0xff
 8103bc2:	2000      	movs	r0, #0
 8103bc4:	f7ff fe58 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103bc8:	2300      	movs	r3, #0
 8103bca:	2200      	movs	r2, #0
 8103bcc:	21ff      	movs	r1, #255	@ 0xff
 8103bce:	20ff      	movs	r0, #255	@ 0xff
 8103bd0:	f7ff fe52 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103bd4:	2300      	movs	r3, #0
 8103bd6:	2200      	movs	r2, #0
 8103bd8:	2100      	movs	r1, #0
 8103bda:	2000      	movs	r0, #0
 8103bdc:	f7ff fe4c 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103be0:	2300      	movs	r3, #0
 8103be2:	2200      	movs	r2, #0
 8103be4:	2100      	movs	r1, #0
 8103be6:	2000      	movs	r0, #0
 8103be8:	f7ff fe46 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103bec:	2300      	movs	r3, #0
 8103bee:	2200      	movs	r2, #0
 8103bf0:	2100      	movs	r1, #0
 8103bf2:	2000      	movs	r0, #0
 8103bf4:	f7ff fe40 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103bf8:	2300      	movs	r3, #0
 8103bfa:	2200      	movs	r2, #0
 8103bfc:	2100      	movs	r1, #0
 8103bfe:	2000      	movs	r0, #0
 8103c00:	f7ff fe3a 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103c04:	2301      	movs	r3, #1
 8103c06:	2200      	movs	r2, #0
 8103c08:	2100      	movs	r1, #0
 8103c0a:	2000      	movs	r0, #0
 8103c0c:	f7ff fe34 	bl	8103878 <writeLed>
}
 8103c10:	bf00      	nop
 8103c12:	bd80      	pop	{r7, pc}

08103c14 <rpm8000>:

void rpm8000()
{
 8103c14:	b580      	push	{r7, lr}
 8103c16:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103c18:	2300      	movs	r3, #0
 8103c1a:	22ff      	movs	r2, #255	@ 0xff
 8103c1c:	2100      	movs	r1, #0
 8103c1e:	2000      	movs	r0, #0
 8103c20:	f7ff fe2a 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103c24:	2300      	movs	r3, #0
 8103c26:	2200      	movs	r2, #0
 8103c28:	21ff      	movs	r1, #255	@ 0xff
 8103c2a:	2000      	movs	r0, #0
 8103c2c:	f7ff fe24 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103c30:	2300      	movs	r3, #0
 8103c32:	2200      	movs	r2, #0
 8103c34:	21ff      	movs	r1, #255	@ 0xff
 8103c36:	2000      	movs	r0, #0
 8103c38:	f7ff fe1e 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103c3c:	2300      	movs	r3, #0
 8103c3e:	2200      	movs	r2, #0
 8103c40:	21ff      	movs	r1, #255	@ 0xff
 8103c42:	20ff      	movs	r0, #255	@ 0xff
 8103c44:	f7ff fe18 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103c48:	2300      	movs	r3, #0
 8103c4a:	2200      	movs	r2, #0
 8103c4c:	21ff      	movs	r1, #255	@ 0xff
 8103c4e:	20ff      	movs	r0, #255	@ 0xff
 8103c50:	f7ff fe12 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103c54:	2300      	movs	r3, #0
 8103c56:	2200      	movs	r2, #0
 8103c58:	2100      	movs	r1, #0
 8103c5a:	2000      	movs	r0, #0
 8103c5c:	f7ff fe0c 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103c60:	2300      	movs	r3, #0
 8103c62:	2200      	movs	r2, #0
 8103c64:	2100      	movs	r1, #0
 8103c66:	2000      	movs	r0, #0
 8103c68:	f7ff fe06 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103c6c:	2300      	movs	r3, #0
 8103c6e:	2200      	movs	r2, #0
 8103c70:	2100      	movs	r1, #0
 8103c72:	2000      	movs	r0, #0
 8103c74:	f7ff fe00 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103c78:	2301      	movs	r3, #1
 8103c7a:	2200      	movs	r2, #0
 8103c7c:	2100      	movs	r1, #0
 8103c7e:	2000      	movs	r0, #0
 8103c80:	f7ff fdfa 	bl	8103878 <writeLed>
}
 8103c84:	bf00      	nop
 8103c86:	bd80      	pop	{r7, pc}

08103c88 <rpm8500>:

void rpm8500()
{
 8103c88:	b580      	push	{r7, lr}
 8103c8a:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103c8c:	2300      	movs	r3, #0
 8103c8e:	22ff      	movs	r2, #255	@ 0xff
 8103c90:	2100      	movs	r1, #0
 8103c92:	2000      	movs	r0, #0
 8103c94:	f7ff fdf0 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103c98:	2300      	movs	r3, #0
 8103c9a:	2200      	movs	r2, #0
 8103c9c:	21ff      	movs	r1, #255	@ 0xff
 8103c9e:	2000      	movs	r0, #0
 8103ca0:	f7ff fdea 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103ca4:	2300      	movs	r3, #0
 8103ca6:	2200      	movs	r2, #0
 8103ca8:	21ff      	movs	r1, #255	@ 0xff
 8103caa:	2000      	movs	r0, #0
 8103cac:	f7ff fde4 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103cb0:	2300      	movs	r3, #0
 8103cb2:	2200      	movs	r2, #0
 8103cb4:	21ff      	movs	r1, #255	@ 0xff
 8103cb6:	20ff      	movs	r0, #255	@ 0xff
 8103cb8:	f7ff fdde 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103cbc:	2300      	movs	r3, #0
 8103cbe:	2200      	movs	r2, #0
 8103cc0:	21ff      	movs	r1, #255	@ 0xff
 8103cc2:	20ff      	movs	r0, #255	@ 0xff
 8103cc4:	f7ff fdd8 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103cc8:	2300      	movs	r3, #0
 8103cca:	2200      	movs	r2, #0
 8103ccc:	2100      	movs	r1, #0
 8103cce:	20ff      	movs	r0, #255	@ 0xff
 8103cd0:	f7ff fdd2 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103cd4:	2300      	movs	r3, #0
 8103cd6:	2200      	movs	r2, #0
 8103cd8:	2100      	movs	r1, #0
 8103cda:	2000      	movs	r0, #0
 8103cdc:	f7ff fdcc 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103ce0:	2300      	movs	r3, #0
 8103ce2:	2200      	movs	r2, #0
 8103ce4:	2100      	movs	r1, #0
 8103ce6:	2000      	movs	r0, #0
 8103ce8:	f7ff fdc6 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103cec:	2301      	movs	r3, #1
 8103cee:	2200      	movs	r2, #0
 8103cf0:	2100      	movs	r1, #0
 8103cf2:	2000      	movs	r0, #0
 8103cf4:	f7ff fdc0 	bl	8103878 <writeLed>
}
 8103cf8:	bf00      	nop
 8103cfa:	bd80      	pop	{r7, pc}

08103cfc <rpm9000>:

void rpm9000()
{
 8103cfc:	b580      	push	{r7, lr}
 8103cfe:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103d00:	2300      	movs	r3, #0
 8103d02:	22ff      	movs	r2, #255	@ 0xff
 8103d04:	2100      	movs	r1, #0
 8103d06:	2000      	movs	r0, #0
 8103d08:	f7ff fdb6 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103d0c:	2300      	movs	r3, #0
 8103d0e:	2200      	movs	r2, #0
 8103d10:	21ff      	movs	r1, #255	@ 0xff
 8103d12:	2000      	movs	r0, #0
 8103d14:	f7ff fdb0 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103d18:	2300      	movs	r3, #0
 8103d1a:	2200      	movs	r2, #0
 8103d1c:	21ff      	movs	r1, #255	@ 0xff
 8103d1e:	2000      	movs	r0, #0
 8103d20:	f7ff fdaa 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103d24:	2300      	movs	r3, #0
 8103d26:	2200      	movs	r2, #0
 8103d28:	21ff      	movs	r1, #255	@ 0xff
 8103d2a:	20ff      	movs	r0, #255	@ 0xff
 8103d2c:	f7ff fda4 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103d30:	2300      	movs	r3, #0
 8103d32:	2200      	movs	r2, #0
 8103d34:	21ff      	movs	r1, #255	@ 0xff
 8103d36:	20ff      	movs	r0, #255	@ 0xff
 8103d38:	f7ff fd9e 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103d3c:	2300      	movs	r3, #0
 8103d3e:	2200      	movs	r2, #0
 8103d40:	2100      	movs	r1, #0
 8103d42:	20ff      	movs	r0, #255	@ 0xff
 8103d44:	f7ff fd98 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103d48:	2300      	movs	r3, #0
 8103d4a:	2200      	movs	r2, #0
 8103d4c:	2100      	movs	r1, #0
 8103d4e:	20ff      	movs	r0, #255	@ 0xff
 8103d50:	f7ff fd92 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103d54:	2300      	movs	r3, #0
 8103d56:	2200      	movs	r2, #0
 8103d58:	2100      	movs	r1, #0
 8103d5a:	2000      	movs	r0, #0
 8103d5c:	f7ff fd8c 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103d60:	2301      	movs	r3, #1
 8103d62:	2200      	movs	r2, #0
 8103d64:	2100      	movs	r1, #0
 8103d66:	2000      	movs	r0, #0
 8103d68:	f7ff fd86 	bl	8103878 <writeLed>
}
 8103d6c:	bf00      	nop
 8103d6e:	bd80      	pop	{r7, pc}

08103d70 <rpm9500>:

void rpm9500()
{
 8103d70:	b580      	push	{r7, lr}
 8103d72:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103d74:	2300      	movs	r3, #0
 8103d76:	22ff      	movs	r2, #255	@ 0xff
 8103d78:	2100      	movs	r1, #0
 8103d7a:	2000      	movs	r0, #0
 8103d7c:	f7ff fd7c 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103d80:	2300      	movs	r3, #0
 8103d82:	2200      	movs	r2, #0
 8103d84:	21ff      	movs	r1, #255	@ 0xff
 8103d86:	2000      	movs	r0, #0
 8103d88:	f7ff fd76 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103d8c:	2300      	movs	r3, #0
 8103d8e:	2200      	movs	r2, #0
 8103d90:	21ff      	movs	r1, #255	@ 0xff
 8103d92:	2000      	movs	r0, #0
 8103d94:	f7ff fd70 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103d98:	2300      	movs	r3, #0
 8103d9a:	2200      	movs	r2, #0
 8103d9c:	21ff      	movs	r1, #255	@ 0xff
 8103d9e:	20ff      	movs	r0, #255	@ 0xff
 8103da0:	f7ff fd6a 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103da4:	2300      	movs	r3, #0
 8103da6:	2200      	movs	r2, #0
 8103da8:	21ff      	movs	r1, #255	@ 0xff
 8103daa:	20ff      	movs	r0, #255	@ 0xff
 8103dac:	f7ff fd64 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103db0:	2300      	movs	r3, #0
 8103db2:	2200      	movs	r2, #0
 8103db4:	2100      	movs	r1, #0
 8103db6:	20ff      	movs	r0, #255	@ 0xff
 8103db8:	f7ff fd5e 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103dbc:	2300      	movs	r3, #0
 8103dbe:	2200      	movs	r2, #0
 8103dc0:	2100      	movs	r1, #0
 8103dc2:	20ff      	movs	r0, #255	@ 0xff
 8103dc4:	f7ff fd58 	bl	8103878 <writeLed>
	writeLed(170,0,255,false);
 8103dc8:	2300      	movs	r3, #0
 8103dca:	22ff      	movs	r2, #255	@ 0xff
 8103dcc:	2100      	movs	r1, #0
 8103dce:	20aa      	movs	r0, #170	@ 0xaa
 8103dd0:	f7ff fd52 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103dd4:	2301      	movs	r3, #1
 8103dd6:	2200      	movs	r2, #0
 8103dd8:	2100      	movs	r1, #0
 8103dda:	2000      	movs	r0, #0
 8103ddc:	f7ff fd4c 	bl	8103878 <writeLed>
}
 8103de0:	bf00      	nop
 8103de2:	bd80      	pop	{r7, pc}

08103de4 <rpm10000>:

void rpm10000()
{
 8103de4:	b580      	push	{r7, lr}
 8103de6:	af00      	add	r7, sp, #0
	writeLed(0,0,255,false);
 8103de8:	2300      	movs	r3, #0
 8103dea:	22ff      	movs	r2, #255	@ 0xff
 8103dec:	2100      	movs	r1, #0
 8103dee:	2000      	movs	r0, #0
 8103df0:	f7ff fd42 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103df4:	2300      	movs	r3, #0
 8103df6:	2200      	movs	r2, #0
 8103df8:	21ff      	movs	r1, #255	@ 0xff
 8103dfa:	2000      	movs	r0, #0
 8103dfc:	f7ff fd3c 	bl	8103878 <writeLed>
	writeLed(0,255,0,false);
 8103e00:	2300      	movs	r3, #0
 8103e02:	2200      	movs	r2, #0
 8103e04:	21ff      	movs	r1, #255	@ 0xff
 8103e06:	2000      	movs	r0, #0
 8103e08:	f7ff fd36 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103e0c:	2300      	movs	r3, #0
 8103e0e:	2200      	movs	r2, #0
 8103e10:	21ff      	movs	r1, #255	@ 0xff
 8103e12:	20ff      	movs	r0, #255	@ 0xff
 8103e14:	f7ff fd30 	bl	8103878 <writeLed>
	writeLed(255,255,0,false);
 8103e18:	2300      	movs	r3, #0
 8103e1a:	2200      	movs	r2, #0
 8103e1c:	21ff      	movs	r1, #255	@ 0xff
 8103e1e:	20ff      	movs	r0, #255	@ 0xff
 8103e20:	f7ff fd2a 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103e24:	2300      	movs	r3, #0
 8103e26:	2200      	movs	r2, #0
 8103e28:	2100      	movs	r1, #0
 8103e2a:	20ff      	movs	r0, #255	@ 0xff
 8103e2c:	f7ff fd24 	bl	8103878 <writeLed>
	writeLed(255,0,0,false);
 8103e30:	2300      	movs	r3, #0
 8103e32:	2200      	movs	r2, #0
 8103e34:	2100      	movs	r1, #0
 8103e36:	20ff      	movs	r0, #255	@ 0xff
 8103e38:	f7ff fd1e 	bl	8103878 <writeLed>
	writeLed(170,0,255,false);
 8103e3c:	2300      	movs	r3, #0
 8103e3e:	22ff      	movs	r2, #255	@ 0xff
 8103e40:	2100      	movs	r1, #0
 8103e42:	20aa      	movs	r0, #170	@ 0xaa
 8103e44:	f7ff fd18 	bl	8103878 <writeLed>
	writeLed(170,0,255,true);
 8103e48:	2301      	movs	r3, #1
 8103e4a:	22ff      	movs	r2, #255	@ 0xff
 8103e4c:	2100      	movs	r1, #0
 8103e4e:	20aa      	movs	r0, #170	@ 0xaa
 8103e50:	f7ff fd12 	bl	8103878 <writeLed>
}
 8103e54:	bf00      	nop
 8103e56:	bd80      	pop	{r7, pc}

08103e58 <rpm10500>:

void rpm10500()
{
 8103e58:	b580      	push	{r7, lr}
 8103e5a:	af00      	add	r7, sp, #0
	writeLed(255,140,0,false);
 8103e5c:	2300      	movs	r3, #0
 8103e5e:	2200      	movs	r2, #0
 8103e60:	218c      	movs	r1, #140	@ 0x8c
 8103e62:	20ff      	movs	r0, #255	@ 0xff
 8103e64:	f7ff fd08 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103e68:	2300      	movs	r3, #0
 8103e6a:	2200      	movs	r2, #0
 8103e6c:	218c      	movs	r1, #140	@ 0x8c
 8103e6e:	20ff      	movs	r0, #255	@ 0xff
 8103e70:	f7ff fd02 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103e74:	2300      	movs	r3, #0
 8103e76:	2200      	movs	r2, #0
 8103e78:	218c      	movs	r1, #140	@ 0x8c
 8103e7a:	20ff      	movs	r0, #255	@ 0xff
 8103e7c:	f7ff fcfc 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103e80:	2300      	movs	r3, #0
 8103e82:	2200      	movs	r2, #0
 8103e84:	218c      	movs	r1, #140	@ 0x8c
 8103e86:	20ff      	movs	r0, #255	@ 0xff
 8103e88:	f7ff fcf6 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103e8c:	2300      	movs	r3, #0
 8103e8e:	2200      	movs	r2, #0
 8103e90:	218c      	movs	r1, #140	@ 0x8c
 8103e92:	20ff      	movs	r0, #255	@ 0xff
 8103e94:	f7ff fcf0 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103e98:	2300      	movs	r3, #0
 8103e9a:	2200      	movs	r2, #0
 8103e9c:	218c      	movs	r1, #140	@ 0x8c
 8103e9e:	20ff      	movs	r0, #255	@ 0xff
 8103ea0:	f7ff fcea 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103ea4:	2300      	movs	r3, #0
 8103ea6:	2200      	movs	r2, #0
 8103ea8:	218c      	movs	r1, #140	@ 0x8c
 8103eaa:	20ff      	movs	r0, #255	@ 0xff
 8103eac:	f7ff fce4 	bl	8103878 <writeLed>
	writeLed(255,140,0,false);
 8103eb0:	2300      	movs	r3, #0
 8103eb2:	2200      	movs	r2, #0
 8103eb4:	218c      	movs	r1, #140	@ 0x8c
 8103eb6:	20ff      	movs	r0, #255	@ 0xff
 8103eb8:	f7ff fcde 	bl	8103878 <writeLed>
	writeLed(255,140,0,true);
 8103ebc:	2301      	movs	r3, #1
 8103ebe:	2200      	movs	r2, #0
 8103ec0:	218c      	movs	r1, #140	@ 0x8c
 8103ec2:	20ff      	movs	r0, #255	@ 0xff
 8103ec4:	f7ff fcd8 	bl	8103878 <writeLed>
}
 8103ec8:	bf00      	nop
 8103eca:	bd80      	pop	{r7, pc}

08103ecc <writeRed>:

void writeRed()
{
 8103ecc:	b580      	push	{r7, lr}
 8103ece:	af00      	add	r7, sp, #0
	writeLed(100,0,0,false);
 8103ed0:	2300      	movs	r3, #0
 8103ed2:	2200      	movs	r2, #0
 8103ed4:	2100      	movs	r1, #0
 8103ed6:	2064      	movs	r0, #100	@ 0x64
 8103ed8:	f7ff fcce 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103edc:	2300      	movs	r3, #0
 8103ede:	2200      	movs	r2, #0
 8103ee0:	2100      	movs	r1, #0
 8103ee2:	2064      	movs	r0, #100	@ 0x64
 8103ee4:	f7ff fcc8 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103ee8:	2300      	movs	r3, #0
 8103eea:	2200      	movs	r2, #0
 8103eec:	2100      	movs	r1, #0
 8103eee:	2064      	movs	r0, #100	@ 0x64
 8103ef0:	f7ff fcc2 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103ef4:	2300      	movs	r3, #0
 8103ef6:	2200      	movs	r2, #0
 8103ef8:	2100      	movs	r1, #0
 8103efa:	2064      	movs	r0, #100	@ 0x64
 8103efc:	f7ff fcbc 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103f00:	2300      	movs	r3, #0
 8103f02:	2200      	movs	r2, #0
 8103f04:	2100      	movs	r1, #0
 8103f06:	2064      	movs	r0, #100	@ 0x64
 8103f08:	f7ff fcb6 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103f0c:	2300      	movs	r3, #0
 8103f0e:	2200      	movs	r2, #0
 8103f10:	2100      	movs	r1, #0
 8103f12:	2064      	movs	r0, #100	@ 0x64
 8103f14:	f7ff fcb0 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103f18:	2300      	movs	r3, #0
 8103f1a:	2200      	movs	r2, #0
 8103f1c:	2100      	movs	r1, #0
 8103f1e:	2064      	movs	r0, #100	@ 0x64
 8103f20:	f7ff fcaa 	bl	8103878 <writeLed>
	writeLed(100,0,0,false);
 8103f24:	2300      	movs	r3, #0
 8103f26:	2200      	movs	r2, #0
 8103f28:	2100      	movs	r1, #0
 8103f2a:	2064      	movs	r0, #100	@ 0x64
 8103f2c:	f7ff fca4 	bl	8103878 <writeLed>
	writeLed(100,0,0,true);
 8103f30:	2301      	movs	r3, #1
 8103f32:	2200      	movs	r2, #0
 8103f34:	2100      	movs	r1, #0
 8103f36:	2064      	movs	r0, #100	@ 0x64
 8103f38:	f7ff fc9e 	bl	8103878 <writeLed>
}
 8103f3c:	bf00      	nop
 8103f3e:	bd80      	pop	{r7, pc}

08103f40 <writeOff>:
	writeLed(0,0,100,false);
	writeLed(0,0,100,true);
}

void writeOff()
{
 8103f40:	b580      	push	{r7, lr}
 8103f42:	af00      	add	r7, sp, #0
	writeLed(0,0,0,false);
 8103f44:	2300      	movs	r3, #0
 8103f46:	2200      	movs	r2, #0
 8103f48:	2100      	movs	r1, #0
 8103f4a:	2000      	movs	r0, #0
 8103f4c:	f7ff fc94 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f50:	2300      	movs	r3, #0
 8103f52:	2200      	movs	r2, #0
 8103f54:	2100      	movs	r1, #0
 8103f56:	2000      	movs	r0, #0
 8103f58:	f7ff fc8e 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f5c:	2300      	movs	r3, #0
 8103f5e:	2200      	movs	r2, #0
 8103f60:	2100      	movs	r1, #0
 8103f62:	2000      	movs	r0, #0
 8103f64:	f7ff fc88 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f68:	2300      	movs	r3, #0
 8103f6a:	2200      	movs	r2, #0
 8103f6c:	2100      	movs	r1, #0
 8103f6e:	2000      	movs	r0, #0
 8103f70:	f7ff fc82 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f74:	2300      	movs	r3, #0
 8103f76:	2200      	movs	r2, #0
 8103f78:	2100      	movs	r1, #0
 8103f7a:	2000      	movs	r0, #0
 8103f7c:	f7ff fc7c 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f80:	2300      	movs	r3, #0
 8103f82:	2200      	movs	r2, #0
 8103f84:	2100      	movs	r1, #0
 8103f86:	2000      	movs	r0, #0
 8103f88:	f7ff fc76 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f8c:	2300      	movs	r3, #0
 8103f8e:	2200      	movs	r2, #0
 8103f90:	2100      	movs	r1, #0
 8103f92:	2000      	movs	r0, #0
 8103f94:	f7ff fc70 	bl	8103878 <writeLed>
	writeLed(0,0,0,false);
 8103f98:	2300      	movs	r3, #0
 8103f9a:	2200      	movs	r2, #0
 8103f9c:	2100      	movs	r1, #0
 8103f9e:	2000      	movs	r0, #0
 8103fa0:	f7ff fc6a 	bl	8103878 <writeLed>
	writeLed(0,0,0,true);
 8103fa4:	2301      	movs	r3, #1
 8103fa6:	2200      	movs	r2, #0
 8103fa8:	2100      	movs	r1, #0
 8103faa:	2000      	movs	r0, #0
 8103fac:	f7ff fc64 	bl	8103878 <writeLed>
}
 8103fb0:	bf00      	nop
 8103fb2:	bd80      	pop	{r7, pc}

08103fb4 <startupLED>:

void startupLED() {
 8103fb4:	b580      	push	{r7, lr}
 8103fb6:	af00      	add	r7, sp, #0
	rpm6000();
 8103fb8:	f7ff fd44 	bl	8103a44 <rpm6000>
	delayMilli(400);
 8103fbc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8103fc0:	f001 f860 	bl	8105084 <delayMilli>
	rpm6500();
 8103fc4:	f7ff fd78 	bl	8103ab8 <rpm6500>
	delayMilli(300);
 8103fc8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8103fcc:	f001 f85a 	bl	8105084 <delayMilli>
	rpm7000();
 8103fd0:	f7ff fdac 	bl	8103b2c <rpm7000>
	delayMilli(250);
 8103fd4:	20fa      	movs	r0, #250	@ 0xfa
 8103fd6:	f001 f855 	bl	8105084 <delayMilli>
	rpm7500();
 8103fda:	f7ff fde1 	bl	8103ba0 <rpm7500>
	delayMilli(200);
 8103fde:	20c8      	movs	r0, #200	@ 0xc8
 8103fe0:	f001 f850 	bl	8105084 <delayMilli>
	rpm8000();
 8103fe4:	f7ff fe16 	bl	8103c14 <rpm8000>
	delayMilli(150);
 8103fe8:	2096      	movs	r0, #150	@ 0x96
 8103fea:	f001 f84b 	bl	8105084 <delayMilli>
	rpm8500();
 8103fee:	f7ff fe4b 	bl	8103c88 <rpm8500>
	delayMilli(100);
 8103ff2:	2064      	movs	r0, #100	@ 0x64
 8103ff4:	f001 f846 	bl	8105084 <delayMilli>
	rpm9000();
 8103ff8:	f7ff fe80 	bl	8103cfc <rpm9000>
	delayMilli(50);
 8103ffc:	2032      	movs	r0, #50	@ 0x32
 8103ffe:	f001 f841 	bl	8105084 <delayMilli>
	rpm9500();
 8104002:	f7ff feb5 	bl	8103d70 <rpm9500>
	delayMilli(50);
 8104006:	2032      	movs	r0, #50	@ 0x32
 8104008:	f001 f83c 	bl	8105084 <delayMilli>
	rpm10000();
 810400c:	f7ff feea 	bl	8103de4 <rpm10000>
	delayMilli(1100);
 8104010:	f240 404c 	movw	r0, #1100	@ 0x44c
 8104014:	f001 f836 	bl	8105084 <delayMilli>
	writeOff();
 8104018:	f7ff ff92 	bl	8103f40 <writeOff>
}
 810401c:	bf00      	nop
 810401e:	bd80      	pop	{r7, pc}

08104020 <writeRpm>:

void writeRpm() {
 8104020:	b580      	push	{r7, lr}
 8104022:	af00      	add	r7, sp, #0
	if (shutdown == 1 && ((getTime() & 0b1000000000000) == 0b1000000000000)) {
 8104024:	4bde      	ldr	r3, [pc, #888]	@ (81043a0 <writeRpm+0x380>)
 8104026:	781b      	ldrb	r3, [r3, #0]
 8104028:	2b01      	cmp	r3, #1
 810402a:	d10a      	bne.n	8104042 <writeRpm+0x22>
 810402c:	f001 f836 	bl	810509c <getTime>
 8104030:	4603      	mov	r3, r0
 8104032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810403a:	d102      	bne.n	8104042 <writeRpm+0x22>
		writeRed();
 810403c:	f7ff ff46 	bl	8103ecc <writeRed>
		return;
 8104040:	e3d5      	b.n	81047ee <writeRpm+0x7ce>
	}

	if (curScreen == SKIDPAD) {
 8104042:	4bd8      	ldr	r3, [pc, #864]	@ (81043a4 <writeRpm+0x384>)
 8104044:	781b      	ldrb	r3, [r3, #0]
 8104046:	2b01      	cmp	r3, #1
 8104048:	f040 826a 	bne.w	8104520 <writeRpm+0x500>
		if (rpm >= 10500) {
 810404c:	4bd6      	ldr	r3, [pc, #856]	@ (81043a8 <writeRpm+0x388>)
 810404e:	881b      	ldrh	r3, [r3, #0]
 8104050:	f642 1203 	movw	r2, #10499	@ 0x2903
 8104054:	4293      	cmp	r3, r2
 8104056:	d936      	bls.n	81040c6 <writeRpm+0xa6>
			writeLed(0,0,255,false);
 8104058:	2300      	movs	r3, #0
 810405a:	22ff      	movs	r2, #255	@ 0xff
 810405c:	2100      	movs	r1, #0
 810405e:	2000      	movs	r0, #0
 8104060:	f7ff fc0a 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104064:	2300      	movs	r3, #0
 8104066:	2200      	movs	r2, #0
 8104068:	2100      	movs	r1, #0
 810406a:	2000      	movs	r0, #0
 810406c:	f7ff fc04 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104070:	2300      	movs	r3, #0
 8104072:	2200      	movs	r2, #0
 8104074:	2100      	movs	r1, #0
 8104076:	2000      	movs	r0, #0
 8104078:	f7ff fbfe 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810407c:	2300      	movs	r3, #0
 810407e:	2200      	movs	r2, #0
 8104080:	2100      	movs	r1, #0
 8104082:	2000      	movs	r0, #0
 8104084:	f7ff fbf8 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104088:	2300      	movs	r3, #0
 810408a:	2200      	movs	r2, #0
 810408c:	2100      	movs	r1, #0
 810408e:	2000      	movs	r0, #0
 8104090:	f7ff fbf2 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104094:	2300      	movs	r3, #0
 8104096:	2200      	movs	r2, #0
 8104098:	2100      	movs	r1, #0
 810409a:	2000      	movs	r0, #0
 810409c:	f7ff fbec 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81040a0:	2300      	movs	r3, #0
 81040a2:	2200      	movs	r2, #0
 81040a4:	2100      	movs	r1, #0
 81040a6:	2000      	movs	r0, #0
 81040a8:	f7ff fbe6 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81040ac:	2300      	movs	r3, #0
 81040ae:	2200      	movs	r2, #0
 81040b0:	2100      	movs	r1, #0
 81040b2:	2000      	movs	r0, #0
 81040b4:	f7ff fbe0 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 81040b8:	2301      	movs	r3, #1
 81040ba:	2200      	movs	r2, #0
 81040bc:	2100      	movs	r1, #0
 81040be:	2000      	movs	r0, #0
 81040c0:	f7ff fbda 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
			writeLed(0,0,0,true);
		} else {
			writeOff();
		}
		return;
 81040c4:	e393      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 10000) {
 81040c6:	4bb8      	ldr	r3, [pc, #736]	@ (81043a8 <writeRpm+0x388>)
 81040c8:	881b      	ldrh	r3, [r3, #0]
 81040ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 81040ce:	4293      	cmp	r3, r2
 81040d0:	d936      	bls.n	8104140 <writeRpm+0x120>
			writeLed(0,0,255,false);
 81040d2:	2300      	movs	r3, #0
 81040d4:	22ff      	movs	r2, #255	@ 0xff
 81040d6:	2100      	movs	r1, #0
 81040d8:	2000      	movs	r0, #0
 81040da:	f7ff fbcd 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81040de:	2300      	movs	r3, #0
 81040e0:	2200      	movs	r2, #0
 81040e2:	2100      	movs	r1, #0
 81040e4:	2000      	movs	r0, #0
 81040e6:	f7ff fbc7 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81040ea:	2300      	movs	r3, #0
 81040ec:	2200      	movs	r2, #0
 81040ee:	2100      	movs	r1, #0
 81040f0:	2000      	movs	r0, #0
 81040f2:	f7ff fbc1 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81040f6:	2300      	movs	r3, #0
 81040f8:	2200      	movs	r2, #0
 81040fa:	2100      	movs	r1, #0
 81040fc:	2000      	movs	r0, #0
 81040fe:	f7ff fbbb 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104102:	2300      	movs	r3, #0
 8104104:	2200      	movs	r2, #0
 8104106:	2100      	movs	r1, #0
 8104108:	2000      	movs	r0, #0
 810410a:	f7ff fbb5 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810410e:	2300      	movs	r3, #0
 8104110:	2200      	movs	r2, #0
 8104112:	2100      	movs	r1, #0
 8104114:	2000      	movs	r0, #0
 8104116:	f7ff fbaf 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810411a:	2300      	movs	r3, #0
 810411c:	2200      	movs	r2, #0
 810411e:	2100      	movs	r1, #0
 8104120:	2000      	movs	r0, #0
 8104122:	f7ff fba9 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104126:	2300      	movs	r3, #0
 8104128:	2200      	movs	r2, #0
 810412a:	2100      	movs	r1, #0
 810412c:	2000      	movs	r0, #0
 810412e:	f7ff fba3 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 8104132:	2301      	movs	r3, #1
 8104134:	2200      	movs	r2, #0
 8104136:	2100      	movs	r1, #0
 8104138:	2000      	movs	r0, #0
 810413a:	f7ff fb9d 	bl	8103878 <writeLed>
		return;
 810413e:	e356      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 9500) {
 8104140:	4b99      	ldr	r3, [pc, #612]	@ (81043a8 <writeRpm+0x388>)
 8104142:	881b      	ldrh	r3, [r3, #0]
 8104144:	f242 521b 	movw	r2, #9499	@ 0x251b
 8104148:	4293      	cmp	r3, r2
 810414a:	d936      	bls.n	81041ba <writeRpm+0x19a>
			writeLed(0,0,255,false);
 810414c:	2300      	movs	r3, #0
 810414e:	22ff      	movs	r2, #255	@ 0xff
 8104150:	2100      	movs	r1, #0
 8104152:	2000      	movs	r0, #0
 8104154:	f7ff fb90 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104158:	2300      	movs	r3, #0
 810415a:	2200      	movs	r2, #0
 810415c:	2100      	movs	r1, #0
 810415e:	2000      	movs	r0, #0
 8104160:	f7ff fb8a 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104164:	2300      	movs	r3, #0
 8104166:	2200      	movs	r2, #0
 8104168:	2100      	movs	r1, #0
 810416a:	2000      	movs	r0, #0
 810416c:	f7ff fb84 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104170:	2300      	movs	r3, #0
 8104172:	2200      	movs	r2, #0
 8104174:	2100      	movs	r1, #0
 8104176:	2000      	movs	r0, #0
 8104178:	f7ff fb7e 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810417c:	2300      	movs	r3, #0
 810417e:	2200      	movs	r2, #0
 8104180:	2100      	movs	r1, #0
 8104182:	2000      	movs	r0, #0
 8104184:	f7ff fb78 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104188:	2300      	movs	r3, #0
 810418a:	2200      	movs	r2, #0
 810418c:	2100      	movs	r1, #0
 810418e:	2000      	movs	r0, #0
 8104190:	f7ff fb72 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104194:	2300      	movs	r3, #0
 8104196:	2200      	movs	r2, #0
 8104198:	2100      	movs	r1, #0
 810419a:	2000      	movs	r0, #0
 810419c:	f7ff fb6c 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81041a0:	2300      	movs	r3, #0
 81041a2:	2200      	movs	r2, #0
 81041a4:	2100      	movs	r1, #0
 81041a6:	2000      	movs	r0, #0
 81041a8:	f7ff fb66 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 81041ac:	2301      	movs	r3, #1
 81041ae:	2200      	movs	r2, #0
 81041b0:	2100      	movs	r1, #0
 81041b2:	2000      	movs	r0, #0
 81041b4:	f7ff fb60 	bl	8103878 <writeLed>
		return;
 81041b8:	e319      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 9000) {
 81041ba:	4b7b      	ldr	r3, [pc, #492]	@ (81043a8 <writeRpm+0x388>)
 81041bc:	881b      	ldrh	r3, [r3, #0]
 81041be:	f242 3227 	movw	r2, #8999	@ 0x2327
 81041c2:	4293      	cmp	r3, r2
 81041c4:	d936      	bls.n	8104234 <writeRpm+0x214>
			writeLed(0,0,255,false);
 81041c6:	2300      	movs	r3, #0
 81041c8:	22ff      	movs	r2, #255	@ 0xff
 81041ca:	2100      	movs	r1, #0
 81041cc:	2000      	movs	r0, #0
 81041ce:	f7ff fb53 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81041d2:	2300      	movs	r3, #0
 81041d4:	2200      	movs	r2, #0
 81041d6:	2100      	movs	r1, #0
 81041d8:	2000      	movs	r0, #0
 81041da:	f7ff fb4d 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81041de:	2300      	movs	r3, #0
 81041e0:	2200      	movs	r2, #0
 81041e2:	2100      	movs	r1, #0
 81041e4:	2000      	movs	r0, #0
 81041e6:	f7ff fb47 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81041ea:	2300      	movs	r3, #0
 81041ec:	2200      	movs	r2, #0
 81041ee:	2100      	movs	r1, #0
 81041f0:	2000      	movs	r0, #0
 81041f2:	f7ff fb41 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81041f6:	2300      	movs	r3, #0
 81041f8:	2200      	movs	r2, #0
 81041fa:	2100      	movs	r1, #0
 81041fc:	2000      	movs	r0, #0
 81041fe:	f7ff fb3b 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104202:	2300      	movs	r3, #0
 8104204:	2200      	movs	r2, #0
 8104206:	2100      	movs	r1, #0
 8104208:	2000      	movs	r0, #0
 810420a:	f7ff fb35 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810420e:	2300      	movs	r3, #0
 8104210:	2200      	movs	r2, #0
 8104212:	2100      	movs	r1, #0
 8104214:	2000      	movs	r0, #0
 8104216:	f7ff fb2f 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810421a:	2300      	movs	r3, #0
 810421c:	2200      	movs	r2, #0
 810421e:	2100      	movs	r1, #0
 8104220:	2000      	movs	r0, #0
 8104222:	f7ff fb29 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 8104226:	2301      	movs	r3, #1
 8104228:	2200      	movs	r2, #0
 810422a:	2100      	movs	r1, #0
 810422c:	2000      	movs	r0, #0
 810422e:	f7ff fb23 	bl	8103878 <writeLed>
		return;
 8104232:	e2dc      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 8500) {
 8104234:	4b5c      	ldr	r3, [pc, #368]	@ (81043a8 <writeRpm+0x388>)
 8104236:	881b      	ldrh	r3, [r3, #0]
 8104238:	f242 1233 	movw	r2, #8499	@ 0x2133
 810423c:	4293      	cmp	r3, r2
 810423e:	d936      	bls.n	81042ae <writeRpm+0x28e>
			writeLed(0,0,255,false);
 8104240:	2300      	movs	r3, #0
 8104242:	22ff      	movs	r2, #255	@ 0xff
 8104244:	2100      	movs	r1, #0
 8104246:	2000      	movs	r0, #0
 8104248:	f7ff fb16 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810424c:	2300      	movs	r3, #0
 810424e:	2200      	movs	r2, #0
 8104250:	2100      	movs	r1, #0
 8104252:	2000      	movs	r0, #0
 8104254:	f7ff fb10 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104258:	2300      	movs	r3, #0
 810425a:	2200      	movs	r2, #0
 810425c:	2100      	movs	r1, #0
 810425e:	2000      	movs	r0, #0
 8104260:	f7ff fb0a 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104264:	2300      	movs	r3, #0
 8104266:	2200      	movs	r2, #0
 8104268:	2100      	movs	r1, #0
 810426a:	2000      	movs	r0, #0
 810426c:	f7ff fb04 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104270:	2300      	movs	r3, #0
 8104272:	2200      	movs	r2, #0
 8104274:	2100      	movs	r1, #0
 8104276:	2000      	movs	r0, #0
 8104278:	f7ff fafe 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810427c:	2300      	movs	r3, #0
 810427e:	2200      	movs	r2, #0
 8104280:	2100      	movs	r1, #0
 8104282:	2000      	movs	r0, #0
 8104284:	f7ff faf8 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104288:	2300      	movs	r3, #0
 810428a:	2200      	movs	r2, #0
 810428c:	2100      	movs	r1, #0
 810428e:	2000      	movs	r0, #0
 8104290:	f7ff faf2 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104294:	2300      	movs	r3, #0
 8104296:	2200      	movs	r2, #0
 8104298:	2100      	movs	r1, #0
 810429a:	2000      	movs	r0, #0
 810429c:	f7ff faec 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 81042a0:	2301      	movs	r3, #1
 81042a2:	2200      	movs	r2, #0
 81042a4:	2100      	movs	r1, #0
 81042a6:	2000      	movs	r0, #0
 81042a8:	f7ff fae6 	bl	8103878 <writeLed>
		return;
 81042ac:	e29f      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 8000) {
 81042ae:	4b3e      	ldr	r3, [pc, #248]	@ (81043a8 <writeRpm+0x388>)
 81042b0:	881b      	ldrh	r3, [r3, #0]
 81042b2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 81042b6:	d336      	bcc.n	8104326 <writeRpm+0x306>
			writeLed(0,0,255,false);
 81042b8:	2300      	movs	r3, #0
 81042ba:	22ff      	movs	r2, #255	@ 0xff
 81042bc:	2100      	movs	r1, #0
 81042be:	2000      	movs	r0, #0
 81042c0:	f7ff fada 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81042c4:	2300      	movs	r3, #0
 81042c6:	2200      	movs	r2, #0
 81042c8:	2100      	movs	r1, #0
 81042ca:	2000      	movs	r0, #0
 81042cc:	f7ff fad4 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81042d0:	2300      	movs	r3, #0
 81042d2:	2200      	movs	r2, #0
 81042d4:	2100      	movs	r1, #0
 81042d6:	2000      	movs	r0, #0
 81042d8:	f7ff face 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81042dc:	2300      	movs	r3, #0
 81042de:	2200      	movs	r2, #0
 81042e0:	2100      	movs	r1, #0
 81042e2:	2000      	movs	r0, #0
 81042e4:	f7ff fac8 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81042e8:	2300      	movs	r3, #0
 81042ea:	2200      	movs	r2, #0
 81042ec:	2100      	movs	r1, #0
 81042ee:	2000      	movs	r0, #0
 81042f0:	f7ff fac2 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81042f4:	2300      	movs	r3, #0
 81042f6:	2200      	movs	r2, #0
 81042f8:	2100      	movs	r1, #0
 81042fa:	2000      	movs	r0, #0
 81042fc:	f7ff fabc 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104300:	2300      	movs	r3, #0
 8104302:	2200      	movs	r2, #0
 8104304:	2100      	movs	r1, #0
 8104306:	2000      	movs	r0, #0
 8104308:	f7ff fab6 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810430c:	2300      	movs	r3, #0
 810430e:	2200      	movs	r2, #0
 8104310:	2100      	movs	r1, #0
 8104312:	2000      	movs	r0, #0
 8104314:	f7ff fab0 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 8104318:	2301      	movs	r3, #1
 810431a:	2200      	movs	r2, #0
 810431c:	2100      	movs	r1, #0
 810431e:	2000      	movs	r0, #0
 8104320:	f7ff faaa 	bl	8103878 <writeLed>
		return;
 8104324:	e263      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 7500) {
 8104326:	4b20      	ldr	r3, [pc, #128]	@ (81043a8 <writeRpm+0x388>)
 8104328:	881b      	ldrh	r3, [r3, #0]
 810432a:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 810432e:	4293      	cmp	r3, r2
 8104330:	d93c      	bls.n	81043ac <writeRpm+0x38c>
			writeLed(0,0,255,false);
 8104332:	2300      	movs	r3, #0
 8104334:	22ff      	movs	r2, #255	@ 0xff
 8104336:	2100      	movs	r1, #0
 8104338:	2000      	movs	r0, #0
 810433a:	f7ff fa9d 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810433e:	2300      	movs	r3, #0
 8104340:	2200      	movs	r2, #0
 8104342:	2100      	movs	r1, #0
 8104344:	2000      	movs	r0, #0
 8104346:	f7ff fa97 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810434a:	2300      	movs	r3, #0
 810434c:	2200      	movs	r2, #0
 810434e:	2100      	movs	r1, #0
 8104350:	2000      	movs	r0, #0
 8104352:	f7ff fa91 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104356:	2300      	movs	r3, #0
 8104358:	2200      	movs	r2, #0
 810435a:	2100      	movs	r1, #0
 810435c:	2000      	movs	r0, #0
 810435e:	f7ff fa8b 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104362:	2300      	movs	r3, #0
 8104364:	2200      	movs	r2, #0
 8104366:	2100      	movs	r1, #0
 8104368:	2000      	movs	r0, #0
 810436a:	f7ff fa85 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810436e:	2300      	movs	r3, #0
 8104370:	2200      	movs	r2, #0
 8104372:	2100      	movs	r1, #0
 8104374:	2000      	movs	r0, #0
 8104376:	f7ff fa7f 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810437a:	2300      	movs	r3, #0
 810437c:	2200      	movs	r2, #0
 810437e:	2100      	movs	r1, #0
 8104380:	2000      	movs	r0, #0
 8104382:	f7ff fa79 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104386:	2300      	movs	r3, #0
 8104388:	2200      	movs	r2, #0
 810438a:	2100      	movs	r1, #0
 810438c:	2000      	movs	r0, #0
 810438e:	f7ff fa73 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 8104392:	2301      	movs	r3, #1
 8104394:	2200      	movs	r2, #0
 8104396:	2100      	movs	r1, #0
 8104398:	2000      	movs	r0, #0
 810439a:	f7ff fa6d 	bl	8103878 <writeLed>
		return;
 810439e:	e226      	b.n	81047ee <writeRpm+0x7ce>
 81043a0:	100003f2 	.word	0x100003f2
 81043a4:	100003f5 	.word	0x100003f5
 81043a8:	100003ea 	.word	0x100003ea
		} else if (rpm >= 7000) {
 81043ac:	4be4      	ldr	r3, [pc, #912]	@ (8104740 <writeRpm+0x720>)
 81043ae:	881b      	ldrh	r3, [r3, #0]
 81043b0:	f641 3257 	movw	r2, #6999	@ 0x1b57
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d936      	bls.n	8104426 <writeRpm+0x406>
			writeLed(0,0,255,false);
 81043b8:	2300      	movs	r3, #0
 81043ba:	22ff      	movs	r2, #255	@ 0xff
 81043bc:	2100      	movs	r1, #0
 81043be:	2000      	movs	r0, #0
 81043c0:	f7ff fa5a 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81043c4:	2300      	movs	r3, #0
 81043c6:	2200      	movs	r2, #0
 81043c8:	2100      	movs	r1, #0
 81043ca:	2000      	movs	r0, #0
 81043cc:	f7ff fa54 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81043d0:	2300      	movs	r3, #0
 81043d2:	2200      	movs	r2, #0
 81043d4:	2100      	movs	r1, #0
 81043d6:	2000      	movs	r0, #0
 81043d8:	f7ff fa4e 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81043dc:	2300      	movs	r3, #0
 81043de:	2200      	movs	r2, #0
 81043e0:	2100      	movs	r1, #0
 81043e2:	2000      	movs	r0, #0
 81043e4:	f7ff fa48 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81043e8:	2300      	movs	r3, #0
 81043ea:	2200      	movs	r2, #0
 81043ec:	2100      	movs	r1, #0
 81043ee:	2000      	movs	r0, #0
 81043f0:	f7ff fa42 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81043f4:	2300      	movs	r3, #0
 81043f6:	2200      	movs	r2, #0
 81043f8:	2100      	movs	r1, #0
 81043fa:	2000      	movs	r0, #0
 81043fc:	f7ff fa3c 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104400:	2300      	movs	r3, #0
 8104402:	2200      	movs	r2, #0
 8104404:	2100      	movs	r1, #0
 8104406:	2000      	movs	r0, #0
 8104408:	f7ff fa36 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810440c:	2300      	movs	r3, #0
 810440e:	2200      	movs	r2, #0
 8104410:	2100      	movs	r1, #0
 8104412:	2000      	movs	r0, #0
 8104414:	f7ff fa30 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 8104418:	2301      	movs	r3, #1
 810441a:	2200      	movs	r2, #0
 810441c:	2100      	movs	r1, #0
 810441e:	2000      	movs	r0, #0
 8104420:	f7ff fa2a 	bl	8103878 <writeLed>
		return;
 8104424:	e1e3      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 6500) {
 8104426:	4bc6      	ldr	r3, [pc, #792]	@ (8104740 <writeRpm+0x720>)
 8104428:	881b      	ldrh	r3, [r3, #0]
 810442a:	f641 1263 	movw	r2, #6499	@ 0x1963
 810442e:	4293      	cmp	r3, r2
 8104430:	d936      	bls.n	81044a0 <writeRpm+0x480>
			writeLed(0,0,255,false);
 8104432:	2300      	movs	r3, #0
 8104434:	22ff      	movs	r2, #255	@ 0xff
 8104436:	2100      	movs	r1, #0
 8104438:	2000      	movs	r0, #0
 810443a:	f7ff fa1d 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810443e:	2300      	movs	r3, #0
 8104440:	2200      	movs	r2, #0
 8104442:	2100      	movs	r1, #0
 8104444:	2000      	movs	r0, #0
 8104446:	f7ff fa17 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810444a:	2300      	movs	r3, #0
 810444c:	2200      	movs	r2, #0
 810444e:	2100      	movs	r1, #0
 8104450:	2000      	movs	r0, #0
 8104452:	f7ff fa11 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104456:	2300      	movs	r3, #0
 8104458:	2200      	movs	r2, #0
 810445a:	2100      	movs	r1, #0
 810445c:	2000      	movs	r0, #0
 810445e:	f7ff fa0b 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104462:	2300      	movs	r3, #0
 8104464:	2200      	movs	r2, #0
 8104466:	2100      	movs	r1, #0
 8104468:	2000      	movs	r0, #0
 810446a:	f7ff fa05 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810446e:	2300      	movs	r3, #0
 8104470:	2200      	movs	r2, #0
 8104472:	2100      	movs	r1, #0
 8104474:	2000      	movs	r0, #0
 8104476:	f7ff f9ff 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810447a:	2300      	movs	r3, #0
 810447c:	2200      	movs	r2, #0
 810447e:	2100      	movs	r1, #0
 8104480:	2000      	movs	r0, #0
 8104482:	f7ff f9f9 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104486:	2300      	movs	r3, #0
 8104488:	2200      	movs	r2, #0
 810448a:	2100      	movs	r1, #0
 810448c:	2000      	movs	r0, #0
 810448e:	f7ff f9f3 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 8104492:	2301      	movs	r3, #1
 8104494:	2200      	movs	r2, #0
 8104496:	2100      	movs	r1, #0
 8104498:	2000      	movs	r0, #0
 810449a:	f7ff f9ed 	bl	8103878 <writeLed>
		return;
 810449e:	e1a6      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 6000) {
 81044a0:	4ba7      	ldr	r3, [pc, #668]	@ (8104740 <writeRpm+0x720>)
 81044a2:	881b      	ldrh	r3, [r3, #0]
 81044a4:	f241 726f 	movw	r2, #5999	@ 0x176f
 81044a8:	4293      	cmp	r3, r2
 81044aa:	d936      	bls.n	810451a <writeRpm+0x4fa>
			writeLed(0,0,255,false);
 81044ac:	2300      	movs	r3, #0
 81044ae:	22ff      	movs	r2, #255	@ 0xff
 81044b0:	2100      	movs	r1, #0
 81044b2:	2000      	movs	r0, #0
 81044b4:	f7ff f9e0 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81044b8:	2300      	movs	r3, #0
 81044ba:	2200      	movs	r2, #0
 81044bc:	2100      	movs	r1, #0
 81044be:	2000      	movs	r0, #0
 81044c0:	f7ff f9da 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81044c4:	2300      	movs	r3, #0
 81044c6:	2200      	movs	r2, #0
 81044c8:	2100      	movs	r1, #0
 81044ca:	2000      	movs	r0, #0
 81044cc:	f7ff f9d4 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81044d0:	2300      	movs	r3, #0
 81044d2:	2200      	movs	r2, #0
 81044d4:	2100      	movs	r1, #0
 81044d6:	2000      	movs	r0, #0
 81044d8:	f7ff f9ce 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81044dc:	2300      	movs	r3, #0
 81044de:	2200      	movs	r2, #0
 81044e0:	2100      	movs	r1, #0
 81044e2:	2000      	movs	r0, #0
 81044e4:	f7ff f9c8 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81044e8:	2300      	movs	r3, #0
 81044ea:	2200      	movs	r2, #0
 81044ec:	2100      	movs	r1, #0
 81044ee:	2000      	movs	r0, #0
 81044f0:	f7ff f9c2 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81044f4:	2300      	movs	r3, #0
 81044f6:	2200      	movs	r2, #0
 81044f8:	2100      	movs	r1, #0
 81044fa:	2000      	movs	r0, #0
 81044fc:	f7ff f9bc 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104500:	2300      	movs	r3, #0
 8104502:	2200      	movs	r2, #0
 8104504:	2100      	movs	r1, #0
 8104506:	2000      	movs	r0, #0
 8104508:	f7ff f9b6 	bl	8103878 <writeLed>
			writeLed(0,0,0,true);
 810450c:	2301      	movs	r3, #1
 810450e:	2200      	movs	r2, #0
 8104510:	2100      	movs	r1, #0
 8104512:	2000      	movs	r0, #0
 8104514:	f7ff f9b0 	bl	8103878 <writeLed>
		return;
 8104518:	e169      	b.n	81047ee <writeRpm+0x7ce>
			writeOff();
 810451a:	f7ff fd11 	bl	8103f40 <writeOff>
		return;
 810451e:	e166      	b.n	81047ee <writeRpm+0x7ce>
	} else if (curScreen == ACCEL) {
 8104520:	4b88      	ldr	r3, [pc, #544]	@ (8104744 <writeRpm+0x724>)
 8104522:	781b      	ldrb	r3, [r3, #0]
 8104524:	2b02      	cmp	r3, #2
 8104526:	f040 8101 	bne.w	810472c <writeRpm+0x70c>
		if (rpm >= 9500) {
 810452a:	4b85      	ldr	r3, [pc, #532]	@ (8104740 <writeRpm+0x720>)
 810452c:	881b      	ldrh	r3, [r3, #0]
 810452e:	f242 521b 	movw	r2, #9499	@ 0x251b
 8104532:	4293      	cmp	r3, r2
 8104534:	d941      	bls.n	81045ba <writeRpm+0x59a>
			if ((getTime() & 0b10000000000) == 0b10000000000) {
 8104536:	f000 fdb1 	bl	810509c <getTime>
 810453a:	4603      	mov	r3, r0
 810453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8104540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104544:	d136      	bne.n	81045b4 <writeRpm+0x594>
				writeLed(0,255,0,false);
 8104546:	2300      	movs	r3, #0
 8104548:	2200      	movs	r2, #0
 810454a:	21ff      	movs	r1, #255	@ 0xff
 810454c:	2000      	movs	r0, #0
 810454e:	f7ff f993 	bl	8103878 <writeLed>
				writeLed(255,255,0,false);
 8104552:	2300      	movs	r3, #0
 8104554:	2200      	movs	r2, #0
 8104556:	21ff      	movs	r1, #255	@ 0xff
 8104558:	20ff      	movs	r0, #255	@ 0xff
 810455a:	f7ff f98d 	bl	8103878 <writeLed>
				writeLed(255,0,0,false);
 810455e:	2300      	movs	r3, #0
 8104560:	2200      	movs	r2, #0
 8104562:	2100      	movs	r1, #0
 8104564:	20ff      	movs	r0, #255	@ 0xff
 8104566:	f7ff f987 	bl	8103878 <writeLed>
				writeLed(170,0,255,false);
 810456a:	2300      	movs	r3, #0
 810456c:	22ff      	movs	r2, #255	@ 0xff
 810456e:	2100      	movs	r1, #0
 8104570:	20aa      	movs	r0, #170	@ 0xaa
 8104572:	f7ff f981 	bl	8103878 <writeLed>
				writeLed(170,0,255,false);
 8104576:	2300      	movs	r3, #0
 8104578:	22ff      	movs	r2, #255	@ 0xff
 810457a:	2100      	movs	r1, #0
 810457c:	20aa      	movs	r0, #170	@ 0xaa
 810457e:	f7ff f97b 	bl	8103878 <writeLed>
				writeLed(170,0,255,false);
 8104582:	2300      	movs	r3, #0
 8104584:	22ff      	movs	r2, #255	@ 0xff
 8104586:	2100      	movs	r1, #0
 8104588:	20aa      	movs	r0, #170	@ 0xaa
 810458a:	f7ff f975 	bl	8103878 <writeLed>
				writeLed(255,0,0,false);
 810458e:	2300      	movs	r3, #0
 8104590:	2200      	movs	r2, #0
 8104592:	2100      	movs	r1, #0
 8104594:	20ff      	movs	r0, #255	@ 0xff
 8104596:	f7ff f96f 	bl	8103878 <writeLed>
				writeLed(255,255,0,false);
 810459a:	2300      	movs	r3, #0
 810459c:	2200      	movs	r2, #0
 810459e:	21ff      	movs	r1, #255	@ 0xff
 81045a0:	20ff      	movs	r0, #255	@ 0xff
 81045a2:	f7ff f969 	bl	8103878 <writeLed>
				writeLed(0,255,0,true);
 81045a6:	2301      	movs	r3, #1
 81045a8:	2200      	movs	r2, #0
 81045aa:	21ff      	movs	r1, #255	@ 0xff
 81045ac:	2000      	movs	r0, #0
 81045ae:	f7ff f963 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
			writeLed(0,255,0,true);
		} else {
			writeOff();
		}
		return;
 81045b2:	e11c      	b.n	81047ee <writeRpm+0x7ce>
				writeOff();
 81045b4:	f7ff fcc4 	bl	8103f40 <writeOff>
		return;
 81045b8:	e119      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 9000) {
 81045ba:	4b61      	ldr	r3, [pc, #388]	@ (8104740 <writeRpm+0x720>)
 81045bc:	881b      	ldrh	r3, [r3, #0]
 81045be:	f242 3227 	movw	r2, #8999	@ 0x2327
 81045c2:	4293      	cmp	r3, r2
 81045c4:	d936      	bls.n	8104634 <writeRpm+0x614>
			writeLed(0,255,0,false);
 81045c6:	2300      	movs	r3, #0
 81045c8:	2200      	movs	r2, #0
 81045ca:	21ff      	movs	r1, #255	@ 0xff
 81045cc:	2000      	movs	r0, #0
 81045ce:	f7ff f953 	bl	8103878 <writeLed>
			writeLed(255,255,0,false);
 81045d2:	2300      	movs	r3, #0
 81045d4:	2200      	movs	r2, #0
 81045d6:	21ff      	movs	r1, #255	@ 0xff
 81045d8:	20ff      	movs	r0, #255	@ 0xff
 81045da:	f7ff f94d 	bl	8103878 <writeLed>
			writeLed(255,0,0,false);
 81045de:	2300      	movs	r3, #0
 81045e0:	2200      	movs	r2, #0
 81045e2:	2100      	movs	r1, #0
 81045e4:	20ff      	movs	r0, #255	@ 0xff
 81045e6:	f7ff f947 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81045ea:	2300      	movs	r3, #0
 81045ec:	2200      	movs	r2, #0
 81045ee:	2100      	movs	r1, #0
 81045f0:	2000      	movs	r0, #0
 81045f2:	f7ff f941 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81045f6:	2300      	movs	r3, #0
 81045f8:	2200      	movs	r2, #0
 81045fa:	2100      	movs	r1, #0
 81045fc:	2000      	movs	r0, #0
 81045fe:	f7ff f93b 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104602:	2300      	movs	r3, #0
 8104604:	2200      	movs	r2, #0
 8104606:	2100      	movs	r1, #0
 8104608:	2000      	movs	r0, #0
 810460a:	f7ff f935 	bl	8103878 <writeLed>
			writeLed(255,0,0,false);
 810460e:	2300      	movs	r3, #0
 8104610:	2200      	movs	r2, #0
 8104612:	2100      	movs	r1, #0
 8104614:	20ff      	movs	r0, #255	@ 0xff
 8104616:	f7ff f92f 	bl	8103878 <writeLed>
			writeLed(255,255,0,false);
 810461a:	2300      	movs	r3, #0
 810461c:	2200      	movs	r2, #0
 810461e:	21ff      	movs	r1, #255	@ 0xff
 8104620:	20ff      	movs	r0, #255	@ 0xff
 8104622:	f7ff f929 	bl	8103878 <writeLed>
			writeLed(0,255,0,true);
 8104626:	2301      	movs	r3, #1
 8104628:	2200      	movs	r2, #0
 810462a:	21ff      	movs	r1, #255	@ 0xff
 810462c:	2000      	movs	r0, #0
 810462e:	f7ff f923 	bl	8103878 <writeLed>
		return;
 8104632:	e0dc      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 8000) {
 8104634:	4b42      	ldr	r3, [pc, #264]	@ (8104740 <writeRpm+0x720>)
 8104636:	881b      	ldrh	r3, [r3, #0]
 8104638:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 810463c:	d336      	bcc.n	81046ac <writeRpm+0x68c>
			writeLed(0,255,0,false);
 810463e:	2300      	movs	r3, #0
 8104640:	2200      	movs	r2, #0
 8104642:	21ff      	movs	r1, #255	@ 0xff
 8104644:	2000      	movs	r0, #0
 8104646:	f7ff f917 	bl	8103878 <writeLed>
			writeLed(255,255,0,false);
 810464a:	2300      	movs	r3, #0
 810464c:	2200      	movs	r2, #0
 810464e:	21ff      	movs	r1, #255	@ 0xff
 8104650:	20ff      	movs	r0, #255	@ 0xff
 8104652:	f7ff f911 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104656:	2300      	movs	r3, #0
 8104658:	2200      	movs	r2, #0
 810465a:	2100      	movs	r1, #0
 810465c:	2000      	movs	r0, #0
 810465e:	f7ff f90b 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104662:	2300      	movs	r3, #0
 8104664:	2200      	movs	r2, #0
 8104666:	2100      	movs	r1, #0
 8104668:	2000      	movs	r0, #0
 810466a:	f7ff f905 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810466e:	2300      	movs	r3, #0
 8104670:	2200      	movs	r2, #0
 8104672:	2100      	movs	r1, #0
 8104674:	2000      	movs	r0, #0
 8104676:	f7ff f8ff 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810467a:	2300      	movs	r3, #0
 810467c:	2200      	movs	r2, #0
 810467e:	2100      	movs	r1, #0
 8104680:	2000      	movs	r0, #0
 8104682:	f7ff f8f9 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104686:	2300      	movs	r3, #0
 8104688:	2200      	movs	r2, #0
 810468a:	2100      	movs	r1, #0
 810468c:	2000      	movs	r0, #0
 810468e:	f7ff f8f3 	bl	8103878 <writeLed>
			writeLed(255,255,0,false);
 8104692:	2300      	movs	r3, #0
 8104694:	2200      	movs	r2, #0
 8104696:	21ff      	movs	r1, #255	@ 0xff
 8104698:	20ff      	movs	r0, #255	@ 0xff
 810469a:	f7ff f8ed 	bl	8103878 <writeLed>
			writeLed(0,255,0,true);
 810469e:	2301      	movs	r3, #1
 81046a0:	2200      	movs	r2, #0
 81046a2:	21ff      	movs	r1, #255	@ 0xff
 81046a4:	2000      	movs	r0, #0
 81046a6:	f7ff f8e7 	bl	8103878 <writeLed>
		return;
 81046aa:	e0a0      	b.n	81047ee <writeRpm+0x7ce>
		} else if (rpm >= 7000) {
 81046ac:	4b24      	ldr	r3, [pc, #144]	@ (8104740 <writeRpm+0x720>)
 81046ae:	881b      	ldrh	r3, [r3, #0]
 81046b0:	f641 3257 	movw	r2, #6999	@ 0x1b57
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d936      	bls.n	8104726 <writeRpm+0x706>
			writeLed(0,255,0,false);
 81046b8:	2300      	movs	r3, #0
 81046ba:	2200      	movs	r2, #0
 81046bc:	21ff      	movs	r1, #255	@ 0xff
 81046be:	2000      	movs	r0, #0
 81046c0:	f7ff f8da 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81046c4:	2300      	movs	r3, #0
 81046c6:	2200      	movs	r2, #0
 81046c8:	2100      	movs	r1, #0
 81046ca:	2000      	movs	r0, #0
 81046cc:	f7ff f8d4 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81046d0:	2300      	movs	r3, #0
 81046d2:	2200      	movs	r2, #0
 81046d4:	2100      	movs	r1, #0
 81046d6:	2000      	movs	r0, #0
 81046d8:	f7ff f8ce 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81046dc:	2300      	movs	r3, #0
 81046de:	2200      	movs	r2, #0
 81046e0:	2100      	movs	r1, #0
 81046e2:	2000      	movs	r0, #0
 81046e4:	f7ff f8c8 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81046e8:	2300      	movs	r3, #0
 81046ea:	2200      	movs	r2, #0
 81046ec:	2100      	movs	r1, #0
 81046ee:	2000      	movs	r0, #0
 81046f0:	f7ff f8c2 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 81046f4:	2300      	movs	r3, #0
 81046f6:	2200      	movs	r2, #0
 81046f8:	2100      	movs	r1, #0
 81046fa:	2000      	movs	r0, #0
 81046fc:	f7ff f8bc 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 8104700:	2300      	movs	r3, #0
 8104702:	2200      	movs	r2, #0
 8104704:	2100      	movs	r1, #0
 8104706:	2000      	movs	r0, #0
 8104708:	f7ff f8b6 	bl	8103878 <writeLed>
			writeLed(0,0,0,false);
 810470c:	2300      	movs	r3, #0
 810470e:	2200      	movs	r2, #0
 8104710:	2100      	movs	r1, #0
 8104712:	2000      	movs	r0, #0
 8104714:	f7ff f8b0 	bl	8103878 <writeLed>
			writeLed(0,255,0,true);
 8104718:	2301      	movs	r3, #1
 810471a:	2200      	movs	r2, #0
 810471c:	21ff      	movs	r1, #255	@ 0xff
 810471e:	2000      	movs	r0, #0
 8104720:	f7ff f8aa 	bl	8103878 <writeLed>
		return;
 8104724:	e063      	b.n	81047ee <writeRpm+0x7ce>
			writeOff();
 8104726:	f7ff fc0b 	bl	8103f40 <writeOff>
		return;
 810472a:	e060      	b.n	81047ee <writeRpm+0x7ce>
	} else {
		if (rpm >= 10500) {
 810472c:	4b04      	ldr	r3, [pc, #16]	@ (8104740 <writeRpm+0x720>)
 810472e:	881b      	ldrh	r3, [r3, #0]
 8104730:	f642 1203 	movw	r2, #10499	@ 0x2903
 8104734:	4293      	cmp	r3, r2
 8104736:	d907      	bls.n	8104748 <writeRpm+0x728>
			rpm10500();
 8104738:	f7ff fb8e 	bl	8103e58 <rpm10500>
		} else if (rpm >= 6000) {
			rpm6000();
		} else {
			writeOff();
		}
		return;
 810473c:	e056      	b.n	81047ec <writeRpm+0x7cc>
 810473e:	bf00      	nop
 8104740:	100003ea 	.word	0x100003ea
 8104744:	100003f5 	.word	0x100003f5
		} else if (rpm >= 10000) {
 8104748:	4b29      	ldr	r3, [pc, #164]	@ (81047f0 <writeRpm+0x7d0>)
 810474a:	881b      	ldrh	r3, [r3, #0]
 810474c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8104750:	4293      	cmp	r3, r2
 8104752:	d902      	bls.n	810475a <writeRpm+0x73a>
			rpm10000();
 8104754:	f7ff fb46 	bl	8103de4 <rpm10000>
		return;
 8104758:	e048      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 9500) {
 810475a:	4b25      	ldr	r3, [pc, #148]	@ (81047f0 <writeRpm+0x7d0>)
 810475c:	881b      	ldrh	r3, [r3, #0]
 810475e:	f242 521b 	movw	r2, #9499	@ 0x251b
 8104762:	4293      	cmp	r3, r2
 8104764:	d902      	bls.n	810476c <writeRpm+0x74c>
			rpm9500();
 8104766:	f7ff fb03 	bl	8103d70 <rpm9500>
		return;
 810476a:	e03f      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 9000) {
 810476c:	4b20      	ldr	r3, [pc, #128]	@ (81047f0 <writeRpm+0x7d0>)
 810476e:	881b      	ldrh	r3, [r3, #0]
 8104770:	f242 3227 	movw	r2, #8999	@ 0x2327
 8104774:	4293      	cmp	r3, r2
 8104776:	d902      	bls.n	810477e <writeRpm+0x75e>
			rpm9000();
 8104778:	f7ff fac0 	bl	8103cfc <rpm9000>
		return;
 810477c:	e036      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 8500) {
 810477e:	4b1c      	ldr	r3, [pc, #112]	@ (81047f0 <writeRpm+0x7d0>)
 8104780:	881b      	ldrh	r3, [r3, #0]
 8104782:	f242 1233 	movw	r2, #8499	@ 0x2133
 8104786:	4293      	cmp	r3, r2
 8104788:	d902      	bls.n	8104790 <writeRpm+0x770>
			rpm8500();
 810478a:	f7ff fa7d 	bl	8103c88 <rpm8500>
		return;
 810478e:	e02d      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 8000) {
 8104790:	4b17      	ldr	r3, [pc, #92]	@ (81047f0 <writeRpm+0x7d0>)
 8104792:	881b      	ldrh	r3, [r3, #0]
 8104794:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8104798:	d302      	bcc.n	81047a0 <writeRpm+0x780>
			rpm8000();
 810479a:	f7ff fa3b 	bl	8103c14 <rpm8000>
		return;
 810479e:	e025      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 7500) {
 81047a0:	4b13      	ldr	r3, [pc, #76]	@ (81047f0 <writeRpm+0x7d0>)
 81047a2:	881b      	ldrh	r3, [r3, #0]
 81047a4:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 81047a8:	4293      	cmp	r3, r2
 81047aa:	d902      	bls.n	81047b2 <writeRpm+0x792>
			rpm7500();
 81047ac:	f7ff f9f8 	bl	8103ba0 <rpm7500>
		return;
 81047b0:	e01c      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 7000) {
 81047b2:	4b0f      	ldr	r3, [pc, #60]	@ (81047f0 <writeRpm+0x7d0>)
 81047b4:	881b      	ldrh	r3, [r3, #0]
 81047b6:	f641 3257 	movw	r2, #6999	@ 0x1b57
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d902      	bls.n	81047c4 <writeRpm+0x7a4>
			rpm7000();
 81047be:	f7ff f9b5 	bl	8103b2c <rpm7000>
		return;
 81047c2:	e013      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 6500) {
 81047c4:	4b0a      	ldr	r3, [pc, #40]	@ (81047f0 <writeRpm+0x7d0>)
 81047c6:	881b      	ldrh	r3, [r3, #0]
 81047c8:	f641 1263 	movw	r2, #6499	@ 0x1963
 81047cc:	4293      	cmp	r3, r2
 81047ce:	d902      	bls.n	81047d6 <writeRpm+0x7b6>
			rpm6500();
 81047d0:	f7ff f972 	bl	8103ab8 <rpm6500>
		return;
 81047d4:	e00a      	b.n	81047ec <writeRpm+0x7cc>
		} else if (rpm >= 6000) {
 81047d6:	4b06      	ldr	r3, [pc, #24]	@ (81047f0 <writeRpm+0x7d0>)
 81047d8:	881b      	ldrh	r3, [r3, #0]
 81047da:	f241 726f 	movw	r2, #5999	@ 0x176f
 81047de:	4293      	cmp	r3, r2
 81047e0:	d902      	bls.n	81047e8 <writeRpm+0x7c8>
			rpm6000();
 81047e2:	f7ff f92f 	bl	8103a44 <rpm6000>
		return;
 81047e6:	e001      	b.n	81047ec <writeRpm+0x7cc>
			writeOff();
 81047e8:	f7ff fbaa 	bl	8103f40 <writeOff>
		return;
 81047ec:	bf00      	nop
	}
}
 81047ee:	bd80      	pop	{r7, pc}
 81047f0:	100003ea 	.word	0x100003ea

081047f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81047f4:	b580      	push	{r7, lr}
 81047f6:	b082      	sub	sp, #8
 81047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wtemp = 0;
 81047fa:	4b6d      	ldr	r3, [pc, #436]	@ (81049b0 <main+0x1bc>)
 81047fc:	2200      	movs	r2, #0
 81047fe:	801a      	strh	r2, [r3, #0]
	mix = 0;
 8104800:	4b6c      	ldr	r3, [pc, #432]	@ (81049b4 <main+0x1c0>)
 8104802:	2200      	movs	r2, #0
 8104804:	801a      	strh	r2, [r3, #0]
	gear = 0;
 8104806:	4b6c      	ldr	r3, [pc, #432]	@ (81049b8 <main+0x1c4>)
 8104808:	2200      	movs	r2, #0
 810480a:	801a      	strh	r2, [r3, #0]
	voltage = 0;
 810480c:	4b6b      	ldr	r3, [pc, #428]	@ (81049bc <main+0x1c8>)
 810480e:	2200      	movs	r2, #0
 8104810:	801a      	strh	r2, [r3, #0]
	uptime = 0;
 8104812:	4b6b      	ldr	r3, [pc, #428]	@ (81049c0 <main+0x1cc>)
 8104814:	2200      	movs	r2, #0
 8104816:	801a      	strh	r2, [r3, #0]
	rpm = 0;
 8104818:	4b6a      	ldr	r3, [pc, #424]	@ (81049c4 <main+0x1d0>)
 810481a:	2200      	movs	r2, #0
 810481c:	801a      	strh	r2, [r3, #0]
	fuelUsed = 0;
 810481e:	4b6a      	ldr	r3, [pc, #424]	@ (81049c8 <main+0x1d4>)
 8104820:	2200      	movs	r2, #0
 8104822:	801a      	strh	r2, [r3, #0]
	fuelPressure = 0;
 8104824:	4b69      	ldr	r3, [pc, #420]	@ (81049cc <main+0x1d8>)
 8104826:	2200      	movs	r2, #0
 8104828:	801a      	strh	r2, [r3, #0]
	shiftingPressure = 0;
 810482a:	4b69      	ldr	r3, [pc, #420]	@ (81049d0 <main+0x1dc>)
 810482c:	2200      	movs	r2, #0
 810482e:	801a      	strh	r2, [r3, #0]
	shutdown = 0;
 8104830:	4b68      	ldr	r3, [pc, #416]	@ (81049d4 <main+0x1e0>)
 8104832:	2200      	movs	r2, #0
 8104834:	701a      	strb	r2, [r3, #0]
	sdInitialized = 0;
 8104836:	4b68      	ldr	r3, [pc, #416]	@ (81049d8 <main+0x1e4>)
 8104838:	2200      	movs	r2, #0
 810483a:	701a      	strb	r2, [r3, #0]
	sdPresent = 0;
 810483c:	4b67      	ldr	r3, [pc, #412]	@ (81049dc <main+0x1e8>)
 810483e:	2200      	movs	r2, #0
 8104840:	701a      	strb	r2, [r3, #0]
	curScreen = 99;
 8104842:	4b67      	ldr	r3, [pc, #412]	@ (81049e0 <main+0x1ec>)
 8104844:	2263      	movs	r2, #99	@ 0x63
 8104846:	701a      	strb	r2, [r3, #0]
	debounce = 0;
 8104848:	4b66      	ldr	r3, [pc, #408]	@ (81049e4 <main+0x1f0>)
 810484a:	2200      	movs	r2, #0
 810484c:	701a      	strb	r2, [r3, #0]
	loggingStatus = 0;
 810484e:	4b66      	ldr	r3, [pc, #408]	@ (81049e8 <main+0x1f4>)
 8104850:	2200      	movs	r2, #0
 8104852:	701a      	strb	r2, [r3, #0]
	logNumber = 0;
 8104854:	4b65      	ldr	r3, [pc, #404]	@ (81049ec <main+0x1f8>)
 8104856:	2200      	movs	r2, #0
 8104858:	701a      	strb	r2, [r3, #0]
	ECUMapState = 0;
 810485a:	4b65      	ldr	r3, [pc, #404]	@ (81049f0 <main+0x1fc>)
 810485c:	2200      	movs	r2, #0
 810485e:	701a      	strb	r2, [r3, #0]
	btnCheckNum = 0;
 8104860:	4b64      	ldr	r3, [pc, #400]	@ (81049f4 <main+0x200>)
 8104862:	2200      	movs	r2, #0
 8104864:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8104866:	4b64      	ldr	r3, [pc, #400]	@ (81049f8 <main+0x204>)
 8104868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810486c:	4a62      	ldr	r2, [pc, #392]	@ (81049f8 <main+0x204>)
 810486e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8104872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104876:	4b60      	ldr	r3, [pc, #384]	@ (81049f8 <main+0x204>)
 8104878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810487c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104880:	607b      	str	r3, [r7, #4]
 8104882:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104884:	2001      	movs	r0, #1
 8104886:	f001 fa95 	bl	8105db4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810488a:	f001 fb1f 	bl	8105ecc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810488e:	2201      	movs	r2, #1
 8104890:	2102      	movs	r1, #2
 8104892:	2000      	movs	r0, #0
 8104894:	f001 faa0 	bl	8105dd8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104898:	4b58      	ldr	r3, [pc, #352]	@ (81049fc <main+0x208>)
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	091b      	lsrs	r3, r3, #4
 810489e:	f003 030f 	and.w	r3, r3, #15
 81048a2:	2b07      	cmp	r3, #7
 81048a4:	d108      	bne.n	81048b8 <main+0xc4>
 81048a6:	4b56      	ldr	r3, [pc, #344]	@ (8104a00 <main+0x20c>)
 81048a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81048ac:	4a54      	ldr	r2, [pc, #336]	@ (8104a00 <main+0x20c>)
 81048ae:	f043 0301 	orr.w	r3, r3, #1
 81048b2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81048b6:	e007      	b.n	81048c8 <main+0xd4>
 81048b8:	4b51      	ldr	r3, [pc, #324]	@ (8104a00 <main+0x20c>)
 81048ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81048be:	4a50      	ldr	r2, [pc, #320]	@ (8104a00 <main+0x20c>)
 81048c0:	f043 0301 	orr.w	r3, r3, #1
 81048c4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81048c8:	f000 fe7c 	bl	81055c4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81048cc:	f000 f9ca 	bl	8104c64 <MX_GPIO_Init>
  MX_TIM7_Init();
 81048d0:	f000 f946 	bl	8104b60 <MX_TIM7_Init>
  MX_SPI5_Init();
 81048d4:	f000 f89e 	bl	8104a14 <MX_SPI5_Init>
  MX_TIM17_Init();
 81048d8:	f000 f99c 	bl	8104c14 <MX_TIM17_Init>
  MX_TIM5_Init();
 81048dc:	f000 f8f0 	bl	8104ac0 <MX_TIM5_Init>
  MX_TIM13_Init();
 81048e0:	f000 f974 	bl	8104bcc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // SPI CS for display
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 81048e4:	2201      	movs	r2, #1
 81048e6:	2108      	movs	r1, #8
 81048e8:	4846      	ldr	r0, [pc, #280]	@ (8104a04 <main+0x210>)
 81048ea:	f001 fa2f 	bl	8105d4c <HAL_GPIO_WritePin>

  // Timer for microsecond delay
  HAL_TIM_Base_Start(&htim7);
 81048ee:	4846      	ldr	r0, [pc, #280]	@ (8104a08 <main+0x214>)
 81048f0:	f003 fe98 	bl	8108624 <HAL_TIM_Base_Start>

  // Counts in Milliseconds
  HAL_TIM_Base_Start(&htim17);
 81048f4:	4845      	ldr	r0, [pc, #276]	@ (8104a0c <main+0x218>)
 81048f6:	f003 fe95 	bl	8108624 <HAL_TIM_Base_Start>

  // Initialize the display
  initFT81x();
 81048fa:	f7fc fa45 	bl	8100d88 <initFT81x>

  // Display the welcome screen
  displayScreen();
 81048fe:	f7fe ff85 	bl	810380c <displayScreen>

  // Display cool LEDs
  startupLED();
 8104902:	f7ff fb57 	bl	8103fb4 <startupLED>

  // Sets screen to AutoX
  curScreen = 0;
 8104906:	4b36      	ldr	r3, [pc, #216]	@ (81049e0 <main+0x1ec>)
 8104908:	2200      	movs	r2, #0
 810490a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Grab the current information and save it so other files can use
	wtemp = xfr_ptr->wtemp;
 810490c:	4b40      	ldr	r3, [pc, #256]	@ (8104a10 <main+0x21c>)
 810490e:	881b      	ldrh	r3, [r3, #0]
 8104910:	b29a      	uxth	r2, r3
 8104912:	4b27      	ldr	r3, [pc, #156]	@ (81049b0 <main+0x1bc>)
 8104914:	801a      	strh	r2, [r3, #0]
	mix = xfr_ptr->mix;
 8104916:	4b3e      	ldr	r3, [pc, #248]	@ (8104a10 <main+0x21c>)
 8104918:	885b      	ldrh	r3, [r3, #2]
 810491a:	b29a      	uxth	r2, r3
 810491c:	4b25      	ldr	r3, [pc, #148]	@ (81049b4 <main+0x1c0>)
 810491e:	801a      	strh	r2, [r3, #0]
	gear = xfr_ptr->gear;
 8104920:	4b3b      	ldr	r3, [pc, #236]	@ (8104a10 <main+0x21c>)
 8104922:	889b      	ldrh	r3, [r3, #4]
 8104924:	b29a      	uxth	r2, r3
 8104926:	4b24      	ldr	r3, [pc, #144]	@ (81049b8 <main+0x1c4>)
 8104928:	801a      	strh	r2, [r3, #0]
	voltage = xfr_ptr->voltage;
 810492a:	4b39      	ldr	r3, [pc, #228]	@ (8104a10 <main+0x21c>)
 810492c:	88db      	ldrh	r3, [r3, #6]
 810492e:	b29a      	uxth	r2, r3
 8104930:	4b22      	ldr	r3, [pc, #136]	@ (81049bc <main+0x1c8>)
 8104932:	801a      	strh	r2, [r3, #0]
	uptime = xfr_ptr->uptime;
 8104934:	4b36      	ldr	r3, [pc, #216]	@ (8104a10 <main+0x21c>)
 8104936:	891b      	ldrh	r3, [r3, #8]
 8104938:	b29a      	uxth	r2, r3
 810493a:	4b21      	ldr	r3, [pc, #132]	@ (81049c0 <main+0x1cc>)
 810493c:	801a      	strh	r2, [r3, #0]
	rpm = xfr_ptr->rpm;
 810493e:	4b34      	ldr	r3, [pc, #208]	@ (8104a10 <main+0x21c>)
 8104940:	895b      	ldrh	r3, [r3, #10]
 8104942:	b29a      	uxth	r2, r3
 8104944:	4b1f      	ldr	r3, [pc, #124]	@ (81049c4 <main+0x1d0>)
 8104946:	801a      	strh	r2, [r3, #0]
	fuelUsed = xfr_ptr->fuelUsed;
 8104948:	4b31      	ldr	r3, [pc, #196]	@ (8104a10 <main+0x21c>)
 810494a:	899b      	ldrh	r3, [r3, #12]
 810494c:	b29a      	uxth	r2, r3
 810494e:	4b1e      	ldr	r3, [pc, #120]	@ (81049c8 <main+0x1d4>)
 8104950:	801a      	strh	r2, [r3, #0]
	fuelPressure = xfr_ptr->fuelPressure;
 8104952:	4b2f      	ldr	r3, [pc, #188]	@ (8104a10 <main+0x21c>)
 8104954:	89db      	ldrh	r3, [r3, #14]
 8104956:	b29a      	uxth	r2, r3
 8104958:	4b1c      	ldr	r3, [pc, #112]	@ (81049cc <main+0x1d8>)
 810495a:	801a      	strh	r2, [r3, #0]
	shiftingPressure = xfr_ptr->shiftingPressure;
 810495c:	4b2c      	ldr	r3, [pc, #176]	@ (8104a10 <main+0x21c>)
 810495e:	8a1b      	ldrh	r3, [r3, #16]
 8104960:	b29a      	uxth	r2, r3
 8104962:	4b1b      	ldr	r3, [pc, #108]	@ (81049d0 <main+0x1dc>)
 8104964:	801a      	strh	r2, [r3, #0]
	shutdown = xfr_ptr->shutdown;
 8104966:	4b2a      	ldr	r3, [pc, #168]	@ (8104a10 <main+0x21c>)
 8104968:	7c9b      	ldrb	r3, [r3, #18]
 810496a:	b2da      	uxtb	r2, r3
 810496c:	4b19      	ldr	r3, [pc, #100]	@ (81049d4 <main+0x1e0>)
 810496e:	701a      	strb	r2, [r3, #0]
	sdInitialized = xfr_ptr->sdInitialized;
 8104970:	4b27      	ldr	r3, [pc, #156]	@ (8104a10 <main+0x21c>)
 8104972:	7cdb      	ldrb	r3, [r3, #19]
 8104974:	b2da      	uxtb	r2, r3
 8104976:	4b18      	ldr	r3, [pc, #96]	@ (81049d8 <main+0x1e4>)
 8104978:	701a      	strb	r2, [r3, #0]
	sdPresent = xfr_ptr->sdPresent;
 810497a:	4b25      	ldr	r3, [pc, #148]	@ (8104a10 <main+0x21c>)
 810497c:	7d1b      	ldrb	r3, [r3, #20]
 810497e:	b2da      	uxtb	r2, r3
 8104980:	4b16      	ldr	r3, [pc, #88]	@ (81049dc <main+0x1e8>)
 8104982:	701a      	strb	r2, [r3, #0]
	loggingStatus = xfr_ptr->loggingStatus;
 8104984:	4b22      	ldr	r3, [pc, #136]	@ (8104a10 <main+0x21c>)
 8104986:	7d5b      	ldrb	r3, [r3, #21]
 8104988:	b2da      	uxtb	r2, r3
 810498a:	4b17      	ldr	r3, [pc, #92]	@ (81049e8 <main+0x1f4>)
 810498c:	701a      	strb	r2, [r3, #0]
	logNumber = xfr_ptr->logNumber;
 810498e:	4b20      	ldr	r3, [pc, #128]	@ (8104a10 <main+0x21c>)
 8104990:	7d9b      	ldrb	r3, [r3, #22]
 8104992:	b2da      	uxtb	r2, r3
 8104994:	4b15      	ldr	r3, [pc, #84]	@ (81049ec <main+0x1f8>)
 8104996:	701a      	strb	r2, [r3, #0]
	ECUMapState = xfr_ptr->ECUMapState;
 8104998:	4b1d      	ldr	r3, [pc, #116]	@ (8104a10 <main+0x21c>)
 810499a:	7e1b      	ldrb	r3, [r3, #24]
 810499c:	b2da      	uxtb	r2, r3
 810499e:	4b14      	ldr	r3, [pc, #80]	@ (81049f0 <main+0x1fc>)
 81049a0:	701a      	strb	r2, [r3, #0]

	// Refresh the screen with current info
	displayScreen();
 81049a2:	f7fe ff33 	bl	810380c <displayScreen>

	// Refresh LEDs wih current info
	writeRpm();
 81049a6:	f7ff fb3b 	bl	8104020 <writeRpm>
	wtemp = xfr_ptr->wtemp;
 81049aa:	bf00      	nop
 81049ac:	e7ae      	b.n	810490c <main+0x118>
 81049ae:	bf00      	nop
 81049b0:	100003e0 	.word	0x100003e0
 81049b4:	100003e2 	.word	0x100003e2
 81049b8:	100003e4 	.word	0x100003e4
 81049bc:	100003e6 	.word	0x100003e6
 81049c0:	100003e8 	.word	0x100003e8
 81049c4:	100003ea 	.word	0x100003ea
 81049c8:	100003ec 	.word	0x100003ec
 81049cc:	100003ee 	.word	0x100003ee
 81049d0:	100003f0 	.word	0x100003f0
 81049d4:	100003f2 	.word	0x100003f2
 81049d8:	100003f3 	.word	0x100003f3
 81049dc:	100003f4 	.word	0x100003f4
 81049e0:	100003f5 	.word	0x100003f5
 81049e4:	100003f6 	.word	0x100003f6
 81049e8:	100003f7 	.word	0x100003f7
 81049ec:	100003f8 	.word	0x100003f8
 81049f0:	100003f9 	.word	0x100003f9
 81049f4:	100003fa 	.word	0x100003fa
 81049f8:	58024400 	.word	0x58024400
 81049fc:	e000ed00 	.word	0xe000ed00
 8104a00:	58026400 	.word	0x58026400
 8104a04:	58021400 	.word	0x58021400
 8104a08:	100002fc 	.word	0x100002fc
 8104a0c:	10000394 	.word	0x10000394
 8104a10:	38001000 	.word	0x38001000

08104a14 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8104a14:	b580      	push	{r7, lr}
 8104a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8104a18:	4b27      	ldr	r3, [pc, #156]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a1a:	4a28      	ldr	r2, [pc, #160]	@ (8104abc <MX_SPI5_Init+0xa8>)
 8104a1c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8104a1e:	4b26      	ldr	r3, [pc, #152]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8104a24:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8104a26:	4b24      	ldr	r3, [pc, #144]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a28:	2200      	movs	r2, #0
 8104a2a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8104a2c:	4b22      	ldr	r3, [pc, #136]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a2e:	2207      	movs	r2, #7
 8104a30:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8104a32:	4b21      	ldr	r3, [pc, #132]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a34:	2200      	movs	r2, #0
 8104a36:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8104a38:	4b1f      	ldr	r3, [pc, #124]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a3a:	2200      	movs	r2, #0
 8104a3c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8104a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8104a44:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8104a46:	4b1c      	ldr	r3, [pc, #112]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8104a4c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8104a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a50:	2200      	movs	r2, #0
 8104a52:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8104a54:	4b18      	ldr	r3, [pc, #96]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a56:	2200      	movs	r2, #0
 8104a58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104a5a:	4b17      	ldr	r3, [pc, #92]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a5c:	2200      	movs	r2, #0
 8104a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8104a60:	4b15      	ldr	r3, [pc, #84]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a62:	2200      	movs	r2, #0
 8104a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8104a66:	4b14      	ldr	r3, [pc, #80]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8104a6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8104a6e:	4b12      	ldr	r3, [pc, #72]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a70:	2200      	movs	r2, #0
 8104a72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8104a74:	4b10      	ldr	r3, [pc, #64]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a76:	2200      	movs	r2, #0
 8104a78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8104a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a7c:	2200      	movs	r2, #0
 8104a7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8104a80:	4b0d      	ldr	r3, [pc, #52]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a82:	2200      	movs	r2, #0
 8104a84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8104a86:	4b0c      	ldr	r3, [pc, #48]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a88:	2200      	movs	r2, #0
 8104a8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8104a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a8e:	2200      	movs	r2, #0
 8104a90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8104a92:	4b09      	ldr	r3, [pc, #36]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a94:	2200      	movs	r2, #0
 8104a96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8104a98:	4b07      	ldr	r3, [pc, #28]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104a9a:	2200      	movs	r2, #0
 8104a9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8104a9e:	4b06      	ldr	r3, [pc, #24]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104aa0:	2200      	movs	r2, #0
 8104aa2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8104aa4:	4804      	ldr	r0, [pc, #16]	@ (8104ab8 <MX_SPI5_Init+0xa4>)
 8104aa6:	f002 ff47 	bl	8107938 <HAL_SPI_Init>
 8104aaa:	4603      	mov	r3, r0
 8104aac:	2b00      	cmp	r3, #0
 8104aae:	d001      	beq.n	8104ab4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8104ab0:	f000 fb42 	bl	8105138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8104ab4:	bf00      	nop
 8104ab6:	bd80      	pop	{r7, pc}
 8104ab8:	10000228 	.word	0x10000228
 8104abc:	40015000 	.word	0x40015000

08104ac0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8104ac0:	b580      	push	{r7, lr}
 8104ac2:	b088      	sub	sp, #32
 8104ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8104ac6:	f107 0310 	add.w	r3, r7, #16
 8104aca:	2200      	movs	r2, #0
 8104acc:	601a      	str	r2, [r3, #0]
 8104ace:	605a      	str	r2, [r3, #4]
 8104ad0:	609a      	str	r2, [r3, #8]
 8104ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8104ad4:	1d3b      	adds	r3, r7, #4
 8104ad6:	2200      	movs	r2, #0
 8104ad8:	601a      	str	r2, [r3, #0]
 8104ada:	605a      	str	r2, [r3, #4]
 8104adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8104ade:	4b1e      	ldr	r3, [pc, #120]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8104b5c <MX_TIM5_Init+0x9c>)
 8104ae2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24000-1;
 8104ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104ae6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8104aea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8104aec:	4b1a      	ldr	r3, [pc, #104]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104aee:	2200      	movs	r2, #0
 8104af0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2500-1;
 8104af2:	4b19      	ldr	r3, [pc, #100]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104af4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8104af8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8104afa:	4b17      	ldr	r3, [pc, #92]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104afc:	2200      	movs	r2, #0
 8104afe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8104b00:	4b15      	ldr	r3, [pc, #84]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104b02:	2200      	movs	r2, #0
 8104b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8104b06:	4814      	ldr	r0, [pc, #80]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104b08:	f003 fd34 	bl	8108574 <HAL_TIM_Base_Init>
 8104b0c:	4603      	mov	r3, r0
 8104b0e:	2b00      	cmp	r3, #0
 8104b10:	d001      	beq.n	8104b16 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8104b12:	f000 fb11 	bl	8105138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8104b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8104b1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8104b1c:	f107 0310 	add.w	r3, r7, #16
 8104b20:	4619      	mov	r1, r3
 8104b22:	480d      	ldr	r0, [pc, #52]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104b24:	f003 ffb4 	bl	8108a90 <HAL_TIM_ConfigClockSource>
 8104b28:	4603      	mov	r3, r0
 8104b2a:	2b00      	cmp	r3, #0
 8104b2c:	d001      	beq.n	8104b32 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8104b2e:	f000 fb03 	bl	8105138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8104b32:	2300      	movs	r3, #0
 8104b34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8104b36:	2300      	movs	r3, #0
 8104b38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8104b3a:	1d3b      	adds	r3, r7, #4
 8104b3c:	4619      	mov	r1, r3
 8104b3e:	4806      	ldr	r0, [pc, #24]	@ (8104b58 <MX_TIM5_Init+0x98>)
 8104b40:	f004 f9fc 	bl	8108f3c <HAL_TIMEx_MasterConfigSynchronization>
 8104b44:	4603      	mov	r3, r0
 8104b46:	2b00      	cmp	r3, #0
 8104b48:	d001      	beq.n	8104b4e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8104b4a:	f000 faf5 	bl	8105138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8104b4e:	bf00      	nop
 8104b50:	3720      	adds	r7, #32
 8104b52:	46bd      	mov	sp, r7
 8104b54:	bd80      	pop	{r7, pc}
 8104b56:	bf00      	nop
 8104b58:	100002b0 	.word	0x100002b0
 8104b5c:	40000c00 	.word	0x40000c00

08104b60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8104b60:	b580      	push	{r7, lr}
 8104b62:	b084      	sub	sp, #16
 8104b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8104b66:	1d3b      	adds	r3, r7, #4
 8104b68:	2200      	movs	r2, #0
 8104b6a:	601a      	str	r2, [r3, #0]
 8104b6c:	605a      	str	r2, [r3, #4]
 8104b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8104b70:	4b14      	ldr	r3, [pc, #80]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104b72:	4a15      	ldr	r2, [pc, #84]	@ (8104bc8 <MX_TIM7_Init+0x68>)
 8104b74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240-1;
 8104b76:	4b13      	ldr	r3, [pc, #76]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104b78:	22ef      	movs	r2, #239	@ 0xef
 8104b7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8104b7c:	4b11      	ldr	r3, [pc, #68]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104b7e:	2200      	movs	r2, #0
 8104b80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8104b82:	4b10      	ldr	r3, [pc, #64]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104b84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8104b88:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8104b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104b8c:	2200      	movs	r2, #0
 8104b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8104b90:	480c      	ldr	r0, [pc, #48]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104b92:	f003 fcef 	bl	8108574 <HAL_TIM_Base_Init>
 8104b96:	4603      	mov	r3, r0
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d001      	beq.n	8104ba0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8104b9c:	f000 facc 	bl	8105138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8104ba0:	2300      	movs	r3, #0
 8104ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8104ba4:	2300      	movs	r3, #0
 8104ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8104ba8:	1d3b      	adds	r3, r7, #4
 8104baa:	4619      	mov	r1, r3
 8104bac:	4805      	ldr	r0, [pc, #20]	@ (8104bc4 <MX_TIM7_Init+0x64>)
 8104bae:	f004 f9c5 	bl	8108f3c <HAL_TIMEx_MasterConfigSynchronization>
 8104bb2:	4603      	mov	r3, r0
 8104bb4:	2b00      	cmp	r3, #0
 8104bb6:	d001      	beq.n	8104bbc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8104bb8:	f000 fabe 	bl	8105138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8104bbc:	bf00      	nop
 8104bbe:	3710      	adds	r7, #16
 8104bc0:	46bd      	mov	sp, r7
 8104bc2:	bd80      	pop	{r7, pc}
 8104bc4:	100002fc 	.word	0x100002fc
 8104bc8:	40001400 	.word	0x40001400

08104bcc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8104bcc:	b580      	push	{r7, lr}
 8104bce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8104bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8104c10 <MX_TIM13_Init+0x44>)
 8104bd4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 24000-1;
 8104bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104bd8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8104bdc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8104bde:	4b0b      	ldr	r3, [pc, #44]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104be0:	2200      	movs	r2, #0
 8104be2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50-1;
 8104be4:	4b09      	ldr	r3, [pc, #36]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104be6:	2231      	movs	r2, #49	@ 0x31
 8104be8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8104bea:	4b08      	ldr	r3, [pc, #32]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104bec:	2200      	movs	r2, #0
 8104bee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8104bf0:	4b06      	ldr	r3, [pc, #24]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104bf2:	2200      	movs	r2, #0
 8104bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8104bf6:	4805      	ldr	r0, [pc, #20]	@ (8104c0c <MX_TIM13_Init+0x40>)
 8104bf8:	f003 fcbc 	bl	8108574 <HAL_TIM_Base_Init>
 8104bfc:	4603      	mov	r3, r0
 8104bfe:	2b00      	cmp	r3, #0
 8104c00:	d001      	beq.n	8104c06 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8104c02:	f000 fa99 	bl	8105138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8104c06:	bf00      	nop
 8104c08:	bd80      	pop	{r7, pc}
 8104c0a:	bf00      	nop
 8104c0c:	10000348 	.word	0x10000348
 8104c10:	40001c00 	.word	0x40001c00

08104c14 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8104c14:	b580      	push	{r7, lr}
 8104c16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8104c18:	4b10      	ldr	r3, [pc, #64]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c1a:	4a11      	ldr	r2, [pc, #68]	@ (8104c60 <MX_TIM17_Init+0x4c>)
 8104c1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 24000-1;
 8104c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c20:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8104c24:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8104c26:	4b0d      	ldr	r3, [pc, #52]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c28:	2200      	movs	r2, #0
 8104c2a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8104c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8104c32:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8104c34:	4b09      	ldr	r3, [pc, #36]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c36:	2200      	movs	r2, #0
 8104c38:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8104c3a:	4b08      	ldr	r3, [pc, #32]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c3c:	2200      	movs	r2, #0
 8104c3e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8104c40:	4b06      	ldr	r3, [pc, #24]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c42:	2200      	movs	r2, #0
 8104c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8104c46:	4805      	ldr	r0, [pc, #20]	@ (8104c5c <MX_TIM17_Init+0x48>)
 8104c48:	f003 fc94 	bl	8108574 <HAL_TIM_Base_Init>
 8104c4c:	4603      	mov	r3, r0
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d001      	beq.n	8104c56 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8104c52:	f000 fa71 	bl	8105138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8104c56:	bf00      	nop
 8104c58:	bd80      	pop	{r7, pc}
 8104c5a:	bf00      	nop
 8104c5c:	10000394 	.word	0x10000394
 8104c60:	40014800 	.word	0x40014800

08104c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8104c64:	b580      	push	{r7, lr}
 8104c66:	b08a      	sub	sp, #40	@ 0x28
 8104c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104c6a:	f107 0314 	add.w	r3, r7, #20
 8104c6e:	2200      	movs	r2, #0
 8104c70:	601a      	str	r2, [r3, #0]
 8104c72:	605a      	str	r2, [r3, #4]
 8104c74:	609a      	str	r2, [r3, #8]
 8104c76:	60da      	str	r2, [r3, #12]
 8104c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8104c7a:	4b49      	ldr	r3, [pc, #292]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104c80:	4a47      	ldr	r2, [pc, #284]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104c82:	f043 0320 	orr.w	r3, r3, #32
 8104c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104c8a:	4b45      	ldr	r3, [pc, #276]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104c90:	f003 0320 	and.w	r3, r3, #32
 8104c94:	613b      	str	r3, [r7, #16]
 8104c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8104c98:	4b41      	ldr	r3, [pc, #260]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104c9e:	4a40      	ldr	r2, [pc, #256]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104ca0:	f043 0310 	orr.w	r3, r3, #16
 8104ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104cae:	f003 0310 	and.w	r3, r3, #16
 8104cb2:	60fb      	str	r3, [r7, #12]
 8104cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8104cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104cbc:	4a38      	ldr	r2, [pc, #224]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104cbe:	f043 0308 	orr.w	r3, r3, #8
 8104cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104cc6:	4b36      	ldr	r3, [pc, #216]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104ccc:	f003 0308 	and.w	r3, r3, #8
 8104cd0:	60bb      	str	r3, [r7, #8]
 8104cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8104cd4:	4b32      	ldr	r3, [pc, #200]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104cda:	4a31      	ldr	r2, [pc, #196]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8104da0 <MX_GPIO_Init+0x13c>)
 8104ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104cee:	607b      	str	r3, [r7, #4]
 8104cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8104cf2:	2200      	movs	r2, #0
 8104cf4:	2108      	movs	r1, #8
 8104cf6:	482b      	ldr	r0, [pc, #172]	@ (8104da4 <MX_GPIO_Init+0x140>)
 8104cf8:	f001 f828 	bl	8105d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8104cfc:	2200      	movs	r2, #0
 8104cfe:	2180      	movs	r1, #128	@ 0x80
 8104d00:	4829      	ldr	r0, [pc, #164]	@ (8104da8 <MX_GPIO_Init+0x144>)
 8104d02:	f001 f823 	bl	8105d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8104d06:	2308      	movs	r3, #8
 8104d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8104d0a:	2301      	movs	r3, #1
 8104d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104d0e:	2300      	movs	r3, #0
 8104d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104d12:	2300      	movs	r3, #0
 8104d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8104d16:	f107 0314 	add.w	r3, r7, #20
 8104d1a:	4619      	mov	r1, r3
 8104d1c:	4821      	ldr	r0, [pc, #132]	@ (8104da4 <MX_GPIO_Init+0x140>)
 8104d1e:	f000 fe4d 	bl	81059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8104d22:	2380      	movs	r3, #128	@ 0x80
 8104d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8104d26:	2301      	movs	r3, #1
 8104d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104d2a:	2300      	movs	r3, #0
 8104d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8104d2e:	2303      	movs	r3, #3
 8104d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8104d32:	f107 0314 	add.w	r3, r7, #20
 8104d36:	4619      	mov	r1, r3
 8104d38:	481b      	ldr	r0, [pc, #108]	@ (8104da8 <MX_GPIO_Init+0x144>)
 8104d3a:	f000 fe3f 	bl	81059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8104d3e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8104d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8104d44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8104d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104d4a:	2300      	movs	r3, #0
 8104d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104d4e:	f107 0314 	add.w	r3, r7, #20
 8104d52:	4619      	mov	r1, r3
 8104d54:	4815      	ldr	r0, [pc, #84]	@ (8104dac <MX_GPIO_Init+0x148>)
 8104d56:	f000 fe31 	bl	81059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
 8104d5a:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8104d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8104d60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8104d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104d66:	2300      	movs	r3, #0
 8104d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8104d6a:	f107 0314 	add.w	r3, r7, #20
 8104d6e:	4619      	mov	r1, r3
 8104d70:	480f      	ldr	r0, [pc, #60]	@ (8104db0 <MX_GPIO_Init+0x14c>)
 8104d72:	f000 fe23 	bl	81059bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8104d76:	2200      	movs	r2, #0
 8104d78:	2100      	movs	r1, #0
 8104d7a:	200a      	movs	r0, #10
 8104d7c:	f000 fdd5 	bl	810592a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8104d80:	200a      	movs	r0, #10
 8104d82:	f000 fdec 	bl	810595e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8104d86:	2200      	movs	r2, #0
 8104d88:	2100      	movs	r1, #0
 8104d8a:	2017      	movs	r0, #23
 8104d8c:	f000 fdcd 	bl	810592a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8104d90:	2017      	movs	r0, #23
 8104d92:	f000 fde4 	bl	810595e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8104d96:	bf00      	nop
 8104d98:	3728      	adds	r7, #40	@ 0x28
 8104d9a:	46bd      	mov	sp, r7
 8104d9c:	bd80      	pop	{r7, pc}
 8104d9e:	bf00      	nop
 8104da0:	58024400 	.word	0x58024400
 8104da4:	58021400 	.word	0x58021400
 8104da8:	58021000 	.word	0x58021000
 8104dac:	58020c00 	.word	0x58020c00
 8104db0:	58021800 	.word	0x58021800

08104db4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8104db4:	b580      	push	{r7, lr}
 8104db6:	b082      	sub	sp, #8
 8104db8:	af00      	add	r7, sp, #0
 8104dba:	4603      	mov	r3, r0
 8104dbc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4 && debounce == 0) {
 8104dbe:	88fb      	ldrh	r3, [r7, #6]
 8104dc0:	2b10      	cmp	r3, #16
 8104dc2:	d116      	bne.n	8104df2 <HAL_GPIO_EXTI_Callback+0x3e>
 8104dc4:	4b36      	ldr	r3, [pc, #216]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104dc6:	781b      	ldrb	r3, [r3, #0]
 8104dc8:	2b00      	cmp	r3, #0
 8104dca:	d112      	bne.n	8104df2 <HAL_GPIO_EXTI_Callback+0x3e>
    	debounce = 4;
 8104dcc:	4b34      	ldr	r3, [pc, #208]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104dce:	2204      	movs	r2, #4
 8104dd0:	701a      	strb	r2, [r3, #0]
    	btnCheckNum = 0;
 8104dd2:	4b34      	ldr	r3, [pc, #208]	@ (8104ea4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8104dd4:	2200      	movs	r2, #0
 8104dd6:	701a      	strb	r2, [r3, #0]
    	__HAL_TIM_SET_COUNTER(&htim13, 0);
 8104dd8:	4b33      	ldr	r3, [pc, #204]	@ (8104ea8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	2200      	movs	r2, #0
 8104dde:	625a      	str	r2, [r3, #36]	@ 0x24
    	__HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_UPDATE);
 8104de0:	4b31      	ldr	r3, [pc, #196]	@ (8104ea8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	f06f 0201 	mvn.w	r2, #1
 8104de8:	611a      	str	r2, [r3, #16]
    	HAL_TIM_Base_Start_IT(&htim13);
 8104dea:	482f      	ldr	r0, [pc, #188]	@ (8104ea8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8104dec:	f003 fc8a 	bl	8108704 <HAL_TIM_Base_Start_IT>
 8104df0:	e051      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
    } else if (GPIO_Pin == GPIO_PIN_5 && debounce == 0) {
 8104df2:	88fb      	ldrh	r3, [r7, #6]
 8104df4:	2b20      	cmp	r3, #32
 8104df6:	d116      	bne.n	8104e26 <HAL_GPIO_EXTI_Callback+0x72>
 8104df8:	4b29      	ldr	r3, [pc, #164]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104dfa:	781b      	ldrb	r3, [r3, #0]
 8104dfc:	2b00      	cmp	r3, #0
 8104dfe:	d112      	bne.n	8104e26 <HAL_GPIO_EXTI_Callback+0x72>
    	debounce = 5;
 8104e00:	4b27      	ldr	r3, [pc, #156]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e02:	2205      	movs	r2, #5
 8104e04:	701a      	strb	r2, [r3, #0]
    	btnCheckNum = 0;
 8104e06:	4b27      	ldr	r3, [pc, #156]	@ (8104ea4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8104e08:	2200      	movs	r2, #0
 8104e0a:	701a      	strb	r2, [r3, #0]
    	__HAL_TIM_SET_COUNTER(&htim13, 0);
 8104e0c:	4b26      	ldr	r3, [pc, #152]	@ (8104ea8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	2200      	movs	r2, #0
 8104e12:	625a      	str	r2, [r3, #36]	@ 0x24
    	__HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_UPDATE);
 8104e14:	4b24      	ldr	r3, [pc, #144]	@ (8104ea8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	f06f 0201 	mvn.w	r2, #1
 8104e1c:	611a      	str	r2, [r3, #16]
    	HAL_TIM_Base_Start_IT(&htim13);
 8104e1e:	4822      	ldr	r0, [pc, #136]	@ (8104ea8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8104e20:	f003 fc70 	bl	8108704 <HAL_TIM_Base_Start_IT>
 8104e24:	e037      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
    } else if (GPIO_Pin == GPIO_PIN_7 && debounce == 0) {
 8104e26:	88fb      	ldrh	r3, [r7, #6]
 8104e28:	2b80      	cmp	r3, #128	@ 0x80
 8104e2a:	d10a      	bne.n	8104e42 <HAL_GPIO_EXTI_Callback+0x8e>
 8104e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e2e:	781b      	ldrb	r3, [r3, #0]
 8104e30:	2b00      	cmp	r3, #0
 8104e32:	d106      	bne.n	8104e42 <HAL_GPIO_EXTI_Callback+0x8e>
    	debounce = debounce;
 8104e34:	4b1a      	ldr	r3, [pc, #104]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e36:	781a      	ldrb	r2, [r3, #0]
 8104e38:	4b19      	ldr	r3, [pc, #100]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e3a:	701a      	strb	r2, [r3, #0]
      cycleBrightness();
 8104e3c:	f7fe fdec 	bl	8103a18 <cycleBrightness>
 8104e40:	e029      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
    } else if (GPIO_Pin == GPIO_PIN_8 && debounce == 0) {
 8104e42:	88fb      	ldrh	r3, [r7, #6]
 8104e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e48:	d108      	bne.n	8104e5c <HAL_GPIO_EXTI_Callback+0xa8>
 8104e4a:	4b15      	ldr	r3, [pc, #84]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e4c:	781b      	ldrb	r3, [r3, #0]
 8104e4e:	2b00      	cmp	r3, #0
 8104e50:	d104      	bne.n	8104e5c <HAL_GPIO_EXTI_Callback+0xa8>

    	debounce = debounce;
 8104e52:	4b13      	ldr	r3, [pc, #76]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e54:	781a      	ldrb	r2, [r3, #0]
 8104e56:	4b12      	ldr	r3, [pc, #72]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e58:	701a      	strb	r2, [r3, #0]
 8104e5a:	e01c      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
//    	debounce = 8;
//		btnCheckNum = 0;
//		__HAL_TIM_SET_COUNTER(&htim13, 0);
//		__HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_UPDATE);
//		HAL_TIM_Base_Start_IT(&htim13);
    } else if (GPIO_Pin == GPIO_PIN_12) {
 8104e5c:	88fb      	ldrh	r3, [r7, #6]
 8104e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104e62:	d104      	bne.n	8104e6e <HAL_GPIO_EXTI_Callback+0xba>
    	debounce = debounce;
 8104e64:	4b0e      	ldr	r3, [pc, #56]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e66:	781a      	ldrb	r2, [r3, #0]
 8104e68:	4b0d      	ldr	r3, [pc, #52]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e6a:	701a      	strb	r2, [r3, #0]
    	cycleBrightness();
    	debounce = debounce;
    } else if (GPIO_Pin == GPIO_PIN_14) {
    	debounce = debounce;
    }
}
 8104e6c:	e013      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
    } else if (GPIO_Pin == GPIO_PIN_13) {
 8104e6e:	88fb      	ldrh	r3, [r7, #6]
 8104e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104e74:	d106      	bne.n	8104e84 <HAL_GPIO_EXTI_Callback+0xd0>
    	cycleBrightness();
 8104e76:	f7fe fdcf 	bl	8103a18 <cycleBrightness>
    	debounce = debounce;
 8104e7a:	4b09      	ldr	r3, [pc, #36]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e7c:	781a      	ldrb	r2, [r3, #0]
 8104e7e:	4b08      	ldr	r3, [pc, #32]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e80:	701a      	strb	r2, [r3, #0]
}
 8104e82:	e008      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
    } else if (GPIO_Pin == GPIO_PIN_14) {
 8104e84:	88fb      	ldrh	r3, [r7, #6]
 8104e86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104e8a:	d104      	bne.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
    	debounce = debounce;
 8104e8c:	4b04      	ldr	r3, [pc, #16]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e8e:	781a      	ldrb	r2, [r3, #0]
 8104e90:	4b03      	ldr	r3, [pc, #12]	@ (8104ea0 <HAL_GPIO_EXTI_Callback+0xec>)
 8104e92:	701a      	strb	r2, [r3, #0]
}
 8104e94:	e7ff      	b.n	8104e96 <HAL_GPIO_EXTI_Callback+0xe2>
 8104e96:	bf00      	nop
 8104e98:	3708      	adds	r7, #8
 8104e9a:	46bd      	mov	sp, r7
 8104e9c:	bd80      	pop	{r7, pc}
 8104e9e:	bf00      	nop
 8104ea0:	100003f6 	.word	0x100003f6
 8104ea4:	100003fa 	.word	0x100003fa
 8104ea8:	10000348 	.word	0x10000348

08104eac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104eac:	b580      	push	{r7, lr}
 8104eae:	b082      	sub	sp, #8
 8104eb0:	af00      	add	r7, sp, #0
 8104eb2:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	4a60      	ldr	r2, [pc, #384]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8104eb8:	4293      	cmp	r3, r2
 8104eba:	d136      	bne.n	8104f2a <HAL_TIM_PeriodElapsedCallback+0x7e>
		if (debounce == 4 && HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_4) == GPIO_PIN_SET) {
 8104ebc:	4b5f      	ldr	r3, [pc, #380]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104ebe:	781b      	ldrb	r3, [r3, #0]
 8104ec0:	2b04      	cmp	r3, #4
 8104ec2:	d10d      	bne.n	8104ee0 <HAL_TIM_PeriodElapsedCallback+0x34>
 8104ec4:	2110      	movs	r1, #16
 8104ec6:	485e      	ldr	r0, [pc, #376]	@ (8105040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8104ec8:	f000 ff28 	bl	8105d1c <HAL_GPIO_ReadPin>
 8104ecc:	4603      	mov	r3, r0
 8104ece:	2b01      	cmp	r3, #1
 8104ed0:	d106      	bne.n	8104ee0 <HAL_TIM_PeriodElapsedCallback+0x34>
			debounce = 0;
 8104ed2:	4b5a      	ldr	r3, [pc, #360]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104ed4:	2200      	movs	r2, #0
 8104ed6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8104ed8:	4857      	ldr	r0, [pc, #348]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8104eda:	f003 fc8b 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
			return;
 8104ede:	e0a8      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
		}
		if (debounce == 5 && HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) == GPIO_PIN_SET) {
 8104ee0:	4b56      	ldr	r3, [pc, #344]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104ee2:	781b      	ldrb	r3, [r3, #0]
 8104ee4:	2b05      	cmp	r3, #5
 8104ee6:	d10d      	bne.n	8104f04 <HAL_TIM_PeriodElapsedCallback+0x58>
 8104ee8:	2120      	movs	r1, #32
 8104eea:	4855      	ldr	r0, [pc, #340]	@ (8105040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8104eec:	f000 ff16 	bl	8105d1c <HAL_GPIO_ReadPin>
 8104ef0:	4603      	mov	r3, r0
 8104ef2:	2b01      	cmp	r3, #1
 8104ef4:	d106      	bne.n	8104f04 <HAL_TIM_PeriodElapsedCallback+0x58>
			debounce = 0;
 8104ef6:	4b51      	ldr	r3, [pc, #324]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104ef8:	2200      	movs	r2, #0
 8104efa:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8104efc:	484e      	ldr	r0, [pc, #312]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8104efe:	f003 fc79 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
			return;
 8104f02:	e096      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
		}
		if (debounce == 8 && HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_8) == GPIO_PIN_SET) {
 8104f04:	4b4d      	ldr	r3, [pc, #308]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104f06:	781b      	ldrb	r3, [r3, #0]
 8104f08:	2b08      	cmp	r3, #8
 8104f0a:	d10e      	bne.n	8104f2a <HAL_TIM_PeriodElapsedCallback+0x7e>
 8104f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8104f10:	484b      	ldr	r0, [pc, #300]	@ (8105040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8104f12:	f000 ff03 	bl	8105d1c <HAL_GPIO_ReadPin>
 8104f16:	4603      	mov	r3, r0
 8104f18:	2b01      	cmp	r3, #1
 8104f1a:	d106      	bne.n	8104f2a <HAL_TIM_PeriodElapsedCallback+0x7e>
			debounce = 0;
 8104f1c:	4b47      	ldr	r3, [pc, #284]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104f1e:	2200      	movs	r2, #0
 8104f20:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8104f22:	4845      	ldr	r0, [pc, #276]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8104f24:	f003 fc66 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
			return;
 8104f28:	e083      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
		}
	}
	if (htim == &htim13) {
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	4a45      	ldr	r2, [pc, #276]	@ (8105044 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8104f2e:	4293      	cmp	r3, r2
 8104f30:	d17f      	bne.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
		if (btnCheckNum < 20) {
 8104f32:	4b45      	ldr	r3, [pc, #276]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104f34:	781b      	ldrb	r3, [r3, #0]
 8104f36:	2b13      	cmp	r3, #19
 8104f38:	d84b      	bhi.n	8104fd2 <HAL_TIM_PeriodElapsedCallback+0x126>
			if (debounce == 4) {
 8104f3a:	4b40      	ldr	r3, [pc, #256]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104f3c:	781b      	ldrb	r3, [r3, #0]
 8104f3e:	2b04      	cmp	r3, #4
 8104f40:	d114      	bne.n	8104f6c <HAL_TIM_PeriodElapsedCallback+0xc0>
				if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_4) == GPIO_PIN_SET) {
 8104f42:	2110      	movs	r1, #16
 8104f44:	483e      	ldr	r0, [pc, #248]	@ (8105040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8104f46:	f000 fee9 	bl	8105d1c <HAL_GPIO_ReadPin>
 8104f4a:	4603      	mov	r3, r0
 8104f4c:	2b01      	cmp	r3, #1
 8104f4e:	d106      	bne.n	8104f5e <HAL_TIM_PeriodElapsedCallback+0xb2>
					HAL_TIM_Base_Stop_IT(&htim13);
 8104f50:	483c      	ldr	r0, [pc, #240]	@ (8105044 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8104f52:	f003 fc4f 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
					debounce = 0;
 8104f56:	4b39      	ldr	r3, [pc, #228]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104f58:	2200      	movs	r2, #0
 8104f5a:	701a      	strb	r2, [r3, #0]
 8104f5c:	e069      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				} else {
					btnCheckNum += 1;
 8104f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104f60:	781b      	ldrb	r3, [r3, #0]
 8104f62:	3301      	adds	r3, #1
 8104f64:	b2da      	uxtb	r2, r3
 8104f66:	4b38      	ldr	r3, [pc, #224]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104f68:	701a      	strb	r2, [r3, #0]
 8104f6a:	e062      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				}
			} else if (debounce == 5) {
 8104f6c:	4b33      	ldr	r3, [pc, #204]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104f6e:	781b      	ldrb	r3, [r3, #0]
 8104f70:	2b05      	cmp	r3, #5
 8104f72:	d114      	bne.n	8104f9e <HAL_TIM_PeriodElapsedCallback+0xf2>
				if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) == GPIO_PIN_SET) {
 8104f74:	2120      	movs	r1, #32
 8104f76:	4832      	ldr	r0, [pc, #200]	@ (8105040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8104f78:	f000 fed0 	bl	8105d1c <HAL_GPIO_ReadPin>
 8104f7c:	4603      	mov	r3, r0
 8104f7e:	2b01      	cmp	r3, #1
 8104f80:	d106      	bne.n	8104f90 <HAL_TIM_PeriodElapsedCallback+0xe4>
					HAL_TIM_Base_Stop_IT(&htim13);
 8104f82:	4830      	ldr	r0, [pc, #192]	@ (8105044 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8104f84:	f003 fc36 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
					debounce = 0;
 8104f88:	4b2c      	ldr	r3, [pc, #176]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104f8a:	2200      	movs	r2, #0
 8104f8c:	701a      	strb	r2, [r3, #0]
 8104f8e:	e050      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				} else {
					btnCheckNum += 1;
 8104f90:	4b2d      	ldr	r3, [pc, #180]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104f92:	781b      	ldrb	r3, [r3, #0]
 8104f94:	3301      	adds	r3, #1
 8104f96:	b2da      	uxtb	r2, r3
 8104f98:	4b2b      	ldr	r3, [pc, #172]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104f9a:	701a      	strb	r2, [r3, #0]
 8104f9c:	e049      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				}
			} else if (debounce == 8) {
 8104f9e:	4b27      	ldr	r3, [pc, #156]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104fa0:	781b      	ldrb	r3, [r3, #0]
 8104fa2:	2b08      	cmp	r3, #8
 8104fa4:	d145      	bne.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_8) == GPIO_PIN_SET) {
 8104fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8104faa:	4825      	ldr	r0, [pc, #148]	@ (8105040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8104fac:	f000 feb6 	bl	8105d1c <HAL_GPIO_ReadPin>
 8104fb0:	4603      	mov	r3, r0
 8104fb2:	2b01      	cmp	r3, #1
 8104fb4:	d106      	bne.n	8104fc4 <HAL_TIM_PeriodElapsedCallback+0x118>
					HAL_TIM_Base_Stop_IT(&htim13);
 8104fb6:	4823      	ldr	r0, [pc, #140]	@ (8105044 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8104fb8:	f003 fc1c 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
					debounce = 0;
 8104fbc:	4b1f      	ldr	r3, [pc, #124]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104fbe:	2200      	movs	r2, #0
 8104fc0:	701a      	strb	r2, [r3, #0]
 8104fc2:	e036      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				} else {
					btnCheckNum += 1;
 8104fc4:	4b20      	ldr	r3, [pc, #128]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104fc6:	781b      	ldrb	r3, [r3, #0]
 8104fc8:	3301      	adds	r3, #1
 8104fca:	b2da      	uxtb	r2, r3
 8104fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8105048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8104fce:	701a      	strb	r2, [r3, #0]
 8104fd0:	e02f      	b.n	8105032 <HAL_TIM_PeriodElapsedCallback+0x186>
				}
			}
		} else {
			HAL_TIM_Base_Stop_IT(&htim13);
 8104fd2:	481c      	ldr	r0, [pc, #112]	@ (8105044 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8104fd4:	f003 fc0e 	bl	81087f4 <HAL_TIM_Base_Stop_IT>
			if (debounce == 4) {
 8104fd8:	4b18      	ldr	r3, [pc, #96]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104fda:	781b      	ldrb	r3, [r3, #0]
 8104fdc:	2b04      	cmp	r3, #4
 8104fde:	d103      	bne.n	8104fe8 <HAL_TIM_PeriodElapsedCallback+0x13c>
				xfr_ptr->flag = 1;
 8104fe0:	4b1a      	ldr	r3, [pc, #104]	@ (810504c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8104fe2:	2201      	movs	r2, #1
 8104fe4:	75da      	strb	r2, [r3, #23]
 8104fe6:	e018      	b.n	810501a <HAL_TIM_PeriodElapsedCallback+0x16e>
			} else if (debounce == 5) {
 8104fe8:	4b14      	ldr	r3, [pc, #80]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8104fea:	781b      	ldrb	r3, [r3, #0]
 8104fec:	2b05      	cmp	r3, #5
 8104fee:	d10d      	bne.n	810500c <HAL_TIM_PeriodElapsedCallback+0x160>
				curScreen = (curScreen + 1) % 4;
 8104ff0:	4b17      	ldr	r3, [pc, #92]	@ (8105050 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8104ff2:	781b      	ldrb	r3, [r3, #0]
 8104ff4:	3301      	adds	r3, #1
 8104ff6:	425a      	negs	r2, r3
 8104ff8:	f003 0303 	and.w	r3, r3, #3
 8104ffc:	f002 0203 	and.w	r2, r2, #3
 8105000:	bf58      	it	pl
 8105002:	4253      	negpl	r3, r2
 8105004:	b2da      	uxtb	r2, r3
 8105006:	4b12      	ldr	r3, [pc, #72]	@ (8105050 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8105008:	701a      	strb	r2, [r3, #0]
 810500a:	e006      	b.n	810501a <HAL_TIM_PeriodElapsedCallback+0x16e>
			} else if (debounce == 8) {
 810500c:	4b0b      	ldr	r3, [pc, #44]	@ (810503c <HAL_TIM_PeriodElapsedCallback+0x190>)
 810500e:	781b      	ldrb	r3, [r3, #0]
 8105010:	2b08      	cmp	r3, #8
 8105012:	d102      	bne.n	810501a <HAL_TIM_PeriodElapsedCallback+0x16e>
				xfr_ptr->flag = 2;
 8105014:	4b0d      	ldr	r3, [pc, #52]	@ (810504c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8105016:	2202      	movs	r2, #2
 8105018:	75da      	strb	r2, [r3, #23]
			}
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 810501a:	4b07      	ldr	r3, [pc, #28]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	2200      	movs	r2, #0
 8105020:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8105022:	4b05      	ldr	r3, [pc, #20]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8105024:	681b      	ldr	r3, [r3, #0]
 8105026:	f06f 0201 	mvn.w	r2, #1
 810502a:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim5);
 810502c:	4802      	ldr	r0, [pc, #8]	@ (8105038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 810502e:	f003 fb69 	bl	8108704 <HAL_TIM_Base_Start_IT>
		}

	}
}
 8105032:	3708      	adds	r7, #8
 8105034:	46bd      	mov	sp, r7
 8105036:	bd80      	pop	{r7, pc}
 8105038:	100002b0 	.word	0x100002b0
 810503c:	100003f6 	.word	0x100003f6
 8105040:	58021800 	.word	0x58021800
 8105044:	10000348 	.word	0x10000348
 8105048:	100003fa 	.word	0x100003fa
 810504c:	38001000 	.word	0x38001000
 8105050:	100003f5 	.word	0x100003f5

08105054 <delayMicro>:

// Delays in Microseconds. Blocking
void delayMicro(int microSeconds)
{
 8105054:	b480      	push	{r7}
 8105056:	b083      	sub	sp, #12
 8105058:	af00      	add	r7, sp, #0
 810505a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 810505c:	4b08      	ldr	r3, [pc, #32]	@ (8105080 <delayMicro+0x2c>)
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	2200      	movs	r2, #0
 8105062:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < microSeconds);
 8105064:	bf00      	nop
 8105066:	4b06      	ldr	r3, [pc, #24]	@ (8105080 <delayMicro+0x2c>)
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	429a      	cmp	r2, r3
 8105070:	d3f9      	bcc.n	8105066 <delayMicro+0x12>
}
 8105072:	bf00      	nop
 8105074:	bf00      	nop
 8105076:	370c      	adds	r7, #12
 8105078:	46bd      	mov	sp, r7
 810507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810507e:	4770      	bx	lr
 8105080:	100002fc 	.word	0x100002fc

08105084 <delayMilli>:

// Delays in Milliseconds. Blocking
void delayMilli(int milliSeconds) {
 8105084:	b580      	push	{r7, lr}
 8105086:	b082      	sub	sp, #8
 8105088:	af00      	add	r7, sp, #0
 810508a:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliSeconds);
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	4618      	mov	r0, r3
 8105090:	f000 fb4c 	bl	810572c <HAL_Delay>
}
 8105094:	bf00      	nop
 8105096:	3708      	adds	r7, #8
 8105098:	46bd      	mov	sp, r7
 810509a:	bd80      	pop	{r7, pc}

0810509c <getTime>:

// Gets time for screen and LED blinking. Returns current Millisecond
uint16_t getTime()
{
 810509c:	b480      	push	{r7}
 810509e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim17);
 81050a0:	4b04      	ldr	r3, [pc, #16]	@ (81050b4 <getTime+0x18>)
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81050a6:	b29b      	uxth	r3, r3
}
 81050a8:	4618      	mov	r0, r3
 81050aa:	46bd      	mov	sp, r7
 81050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050b0:	4770      	bx	lr
 81050b2:	bf00      	nop
 81050b4:	10000394 	.word	0x10000394

081050b8 <SPI_Transmit>:

void SPI_Transmit(uint8_t * pData, uint16_t Size)
{
 81050b8:	b580      	push	{r7, lr}
 81050ba:	b082      	sub	sp, #8
 81050bc:	af00      	add	r7, sp, #0
 81050be:	6078      	str	r0, [r7, #4]
 81050c0:	460b      	mov	r3, r1
 81050c2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 81050c4:	2200      	movs	r2, #0
 81050c6:	2108      	movs	r1, #8
 81050c8:	4808      	ldr	r0, [pc, #32]	@ (81050ec <SPI_Transmit+0x34>)
 81050ca:	f000 fe3f 	bl	8105d4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, pData, Size, 100);
 81050ce:	887a      	ldrh	r2, [r7, #2]
 81050d0:	2364      	movs	r3, #100	@ 0x64
 81050d2:	6879      	ldr	r1, [r7, #4]
 81050d4:	4806      	ldr	r0, [pc, #24]	@ (81050f0 <SPI_Transmit+0x38>)
 81050d6:	f002 fd53 	bl	8107b80 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 81050da:	2201      	movs	r2, #1
 81050dc:	2108      	movs	r1, #8
 81050de:	4803      	ldr	r0, [pc, #12]	@ (81050ec <SPI_Transmit+0x34>)
 81050e0:	f000 fe34 	bl	8105d4c <HAL_GPIO_WritePin>
}
 81050e4:	bf00      	nop
 81050e6:	3708      	adds	r7, #8
 81050e8:	46bd      	mov	sp, r7
 81050ea:	bd80      	pop	{r7, pc}
 81050ec:	58021400 	.word	0x58021400
 81050f0:	10000228 	.word	0x10000228

081050f4 <SPI_Transmit_Receive>:
	HAL_SPI_Receive(&hspi5, pData, Size, 100);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
}

void SPI_Transmit_Receive(char * pTxData, char * pRxData, uint16_t Size)
{
 81050f4:	b580      	push	{r7, lr}
 81050f6:	b086      	sub	sp, #24
 81050f8:	af02      	add	r7, sp, #8
 81050fa:	60f8      	str	r0, [r7, #12]
 81050fc:	60b9      	str	r1, [r7, #8]
 81050fe:	4613      	mov	r3, r2
 8105100:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8105102:	2200      	movs	r2, #0
 8105104:	2108      	movs	r1, #8
 8105106:	480a      	ldr	r0, [pc, #40]	@ (8105130 <SPI_Transmit_Receive+0x3c>)
 8105108:	f000 fe20 	bl	8105d4c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)pTxData, (uint8_t *)pRxData, Size, 100);
 810510c:	88fb      	ldrh	r3, [r7, #6]
 810510e:	2264      	movs	r2, #100	@ 0x64
 8105110:	9200      	str	r2, [sp, #0]
 8105112:	68ba      	ldr	r2, [r7, #8]
 8105114:	68f9      	ldr	r1, [r7, #12]
 8105116:	4807      	ldr	r0, [pc, #28]	@ (8105134 <SPI_Transmit_Receive+0x40>)
 8105118:	f002 ff2b 	bl	8107f72 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 810511c:	2201      	movs	r2, #1
 810511e:	2108      	movs	r1, #8
 8105120:	4803      	ldr	r0, [pc, #12]	@ (8105130 <SPI_Transmit_Receive+0x3c>)
 8105122:	f000 fe13 	bl	8105d4c <HAL_GPIO_WritePin>
}
 8105126:	bf00      	nop
 8105128:	3710      	adds	r7, #16
 810512a:	46bd      	mov	sp, r7
 810512c:	bd80      	pop	{r7, pc}
 810512e:	bf00      	nop
 8105130:	58021400 	.word	0x58021400
 8105134:	10000228 	.word	0x10000228

08105138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8105138:	b480      	push	{r7}
 810513a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810513c:	b672      	cpsid	i
}
 810513e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8105140:	bf00      	nop
 8105142:	e7fd      	b.n	8105140 <Error_Handler+0x8>

08105144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8105144:	b480      	push	{r7}
 8105146:	b083      	sub	sp, #12
 8105148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810514a:	4b0a      	ldr	r3, [pc, #40]	@ (8105174 <HAL_MspInit+0x30>)
 810514c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105150:	4a08      	ldr	r2, [pc, #32]	@ (8105174 <HAL_MspInit+0x30>)
 8105152:	f043 0302 	orr.w	r3, r3, #2
 8105156:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810515a:	4b06      	ldr	r3, [pc, #24]	@ (8105174 <HAL_MspInit+0x30>)
 810515c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105160:	f003 0302 	and.w	r3, r3, #2
 8105164:	607b      	str	r3, [r7, #4]
 8105166:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8105168:	bf00      	nop
 810516a:	370c      	adds	r7, #12
 810516c:	46bd      	mov	sp, r7
 810516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105172:	4770      	bx	lr
 8105174:	58024400 	.word	0x58024400

08105178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8105178:	b580      	push	{r7, lr}
 810517a:	b0bc      	sub	sp, #240	@ 0xf0
 810517c:	af00      	add	r7, sp, #0
 810517e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8105180:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8105184:	2200      	movs	r2, #0
 8105186:	601a      	str	r2, [r3, #0]
 8105188:	605a      	str	r2, [r3, #4]
 810518a:	609a      	str	r2, [r3, #8]
 810518c:	60da      	str	r2, [r3, #12]
 810518e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8105190:	f107 0310 	add.w	r3, r7, #16
 8105194:	22c8      	movs	r2, #200	@ 0xc8
 8105196:	2100      	movs	r1, #0
 8105198:	4618      	mov	r0, r3
 810519a:	f004 fcf8 	bl	8109b8e <memset>
  if(hspi->Instance==SPI5)
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	4a26      	ldr	r2, [pc, #152]	@ (810523c <HAL_SPI_MspInit+0xc4>)
 81051a4:	4293      	cmp	r3, r2
 81051a6:	d145      	bne.n	8105234 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 81051a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81051ac:	f04f 0300 	mov.w	r3, #0
 81051b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 81051b4:	2300      	movs	r3, #0
 81051b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81051b8:	f107 0310 	add.w	r3, r7, #16
 81051bc:	4618      	mov	r0, r3
 81051be:	f001 f80d 	bl	81061dc <HAL_RCCEx_PeriphCLKConfig>
 81051c2:	4603      	mov	r3, r0
 81051c4:	2b00      	cmp	r3, #0
 81051c6:	d001      	beq.n	81051cc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 81051c8:	f7ff ffb6 	bl	8105138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 81051cc:	4b1c      	ldr	r3, [pc, #112]	@ (8105240 <HAL_SPI_MspInit+0xc8>)
 81051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81051d2:	4a1b      	ldr	r2, [pc, #108]	@ (8105240 <HAL_SPI_MspInit+0xc8>)
 81051d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81051d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81051dc:	4b18      	ldr	r3, [pc, #96]	@ (8105240 <HAL_SPI_MspInit+0xc8>)
 81051de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81051e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81051e6:	60fb      	str	r3, [r7, #12]
 81051e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81051ea:	4b15      	ldr	r3, [pc, #84]	@ (8105240 <HAL_SPI_MspInit+0xc8>)
 81051ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81051f0:	4a13      	ldr	r2, [pc, #76]	@ (8105240 <HAL_SPI_MspInit+0xc8>)
 81051f2:	f043 0320 	orr.w	r3, r3, #32
 81051f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81051fa:	4b11      	ldr	r3, [pc, #68]	@ (8105240 <HAL_SPI_MspInit+0xc8>)
 81051fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105200:	f003 0320 	and.w	r3, r3, #32
 8105204:	60bb      	str	r3, [r7, #8]
 8105206:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8105208:	f44f 7360 	mov.w	r3, #896	@ 0x380
 810520c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105210:	2302      	movs	r3, #2
 8105212:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8105216:	2300      	movs	r3, #0
 8105218:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810521c:	2300      	movs	r3, #0
 810521e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8105222:	2305      	movs	r3, #5
 8105224:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8105228:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810522c:	4619      	mov	r1, r3
 810522e:	4805      	ldr	r0, [pc, #20]	@ (8105244 <HAL_SPI_MspInit+0xcc>)
 8105230:	f000 fbc4 	bl	81059bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8105234:	bf00      	nop
 8105236:	37f0      	adds	r7, #240	@ 0xf0
 8105238:	46bd      	mov	sp, r7
 810523a:	bd80      	pop	{r7, pc}
 810523c:	40015000 	.word	0x40015000
 8105240:	58024400 	.word	0x58024400
 8105244:	58021400 	.word	0x58021400

08105248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8105248:	b580      	push	{r7, lr}
 810524a:	b086      	sub	sp, #24
 810524c:	af00      	add	r7, sp, #0
 810524e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	681b      	ldr	r3, [r3, #0]
 8105254:	4a32      	ldr	r2, [pc, #200]	@ (8105320 <HAL_TIM_Base_MspInit+0xd8>)
 8105256:	4293      	cmp	r3, r2
 8105258:	d117      	bne.n	810528a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 810525a:	4b32      	ldr	r3, [pc, #200]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 810525c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105260:	4a30      	ldr	r2, [pc, #192]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 8105262:	f043 0308 	orr.w	r3, r3, #8
 8105266:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810526a:	4b2e      	ldr	r3, [pc, #184]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 810526c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105270:	f003 0308 	and.w	r3, r3, #8
 8105274:	617b      	str	r3, [r7, #20]
 8105276:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8105278:	2200      	movs	r2, #0
 810527a:	2100      	movs	r1, #0
 810527c:	2032      	movs	r0, #50	@ 0x32
 810527e:	f000 fb54 	bl	810592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8105282:	2032      	movs	r0, #50	@ 0x32
 8105284:	f000 fb6b 	bl	810595e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8105288:	e045      	b.n	8105316 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM7)
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	4a26      	ldr	r2, [pc, #152]	@ (8105328 <HAL_TIM_Base_MspInit+0xe0>)
 8105290:	4293      	cmp	r3, r2
 8105292:	d10f      	bne.n	81052b4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8105294:	4b23      	ldr	r3, [pc, #140]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 8105296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810529a:	4a22      	ldr	r2, [pc, #136]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 810529c:	f043 0320 	orr.w	r3, r3, #32
 81052a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81052a4:	4b1f      	ldr	r3, [pc, #124]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 81052a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81052aa:	f003 0320 	and.w	r3, r3, #32
 81052ae:	613b      	str	r3, [r7, #16]
 81052b0:	693b      	ldr	r3, [r7, #16]
}
 81052b2:	e030      	b.n	8105316 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM13)
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	4a1c      	ldr	r2, [pc, #112]	@ (810532c <HAL_TIM_Base_MspInit+0xe4>)
 81052ba:	4293      	cmp	r3, r2
 81052bc:	d117      	bne.n	81052ee <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 81052be:	4b19      	ldr	r3, [pc, #100]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 81052c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81052c4:	4a17      	ldr	r2, [pc, #92]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 81052c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81052ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81052ce:	4b15      	ldr	r3, [pc, #84]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 81052d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81052d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81052d8:	60fb      	str	r3, [r7, #12]
 81052da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 81052dc:	2200      	movs	r2, #0
 81052de:	2100      	movs	r1, #0
 81052e0:	202c      	movs	r0, #44	@ 0x2c
 81052e2:	f000 fb22 	bl	810592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 81052e6:	202c      	movs	r0, #44	@ 0x2c
 81052e8:	f000 fb39 	bl	810595e <HAL_NVIC_EnableIRQ>
}
 81052ec:	e013      	b.n	8105316 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM17)
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	681b      	ldr	r3, [r3, #0]
 81052f2:	4a0f      	ldr	r2, [pc, #60]	@ (8105330 <HAL_TIM_Base_MspInit+0xe8>)
 81052f4:	4293      	cmp	r3, r2
 81052f6:	d10e      	bne.n	8105316 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM17_CLK_ENABLE();
 81052f8:	4b0a      	ldr	r3, [pc, #40]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 81052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81052fe:	4a09      	ldr	r2, [pc, #36]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 8105300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105304:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8105308:	4b06      	ldr	r3, [pc, #24]	@ (8105324 <HAL_TIM_Base_MspInit+0xdc>)
 810530a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810530e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105312:	60bb      	str	r3, [r7, #8]
 8105314:	68bb      	ldr	r3, [r7, #8]
}
 8105316:	bf00      	nop
 8105318:	3718      	adds	r7, #24
 810531a:	46bd      	mov	sp, r7
 810531c:	bd80      	pop	{r7, pc}
 810531e:	bf00      	nop
 8105320:	40000c00 	.word	0x40000c00
 8105324:	58024400 	.word	0x58024400
 8105328:	40001400 	.word	0x40001400
 810532c:	40001c00 	.word	0x40001c00
 8105330:	40014800 	.word	0x40014800

08105334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8105334:	b480      	push	{r7}
 8105336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8105338:	bf00      	nop
 810533a:	e7fd      	b.n	8105338 <NMI_Handler+0x4>

0810533c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810533c:	b480      	push	{r7}
 810533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8105340:	bf00      	nop
 8105342:	e7fd      	b.n	8105340 <HardFault_Handler+0x4>

08105344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8105344:	b480      	push	{r7}
 8105346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8105348:	bf00      	nop
 810534a:	e7fd      	b.n	8105348 <MemManage_Handler+0x4>

0810534c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810534c:	b480      	push	{r7}
 810534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8105350:	bf00      	nop
 8105352:	e7fd      	b.n	8105350 <BusFault_Handler+0x4>

08105354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8105354:	b480      	push	{r7}
 8105356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8105358:	bf00      	nop
 810535a:	e7fd      	b.n	8105358 <UsageFault_Handler+0x4>

0810535c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810535c:	b480      	push	{r7}
 810535e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8105360:	bf00      	nop
 8105362:	46bd      	mov	sp, r7
 8105364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105368:	4770      	bx	lr

0810536a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810536a:	b480      	push	{r7}
 810536c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810536e:	bf00      	nop
 8105370:	46bd      	mov	sp, r7
 8105372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105376:	4770      	bx	lr

08105378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8105378:	b480      	push	{r7}
 810537a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810537c:	bf00      	nop
 810537e:	46bd      	mov	sp, r7
 8105380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105384:	4770      	bx	lr

08105386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8105386:	b580      	push	{r7, lr}
 8105388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810538a:	f000 f9af 	bl	81056ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810538e:	bf00      	nop
 8105390:	bd80      	pop	{r7, pc}

08105392 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8105392:	b580      	push	{r7, lr}
 8105394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8105396:	2010      	movs	r0, #16
 8105398:	f000 fcf1 	bl	8105d7e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 810539c:	bf00      	nop
 810539e:	bd80      	pop	{r7, pc}

081053a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 81053a0:	b580      	push	{r7, lr}
 81053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 81053a4:	2020      	movs	r0, #32
 81053a6:	f000 fcea 	bl	8105d7e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 81053aa:	2080      	movs	r0, #128	@ 0x80
 81053ac:	f000 fce7 	bl	8105d7e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 81053b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 81053b4:	f000 fce3 	bl	8105d7e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 81053b8:	bf00      	nop
 81053ba:	bd80      	pop	{r7, pc}

081053bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 81053bc:	b580      	push	{r7, lr}
 81053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 81053c0:	4802      	ldr	r0, [pc, #8]	@ (81053cc <TIM8_UP_TIM13_IRQHandler+0x10>)
 81053c2:	f003 fa46 	bl	8108852 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 81053c6:	bf00      	nop
 81053c8:	bd80      	pop	{r7, pc}
 81053ca:	bf00      	nop
 81053cc:	10000348 	.word	0x10000348

081053d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 81053d0:	b580      	push	{r7, lr}
 81053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 81053d4:	4802      	ldr	r0, [pc, #8]	@ (81053e0 <TIM5_IRQHandler+0x10>)
 81053d6:	f003 fa3c 	bl	8108852 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 81053da:	bf00      	nop
 81053dc:	bd80      	pop	{r7, pc}
 81053de:	bf00      	nop
 81053e0:	100002b0 	.word	0x100002b0

081053e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81053e4:	b480      	push	{r7}
 81053e6:	af00      	add	r7, sp, #0
  return 1;
 81053e8:	2301      	movs	r3, #1
}
 81053ea:	4618      	mov	r0, r3
 81053ec:	46bd      	mov	sp, r7
 81053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053f2:	4770      	bx	lr

081053f4 <_kill>:

int _kill(int pid, int sig)
{
 81053f4:	b580      	push	{r7, lr}
 81053f6:	b082      	sub	sp, #8
 81053f8:	af00      	add	r7, sp, #0
 81053fa:	6078      	str	r0, [r7, #4]
 81053fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81053fe:	f004 fc19 	bl	8109c34 <__errno>
 8105402:	4603      	mov	r3, r0
 8105404:	2216      	movs	r2, #22
 8105406:	601a      	str	r2, [r3, #0]
  return -1;
 8105408:	f04f 33ff 	mov.w	r3, #4294967295
}
 810540c:	4618      	mov	r0, r3
 810540e:	3708      	adds	r7, #8
 8105410:	46bd      	mov	sp, r7
 8105412:	bd80      	pop	{r7, pc}

08105414 <_exit>:

void _exit (int status)
{
 8105414:	b580      	push	{r7, lr}
 8105416:	b082      	sub	sp, #8
 8105418:	af00      	add	r7, sp, #0
 810541a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 810541c:	f04f 31ff 	mov.w	r1, #4294967295
 8105420:	6878      	ldr	r0, [r7, #4]
 8105422:	f7ff ffe7 	bl	81053f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8105426:	bf00      	nop
 8105428:	e7fd      	b.n	8105426 <_exit+0x12>

0810542a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810542a:	b580      	push	{r7, lr}
 810542c:	b086      	sub	sp, #24
 810542e:	af00      	add	r7, sp, #0
 8105430:	60f8      	str	r0, [r7, #12]
 8105432:	60b9      	str	r1, [r7, #8]
 8105434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8105436:	2300      	movs	r3, #0
 8105438:	617b      	str	r3, [r7, #20]
 810543a:	e00a      	b.n	8105452 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 810543c:	f3af 8000 	nop.w
 8105440:	4601      	mov	r1, r0
 8105442:	68bb      	ldr	r3, [r7, #8]
 8105444:	1c5a      	adds	r2, r3, #1
 8105446:	60ba      	str	r2, [r7, #8]
 8105448:	b2ca      	uxtb	r2, r1
 810544a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810544c:	697b      	ldr	r3, [r7, #20]
 810544e:	3301      	adds	r3, #1
 8105450:	617b      	str	r3, [r7, #20]
 8105452:	697a      	ldr	r2, [r7, #20]
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	429a      	cmp	r2, r3
 8105458:	dbf0      	blt.n	810543c <_read+0x12>
  }

  return len;
 810545a:	687b      	ldr	r3, [r7, #4]
}
 810545c:	4618      	mov	r0, r3
 810545e:	3718      	adds	r7, #24
 8105460:	46bd      	mov	sp, r7
 8105462:	bd80      	pop	{r7, pc}

08105464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8105464:	b580      	push	{r7, lr}
 8105466:	b086      	sub	sp, #24
 8105468:	af00      	add	r7, sp, #0
 810546a:	60f8      	str	r0, [r7, #12]
 810546c:	60b9      	str	r1, [r7, #8]
 810546e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8105470:	2300      	movs	r3, #0
 8105472:	617b      	str	r3, [r7, #20]
 8105474:	e009      	b.n	810548a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8105476:	68bb      	ldr	r3, [r7, #8]
 8105478:	1c5a      	adds	r2, r3, #1
 810547a:	60ba      	str	r2, [r7, #8]
 810547c:	781b      	ldrb	r3, [r3, #0]
 810547e:	4618      	mov	r0, r3
 8105480:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8105484:	697b      	ldr	r3, [r7, #20]
 8105486:	3301      	adds	r3, #1
 8105488:	617b      	str	r3, [r7, #20]
 810548a:	697a      	ldr	r2, [r7, #20]
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	429a      	cmp	r2, r3
 8105490:	dbf1      	blt.n	8105476 <_write+0x12>
  }
  return len;
 8105492:	687b      	ldr	r3, [r7, #4]
}
 8105494:	4618      	mov	r0, r3
 8105496:	3718      	adds	r7, #24
 8105498:	46bd      	mov	sp, r7
 810549a:	bd80      	pop	{r7, pc}

0810549c <_close>:

int _close(int file)
{
 810549c:	b480      	push	{r7}
 810549e:	b083      	sub	sp, #12
 81054a0:	af00      	add	r7, sp, #0
 81054a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81054a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81054a8:	4618      	mov	r0, r3
 81054aa:	370c      	adds	r7, #12
 81054ac:	46bd      	mov	sp, r7
 81054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b2:	4770      	bx	lr

081054b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81054b4:	b480      	push	{r7}
 81054b6:	b083      	sub	sp, #12
 81054b8:	af00      	add	r7, sp, #0
 81054ba:	6078      	str	r0, [r7, #4]
 81054bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81054be:	683b      	ldr	r3, [r7, #0]
 81054c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81054c4:	605a      	str	r2, [r3, #4]
  return 0;
 81054c6:	2300      	movs	r3, #0
}
 81054c8:	4618      	mov	r0, r3
 81054ca:	370c      	adds	r7, #12
 81054cc:	46bd      	mov	sp, r7
 81054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054d2:	4770      	bx	lr

081054d4 <_isatty>:

int _isatty(int file)
{
 81054d4:	b480      	push	{r7}
 81054d6:	b083      	sub	sp, #12
 81054d8:	af00      	add	r7, sp, #0
 81054da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81054dc:	2301      	movs	r3, #1
}
 81054de:	4618      	mov	r0, r3
 81054e0:	370c      	adds	r7, #12
 81054e2:	46bd      	mov	sp, r7
 81054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054e8:	4770      	bx	lr

081054ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81054ea:	b480      	push	{r7}
 81054ec:	b085      	sub	sp, #20
 81054ee:	af00      	add	r7, sp, #0
 81054f0:	60f8      	str	r0, [r7, #12]
 81054f2:	60b9      	str	r1, [r7, #8]
 81054f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81054f6:	2300      	movs	r3, #0
}
 81054f8:	4618      	mov	r0, r3
 81054fa:	3714      	adds	r7, #20
 81054fc:	46bd      	mov	sp, r7
 81054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105502:	4770      	bx	lr

08105504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8105504:	b580      	push	{r7, lr}
 8105506:	b086      	sub	sp, #24
 8105508:	af00      	add	r7, sp, #0
 810550a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810550c:	4a14      	ldr	r2, [pc, #80]	@ (8105560 <_sbrk+0x5c>)
 810550e:	4b15      	ldr	r3, [pc, #84]	@ (8105564 <_sbrk+0x60>)
 8105510:	1ad3      	subs	r3, r2, r3
 8105512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8105514:	697b      	ldr	r3, [r7, #20]
 8105516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8105518:	4b13      	ldr	r3, [pc, #76]	@ (8105568 <_sbrk+0x64>)
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	2b00      	cmp	r3, #0
 810551e:	d102      	bne.n	8105526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8105520:	4b11      	ldr	r3, [pc, #68]	@ (8105568 <_sbrk+0x64>)
 8105522:	4a12      	ldr	r2, [pc, #72]	@ (810556c <_sbrk+0x68>)
 8105524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8105526:	4b10      	ldr	r3, [pc, #64]	@ (8105568 <_sbrk+0x64>)
 8105528:	681a      	ldr	r2, [r3, #0]
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	4413      	add	r3, r2
 810552e:	693a      	ldr	r2, [r7, #16]
 8105530:	429a      	cmp	r2, r3
 8105532:	d207      	bcs.n	8105544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8105534:	f004 fb7e 	bl	8109c34 <__errno>
 8105538:	4603      	mov	r3, r0
 810553a:	220c      	movs	r2, #12
 810553c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810553e:	f04f 33ff 	mov.w	r3, #4294967295
 8105542:	e009      	b.n	8105558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8105544:	4b08      	ldr	r3, [pc, #32]	@ (8105568 <_sbrk+0x64>)
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810554a:	4b07      	ldr	r3, [pc, #28]	@ (8105568 <_sbrk+0x64>)
 810554c:	681a      	ldr	r2, [r3, #0]
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	4413      	add	r3, r2
 8105552:	4a05      	ldr	r2, [pc, #20]	@ (8105568 <_sbrk+0x64>)
 8105554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8105556:	68fb      	ldr	r3, [r7, #12]
}
 8105558:	4618      	mov	r0, r3
 810555a:	3718      	adds	r7, #24
 810555c:	46bd      	mov	sp, r7
 810555e:	bd80      	pop	{r7, pc}
 8105560:	10048000 	.word	0x10048000
 8105564:	00000400 	.word	0x00000400
 8105568:	100003fc 	.word	0x100003fc
 810556c:	10000550 	.word	0x10000550

08105570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8105570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81055a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8105574:	f7fb fbf0 	bl	8100d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8105578:	480c      	ldr	r0, [pc, #48]	@ (81055ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810557a:	490d      	ldr	r1, [pc, #52]	@ (81055b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810557c:	4a0d      	ldr	r2, [pc, #52]	@ (81055b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810557e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8105580:	e002      	b.n	8105588 <LoopCopyDataInit>

08105582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8105582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8105584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8105586:	3304      	adds	r3, #4

08105588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8105588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810558a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810558c:	d3f9      	bcc.n	8105582 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810558e:	4a0a      	ldr	r2, [pc, #40]	@ (81055b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8105590:	4c0a      	ldr	r4, [pc, #40]	@ (81055bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8105592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8105594:	e001      	b.n	810559a <LoopFillZerobss>

08105596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8105596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8105598:	3204      	adds	r2, #4

0810559a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810559a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810559c:	d3fb      	bcc.n	8105596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810559e:	f004 fb4f 	bl	8109c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81055a2:	f7ff f927 	bl	81047f4 <main>
  bx  lr
 81055a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81055a8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81055ac:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81055b0:	10000200 	.word	0x10000200
  ldr r2, =_sidata
 81055b4:	0810c140 	.word	0x0810c140
  ldr r2, =_sbss
 81055b8:	10000200 	.word	0x10000200
  ldr r4, =_ebss
 81055bc:	10000550 	.word	0x10000550

081055c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81055c0:	e7fe      	b.n	81055c0 <ADC3_IRQHandler>
	...

081055c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81055c4:	b580      	push	{r7, lr}
 81055c6:	b082      	sub	sp, #8
 81055c8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81055ca:	4b28      	ldr	r3, [pc, #160]	@ (810566c <HAL_Init+0xa8>)
 81055cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81055d0:	4a26      	ldr	r2, [pc, #152]	@ (810566c <HAL_Init+0xa8>)
 81055d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81055d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81055da:	4b24      	ldr	r3, [pc, #144]	@ (810566c <HAL_Init+0xa8>)
 81055dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81055e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81055e4:	603b      	str	r3, [r7, #0]
 81055e6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81055e8:	4b21      	ldr	r3, [pc, #132]	@ (8105670 <HAL_Init+0xac>)
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81055f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81055f4:	4a1e      	ldr	r2, [pc, #120]	@ (8105670 <HAL_Init+0xac>)
 81055f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81055fa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81055fc:	4b1c      	ldr	r3, [pc, #112]	@ (8105670 <HAL_Init+0xac>)
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	4a1b      	ldr	r2, [pc, #108]	@ (8105670 <HAL_Init+0xac>)
 8105602:	f043 0301 	orr.w	r3, r3, #1
 8105606:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8105608:	2003      	movs	r0, #3
 810560a:	f000 f983 	bl	8105914 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810560e:	f000 fc6b 	bl	8105ee8 <HAL_RCC_GetSysClockFreq>
 8105612:	4602      	mov	r2, r0
 8105614:	4b15      	ldr	r3, [pc, #84]	@ (810566c <HAL_Init+0xa8>)
 8105616:	699b      	ldr	r3, [r3, #24]
 8105618:	0a1b      	lsrs	r3, r3, #8
 810561a:	f003 030f 	and.w	r3, r3, #15
 810561e:	4915      	ldr	r1, [pc, #84]	@ (8105674 <HAL_Init+0xb0>)
 8105620:	5ccb      	ldrb	r3, [r1, r3]
 8105622:	f003 031f 	and.w	r3, r3, #31
 8105626:	fa22 f303 	lsr.w	r3, r2, r3
 810562a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810562c:	4b0f      	ldr	r3, [pc, #60]	@ (810566c <HAL_Init+0xa8>)
 810562e:	699b      	ldr	r3, [r3, #24]
 8105630:	f003 030f 	and.w	r3, r3, #15
 8105634:	4a0f      	ldr	r2, [pc, #60]	@ (8105674 <HAL_Init+0xb0>)
 8105636:	5cd3      	ldrb	r3, [r2, r3]
 8105638:	f003 031f 	and.w	r3, r3, #31
 810563c:	687a      	ldr	r2, [r7, #4]
 810563e:	fa22 f303 	lsr.w	r3, r2, r3
 8105642:	4a0d      	ldr	r2, [pc, #52]	@ (8105678 <HAL_Init+0xb4>)
 8105644:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105646:	4b0c      	ldr	r3, [pc, #48]	@ (8105678 <HAL_Init+0xb4>)
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	4a0c      	ldr	r2, [pc, #48]	@ (810567c <HAL_Init+0xb8>)
 810564c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810564e:	200f      	movs	r0, #15
 8105650:	f000 f816 	bl	8105680 <HAL_InitTick>
 8105654:	4603      	mov	r3, r0
 8105656:	2b00      	cmp	r3, #0
 8105658:	d001      	beq.n	810565e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810565a:	2301      	movs	r3, #1
 810565c:	e002      	b.n	8105664 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810565e:	f7ff fd71 	bl	8105144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8105662:	2300      	movs	r3, #0
}
 8105664:	4618      	mov	r0, r3
 8105666:	3708      	adds	r7, #8
 8105668:	46bd      	mov	sp, r7
 810566a:	bd80      	pop	{r7, pc}
 810566c:	58024400 	.word	0x58024400
 8105670:	40024400 	.word	0x40024400
 8105674:	0810bdb0 	.word	0x0810bdb0
 8105678:	10000004 	.word	0x10000004
 810567c:	10000000 	.word	0x10000000

08105680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8105680:	b580      	push	{r7, lr}
 8105682:	b082      	sub	sp, #8
 8105684:	af00      	add	r7, sp, #0
 8105686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8105688:	4b15      	ldr	r3, [pc, #84]	@ (81056e0 <HAL_InitTick+0x60>)
 810568a:	781b      	ldrb	r3, [r3, #0]
 810568c:	2b00      	cmp	r3, #0
 810568e:	d101      	bne.n	8105694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8105690:	2301      	movs	r3, #1
 8105692:	e021      	b.n	81056d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8105694:	4b13      	ldr	r3, [pc, #76]	@ (81056e4 <HAL_InitTick+0x64>)
 8105696:	681a      	ldr	r2, [r3, #0]
 8105698:	4b11      	ldr	r3, [pc, #68]	@ (81056e0 <HAL_InitTick+0x60>)
 810569a:	781b      	ldrb	r3, [r3, #0]
 810569c:	4619      	mov	r1, r3
 810569e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81056a2:	fbb3 f3f1 	udiv	r3, r3, r1
 81056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 81056aa:	4618      	mov	r0, r3
 81056ac:	f000 f965 	bl	810597a <HAL_SYSTICK_Config>
 81056b0:	4603      	mov	r3, r0
 81056b2:	2b00      	cmp	r3, #0
 81056b4:	d001      	beq.n	81056ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81056b6:	2301      	movs	r3, #1
 81056b8:	e00e      	b.n	81056d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	2b0f      	cmp	r3, #15
 81056be:	d80a      	bhi.n	81056d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81056c0:	2200      	movs	r2, #0
 81056c2:	6879      	ldr	r1, [r7, #4]
 81056c4:	f04f 30ff 	mov.w	r0, #4294967295
 81056c8:	f000 f92f 	bl	810592a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81056cc:	4a06      	ldr	r2, [pc, #24]	@ (81056e8 <HAL_InitTick+0x68>)
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81056d2:	2300      	movs	r3, #0
 81056d4:	e000      	b.n	81056d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81056d6:	2301      	movs	r3, #1
}
 81056d8:	4618      	mov	r0, r3
 81056da:	3708      	adds	r7, #8
 81056dc:	46bd      	mov	sp, r7
 81056de:	bd80      	pop	{r7, pc}
 81056e0:	10000034 	.word	0x10000034
 81056e4:	10000000 	.word	0x10000000
 81056e8:	10000030 	.word	0x10000030

081056ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81056ec:	b480      	push	{r7}
 81056ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81056f0:	4b06      	ldr	r3, [pc, #24]	@ (810570c <HAL_IncTick+0x20>)
 81056f2:	781b      	ldrb	r3, [r3, #0]
 81056f4:	461a      	mov	r2, r3
 81056f6:	4b06      	ldr	r3, [pc, #24]	@ (8105710 <HAL_IncTick+0x24>)
 81056f8:	681b      	ldr	r3, [r3, #0]
 81056fa:	4413      	add	r3, r2
 81056fc:	4a04      	ldr	r2, [pc, #16]	@ (8105710 <HAL_IncTick+0x24>)
 81056fe:	6013      	str	r3, [r2, #0]
}
 8105700:	bf00      	nop
 8105702:	46bd      	mov	sp, r7
 8105704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105708:	4770      	bx	lr
 810570a:	bf00      	nop
 810570c:	10000034 	.word	0x10000034
 8105710:	10000400 	.word	0x10000400

08105714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8105714:	b480      	push	{r7}
 8105716:	af00      	add	r7, sp, #0
  return uwTick;
 8105718:	4b03      	ldr	r3, [pc, #12]	@ (8105728 <HAL_GetTick+0x14>)
 810571a:	681b      	ldr	r3, [r3, #0]
}
 810571c:	4618      	mov	r0, r3
 810571e:	46bd      	mov	sp, r7
 8105720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105724:	4770      	bx	lr
 8105726:	bf00      	nop
 8105728:	10000400 	.word	0x10000400

0810572c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810572c:	b580      	push	{r7, lr}
 810572e:	b084      	sub	sp, #16
 8105730:	af00      	add	r7, sp, #0
 8105732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8105734:	f7ff ffee 	bl	8105714 <HAL_GetTick>
 8105738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810573e:	68fb      	ldr	r3, [r7, #12]
 8105740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105744:	d005      	beq.n	8105752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8105746:	4b0a      	ldr	r3, [pc, #40]	@ (8105770 <HAL_Delay+0x44>)
 8105748:	781b      	ldrb	r3, [r3, #0]
 810574a:	461a      	mov	r2, r3
 810574c:	68fb      	ldr	r3, [r7, #12]
 810574e:	4413      	add	r3, r2
 8105750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8105752:	bf00      	nop
 8105754:	f7ff ffde 	bl	8105714 <HAL_GetTick>
 8105758:	4602      	mov	r2, r0
 810575a:	68bb      	ldr	r3, [r7, #8]
 810575c:	1ad3      	subs	r3, r2, r3
 810575e:	68fa      	ldr	r2, [r7, #12]
 8105760:	429a      	cmp	r2, r3
 8105762:	d8f7      	bhi.n	8105754 <HAL_Delay+0x28>
  {
  }
}
 8105764:	bf00      	nop
 8105766:	bf00      	nop
 8105768:	3710      	adds	r7, #16
 810576a:	46bd      	mov	sp, r7
 810576c:	bd80      	pop	{r7, pc}
 810576e:	bf00      	nop
 8105770:	10000034 	.word	0x10000034

08105774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105774:	b480      	push	{r7}
 8105776:	b085      	sub	sp, #20
 8105778:	af00      	add	r7, sp, #0
 810577a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	f003 0307 	and.w	r3, r3, #7
 8105782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105784:	4b0c      	ldr	r3, [pc, #48]	@ (81057b8 <__NVIC_SetPriorityGrouping+0x44>)
 8105786:	68db      	ldr	r3, [r3, #12]
 8105788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810578a:	68ba      	ldr	r2, [r7, #8]
 810578c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8105790:	4013      	ands	r3, r2
 8105792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105798:	68bb      	ldr	r3, [r7, #8]
 810579a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810579c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81057a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81057a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81057a6:	4a04      	ldr	r2, [pc, #16]	@ (81057b8 <__NVIC_SetPriorityGrouping+0x44>)
 81057a8:	68bb      	ldr	r3, [r7, #8]
 81057aa:	60d3      	str	r3, [r2, #12]
}
 81057ac:	bf00      	nop
 81057ae:	3714      	adds	r7, #20
 81057b0:	46bd      	mov	sp, r7
 81057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057b6:	4770      	bx	lr
 81057b8:	e000ed00 	.word	0xe000ed00

081057bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81057bc:	b480      	push	{r7}
 81057be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81057c0:	4b04      	ldr	r3, [pc, #16]	@ (81057d4 <__NVIC_GetPriorityGrouping+0x18>)
 81057c2:	68db      	ldr	r3, [r3, #12]
 81057c4:	0a1b      	lsrs	r3, r3, #8
 81057c6:	f003 0307 	and.w	r3, r3, #7
}
 81057ca:	4618      	mov	r0, r3
 81057cc:	46bd      	mov	sp, r7
 81057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057d2:	4770      	bx	lr
 81057d4:	e000ed00 	.word	0xe000ed00

081057d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81057d8:	b480      	push	{r7}
 81057da:	b083      	sub	sp, #12
 81057dc:	af00      	add	r7, sp, #0
 81057de:	4603      	mov	r3, r0
 81057e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81057e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057e6:	2b00      	cmp	r3, #0
 81057e8:	db0b      	blt.n	8105802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81057ea:	88fb      	ldrh	r3, [r7, #6]
 81057ec:	f003 021f 	and.w	r2, r3, #31
 81057f0:	4907      	ldr	r1, [pc, #28]	@ (8105810 <__NVIC_EnableIRQ+0x38>)
 81057f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057f6:	095b      	lsrs	r3, r3, #5
 81057f8:	2001      	movs	r0, #1
 81057fa:	fa00 f202 	lsl.w	r2, r0, r2
 81057fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105802:	bf00      	nop
 8105804:	370c      	adds	r7, #12
 8105806:	46bd      	mov	sp, r7
 8105808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810580c:	4770      	bx	lr
 810580e:	bf00      	nop
 8105810:	e000e100 	.word	0xe000e100

08105814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105814:	b480      	push	{r7}
 8105816:	b083      	sub	sp, #12
 8105818:	af00      	add	r7, sp, #0
 810581a:	4603      	mov	r3, r0
 810581c:	6039      	str	r1, [r7, #0]
 810581e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105824:	2b00      	cmp	r3, #0
 8105826:	db0a      	blt.n	810583e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105828:	683b      	ldr	r3, [r7, #0]
 810582a:	b2da      	uxtb	r2, r3
 810582c:	490c      	ldr	r1, [pc, #48]	@ (8105860 <__NVIC_SetPriority+0x4c>)
 810582e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105832:	0112      	lsls	r2, r2, #4
 8105834:	b2d2      	uxtb	r2, r2
 8105836:	440b      	add	r3, r1
 8105838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810583c:	e00a      	b.n	8105854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810583e:	683b      	ldr	r3, [r7, #0]
 8105840:	b2da      	uxtb	r2, r3
 8105842:	4908      	ldr	r1, [pc, #32]	@ (8105864 <__NVIC_SetPriority+0x50>)
 8105844:	88fb      	ldrh	r3, [r7, #6]
 8105846:	f003 030f 	and.w	r3, r3, #15
 810584a:	3b04      	subs	r3, #4
 810584c:	0112      	lsls	r2, r2, #4
 810584e:	b2d2      	uxtb	r2, r2
 8105850:	440b      	add	r3, r1
 8105852:	761a      	strb	r2, [r3, #24]
}
 8105854:	bf00      	nop
 8105856:	370c      	adds	r7, #12
 8105858:	46bd      	mov	sp, r7
 810585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810585e:	4770      	bx	lr
 8105860:	e000e100 	.word	0xe000e100
 8105864:	e000ed00 	.word	0xe000ed00

08105868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105868:	b480      	push	{r7}
 810586a:	b089      	sub	sp, #36	@ 0x24
 810586c:	af00      	add	r7, sp, #0
 810586e:	60f8      	str	r0, [r7, #12]
 8105870:	60b9      	str	r1, [r7, #8]
 8105872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105874:	68fb      	ldr	r3, [r7, #12]
 8105876:	f003 0307 	and.w	r3, r3, #7
 810587a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810587c:	69fb      	ldr	r3, [r7, #28]
 810587e:	f1c3 0307 	rsb	r3, r3, #7
 8105882:	2b04      	cmp	r3, #4
 8105884:	bf28      	it	cs
 8105886:	2304      	movcs	r3, #4
 8105888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810588a:	69fb      	ldr	r3, [r7, #28]
 810588c:	3304      	adds	r3, #4
 810588e:	2b06      	cmp	r3, #6
 8105890:	d902      	bls.n	8105898 <NVIC_EncodePriority+0x30>
 8105892:	69fb      	ldr	r3, [r7, #28]
 8105894:	3b03      	subs	r3, #3
 8105896:	e000      	b.n	810589a <NVIC_EncodePriority+0x32>
 8105898:	2300      	movs	r3, #0
 810589a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810589c:	f04f 32ff 	mov.w	r2, #4294967295
 81058a0:	69bb      	ldr	r3, [r7, #24]
 81058a2:	fa02 f303 	lsl.w	r3, r2, r3
 81058a6:	43da      	mvns	r2, r3
 81058a8:	68bb      	ldr	r3, [r7, #8]
 81058aa:	401a      	ands	r2, r3
 81058ac:	697b      	ldr	r3, [r7, #20]
 81058ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81058b0:	f04f 31ff 	mov.w	r1, #4294967295
 81058b4:	697b      	ldr	r3, [r7, #20]
 81058b6:	fa01 f303 	lsl.w	r3, r1, r3
 81058ba:	43d9      	mvns	r1, r3
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81058c0:	4313      	orrs	r3, r2
         );
}
 81058c2:	4618      	mov	r0, r3
 81058c4:	3724      	adds	r7, #36	@ 0x24
 81058c6:	46bd      	mov	sp, r7
 81058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058cc:	4770      	bx	lr
	...

081058d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81058d0:	b580      	push	{r7, lr}
 81058d2:	b082      	sub	sp, #8
 81058d4:	af00      	add	r7, sp, #0
 81058d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	3b01      	subs	r3, #1
 81058dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81058e0:	d301      	bcc.n	81058e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81058e2:	2301      	movs	r3, #1
 81058e4:	e00f      	b.n	8105906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81058e6:	4a0a      	ldr	r2, [pc, #40]	@ (8105910 <SysTick_Config+0x40>)
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	3b01      	subs	r3, #1
 81058ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81058ee:	210f      	movs	r1, #15
 81058f0:	f04f 30ff 	mov.w	r0, #4294967295
 81058f4:	f7ff ff8e 	bl	8105814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81058f8:	4b05      	ldr	r3, [pc, #20]	@ (8105910 <SysTick_Config+0x40>)
 81058fa:	2200      	movs	r2, #0
 81058fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81058fe:	4b04      	ldr	r3, [pc, #16]	@ (8105910 <SysTick_Config+0x40>)
 8105900:	2207      	movs	r2, #7
 8105902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105904:	2300      	movs	r3, #0
}
 8105906:	4618      	mov	r0, r3
 8105908:	3708      	adds	r7, #8
 810590a:	46bd      	mov	sp, r7
 810590c:	bd80      	pop	{r7, pc}
 810590e:	bf00      	nop
 8105910:	e000e010 	.word	0xe000e010

08105914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105914:	b580      	push	{r7, lr}
 8105916:	b082      	sub	sp, #8
 8105918:	af00      	add	r7, sp, #0
 810591a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810591c:	6878      	ldr	r0, [r7, #4]
 810591e:	f7ff ff29 	bl	8105774 <__NVIC_SetPriorityGrouping>
}
 8105922:	bf00      	nop
 8105924:	3708      	adds	r7, #8
 8105926:	46bd      	mov	sp, r7
 8105928:	bd80      	pop	{r7, pc}

0810592a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810592a:	b580      	push	{r7, lr}
 810592c:	b086      	sub	sp, #24
 810592e:	af00      	add	r7, sp, #0
 8105930:	4603      	mov	r3, r0
 8105932:	60b9      	str	r1, [r7, #8]
 8105934:	607a      	str	r2, [r7, #4]
 8105936:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105938:	f7ff ff40 	bl	81057bc <__NVIC_GetPriorityGrouping>
 810593c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810593e:	687a      	ldr	r2, [r7, #4]
 8105940:	68b9      	ldr	r1, [r7, #8]
 8105942:	6978      	ldr	r0, [r7, #20]
 8105944:	f7ff ff90 	bl	8105868 <NVIC_EncodePriority>
 8105948:	4602      	mov	r2, r0
 810594a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810594e:	4611      	mov	r1, r2
 8105950:	4618      	mov	r0, r3
 8105952:	f7ff ff5f 	bl	8105814 <__NVIC_SetPriority>
}
 8105956:	bf00      	nop
 8105958:	3718      	adds	r7, #24
 810595a:	46bd      	mov	sp, r7
 810595c:	bd80      	pop	{r7, pc}

0810595e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810595e:	b580      	push	{r7, lr}
 8105960:	b082      	sub	sp, #8
 8105962:	af00      	add	r7, sp, #0
 8105964:	4603      	mov	r3, r0
 8105966:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810596c:	4618      	mov	r0, r3
 810596e:	f7ff ff33 	bl	81057d8 <__NVIC_EnableIRQ>
}
 8105972:	bf00      	nop
 8105974:	3708      	adds	r7, #8
 8105976:	46bd      	mov	sp, r7
 8105978:	bd80      	pop	{r7, pc}

0810597a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810597a:	b580      	push	{r7, lr}
 810597c:	b082      	sub	sp, #8
 810597e:	af00      	add	r7, sp, #0
 8105980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8105982:	6878      	ldr	r0, [r7, #4]
 8105984:	f7ff ffa4 	bl	81058d0 <SysTick_Config>
 8105988:	4603      	mov	r3, r0
}
 810598a:	4618      	mov	r0, r3
 810598c:	3708      	adds	r7, #8
 810598e:	46bd      	mov	sp, r7
 8105990:	bd80      	pop	{r7, pc}
	...

08105994 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8105994:	b480      	push	{r7}
 8105996:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8105998:	4b07      	ldr	r3, [pc, #28]	@ (81059b8 <HAL_GetCurrentCPUID+0x24>)
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	091b      	lsrs	r3, r3, #4
 810599e:	f003 030f 	and.w	r3, r3, #15
 81059a2:	2b07      	cmp	r3, #7
 81059a4:	d101      	bne.n	81059aa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81059a6:	2303      	movs	r3, #3
 81059a8:	e000      	b.n	81059ac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81059aa:	2301      	movs	r3, #1
  }
}
 81059ac:	4618      	mov	r0, r3
 81059ae:	46bd      	mov	sp, r7
 81059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059b4:	4770      	bx	lr
 81059b6:	bf00      	nop
 81059b8:	e000ed00 	.word	0xe000ed00

081059bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81059bc:	b480      	push	{r7}
 81059be:	b089      	sub	sp, #36	@ 0x24
 81059c0:	af00      	add	r7, sp, #0
 81059c2:	6078      	str	r0, [r7, #4]
 81059c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81059c6:	2300      	movs	r3, #0
 81059c8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81059ca:	4b89      	ldr	r3, [pc, #548]	@ (8105bf0 <HAL_GPIO_Init+0x234>)
 81059cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81059ce:	e194      	b.n	8105cfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81059d0:	683b      	ldr	r3, [r7, #0]
 81059d2:	681a      	ldr	r2, [r3, #0]
 81059d4:	2101      	movs	r1, #1
 81059d6:	69fb      	ldr	r3, [r7, #28]
 81059d8:	fa01 f303 	lsl.w	r3, r1, r3
 81059dc:	4013      	ands	r3, r2
 81059de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81059e0:	693b      	ldr	r3, [r7, #16]
 81059e2:	2b00      	cmp	r3, #0
 81059e4:	f000 8186 	beq.w	8105cf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81059e8:	683b      	ldr	r3, [r7, #0]
 81059ea:	685b      	ldr	r3, [r3, #4]
 81059ec:	f003 0303 	and.w	r3, r3, #3
 81059f0:	2b01      	cmp	r3, #1
 81059f2:	d005      	beq.n	8105a00 <HAL_GPIO_Init+0x44>
 81059f4:	683b      	ldr	r3, [r7, #0]
 81059f6:	685b      	ldr	r3, [r3, #4]
 81059f8:	f003 0303 	and.w	r3, r3, #3
 81059fc:	2b02      	cmp	r3, #2
 81059fe:	d130      	bne.n	8105a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	689b      	ldr	r3, [r3, #8]
 8105a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105a06:	69fb      	ldr	r3, [r7, #28]
 8105a08:	005b      	lsls	r3, r3, #1
 8105a0a:	2203      	movs	r2, #3
 8105a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8105a10:	43db      	mvns	r3, r3
 8105a12:	69ba      	ldr	r2, [r7, #24]
 8105a14:	4013      	ands	r3, r2
 8105a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105a18:	683b      	ldr	r3, [r7, #0]
 8105a1a:	68da      	ldr	r2, [r3, #12]
 8105a1c:	69fb      	ldr	r3, [r7, #28]
 8105a1e:	005b      	lsls	r3, r3, #1
 8105a20:	fa02 f303 	lsl.w	r3, r2, r3
 8105a24:	69ba      	ldr	r2, [r7, #24]
 8105a26:	4313      	orrs	r3, r2
 8105a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	69ba      	ldr	r2, [r7, #24]
 8105a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	685b      	ldr	r3, [r3, #4]
 8105a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105a36:	2201      	movs	r2, #1
 8105a38:	69fb      	ldr	r3, [r7, #28]
 8105a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8105a3e:	43db      	mvns	r3, r3
 8105a40:	69ba      	ldr	r2, [r7, #24]
 8105a42:	4013      	ands	r3, r2
 8105a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105a46:	683b      	ldr	r3, [r7, #0]
 8105a48:	685b      	ldr	r3, [r3, #4]
 8105a4a:	091b      	lsrs	r3, r3, #4
 8105a4c:	f003 0201 	and.w	r2, r3, #1
 8105a50:	69fb      	ldr	r3, [r7, #28]
 8105a52:	fa02 f303 	lsl.w	r3, r2, r3
 8105a56:	69ba      	ldr	r2, [r7, #24]
 8105a58:	4313      	orrs	r3, r2
 8105a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	69ba      	ldr	r2, [r7, #24]
 8105a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8105a62:	683b      	ldr	r3, [r7, #0]
 8105a64:	685b      	ldr	r3, [r3, #4]
 8105a66:	f003 0303 	and.w	r3, r3, #3
 8105a6a:	2b03      	cmp	r3, #3
 8105a6c:	d017      	beq.n	8105a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	68db      	ldr	r3, [r3, #12]
 8105a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105a74:	69fb      	ldr	r3, [r7, #28]
 8105a76:	005b      	lsls	r3, r3, #1
 8105a78:	2203      	movs	r2, #3
 8105a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8105a7e:	43db      	mvns	r3, r3
 8105a80:	69ba      	ldr	r2, [r7, #24]
 8105a82:	4013      	ands	r3, r2
 8105a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105a86:	683b      	ldr	r3, [r7, #0]
 8105a88:	689a      	ldr	r2, [r3, #8]
 8105a8a:	69fb      	ldr	r3, [r7, #28]
 8105a8c:	005b      	lsls	r3, r3, #1
 8105a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8105a92:	69ba      	ldr	r2, [r7, #24]
 8105a94:	4313      	orrs	r3, r2
 8105a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	69ba      	ldr	r2, [r7, #24]
 8105a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8105a9e:	683b      	ldr	r3, [r7, #0]
 8105aa0:	685b      	ldr	r3, [r3, #4]
 8105aa2:	f003 0303 	and.w	r3, r3, #3
 8105aa6:	2b02      	cmp	r3, #2
 8105aa8:	d123      	bne.n	8105af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105aaa:	69fb      	ldr	r3, [r7, #28]
 8105aac:	08da      	lsrs	r2, r3, #3
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	3208      	adds	r2, #8
 8105ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105ab8:	69fb      	ldr	r3, [r7, #28]
 8105aba:	f003 0307 	and.w	r3, r3, #7
 8105abe:	009b      	lsls	r3, r3, #2
 8105ac0:	220f      	movs	r2, #15
 8105ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8105ac6:	43db      	mvns	r3, r3
 8105ac8:	69ba      	ldr	r2, [r7, #24]
 8105aca:	4013      	ands	r3, r2
 8105acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105ace:	683b      	ldr	r3, [r7, #0]
 8105ad0:	691a      	ldr	r2, [r3, #16]
 8105ad2:	69fb      	ldr	r3, [r7, #28]
 8105ad4:	f003 0307 	and.w	r3, r3, #7
 8105ad8:	009b      	lsls	r3, r3, #2
 8105ada:	fa02 f303 	lsl.w	r3, r2, r3
 8105ade:	69ba      	ldr	r2, [r7, #24]
 8105ae0:	4313      	orrs	r3, r2
 8105ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105ae4:	69fb      	ldr	r3, [r7, #28]
 8105ae6:	08da      	lsrs	r2, r3, #3
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	3208      	adds	r2, #8
 8105aec:	69b9      	ldr	r1, [r7, #24]
 8105aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105af8:	69fb      	ldr	r3, [r7, #28]
 8105afa:	005b      	lsls	r3, r3, #1
 8105afc:	2203      	movs	r2, #3
 8105afe:	fa02 f303 	lsl.w	r3, r2, r3
 8105b02:	43db      	mvns	r3, r3
 8105b04:	69ba      	ldr	r2, [r7, #24]
 8105b06:	4013      	ands	r3, r2
 8105b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105b0a:	683b      	ldr	r3, [r7, #0]
 8105b0c:	685b      	ldr	r3, [r3, #4]
 8105b0e:	f003 0203 	and.w	r2, r3, #3
 8105b12:	69fb      	ldr	r3, [r7, #28]
 8105b14:	005b      	lsls	r3, r3, #1
 8105b16:	fa02 f303 	lsl.w	r3, r2, r3
 8105b1a:	69ba      	ldr	r2, [r7, #24]
 8105b1c:	4313      	orrs	r3, r2
 8105b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	69ba      	ldr	r2, [r7, #24]
 8105b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105b26:	683b      	ldr	r3, [r7, #0]
 8105b28:	685b      	ldr	r3, [r3, #4]
 8105b2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105b2e:	2b00      	cmp	r3, #0
 8105b30:	f000 80e0 	beq.w	8105cf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105b34:	4b2f      	ldr	r3, [pc, #188]	@ (8105bf4 <HAL_GPIO_Init+0x238>)
 8105b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8105bf4 <HAL_GPIO_Init+0x238>)
 8105b3c:	f043 0302 	orr.w	r3, r3, #2
 8105b40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105b44:	4b2b      	ldr	r3, [pc, #172]	@ (8105bf4 <HAL_GPIO_Init+0x238>)
 8105b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105b4a:	f003 0302 	and.w	r3, r3, #2
 8105b4e:	60fb      	str	r3, [r7, #12]
 8105b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105b52:	4a29      	ldr	r2, [pc, #164]	@ (8105bf8 <HAL_GPIO_Init+0x23c>)
 8105b54:	69fb      	ldr	r3, [r7, #28]
 8105b56:	089b      	lsrs	r3, r3, #2
 8105b58:	3302      	adds	r3, #2
 8105b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105b60:	69fb      	ldr	r3, [r7, #28]
 8105b62:	f003 0303 	and.w	r3, r3, #3
 8105b66:	009b      	lsls	r3, r3, #2
 8105b68:	220f      	movs	r2, #15
 8105b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8105b6e:	43db      	mvns	r3, r3
 8105b70:	69ba      	ldr	r2, [r7, #24]
 8105b72:	4013      	ands	r3, r2
 8105b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	4a20      	ldr	r2, [pc, #128]	@ (8105bfc <HAL_GPIO_Init+0x240>)
 8105b7a:	4293      	cmp	r3, r2
 8105b7c:	d052      	beq.n	8105c24 <HAL_GPIO_Init+0x268>
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	4a1f      	ldr	r2, [pc, #124]	@ (8105c00 <HAL_GPIO_Init+0x244>)
 8105b82:	4293      	cmp	r3, r2
 8105b84:	d031      	beq.n	8105bea <HAL_GPIO_Init+0x22e>
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	4a1e      	ldr	r2, [pc, #120]	@ (8105c04 <HAL_GPIO_Init+0x248>)
 8105b8a:	4293      	cmp	r3, r2
 8105b8c:	d02b      	beq.n	8105be6 <HAL_GPIO_Init+0x22a>
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	4a1d      	ldr	r2, [pc, #116]	@ (8105c08 <HAL_GPIO_Init+0x24c>)
 8105b92:	4293      	cmp	r3, r2
 8105b94:	d025      	beq.n	8105be2 <HAL_GPIO_Init+0x226>
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	4a1c      	ldr	r2, [pc, #112]	@ (8105c0c <HAL_GPIO_Init+0x250>)
 8105b9a:	4293      	cmp	r3, r2
 8105b9c:	d01f      	beq.n	8105bde <HAL_GPIO_Init+0x222>
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8105c10 <HAL_GPIO_Init+0x254>)
 8105ba2:	4293      	cmp	r3, r2
 8105ba4:	d019      	beq.n	8105bda <HAL_GPIO_Init+0x21e>
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8105c14 <HAL_GPIO_Init+0x258>)
 8105baa:	4293      	cmp	r3, r2
 8105bac:	d013      	beq.n	8105bd6 <HAL_GPIO_Init+0x21a>
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	4a19      	ldr	r2, [pc, #100]	@ (8105c18 <HAL_GPIO_Init+0x25c>)
 8105bb2:	4293      	cmp	r3, r2
 8105bb4:	d00d      	beq.n	8105bd2 <HAL_GPIO_Init+0x216>
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	4a18      	ldr	r2, [pc, #96]	@ (8105c1c <HAL_GPIO_Init+0x260>)
 8105bba:	4293      	cmp	r3, r2
 8105bbc:	d007      	beq.n	8105bce <HAL_GPIO_Init+0x212>
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	4a17      	ldr	r2, [pc, #92]	@ (8105c20 <HAL_GPIO_Init+0x264>)
 8105bc2:	4293      	cmp	r3, r2
 8105bc4:	d101      	bne.n	8105bca <HAL_GPIO_Init+0x20e>
 8105bc6:	2309      	movs	r3, #9
 8105bc8:	e02d      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bca:	230a      	movs	r3, #10
 8105bcc:	e02b      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bce:	2308      	movs	r3, #8
 8105bd0:	e029      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bd2:	2307      	movs	r3, #7
 8105bd4:	e027      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bd6:	2306      	movs	r3, #6
 8105bd8:	e025      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bda:	2305      	movs	r3, #5
 8105bdc:	e023      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bde:	2304      	movs	r3, #4
 8105be0:	e021      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105be2:	2303      	movs	r3, #3
 8105be4:	e01f      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105be6:	2302      	movs	r3, #2
 8105be8:	e01d      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bea:	2301      	movs	r3, #1
 8105bec:	e01b      	b.n	8105c26 <HAL_GPIO_Init+0x26a>
 8105bee:	bf00      	nop
 8105bf0:	580000c0 	.word	0x580000c0
 8105bf4:	58024400 	.word	0x58024400
 8105bf8:	58000400 	.word	0x58000400
 8105bfc:	58020000 	.word	0x58020000
 8105c00:	58020400 	.word	0x58020400
 8105c04:	58020800 	.word	0x58020800
 8105c08:	58020c00 	.word	0x58020c00
 8105c0c:	58021000 	.word	0x58021000
 8105c10:	58021400 	.word	0x58021400
 8105c14:	58021800 	.word	0x58021800
 8105c18:	58021c00 	.word	0x58021c00
 8105c1c:	58022000 	.word	0x58022000
 8105c20:	58022400 	.word	0x58022400
 8105c24:	2300      	movs	r3, #0
 8105c26:	69fa      	ldr	r2, [r7, #28]
 8105c28:	f002 0203 	and.w	r2, r2, #3
 8105c2c:	0092      	lsls	r2, r2, #2
 8105c2e:	4093      	lsls	r3, r2
 8105c30:	69ba      	ldr	r2, [r7, #24]
 8105c32:	4313      	orrs	r3, r2
 8105c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105c36:	4938      	ldr	r1, [pc, #224]	@ (8105d18 <HAL_GPIO_Init+0x35c>)
 8105c38:	69fb      	ldr	r3, [r7, #28]
 8105c3a:	089b      	lsrs	r3, r3, #2
 8105c3c:	3302      	adds	r3, #2
 8105c3e:	69ba      	ldr	r2, [r7, #24]
 8105c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105c48:	681b      	ldr	r3, [r3, #0]
 8105c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c4c:	693b      	ldr	r3, [r7, #16]
 8105c4e:	43db      	mvns	r3, r3
 8105c50:	69ba      	ldr	r2, [r7, #24]
 8105c52:	4013      	ands	r3, r2
 8105c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105c56:	683b      	ldr	r3, [r7, #0]
 8105c58:	685b      	ldr	r3, [r3, #4]
 8105c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105c5e:	2b00      	cmp	r3, #0
 8105c60:	d003      	beq.n	8105c6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105c62:	69ba      	ldr	r2, [r7, #24]
 8105c64:	693b      	ldr	r3, [r7, #16]
 8105c66:	4313      	orrs	r3, r2
 8105c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105c6e:	69bb      	ldr	r3, [r7, #24]
 8105c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105c76:	685b      	ldr	r3, [r3, #4]
 8105c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c7a:	693b      	ldr	r3, [r7, #16]
 8105c7c:	43db      	mvns	r3, r3
 8105c7e:	69ba      	ldr	r2, [r7, #24]
 8105c80:	4013      	ands	r3, r2
 8105c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105c84:	683b      	ldr	r3, [r7, #0]
 8105c86:	685b      	ldr	r3, [r3, #4]
 8105c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d003      	beq.n	8105c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105c90:	69ba      	ldr	r2, [r7, #24]
 8105c92:	693b      	ldr	r3, [r7, #16]
 8105c94:	4313      	orrs	r3, r2
 8105c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105c9c:	69bb      	ldr	r3, [r7, #24]
 8105c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105ca0:	697b      	ldr	r3, [r7, #20]
 8105ca2:	685b      	ldr	r3, [r3, #4]
 8105ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105ca6:	693b      	ldr	r3, [r7, #16]
 8105ca8:	43db      	mvns	r3, r3
 8105caa:	69ba      	ldr	r2, [r7, #24]
 8105cac:	4013      	ands	r3, r2
 8105cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105cb0:	683b      	ldr	r3, [r7, #0]
 8105cb2:	685b      	ldr	r3, [r3, #4]
 8105cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d003      	beq.n	8105cc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105cbc:	69ba      	ldr	r2, [r7, #24]
 8105cbe:	693b      	ldr	r3, [r7, #16]
 8105cc0:	4313      	orrs	r3, r2
 8105cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105cc4:	697b      	ldr	r3, [r7, #20]
 8105cc6:	69ba      	ldr	r2, [r7, #24]
 8105cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105cca:	697b      	ldr	r3, [r7, #20]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105cd0:	693b      	ldr	r3, [r7, #16]
 8105cd2:	43db      	mvns	r3, r3
 8105cd4:	69ba      	ldr	r2, [r7, #24]
 8105cd6:	4013      	ands	r3, r2
 8105cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8105cda:	683b      	ldr	r3, [r7, #0]
 8105cdc:	685b      	ldr	r3, [r3, #4]
 8105cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105ce2:	2b00      	cmp	r3, #0
 8105ce4:	d003      	beq.n	8105cee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105ce6:	69ba      	ldr	r2, [r7, #24]
 8105ce8:	693b      	ldr	r3, [r7, #16]
 8105cea:	4313      	orrs	r3, r2
 8105cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105cee:	697b      	ldr	r3, [r7, #20]
 8105cf0:	69ba      	ldr	r2, [r7, #24]
 8105cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105cf4:	69fb      	ldr	r3, [r7, #28]
 8105cf6:	3301      	adds	r3, #1
 8105cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105cfa:	683b      	ldr	r3, [r7, #0]
 8105cfc:	681a      	ldr	r2, [r3, #0]
 8105cfe:	69fb      	ldr	r3, [r7, #28]
 8105d00:	fa22 f303 	lsr.w	r3, r2, r3
 8105d04:	2b00      	cmp	r3, #0
 8105d06:	f47f ae63 	bne.w	81059d0 <HAL_GPIO_Init+0x14>
  }
}
 8105d0a:	bf00      	nop
 8105d0c:	bf00      	nop
 8105d0e:	3724      	adds	r7, #36	@ 0x24
 8105d10:	46bd      	mov	sp, r7
 8105d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d16:	4770      	bx	lr
 8105d18:	58000400 	.word	0x58000400

08105d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8105d1c:	b480      	push	{r7}
 8105d1e:	b085      	sub	sp, #20
 8105d20:	af00      	add	r7, sp, #0
 8105d22:	6078      	str	r0, [r7, #4]
 8105d24:	460b      	mov	r3, r1
 8105d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	691a      	ldr	r2, [r3, #16]
 8105d2c:	887b      	ldrh	r3, [r7, #2]
 8105d2e:	4013      	ands	r3, r2
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	d002      	beq.n	8105d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8105d34:	2301      	movs	r3, #1
 8105d36:	73fb      	strb	r3, [r7, #15]
 8105d38:	e001      	b.n	8105d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8105d3a:	2300      	movs	r3, #0
 8105d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8105d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8105d40:	4618      	mov	r0, r3
 8105d42:	3714      	adds	r7, #20
 8105d44:	46bd      	mov	sp, r7
 8105d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d4a:	4770      	bx	lr

08105d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105d4c:	b480      	push	{r7}
 8105d4e:	b083      	sub	sp, #12
 8105d50:	af00      	add	r7, sp, #0
 8105d52:	6078      	str	r0, [r7, #4]
 8105d54:	460b      	mov	r3, r1
 8105d56:	807b      	strh	r3, [r7, #2]
 8105d58:	4613      	mov	r3, r2
 8105d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105d5c:	787b      	ldrb	r3, [r7, #1]
 8105d5e:	2b00      	cmp	r3, #0
 8105d60:	d003      	beq.n	8105d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105d62:	887a      	ldrh	r2, [r7, #2]
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105d68:	e003      	b.n	8105d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105d6a:	887b      	ldrh	r3, [r7, #2]
 8105d6c:	041a      	lsls	r2, r3, #16
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	619a      	str	r2, [r3, #24]
}
 8105d72:	bf00      	nop
 8105d74:	370c      	adds	r7, #12
 8105d76:	46bd      	mov	sp, r7
 8105d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d7c:	4770      	bx	lr

08105d7e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8105d7e:	b580      	push	{r7, lr}
 8105d80:	b082      	sub	sp, #8
 8105d82:	af00      	add	r7, sp, #0
 8105d84:	4603      	mov	r3, r0
 8105d86:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8105d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105d8c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8105d90:	88fb      	ldrh	r3, [r7, #6]
 8105d92:	4013      	ands	r3, r2
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d008      	beq.n	8105daa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8105d98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105d9c:	88fb      	ldrh	r3, [r7, #6]
 8105d9e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8105da2:	88fb      	ldrh	r3, [r7, #6]
 8105da4:	4618      	mov	r0, r3
 8105da6:	f7ff f805 	bl	8104db4 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8105daa:	bf00      	nop
 8105dac:	3708      	adds	r7, #8
 8105dae:	46bd      	mov	sp, r7
 8105db0:	bd80      	pop	{r7, pc}
	...

08105db4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105db4:	b480      	push	{r7}
 8105db6:	b083      	sub	sp, #12
 8105db8:	af00      	add	r7, sp, #0
 8105dba:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105dbc:	4b05      	ldr	r3, [pc, #20]	@ (8105dd4 <HAL_HSEM_ActivateNotification+0x20>)
 8105dbe:	681a      	ldr	r2, [r3, #0]
 8105dc0:	4904      	ldr	r1, [pc, #16]	@ (8105dd4 <HAL_HSEM_ActivateNotification+0x20>)
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	4313      	orrs	r3, r2
 8105dc6:	600b      	str	r3, [r1, #0]
#endif
}
 8105dc8:	bf00      	nop
 8105dca:	370c      	adds	r7, #12
 8105dcc:	46bd      	mov	sp, r7
 8105dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dd2:	4770      	bx	lr
 8105dd4:	58026510 	.word	0x58026510

08105dd8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105dd8:	b580      	push	{r7, lr}
 8105dda:	b084      	sub	sp, #16
 8105ddc:	af00      	add	r7, sp, #0
 8105dde:	60f8      	str	r0, [r7, #12]
 8105de0:	460b      	mov	r3, r1
 8105de2:	607a      	str	r2, [r7, #4]
 8105de4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105de6:	4b37      	ldr	r3, [pc, #220]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	f023 0201 	bic.w	r2, r3, #1
 8105dee:	4935      	ldr	r1, [pc, #212]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105df0:	68fb      	ldr	r3, [r7, #12]
 8105df2:	4313      	orrs	r3, r2
 8105df4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	2b00      	cmp	r3, #0
 8105dfa:	d123      	bne.n	8105e44 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105dfc:	f7ff fdca 	bl	8105994 <HAL_GetCurrentCPUID>
 8105e00:	4603      	mov	r3, r0
 8105e02:	2b03      	cmp	r3, #3
 8105e04:	d158      	bne.n	8105eb8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105e06:	4b2f      	ldr	r3, [pc, #188]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105e08:	691b      	ldr	r3, [r3, #16]
 8105e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105e0c:	f023 0301 	bic.w	r3, r3, #1
 8105e10:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e12:	4b2d      	ldr	r3, [pc, #180]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e14:	691b      	ldr	r3, [r3, #16]
 8105e16:	4a2c      	ldr	r2, [pc, #176]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e18:	f043 0304 	orr.w	r3, r3, #4
 8105e1c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105e1e:	f3bf 8f4f 	dsb	sy
}
 8105e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105e24:	f3bf 8f6f 	isb	sy
}
 8105e28:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105e2a:	7afb      	ldrb	r3, [r7, #11]
 8105e2c:	2b01      	cmp	r3, #1
 8105e2e:	d101      	bne.n	8105e34 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105e30:	bf30      	wfi
 8105e32:	e000      	b.n	8105e36 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105e34:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e36:	4b24      	ldr	r3, [pc, #144]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e38:	691b      	ldr	r3, [r3, #16]
 8105e3a:	4a23      	ldr	r2, [pc, #140]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e3c:	f023 0304 	bic.w	r3, r3, #4
 8105e40:	6113      	str	r3, [r2, #16]
 8105e42:	e03c      	b.n	8105ebe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	2b01      	cmp	r3, #1
 8105e48:	d123      	bne.n	8105e92 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105e4a:	f7ff fda3 	bl	8105994 <HAL_GetCurrentCPUID>
 8105e4e:	4603      	mov	r3, r0
 8105e50:	2b01      	cmp	r3, #1
 8105e52:	d133      	bne.n	8105ebc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105e54:	4b1b      	ldr	r3, [pc, #108]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105e56:	695b      	ldr	r3, [r3, #20]
 8105e58:	4a1a      	ldr	r2, [pc, #104]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105e5a:	f023 0302 	bic.w	r3, r3, #2
 8105e5e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e60:	4b19      	ldr	r3, [pc, #100]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e62:	691b      	ldr	r3, [r3, #16]
 8105e64:	4a18      	ldr	r2, [pc, #96]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e66:	f043 0304 	orr.w	r3, r3, #4
 8105e6a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105e6c:	f3bf 8f4f 	dsb	sy
}
 8105e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105e72:	f3bf 8f6f 	isb	sy
}
 8105e76:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105e78:	7afb      	ldrb	r3, [r7, #11]
 8105e7a:	2b01      	cmp	r3, #1
 8105e7c:	d101      	bne.n	8105e82 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105e7e:	bf30      	wfi
 8105e80:	e000      	b.n	8105e84 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105e82:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e84:	4b10      	ldr	r3, [pc, #64]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e86:	691b      	ldr	r3, [r3, #16]
 8105e88:	4a0f      	ldr	r2, [pc, #60]	@ (8105ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105e8a:	f023 0304 	bic.w	r3, r3, #4
 8105e8e:	6113      	str	r3, [r2, #16]
 8105e90:	e015      	b.n	8105ebe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105e92:	f7ff fd7f 	bl	8105994 <HAL_GetCurrentCPUID>
 8105e96:	4603      	mov	r3, r0
 8105e98:	2b03      	cmp	r3, #3
 8105e9a:	d106      	bne.n	8105eaa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105e9c:	4b09      	ldr	r3, [pc, #36]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105e9e:	691b      	ldr	r3, [r3, #16]
 8105ea0:	4a08      	ldr	r2, [pc, #32]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ea2:	f023 0304 	bic.w	r3, r3, #4
 8105ea6:	6113      	str	r3, [r2, #16]
 8105ea8:	e009      	b.n	8105ebe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105eaa:	4b06      	ldr	r3, [pc, #24]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105eac:	695b      	ldr	r3, [r3, #20]
 8105eae:	4a05      	ldr	r2, [pc, #20]	@ (8105ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105eb0:	f023 0304 	bic.w	r3, r3, #4
 8105eb4:	6153      	str	r3, [r2, #20]
 8105eb6:	e002      	b.n	8105ebe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105eb8:	bf00      	nop
 8105eba:	e000      	b.n	8105ebe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105ebc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105ebe:	3710      	adds	r7, #16
 8105ec0:	46bd      	mov	sp, r7
 8105ec2:	bd80      	pop	{r7, pc}
 8105ec4:	58024800 	.word	0x58024800
 8105ec8:	e000ed00 	.word	0xe000ed00

08105ecc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105ecc:	b580      	push	{r7, lr}
 8105ece:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105ed0:	f7ff fd60 	bl	8105994 <HAL_GetCurrentCPUID>
 8105ed4:	4603      	mov	r3, r0
 8105ed6:	2b03      	cmp	r3, #3
 8105ed8:	d101      	bne.n	8105ede <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105eda:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105edc:	e001      	b.n	8105ee2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105ede:	bf40      	sev
    __WFE ();
 8105ee0:	bf20      	wfe
}
 8105ee2:	bf00      	nop
 8105ee4:	bd80      	pop	{r7, pc}
	...

08105ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105ee8:	b480      	push	{r7}
 8105eea:	b089      	sub	sp, #36	@ 0x24
 8105eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105eee:	4bb3      	ldr	r3, [pc, #716]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ef0:	691b      	ldr	r3, [r3, #16]
 8105ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105ef6:	2b18      	cmp	r3, #24
 8105ef8:	f200 8155 	bhi.w	81061a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8105efc:	a201      	add	r2, pc, #4	@ (adr r2, 8105f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f02:	bf00      	nop
 8105f04:	08105f69 	.word	0x08105f69
 8105f08:	081061a7 	.word	0x081061a7
 8105f0c:	081061a7 	.word	0x081061a7
 8105f10:	081061a7 	.word	0x081061a7
 8105f14:	081061a7 	.word	0x081061a7
 8105f18:	081061a7 	.word	0x081061a7
 8105f1c:	081061a7 	.word	0x081061a7
 8105f20:	081061a7 	.word	0x081061a7
 8105f24:	08105f8f 	.word	0x08105f8f
 8105f28:	081061a7 	.word	0x081061a7
 8105f2c:	081061a7 	.word	0x081061a7
 8105f30:	081061a7 	.word	0x081061a7
 8105f34:	081061a7 	.word	0x081061a7
 8105f38:	081061a7 	.word	0x081061a7
 8105f3c:	081061a7 	.word	0x081061a7
 8105f40:	081061a7 	.word	0x081061a7
 8105f44:	08105f95 	.word	0x08105f95
 8105f48:	081061a7 	.word	0x081061a7
 8105f4c:	081061a7 	.word	0x081061a7
 8105f50:	081061a7 	.word	0x081061a7
 8105f54:	081061a7 	.word	0x081061a7
 8105f58:	081061a7 	.word	0x081061a7
 8105f5c:	081061a7 	.word	0x081061a7
 8105f60:	081061a7 	.word	0x081061a7
 8105f64:	08105f9b 	.word	0x08105f9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f68:	4b94      	ldr	r3, [pc, #592]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	f003 0320 	and.w	r3, r3, #32
 8105f70:	2b00      	cmp	r3, #0
 8105f72:	d009      	beq.n	8105f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f74:	4b91      	ldr	r3, [pc, #580]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	08db      	lsrs	r3, r3, #3
 8105f7a:	f003 0303 	and.w	r3, r3, #3
 8105f7e:	4a90      	ldr	r2, [pc, #576]	@ (81061c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105f80:	fa22 f303 	lsr.w	r3, r2, r3
 8105f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105f86:	e111      	b.n	81061ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105f88:	4b8d      	ldr	r3, [pc, #564]	@ (81061c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105f8a:	61bb      	str	r3, [r7, #24]
      break;
 8105f8c:	e10e      	b.n	81061ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105f8e:	4b8d      	ldr	r3, [pc, #564]	@ (81061c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105f90:	61bb      	str	r3, [r7, #24]
      break;
 8105f92:	e10b      	b.n	81061ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105f94:	4b8c      	ldr	r3, [pc, #560]	@ (81061c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105f96:	61bb      	str	r3, [r7, #24]
      break;
 8105f98:	e108      	b.n	81061ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105f9a:	4b88      	ldr	r3, [pc, #544]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f9e:	f003 0303 	and.w	r3, r3, #3
 8105fa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105fa4:	4b85      	ldr	r3, [pc, #532]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105fa8:	091b      	lsrs	r3, r3, #4
 8105faa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105fae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105fb0:	4b82      	ldr	r3, [pc, #520]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105fb4:	f003 0301 	and.w	r3, r3, #1
 8105fb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105fba:	4b80      	ldr	r3, [pc, #512]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105fbe:	08db      	lsrs	r3, r3, #3
 8105fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105fc4:	68fa      	ldr	r2, [r7, #12]
 8105fc6:	fb02 f303 	mul.w	r3, r2, r3
 8105fca:	ee07 3a90 	vmov	s15, r3
 8105fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105fd6:	693b      	ldr	r3, [r7, #16]
 8105fd8:	2b00      	cmp	r3, #0
 8105fda:	f000 80e1 	beq.w	81061a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105fde:	697b      	ldr	r3, [r7, #20]
 8105fe0:	2b02      	cmp	r3, #2
 8105fe2:	f000 8083 	beq.w	81060ec <HAL_RCC_GetSysClockFreq+0x204>
 8105fe6:	697b      	ldr	r3, [r7, #20]
 8105fe8:	2b02      	cmp	r3, #2
 8105fea:	f200 80a1 	bhi.w	8106130 <HAL_RCC_GetSysClockFreq+0x248>
 8105fee:	697b      	ldr	r3, [r7, #20]
 8105ff0:	2b00      	cmp	r3, #0
 8105ff2:	d003      	beq.n	8105ffc <HAL_RCC_GetSysClockFreq+0x114>
 8105ff4:	697b      	ldr	r3, [r7, #20]
 8105ff6:	2b01      	cmp	r3, #1
 8105ff8:	d056      	beq.n	81060a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105ffa:	e099      	b.n	8106130 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ffc:	4b6f      	ldr	r3, [pc, #444]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	f003 0320 	and.w	r3, r3, #32
 8106004:	2b00      	cmp	r3, #0
 8106006:	d02d      	beq.n	8106064 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106008:	4b6c      	ldr	r3, [pc, #432]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	08db      	lsrs	r3, r3, #3
 810600e:	f003 0303 	and.w	r3, r3, #3
 8106012:	4a6b      	ldr	r2, [pc, #428]	@ (81061c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106014:	fa22 f303 	lsr.w	r3, r2, r3
 8106018:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810601a:	687b      	ldr	r3, [r7, #4]
 810601c:	ee07 3a90 	vmov	s15, r3
 8106020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106024:	693b      	ldr	r3, [r7, #16]
 8106026:	ee07 3a90 	vmov	s15, r3
 810602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810602e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106032:	4b62      	ldr	r3, [pc, #392]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810603a:	ee07 3a90 	vmov	s15, r3
 810603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106042:	ed97 6a02 	vldr	s12, [r7, #8]
 8106046:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81061cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810604a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810604e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810605a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810605e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106062:	e087      	b.n	8106174 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106064:	693b      	ldr	r3, [r7, #16]
 8106066:	ee07 3a90 	vmov	s15, r3
 810606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810606e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81061d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106076:	4b51      	ldr	r3, [pc, #324]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810607e:	ee07 3a90 	vmov	s15, r3
 8106082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106086:	ed97 6a02 	vldr	s12, [r7, #8]
 810608a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81061cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810608e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810609a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810609e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81060a6:	e065      	b.n	8106174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060a8:	693b      	ldr	r3, [r7, #16]
 81060aa:	ee07 3a90 	vmov	s15, r3
 81060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81061d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81060b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060ba:	4b40      	ldr	r3, [pc, #256]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81060be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060c2:	ee07 3a90 	vmov	s15, r3
 81060c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81060ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81061cc <HAL_RCC_GetSysClockFreq+0x2e4>
 81060d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81060ea:	e043      	b.n	8106174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060ec:	693b      	ldr	r3, [r7, #16]
 81060ee:	ee07 3a90 	vmov	s15, r3
 81060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81061d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81060fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060fe:	4b2f      	ldr	r3, [pc, #188]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106106:	ee07 3a90 	vmov	s15, r3
 810610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810610e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106112:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81061cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8106116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810611e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810612a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810612e:	e021      	b.n	8106174 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106130:	693b      	ldr	r3, [r7, #16]
 8106132:	ee07 3a90 	vmov	s15, r3
 8106136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810613a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81061d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106142:	4b1e      	ldr	r3, [pc, #120]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810614a:	ee07 3a90 	vmov	s15, r3
 810614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106152:	ed97 6a02 	vldr	s12, [r7, #8]
 8106156:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81061cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810616e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106172:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106174:	4b11      	ldr	r3, [pc, #68]	@ (81061bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106178:	0a5b      	lsrs	r3, r3, #9
 810617a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810617e:	3301      	adds	r3, #1
 8106180:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106182:	683b      	ldr	r3, [r7, #0]
 8106184:	ee07 3a90 	vmov	s15, r3
 8106188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810618c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106198:	ee17 3a90 	vmov	r3, s15
 810619c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810619e:	e005      	b.n	81061ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81061a0:	2300      	movs	r3, #0
 81061a2:	61bb      	str	r3, [r7, #24]
      break;
 81061a4:	e002      	b.n	81061ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81061a6:	4b07      	ldr	r3, [pc, #28]	@ (81061c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81061a8:	61bb      	str	r3, [r7, #24]
      break;
 81061aa:	bf00      	nop
  }

  return sysclockfreq;
 81061ac:	69bb      	ldr	r3, [r7, #24]
}
 81061ae:	4618      	mov	r0, r3
 81061b0:	3724      	adds	r7, #36	@ 0x24
 81061b2:	46bd      	mov	sp, r7
 81061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061b8:	4770      	bx	lr
 81061ba:	bf00      	nop
 81061bc:	58024400 	.word	0x58024400
 81061c0:	03d09000 	.word	0x03d09000
 81061c4:	003d0900 	.word	0x003d0900
 81061c8:	007a1200 	.word	0x007a1200
 81061cc:	46000000 	.word	0x46000000
 81061d0:	4c742400 	.word	0x4c742400
 81061d4:	4a742400 	.word	0x4a742400
 81061d8:	4af42400 	.word	0x4af42400

081061dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81061dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81061e0:	b0cc      	sub	sp, #304	@ 0x130
 81061e2:	af00      	add	r7, sp, #0
 81061e4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81061e8:	2300      	movs	r3, #0
 81061ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81061ee:	2300      	movs	r3, #0
 81061f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81061f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106200:	2500      	movs	r5, #0
 8106202:	ea54 0305 	orrs.w	r3, r4, r5
 8106206:	d049      	beq.n	810629c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810620c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810620e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106212:	d02f      	beq.n	8106274 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106214:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106218:	d828      	bhi.n	810626c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810621a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810621e:	d01a      	beq.n	8106256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106224:	d822      	bhi.n	810626c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106226:	2b00      	cmp	r3, #0
 8106228:	d003      	beq.n	8106232 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810622a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810622e:	d007      	beq.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106230:	e01c      	b.n	810626c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106232:	4bb8      	ldr	r3, [pc, #736]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106236:	4ab7      	ldr	r2, [pc, #732]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810623c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810623e:	e01a      	b.n	8106276 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106244:	3308      	adds	r3, #8
 8106246:	2102      	movs	r1, #2
 8106248:	4618      	mov	r0, r3
 810624a:	f001 fa11 	bl	8107670 <RCCEx_PLL2_Config>
 810624e:	4603      	mov	r3, r0
 8106250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106254:	e00f      	b.n	8106276 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810625a:	3328      	adds	r3, #40	@ 0x28
 810625c:	2102      	movs	r1, #2
 810625e:	4618      	mov	r0, r3
 8106260:	f001 fab8 	bl	81077d4 <RCCEx_PLL3_Config>
 8106264:	4603      	mov	r3, r0
 8106266:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810626a:	e004      	b.n	8106276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810626c:	2301      	movs	r3, #1
 810626e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106272:	e000      	b.n	8106276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810627a:	2b00      	cmp	r3, #0
 810627c:	d10a      	bne.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810627e:	4ba5      	ldr	r3, [pc, #660]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106282:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810628a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810628c:	4aa1      	ldr	r2, [pc, #644]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810628e:	430b      	orrs	r3, r1
 8106290:	6513      	str	r3, [r2, #80]	@ 0x50
 8106292:	e003      	b.n	810629c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106294:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106298:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810629c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81062a8:	f04f 0900 	mov.w	r9, #0
 81062ac:	ea58 0309 	orrs.w	r3, r8, r9
 81062b0:	d047      	beq.n	8106342 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81062b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81062b8:	2b04      	cmp	r3, #4
 81062ba:	d82a      	bhi.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81062bc:	a201      	add	r2, pc, #4	@ (adr r2, 81062c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062c2:	bf00      	nop
 81062c4:	081062d9 	.word	0x081062d9
 81062c8:	081062e7 	.word	0x081062e7
 81062cc:	081062fd 	.word	0x081062fd
 81062d0:	0810631b 	.word	0x0810631b
 81062d4:	0810631b 	.word	0x0810631b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81062d8:	4b8e      	ldr	r3, [pc, #568]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062dc:	4a8d      	ldr	r2, [pc, #564]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81062e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81062e4:	e01a      	b.n	810631c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81062e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062ea:	3308      	adds	r3, #8
 81062ec:	2100      	movs	r1, #0
 81062ee:	4618      	mov	r0, r3
 81062f0:	f001 f9be 	bl	8107670 <RCCEx_PLL2_Config>
 81062f4:	4603      	mov	r3, r0
 81062f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81062fa:	e00f      	b.n	810631c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81062fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106300:	3328      	adds	r3, #40	@ 0x28
 8106302:	2100      	movs	r1, #0
 8106304:	4618      	mov	r0, r3
 8106306:	f001 fa65 	bl	81077d4 <RCCEx_PLL3_Config>
 810630a:	4603      	mov	r3, r0
 810630c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106310:	e004      	b.n	810631c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106312:	2301      	movs	r3, #1
 8106314:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106318:	e000      	b.n	810631c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810631a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810631c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106320:	2b00      	cmp	r3, #0
 8106322:	d10a      	bne.n	810633a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106324:	4b7b      	ldr	r3, [pc, #492]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106328:	f023 0107 	bic.w	r1, r3, #7
 810632c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106332:	4a78      	ldr	r2, [pc, #480]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106334:	430b      	orrs	r3, r1
 8106336:	6513      	str	r3, [r2, #80]	@ 0x50
 8106338:	e003      	b.n	8106342 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810633a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810633e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106346:	e9d3 2300 	ldrd	r2, r3, [r3]
 810634a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810634e:	f04f 0b00 	mov.w	fp, #0
 8106352:	ea5a 030b 	orrs.w	r3, sl, fp
 8106356:	d04c      	beq.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8106358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810635c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106362:	d030      	beq.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106368:	d829      	bhi.n	81063be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810636a:	2bc0      	cmp	r3, #192	@ 0xc0
 810636c:	d02d      	beq.n	81063ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810636e:	2bc0      	cmp	r3, #192	@ 0xc0
 8106370:	d825      	bhi.n	81063be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106372:	2b80      	cmp	r3, #128	@ 0x80
 8106374:	d018      	beq.n	81063a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8106376:	2b80      	cmp	r3, #128	@ 0x80
 8106378:	d821      	bhi.n	81063be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810637a:	2b00      	cmp	r3, #0
 810637c:	d002      	beq.n	8106384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810637e:	2b40      	cmp	r3, #64	@ 0x40
 8106380:	d007      	beq.n	8106392 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106382:	e01c      	b.n	81063be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106384:	4b63      	ldr	r3, [pc, #396]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106388:	4a62      	ldr	r2, [pc, #392]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810638a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810638e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106390:	e01c      	b.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106396:	3308      	adds	r3, #8
 8106398:	2100      	movs	r1, #0
 810639a:	4618      	mov	r0, r3
 810639c:	f001 f968 	bl	8107670 <RCCEx_PLL2_Config>
 81063a0:	4603      	mov	r3, r0
 81063a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063a6:	e011      	b.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81063a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063ac:	3328      	adds	r3, #40	@ 0x28
 81063ae:	2100      	movs	r1, #0
 81063b0:	4618      	mov	r0, r3
 81063b2:	f001 fa0f 	bl	81077d4 <RCCEx_PLL3_Config>
 81063b6:	4603      	mov	r3, r0
 81063b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063bc:	e006      	b.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81063be:	2301      	movs	r3, #1
 81063c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81063c4:	e002      	b.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81063c6:	bf00      	nop
 81063c8:	e000      	b.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81063ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81063d0:	2b00      	cmp	r3, #0
 81063d2:	d10a      	bne.n	81063ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81063d4:	4b4f      	ldr	r3, [pc, #316]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81063d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81063dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81063e2:	4a4c      	ldr	r2, [pc, #304]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063e4:	430b      	orrs	r3, r1
 81063e6:	6513      	str	r3, [r2, #80]	@ 0x50
 81063e8:	e003      	b.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81063ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81063f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81063fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8106402:	2300      	movs	r3, #0
 8106404:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8106408:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810640c:	460b      	mov	r3, r1
 810640e:	4313      	orrs	r3, r2
 8106410:	d053      	beq.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810641a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810641e:	d035      	beq.n	810648c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106420:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106424:	d82e      	bhi.n	8106484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106426:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810642a:	d031      	beq.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810642c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106430:	d828      	bhi.n	8106484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106436:	d01a      	beq.n	810646e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810643c:	d822      	bhi.n	8106484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810643e:	2b00      	cmp	r3, #0
 8106440:	d003      	beq.n	810644a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106446:	d007      	beq.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8106448:	e01c      	b.n	8106484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810644a:	4b32      	ldr	r3, [pc, #200]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810644e:	4a31      	ldr	r2, [pc, #196]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106456:	e01c      	b.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810645c:	3308      	adds	r3, #8
 810645e:	2100      	movs	r1, #0
 8106460:	4618      	mov	r0, r3
 8106462:	f001 f905 	bl	8107670 <RCCEx_PLL2_Config>
 8106466:	4603      	mov	r3, r0
 8106468:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810646c:	e011      	b.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106472:	3328      	adds	r3, #40	@ 0x28
 8106474:	2100      	movs	r1, #0
 8106476:	4618      	mov	r0, r3
 8106478:	f001 f9ac 	bl	81077d4 <RCCEx_PLL3_Config>
 810647c:	4603      	mov	r3, r0
 810647e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106482:	e006      	b.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106484:	2301      	movs	r3, #1
 8106486:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810648a:	e002      	b.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810648c:	bf00      	nop
 810648e:	e000      	b.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106492:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106496:	2b00      	cmp	r3, #0
 8106498:	d10b      	bne.n	81064b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810649a:	4b1e      	ldr	r3, [pc, #120]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810649c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810649e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81064a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81064aa:	4a1a      	ldr	r2, [pc, #104]	@ (8106514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064ac:	430b      	orrs	r3, r1
 81064ae:	6593      	str	r3, [r2, #88]	@ 0x58
 81064b0:	e003      	b.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81064b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81064ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81064c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81064ca:	2300      	movs	r3, #0
 81064cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81064d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81064d4:	460b      	mov	r3, r1
 81064d6:	4313      	orrs	r3, r2
 81064d8:	d056      	beq.n	8106588 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81064da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81064e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81064e6:	d038      	beq.n	810655a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81064e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81064ec:	d831      	bhi.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81064ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81064f2:	d034      	beq.n	810655e <HAL_RCCEx_PeriphCLKConfig+0x382>
 81064f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81064f8:	d82b      	bhi.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81064fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81064fe:	d01d      	beq.n	810653c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106504:	d825      	bhi.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106506:	2b00      	cmp	r3, #0
 8106508:	d006      	beq.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810650a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810650e:	d00a      	beq.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106510:	e01f      	b.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106512:	bf00      	nop
 8106514:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106518:	4ba2      	ldr	r3, [pc, #648]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810651c:	4aa1      	ldr	r2, [pc, #644]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810651e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106524:	e01c      	b.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810652a:	3308      	adds	r3, #8
 810652c:	2100      	movs	r1, #0
 810652e:	4618      	mov	r0, r3
 8106530:	f001 f89e 	bl	8107670 <RCCEx_PLL2_Config>
 8106534:	4603      	mov	r3, r0
 8106536:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810653a:	e011      	b.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810653c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106540:	3328      	adds	r3, #40	@ 0x28
 8106542:	2100      	movs	r1, #0
 8106544:	4618      	mov	r0, r3
 8106546:	f001 f945 	bl	81077d4 <RCCEx_PLL3_Config>
 810654a:	4603      	mov	r3, r0
 810654c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106550:	e006      	b.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106552:	2301      	movs	r3, #1
 8106554:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106558:	e002      	b.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810655a:	bf00      	nop
 810655c:	e000      	b.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810655e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106560:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106564:	2b00      	cmp	r3, #0
 8106566:	d10b      	bne.n	8106580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106568:	4b8e      	ldr	r3, [pc, #568]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810656a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810656c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8106570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106578:	4a8a      	ldr	r2, [pc, #552]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810657a:	430b      	orrs	r3, r1
 810657c:	6593      	str	r3, [r2, #88]	@ 0x58
 810657e:	e003      	b.n	8106588 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106580:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106584:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106590:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8106594:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8106598:	2300      	movs	r3, #0
 810659a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810659e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81065a2:	460b      	mov	r3, r1
 81065a4:	4313      	orrs	r3, r2
 81065a6:	d03a      	beq.n	810661e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81065a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81065ae:	2b30      	cmp	r3, #48	@ 0x30
 81065b0:	d01f      	beq.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81065b2:	2b30      	cmp	r3, #48	@ 0x30
 81065b4:	d819      	bhi.n	81065ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81065b6:	2b20      	cmp	r3, #32
 81065b8:	d00c      	beq.n	81065d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81065ba:	2b20      	cmp	r3, #32
 81065bc:	d815      	bhi.n	81065ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81065be:	2b00      	cmp	r3, #0
 81065c0:	d019      	beq.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81065c2:	2b10      	cmp	r3, #16
 81065c4:	d111      	bne.n	81065ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065c6:	4b77      	ldr	r3, [pc, #476]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065ca:	4a76      	ldr	r2, [pc, #472]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81065d2:	e011      	b.n	81065f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81065d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065d8:	3308      	adds	r3, #8
 81065da:	2102      	movs	r1, #2
 81065dc:	4618      	mov	r0, r3
 81065de:	f001 f847 	bl	8107670 <RCCEx_PLL2_Config>
 81065e2:	4603      	mov	r3, r0
 81065e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81065e8:	e006      	b.n	81065f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81065ea:	2301      	movs	r3, #1
 81065ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81065f0:	e002      	b.n	81065f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81065f2:	bf00      	nop
 81065f4:	e000      	b.n	81065f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81065f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065fc:	2b00      	cmp	r3, #0
 81065fe:	d10a      	bne.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106600:	4b68      	ldr	r3, [pc, #416]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106604:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810660c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810660e:	4a65      	ldr	r2, [pc, #404]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106610:	430b      	orrs	r3, r1
 8106612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106614:	e003      	b.n	810661e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106616:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810661a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810661e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106626:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810662a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810662e:	2300      	movs	r3, #0
 8106630:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106634:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106638:	460b      	mov	r3, r1
 810663a:	4313      	orrs	r3, r2
 810663c:	d051      	beq.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810663e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106648:	d035      	beq.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810664a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810664e:	d82e      	bhi.n	81066ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106650:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106654:	d031      	beq.n	81066ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8106656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810665a:	d828      	bhi.n	81066ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810665c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106660:	d01a      	beq.n	8106698 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106666:	d822      	bhi.n	81066ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106668:	2b00      	cmp	r3, #0
 810666a:	d003      	beq.n	8106674 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810666c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106670:	d007      	beq.n	8106682 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106672:	e01c      	b.n	81066ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106674:	4b4b      	ldr	r3, [pc, #300]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106678:	4a4a      	ldr	r2, [pc, #296]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810667a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810667e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106680:	e01c      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106686:	3308      	adds	r3, #8
 8106688:	2100      	movs	r1, #0
 810668a:	4618      	mov	r0, r3
 810668c:	f000 fff0 	bl	8107670 <RCCEx_PLL2_Config>
 8106690:	4603      	mov	r3, r0
 8106692:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106696:	e011      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810669c:	3328      	adds	r3, #40	@ 0x28
 810669e:	2100      	movs	r1, #0
 81066a0:	4618      	mov	r0, r3
 81066a2:	f001 f897 	bl	81077d4 <RCCEx_PLL3_Config>
 81066a6:	4603      	mov	r3, r0
 81066a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81066ac:	e006      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066ae:	2301      	movs	r3, #1
 81066b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81066b4:	e002      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81066b6:	bf00      	nop
 81066b8:	e000      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81066ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	d10a      	bne.n	81066da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81066c4:	4b37      	ldr	r3, [pc, #220]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81066c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81066cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81066d2:	4a34      	ldr	r2, [pc, #208]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066d4:	430b      	orrs	r3, r1
 81066d6:	6513      	str	r3, [r2, #80]	@ 0x50
 81066d8:	e003      	b.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81066e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81066ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81066f2:	2300      	movs	r3, #0
 81066f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81066f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81066fc:	460b      	mov	r3, r1
 81066fe:	4313      	orrs	r3, r2
 8106700:	d056      	beq.n	81067b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810670c:	d033      	beq.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810670e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106712:	d82c      	bhi.n	810676e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106714:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106718:	d02f      	beq.n	810677a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810671a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810671e:	d826      	bhi.n	810676e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106724:	d02b      	beq.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106726:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810672a:	d820      	bhi.n	810676e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810672c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106730:	d012      	beq.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106736:	d81a      	bhi.n	810676e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106738:	2b00      	cmp	r3, #0
 810673a:	d022      	beq.n	8106782 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810673c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106740:	d115      	bne.n	810676e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106746:	3308      	adds	r3, #8
 8106748:	2101      	movs	r1, #1
 810674a:	4618      	mov	r0, r3
 810674c:	f000 ff90 	bl	8107670 <RCCEx_PLL2_Config>
 8106750:	4603      	mov	r3, r0
 8106752:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106756:	e015      	b.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810675c:	3328      	adds	r3, #40	@ 0x28
 810675e:	2101      	movs	r1, #1
 8106760:	4618      	mov	r0, r3
 8106762:	f001 f837 	bl	81077d4 <RCCEx_PLL3_Config>
 8106766:	4603      	mov	r3, r0
 8106768:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810676c:	e00a      	b.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810676e:	2301      	movs	r3, #1
 8106770:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106774:	e006      	b.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106776:	bf00      	nop
 8106778:	e004      	b.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810677a:	bf00      	nop
 810677c:	e002      	b.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810677e:	bf00      	nop
 8106780:	e000      	b.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106784:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106788:	2b00      	cmp	r3, #0
 810678a:	d10d      	bne.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810678c:	4b05      	ldr	r3, [pc, #20]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810678e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106790:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8106794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810679a:	4a02      	ldr	r2, [pc, #8]	@ (81067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810679c:	430b      	orrs	r3, r1
 810679e:	6513      	str	r3, [r2, #80]	@ 0x50
 81067a0:	e006      	b.n	81067b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81067a2:	bf00      	nop
 81067a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81067ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81067b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81067bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81067c0:	2300      	movs	r3, #0
 81067c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81067c6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81067ca:	460b      	mov	r3, r1
 81067cc:	4313      	orrs	r3, r2
 81067ce:	d055      	beq.n	810687c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81067d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81067d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81067dc:	d033      	beq.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81067de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81067e2:	d82c      	bhi.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81067e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81067e8:	d02f      	beq.n	810684a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81067ee:	d826      	bhi.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81067f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81067f4:	d02b      	beq.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81067f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81067fa:	d820      	bhi.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81067fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106800:	d012      	beq.n	8106828 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106806:	d81a      	bhi.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106808:	2b00      	cmp	r3, #0
 810680a:	d022      	beq.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810680c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106810:	d115      	bne.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106816:	3308      	adds	r3, #8
 8106818:	2101      	movs	r1, #1
 810681a:	4618      	mov	r0, r3
 810681c:	f000 ff28 	bl	8107670 <RCCEx_PLL2_Config>
 8106820:	4603      	mov	r3, r0
 8106822:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106826:	e015      	b.n	8106854 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810682c:	3328      	adds	r3, #40	@ 0x28
 810682e:	2101      	movs	r1, #1
 8106830:	4618      	mov	r0, r3
 8106832:	f000 ffcf 	bl	81077d4 <RCCEx_PLL3_Config>
 8106836:	4603      	mov	r3, r0
 8106838:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810683c:	e00a      	b.n	8106854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810683e:	2301      	movs	r3, #1
 8106840:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106844:	e006      	b.n	8106854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106846:	bf00      	nop
 8106848:	e004      	b.n	8106854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810684a:	bf00      	nop
 810684c:	e002      	b.n	8106854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810684e:	bf00      	nop
 8106850:	e000      	b.n	8106854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106854:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106858:	2b00      	cmp	r3, #0
 810685a:	d10b      	bne.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810685c:	4bb7      	ldr	r3, [pc, #732]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810685e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106860:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106868:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810686c:	4ab3      	ldr	r2, [pc, #716]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810686e:	430b      	orrs	r3, r1
 8106870:	6593      	str	r3, [r2, #88]	@ 0x58
 8106872:	e003      	b.n	810687c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106874:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106878:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810687c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106884:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8106888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810688c:	2300      	movs	r3, #0
 810688e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106892:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106896:	460b      	mov	r3, r1
 8106898:	4313      	orrs	r3, r2
 810689a:	d02a      	beq.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810689c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81068a2:	2b00      	cmp	r3, #0
 81068a4:	d011      	beq.n	81068ca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81068a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81068aa:	d10a      	bne.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81068ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068b0:	3308      	adds	r3, #8
 81068b2:	2101      	movs	r1, #1
 81068b4:	4618      	mov	r0, r3
 81068b6:	f000 fedb 	bl	8107670 <RCCEx_PLL2_Config>
 81068ba:	4603      	mov	r3, r0
 81068bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81068c0:	e004      	b.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81068c2:	2301      	movs	r3, #1
 81068c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81068c8:	e000      	b.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81068ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068d0:	2b00      	cmp	r3, #0
 81068d2:	d10a      	bne.n	81068ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81068d4:	4b99      	ldr	r3, [pc, #612]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81068d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81068d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81068dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81068e2:	4a96      	ldr	r2, [pc, #600]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81068e4:	430b      	orrs	r3, r1
 81068e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81068e8:	e003      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81068f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068fa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81068fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106902:	2300      	movs	r3, #0
 8106904:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106908:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810690c:	460b      	mov	r3, r1
 810690e:	4313      	orrs	r3, r2
 8106910:	d037      	beq.n	8106982 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810691c:	d00e      	beq.n	810693c <HAL_RCCEx_PeriphCLKConfig+0x760>
 810691e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106922:	d816      	bhi.n	8106952 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8106924:	2b00      	cmp	r3, #0
 8106926:	d018      	beq.n	810695a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8106928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810692c:	d111      	bne.n	8106952 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810692e:	4b83      	ldr	r3, [pc, #524]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106932:	4a82      	ldr	r2, [pc, #520]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810693a:	e00f      	b.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810693c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106940:	3308      	adds	r3, #8
 8106942:	2101      	movs	r1, #1
 8106944:	4618      	mov	r0, r3
 8106946:	f000 fe93 	bl	8107670 <RCCEx_PLL2_Config>
 810694a:	4603      	mov	r3, r0
 810694c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106950:	e004      	b.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106952:	2301      	movs	r3, #1
 8106954:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106958:	e000      	b.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810695a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810695c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106960:	2b00      	cmp	r3, #0
 8106962:	d10a      	bne.n	810697a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106964:	4b75      	ldr	r3, [pc, #468]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106968:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810696c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106972:	4a72      	ldr	r2, [pc, #456]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106974:	430b      	orrs	r3, r1
 8106976:	6513      	str	r3, [r2, #80]	@ 0x50
 8106978:	e003      	b.n	8106982 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810697a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810697e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106986:	e9d3 2300 	ldrd	r2, r3, [r3]
 810698a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810698e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106992:	2300      	movs	r3, #0
 8106994:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106998:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810699c:	460b      	mov	r3, r1
 810699e:	4313      	orrs	r3, r2
 81069a0:	d03a      	beq.n	8106a18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81069a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81069a8:	2b03      	cmp	r3, #3
 81069aa:	d81d      	bhi.n	81069e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81069ac:	a201      	add	r2, pc, #4	@ (adr r2, 81069b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069b2:	bf00      	nop
 81069b4:	081069f1 	.word	0x081069f1
 81069b8:	081069c5 	.word	0x081069c5
 81069bc:	081069d3 	.word	0x081069d3
 81069c0:	081069f1 	.word	0x081069f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069c4:	4b5d      	ldr	r3, [pc, #372]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069c8:	4a5c      	ldr	r2, [pc, #368]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81069ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81069d0:	e00f      	b.n	81069f2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81069d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069d6:	3308      	adds	r3, #8
 81069d8:	2102      	movs	r1, #2
 81069da:	4618      	mov	r0, r3
 81069dc:	f000 fe48 	bl	8107670 <RCCEx_PLL2_Config>
 81069e0:	4603      	mov	r3, r0
 81069e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81069e6:	e004      	b.n	81069f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81069e8:	2301      	movs	r3, #1
 81069ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81069ee:	e000      	b.n	81069f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81069f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	d10a      	bne.n	8106a10 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81069fa:	4b50      	ldr	r3, [pc, #320]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81069fe:	f023 0103 	bic.w	r1, r3, #3
 8106a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106a08:	4a4c      	ldr	r2, [pc, #304]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a0a:	430b      	orrs	r3, r1
 8106a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106a0e:	e003      	b.n	8106a18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a14:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106a28:	2300      	movs	r3, #0
 8106a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106a2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106a32:	460b      	mov	r3, r1
 8106a34:	4313      	orrs	r3, r2
 8106a36:	f000 80a0 	beq.w	8106b7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106a3a:	4b41      	ldr	r3, [pc, #260]	@ (8106b40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	4a40      	ldr	r2, [pc, #256]	@ (8106b40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106a46:	f7fe fe65 	bl	8105714 <HAL_GetTick>
 8106a4a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106a4e:	e00b      	b.n	8106a68 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106a50:	f7fe fe60 	bl	8105714 <HAL_GetTick>
 8106a54:	4602      	mov	r2, r0
 8106a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8106a5a:	1ad3      	subs	r3, r2, r3
 8106a5c:	2b64      	cmp	r3, #100	@ 0x64
 8106a5e:	d903      	bls.n	8106a68 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8106a60:	2303      	movs	r3, #3
 8106a62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106a66:	e005      	b.n	8106a74 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106a68:	4b35      	ldr	r3, [pc, #212]	@ (8106b40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106a70:	2b00      	cmp	r3, #0
 8106a72:	d0ed      	beq.n	8106a50 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8106a74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a78:	2b00      	cmp	r3, #0
 8106a7a:	d17a      	bne.n	8106b72 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106a88:	4053      	eors	r3, r2
 8106a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106a8e:	2b00      	cmp	r3, #0
 8106a90:	d015      	beq.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106a92:	4b2a      	ldr	r3, [pc, #168]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106a9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106a9e:	4b27      	ldr	r3, [pc, #156]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106aa2:	4a26      	ldr	r2, [pc, #152]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106aaa:	4b24      	ldr	r3, [pc, #144]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106aae:	4a23      	ldr	r2, [pc, #140]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106ab4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106ab6:	4a21      	ldr	r2, [pc, #132]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106ab8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8106abc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ac2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106aca:	d118      	bne.n	8106afe <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106acc:	f7fe fe22 	bl	8105714 <HAL_GetTick>
 8106ad0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106ad4:	e00d      	b.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106ad6:	f7fe fe1d 	bl	8105714 <HAL_GetTick>
 8106ada:	4602      	mov	r2, r0
 8106adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8106ae0:	1ad2      	subs	r2, r2, r3
 8106ae2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106ae6:	429a      	cmp	r2, r3
 8106ae8:	d903      	bls.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8106aea:	2303      	movs	r3, #3
 8106aec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8106af0:	e005      	b.n	8106afe <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106af2:	4b12      	ldr	r3, [pc, #72]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106af6:	f003 0302 	and.w	r3, r3, #2
 8106afa:	2b00      	cmp	r3, #0
 8106afc:	d0eb      	beq.n	8106ad6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8106afe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b02:	2b00      	cmp	r3, #0
 8106b04:	d130      	bne.n	8106b68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106b16:	d115      	bne.n	8106b44 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8106b18:	4b08      	ldr	r3, [pc, #32]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b1a:	691b      	ldr	r3, [r3, #16]
 8106b1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b28:	091b      	lsrs	r3, r3, #4
 8106b2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106b2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106b32:	4a02      	ldr	r2, [pc, #8]	@ (8106b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b34:	430b      	orrs	r3, r1
 8106b36:	6113      	str	r3, [r2, #16]
 8106b38:	e00a      	b.n	8106b50 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8106b3a:	bf00      	nop
 8106b3c:	58024400 	.word	0x58024400
 8106b40:	58024800 	.word	0x58024800
 8106b44:	4bd4      	ldr	r3, [pc, #848]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b46:	691b      	ldr	r3, [r3, #16]
 8106b48:	4ad3      	ldr	r2, [pc, #844]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b4a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106b4e:	6113      	str	r3, [r2, #16]
 8106b50:	4bd1      	ldr	r3, [pc, #836]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b52:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106b60:	4acd      	ldr	r2, [pc, #820]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b62:	430b      	orrs	r3, r1
 8106b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8106b66:	e008      	b.n	8106b7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106b68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8106b70:	e003      	b.n	8106b7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b82:	f002 0301 	and.w	r3, r2, #1
 8106b86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106b8a:	2300      	movs	r3, #0
 8106b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106b94:	460b      	mov	r3, r1
 8106b96:	4313      	orrs	r3, r2
 8106b98:	f000 808b 	beq.w	8106cb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106ba4:	2b28      	cmp	r3, #40	@ 0x28
 8106ba6:	d86b      	bhi.n	8106c80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8106ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8106bb0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8106baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106bae:	bf00      	nop
 8106bb0:	08106c89 	.word	0x08106c89
 8106bb4:	08106c81 	.word	0x08106c81
 8106bb8:	08106c81 	.word	0x08106c81
 8106bbc:	08106c81 	.word	0x08106c81
 8106bc0:	08106c81 	.word	0x08106c81
 8106bc4:	08106c81 	.word	0x08106c81
 8106bc8:	08106c81 	.word	0x08106c81
 8106bcc:	08106c81 	.word	0x08106c81
 8106bd0:	08106c55 	.word	0x08106c55
 8106bd4:	08106c81 	.word	0x08106c81
 8106bd8:	08106c81 	.word	0x08106c81
 8106bdc:	08106c81 	.word	0x08106c81
 8106be0:	08106c81 	.word	0x08106c81
 8106be4:	08106c81 	.word	0x08106c81
 8106be8:	08106c81 	.word	0x08106c81
 8106bec:	08106c81 	.word	0x08106c81
 8106bf0:	08106c6b 	.word	0x08106c6b
 8106bf4:	08106c81 	.word	0x08106c81
 8106bf8:	08106c81 	.word	0x08106c81
 8106bfc:	08106c81 	.word	0x08106c81
 8106c00:	08106c81 	.word	0x08106c81
 8106c04:	08106c81 	.word	0x08106c81
 8106c08:	08106c81 	.word	0x08106c81
 8106c0c:	08106c81 	.word	0x08106c81
 8106c10:	08106c89 	.word	0x08106c89
 8106c14:	08106c81 	.word	0x08106c81
 8106c18:	08106c81 	.word	0x08106c81
 8106c1c:	08106c81 	.word	0x08106c81
 8106c20:	08106c81 	.word	0x08106c81
 8106c24:	08106c81 	.word	0x08106c81
 8106c28:	08106c81 	.word	0x08106c81
 8106c2c:	08106c81 	.word	0x08106c81
 8106c30:	08106c89 	.word	0x08106c89
 8106c34:	08106c81 	.word	0x08106c81
 8106c38:	08106c81 	.word	0x08106c81
 8106c3c:	08106c81 	.word	0x08106c81
 8106c40:	08106c81 	.word	0x08106c81
 8106c44:	08106c81 	.word	0x08106c81
 8106c48:	08106c81 	.word	0x08106c81
 8106c4c:	08106c81 	.word	0x08106c81
 8106c50:	08106c89 	.word	0x08106c89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c58:	3308      	adds	r3, #8
 8106c5a:	2101      	movs	r1, #1
 8106c5c:	4618      	mov	r0, r3
 8106c5e:	f000 fd07 	bl	8107670 <RCCEx_PLL2_Config>
 8106c62:	4603      	mov	r3, r0
 8106c64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106c68:	e00f      	b.n	8106c8a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c6e:	3328      	adds	r3, #40	@ 0x28
 8106c70:	2101      	movs	r1, #1
 8106c72:	4618      	mov	r0, r3
 8106c74:	f000 fdae 	bl	81077d4 <RCCEx_PLL3_Config>
 8106c78:	4603      	mov	r3, r0
 8106c7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106c7e:	e004      	b.n	8106c8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c80:	2301      	movs	r3, #1
 8106c82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106c86:	e000      	b.n	8106c8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8106c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106c8e:	2b00      	cmp	r3, #0
 8106c90:	d10b      	bne.n	8106caa <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106c92:	4b81      	ldr	r3, [pc, #516]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106c96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106ca4:	430b      	orrs	r3, r1
 8106ca6:	6553      	str	r3, [r2, #84]	@ 0x54
 8106ca8:	e003      	b.n	8106cb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106caa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106cae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cba:	f002 0302 	and.w	r3, r2, #2
 8106cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106cc2:	2300      	movs	r3, #0
 8106cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106cc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106ccc:	460b      	mov	r3, r1
 8106cce:	4313      	orrs	r3, r2
 8106cd0:	d042      	beq.n	8106d58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106cd8:	2b05      	cmp	r3, #5
 8106cda:	d825      	bhi.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8106cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8106ce4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8106cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ce2:	bf00      	nop
 8106ce4:	08106d31 	.word	0x08106d31
 8106ce8:	08106cfd 	.word	0x08106cfd
 8106cec:	08106d13 	.word	0x08106d13
 8106cf0:	08106d31 	.word	0x08106d31
 8106cf4:	08106d31 	.word	0x08106d31
 8106cf8:	08106d31 	.word	0x08106d31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d00:	3308      	adds	r3, #8
 8106d02:	2101      	movs	r1, #1
 8106d04:	4618      	mov	r0, r3
 8106d06:	f000 fcb3 	bl	8107670 <RCCEx_PLL2_Config>
 8106d0a:	4603      	mov	r3, r0
 8106d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106d10:	e00f      	b.n	8106d32 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d16:	3328      	adds	r3, #40	@ 0x28
 8106d18:	2101      	movs	r1, #1
 8106d1a:	4618      	mov	r0, r3
 8106d1c:	f000 fd5a 	bl	81077d4 <RCCEx_PLL3_Config>
 8106d20:	4603      	mov	r3, r0
 8106d22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106d26:	e004      	b.n	8106d32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d28:	2301      	movs	r3, #1
 8106d2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106d2e:	e000      	b.n	8106d32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8106d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d36:	2b00      	cmp	r3, #0
 8106d38:	d10a      	bne.n	8106d50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106d3a:	4b57      	ldr	r3, [pc, #348]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106d3e:	f023 0107 	bic.w	r1, r3, #7
 8106d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106d48:	4a53      	ldr	r2, [pc, #332]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106d4a:	430b      	orrs	r3, r1
 8106d4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8106d4e:	e003      	b.n	8106d58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d60:	f002 0304 	and.w	r3, r2, #4
 8106d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106d68:	2300      	movs	r3, #0
 8106d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106d6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106d72:	460b      	mov	r3, r1
 8106d74:	4313      	orrs	r3, r2
 8106d76:	d044      	beq.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106d80:	2b05      	cmp	r3, #5
 8106d82:	d825      	bhi.n	8106dd0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8106d84:	a201      	add	r2, pc, #4	@ (adr r2, 8106d8c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8106d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d8a:	bf00      	nop
 8106d8c:	08106dd9 	.word	0x08106dd9
 8106d90:	08106da5 	.word	0x08106da5
 8106d94:	08106dbb 	.word	0x08106dbb
 8106d98:	08106dd9 	.word	0x08106dd9
 8106d9c:	08106dd9 	.word	0x08106dd9
 8106da0:	08106dd9 	.word	0x08106dd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106da8:	3308      	adds	r3, #8
 8106daa:	2101      	movs	r1, #1
 8106dac:	4618      	mov	r0, r3
 8106dae:	f000 fc5f 	bl	8107670 <RCCEx_PLL2_Config>
 8106db2:	4603      	mov	r3, r0
 8106db4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106db8:	e00f      	b.n	8106dda <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dbe:	3328      	adds	r3, #40	@ 0x28
 8106dc0:	2101      	movs	r1, #1
 8106dc2:	4618      	mov	r0, r3
 8106dc4:	f000 fd06 	bl	81077d4 <RCCEx_PLL3_Config>
 8106dc8:	4603      	mov	r3, r0
 8106dca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106dce:	e004      	b.n	8106dda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106dd0:	2301      	movs	r3, #1
 8106dd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106dd6:	e000      	b.n	8106dda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8106dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106dda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d10b      	bne.n	8106dfa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106de2:	4b2d      	ldr	r3, [pc, #180]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106de6:	f023 0107 	bic.w	r1, r3, #7
 8106dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106df2:	4a29      	ldr	r2, [pc, #164]	@ (8106e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106df4:	430b      	orrs	r3, r1
 8106df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8106df8:	e003      	b.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106dfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e0a:	f002 0320 	and.w	r3, r2, #32
 8106e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8106e12:	2300      	movs	r3, #0
 8106e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106e1c:	460b      	mov	r3, r1
 8106e1e:	4313      	orrs	r3, r2
 8106e20:	d057      	beq.n	8106ed2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106e2e:	d035      	beq.n	8106e9c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8106e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106e34:	d82c      	bhi.n	8106e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106e3a:	d031      	beq.n	8106ea0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8106e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106e40:	d826      	bhi.n	8106e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106e46:	d02d      	beq.n	8106ea4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8106e48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106e4c:	d820      	bhi.n	8106e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106e52:	d012      	beq.n	8106e7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8106e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106e58:	d81a      	bhi.n	8106e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d024      	beq.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8106e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106e62:	d115      	bne.n	8106e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e68:	3308      	adds	r3, #8
 8106e6a:	2100      	movs	r1, #0
 8106e6c:	4618      	mov	r0, r3
 8106e6e:	f000 fbff 	bl	8107670 <RCCEx_PLL2_Config>
 8106e72:	4603      	mov	r3, r0
 8106e74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106e78:	e017      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e7e:	3328      	adds	r3, #40	@ 0x28
 8106e80:	2102      	movs	r1, #2
 8106e82:	4618      	mov	r0, r3
 8106e84:	f000 fca6 	bl	81077d4 <RCCEx_PLL3_Config>
 8106e88:	4603      	mov	r3, r0
 8106e8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106e8e:	e00c      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e90:	2301      	movs	r3, #1
 8106e92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106e96:	e008      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8106e98:	58024400 	.word	0x58024400
        break;
 8106e9c:	bf00      	nop
 8106e9e:	e004      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106ea0:	bf00      	nop
 8106ea2:	e002      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106ea4:	bf00      	nop
 8106ea6:	e000      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106eaa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106eae:	2b00      	cmp	r3, #0
 8106eb0:	d10b      	bne.n	8106eca <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106eb2:	4bc2      	ldr	r3, [pc, #776]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106eb6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106ec2:	4abe      	ldr	r2, [pc, #760]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106ec4:	430b      	orrs	r3, r1
 8106ec6:	6553      	str	r3, [r2, #84]	@ 0x54
 8106ec8:	e003      	b.n	8106ed2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106eca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ece:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106eda:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8106ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8106ee2:	2300      	movs	r3, #0
 8106ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106ee8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8106eec:	460b      	mov	r3, r1
 8106eee:	4313      	orrs	r3, r2
 8106ef0:	d055      	beq.n	8106f9e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106efa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106efe:	d033      	beq.n	8106f68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8106f00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106f04:	d82c      	bhi.n	8106f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106f0a:	d02f      	beq.n	8106f6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8106f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106f10:	d826      	bhi.n	8106f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106f16:	d02b      	beq.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8106f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106f1c:	d820      	bhi.n	8106f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106f22:	d012      	beq.n	8106f4a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8106f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106f28:	d81a      	bhi.n	8106f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d022      	beq.n	8106f74 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8106f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106f32:	d115      	bne.n	8106f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f38:	3308      	adds	r3, #8
 8106f3a:	2100      	movs	r1, #0
 8106f3c:	4618      	mov	r0, r3
 8106f3e:	f000 fb97 	bl	8107670 <RCCEx_PLL2_Config>
 8106f42:	4603      	mov	r3, r0
 8106f44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106f48:	e015      	b.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f4e:	3328      	adds	r3, #40	@ 0x28
 8106f50:	2102      	movs	r1, #2
 8106f52:	4618      	mov	r0, r3
 8106f54:	f000 fc3e 	bl	81077d4 <RCCEx_PLL3_Config>
 8106f58:	4603      	mov	r3, r0
 8106f5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106f5e:	e00a      	b.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106f60:	2301      	movs	r3, #1
 8106f62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106f66:	e006      	b.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106f68:	bf00      	nop
 8106f6a:	e004      	b.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106f6c:	bf00      	nop
 8106f6e:	e002      	b.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106f70:	bf00      	nop
 8106f72:	e000      	b.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f7a:	2b00      	cmp	r3, #0
 8106f7c:	d10b      	bne.n	8106f96 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106f7e:	4b8f      	ldr	r3, [pc, #572]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106f82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106f8e:	4a8b      	ldr	r2, [pc, #556]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106f90:	430b      	orrs	r3, r1
 8106f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8106f94:	e003      	b.n	8106f9e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fa6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8106faa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106fae:	2300      	movs	r3, #0
 8106fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106fb4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106fb8:	460b      	mov	r3, r1
 8106fba:	4313      	orrs	r3, r2
 8106fbc:	d055      	beq.n	810706a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106fc6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106fca:	d033      	beq.n	8107034 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8106fcc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106fd0:	d82c      	bhi.n	810702c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106fd6:	d02f      	beq.n	8107038 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8106fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106fdc:	d826      	bhi.n	810702c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106fde:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106fe2:	d02b      	beq.n	810703c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8106fe4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106fe8:	d820      	bhi.n	810702c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106fee:	d012      	beq.n	8107016 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8106ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106ff4:	d81a      	bhi.n	810702c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106ff6:	2b00      	cmp	r3, #0
 8106ff8:	d022      	beq.n	8107040 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8106ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106ffe:	d115      	bne.n	810702c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107004:	3308      	adds	r3, #8
 8107006:	2100      	movs	r1, #0
 8107008:	4618      	mov	r0, r3
 810700a:	f000 fb31 	bl	8107670 <RCCEx_PLL2_Config>
 810700e:	4603      	mov	r3, r0
 8107010:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107014:	e015      	b.n	8107042 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810701a:	3328      	adds	r3, #40	@ 0x28
 810701c:	2102      	movs	r1, #2
 810701e:	4618      	mov	r0, r3
 8107020:	f000 fbd8 	bl	81077d4 <RCCEx_PLL3_Config>
 8107024:	4603      	mov	r3, r0
 8107026:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810702a:	e00a      	b.n	8107042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810702c:	2301      	movs	r3, #1
 810702e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107032:	e006      	b.n	8107042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107034:	bf00      	nop
 8107036:	e004      	b.n	8107042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107038:	bf00      	nop
 810703a:	e002      	b.n	8107042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810703c:	bf00      	nop
 810703e:	e000      	b.n	8107042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107046:	2b00      	cmp	r3, #0
 8107048:	d10b      	bne.n	8107062 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810704a:	4b5c      	ldr	r3, [pc, #368]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810704e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810705a:	4a58      	ldr	r2, [pc, #352]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810705c:	430b      	orrs	r3, r1
 810705e:	6593      	str	r3, [r2, #88]	@ 0x58
 8107060:	e003      	b.n	810706a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107062:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107066:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810706a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107072:	f002 0308 	and.w	r3, r2, #8
 8107076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810707a:	2300      	movs	r3, #0
 810707c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107080:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8107084:	460b      	mov	r3, r1
 8107086:	4313      	orrs	r3, r2
 8107088:	d01e      	beq.n	81070c8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810708a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107096:	d10c      	bne.n	81070b2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810709c:	3328      	adds	r3, #40	@ 0x28
 810709e:	2102      	movs	r1, #2
 81070a0:	4618      	mov	r0, r3
 81070a2:	f000 fb97 	bl	81077d4 <RCCEx_PLL3_Config>
 81070a6:	4603      	mov	r3, r0
 81070a8:	2b00      	cmp	r3, #0
 81070aa:	d002      	beq.n	81070b2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81070ac:	2301      	movs	r3, #1
 81070ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81070b2:	4b42      	ldr	r3, [pc, #264]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81070b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81070b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81070ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81070c2:	4a3e      	ldr	r2, [pc, #248]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81070c4:	430b      	orrs	r3, r1
 81070c6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81070c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070d0:	f002 0310 	and.w	r3, r2, #16
 81070d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81070d8:	2300      	movs	r3, #0
 81070da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81070de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81070e2:	460b      	mov	r3, r1
 81070e4:	4313      	orrs	r3, r2
 81070e6:	d01e      	beq.n	8107126 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81070e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81070f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81070f4:	d10c      	bne.n	8107110 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81070f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070fa:	3328      	adds	r3, #40	@ 0x28
 81070fc:	2102      	movs	r1, #2
 81070fe:	4618      	mov	r0, r3
 8107100:	f000 fb68 	bl	81077d4 <RCCEx_PLL3_Config>
 8107104:	4603      	mov	r3, r0
 8107106:	2b00      	cmp	r3, #0
 8107108:	d002      	beq.n	8107110 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810710a:	2301      	movs	r3, #1
 810710c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107110:	4b2a      	ldr	r3, [pc, #168]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107114:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810711c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107120:	4a26      	ldr	r2, [pc, #152]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107122:	430b      	orrs	r3, r1
 8107124:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810712e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107136:	2300      	movs	r3, #0
 8107138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810713c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107140:	460b      	mov	r3, r1
 8107142:	4313      	orrs	r3, r2
 8107144:	d040      	beq.n	81071c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8107146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810714a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810714e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107152:	d022      	beq.n	810719a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8107154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107158:	d81b      	bhi.n	8107192 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810715a:	2b00      	cmp	r3, #0
 810715c:	d003      	beq.n	8107166 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810715e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107162:	d00b      	beq.n	810717c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8107164:	e015      	b.n	8107192 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810716a:	3308      	adds	r3, #8
 810716c:	2100      	movs	r1, #0
 810716e:	4618      	mov	r0, r3
 8107170:	f000 fa7e 	bl	8107670 <RCCEx_PLL2_Config>
 8107174:	4603      	mov	r3, r0
 8107176:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810717a:	e00f      	b.n	810719c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810717c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107180:	3328      	adds	r3, #40	@ 0x28
 8107182:	2102      	movs	r1, #2
 8107184:	4618      	mov	r0, r3
 8107186:	f000 fb25 	bl	81077d4 <RCCEx_PLL3_Config>
 810718a:	4603      	mov	r3, r0
 810718c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107190:	e004      	b.n	810719c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107192:	2301      	movs	r3, #1
 8107194:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107198:	e000      	b.n	810719c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810719a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810719c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071a0:	2b00      	cmp	r3, #0
 81071a2:	d10d      	bne.n	81071c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81071a4:	4b05      	ldr	r3, [pc, #20]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81071a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81071a8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81071ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81071b4:	4a01      	ldr	r2, [pc, #4]	@ (81071bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81071b6:	430b      	orrs	r3, r1
 81071b8:	6593      	str	r3, [r2, #88]	@ 0x58
 81071ba:	e005      	b.n	81071c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81071bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81071c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071d0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81071d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 81071d6:	2300      	movs	r3, #0
 81071d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81071da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81071de:	460b      	mov	r3, r1
 81071e0:	4313      	orrs	r3, r2
 81071e2:	d03b      	beq.n	810725c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81071e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81071ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81071f0:	d01f      	beq.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81071f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81071f6:	d818      	bhi.n	810722a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81071f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81071fc:	d003      	beq.n	8107206 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 81071fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107202:	d007      	beq.n	8107214 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8107204:	e011      	b.n	810722a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107206:	4b64      	ldr	r3, [pc, #400]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810720a:	4a63      	ldr	r2, [pc, #396]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810720c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107210:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107212:	e00f      	b.n	8107234 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107218:	3328      	adds	r3, #40	@ 0x28
 810721a:	2101      	movs	r1, #1
 810721c:	4618      	mov	r0, r3
 810721e:	f000 fad9 	bl	81077d4 <RCCEx_PLL3_Config>
 8107222:	4603      	mov	r3, r0
 8107224:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8107228:	e004      	b.n	8107234 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810722a:	2301      	movs	r3, #1
 810722c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107230:	e000      	b.n	8107234 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8107232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107234:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107238:	2b00      	cmp	r3, #0
 810723a:	d10b      	bne.n	8107254 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810723c:	4b56      	ldr	r3, [pc, #344]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810723e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107240:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810724c:	4a52      	ldr	r2, [pc, #328]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810724e:	430b      	orrs	r3, r1
 8107250:	6553      	str	r3, [r2, #84]	@ 0x54
 8107252:	e003      	b.n	810725c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107254:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107258:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810725c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107264:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8107268:	673b      	str	r3, [r7, #112]	@ 0x70
 810726a:	2300      	movs	r3, #0
 810726c:	677b      	str	r3, [r7, #116]	@ 0x74
 810726e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107272:	460b      	mov	r3, r1
 8107274:	4313      	orrs	r3, r2
 8107276:	d031      	beq.n	81072dc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8107278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810727c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810727e:	2b00      	cmp	r3, #0
 8107280:	d003      	beq.n	810728a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8107282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107286:	d007      	beq.n	8107298 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8107288:	e011      	b.n	81072ae <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810728a:	4b43      	ldr	r3, [pc, #268]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810728e:	4a42      	ldr	r2, [pc, #264]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107296:	e00e      	b.n	81072b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810729c:	3308      	adds	r3, #8
 810729e:	2102      	movs	r1, #2
 81072a0:	4618      	mov	r0, r3
 81072a2:	f000 f9e5 	bl	8107670 <RCCEx_PLL2_Config>
 81072a6:	4603      	mov	r3, r0
 81072a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81072ac:	e003      	b.n	81072b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81072ae:	2301      	movs	r3, #1
 81072b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81072b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81072ba:	2b00      	cmp	r3, #0
 81072bc:	d10a      	bne.n	81072d4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81072be:	4b36      	ldr	r3, [pc, #216]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81072c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81072c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81072c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81072cc:	4a32      	ldr	r2, [pc, #200]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81072ce:	430b      	orrs	r3, r1
 81072d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81072d2:	e003      	b.n	81072dc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81072d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81072dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81072e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 81072ea:	2300      	movs	r3, #0
 81072ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81072ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81072f2:	460b      	mov	r3, r1
 81072f4:	4313      	orrs	r3, r2
 81072f6:	d00c      	beq.n	8107312 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81072f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072fc:	3328      	adds	r3, #40	@ 0x28
 81072fe:	2102      	movs	r1, #2
 8107300:	4618      	mov	r0, r3
 8107302:	f000 fa67 	bl	81077d4 <RCCEx_PLL3_Config>
 8107306:	4603      	mov	r3, r0
 8107308:	2b00      	cmp	r3, #0
 810730a:	d002      	beq.n	8107312 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810730c:	2301      	movs	r3, #1
 810730e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107316:	e9d3 2300 	ldrd	r2, r3, [r3]
 810731a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810731e:	663b      	str	r3, [r7, #96]	@ 0x60
 8107320:	2300      	movs	r3, #0
 8107322:	667b      	str	r3, [r7, #100]	@ 0x64
 8107324:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107328:	460b      	mov	r3, r1
 810732a:	4313      	orrs	r3, r2
 810732c:	d03a      	beq.n	81073a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810732e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810733a:	d018      	beq.n	810736e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810733c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107340:	d811      	bhi.n	8107366 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8107342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107346:	d014      	beq.n	8107372 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8107348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810734c:	d80b      	bhi.n	8107366 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810734e:	2b00      	cmp	r3, #0
 8107350:	d011      	beq.n	8107376 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8107352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107356:	d106      	bne.n	8107366 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107358:	4b0f      	ldr	r3, [pc, #60]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810735c:	4a0e      	ldr	r2, [pc, #56]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810735e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8107364:	e008      	b.n	8107378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107366:	2301      	movs	r3, #1
 8107368:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810736c:	e004      	b.n	8107378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810736e:	bf00      	nop
 8107370:	e002      	b.n	8107378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8107372:	bf00      	nop
 8107374:	e000      	b.n	8107378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8107376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107378:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810737c:	2b00      	cmp	r3, #0
 810737e:	d10d      	bne.n	810739c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107380:	4b05      	ldr	r3, [pc, #20]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107384:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810738c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107390:	4a01      	ldr	r2, [pc, #4]	@ (8107398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107392:	430b      	orrs	r3, r1
 8107394:	6553      	str	r3, [r2, #84]	@ 0x54
 8107396:	e005      	b.n	81073a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8107398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810739c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81073a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81073a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81073b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 81073b2:	2300      	movs	r3, #0
 81073b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81073b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81073ba:	460b      	mov	r3, r1
 81073bc:	4313      	orrs	r3, r2
 81073be:	d009      	beq.n	81073d4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81073c0:	4baa      	ldr	r3, [pc, #680]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81073c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81073c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81073c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81073ce:	4aa7      	ldr	r2, [pc, #668]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81073d0:	430b      	orrs	r3, r1
 81073d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81073d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81073e0:	653b      	str	r3, [r7, #80]	@ 0x50
 81073e2:	2300      	movs	r3, #0
 81073e4:	657b      	str	r3, [r7, #84]	@ 0x54
 81073e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81073ea:	460b      	mov	r3, r1
 81073ec:	4313      	orrs	r3, r2
 81073ee:	d00a      	beq.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81073f0:	4b9e      	ldr	r3, [pc, #632]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81073f2:	691b      	ldr	r3, [r3, #16]
 81073f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81073f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8107400:	4a9a      	ldr	r2, [pc, #616]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107402:	430b      	orrs	r3, r1
 8107404:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810740e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107414:	2300      	movs	r3, #0
 8107416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107418:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810741c:	460b      	mov	r3, r1
 810741e:	4313      	orrs	r3, r2
 8107420:	d009      	beq.n	8107436 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107422:	4b92      	ldr	r3, [pc, #584]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107426:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810742a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810742e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107430:	4a8e      	ldr	r2, [pc, #568]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107432:	430b      	orrs	r3, r1
 8107434:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810743e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8107442:	643b      	str	r3, [r7, #64]	@ 0x40
 8107444:	2300      	movs	r3, #0
 8107446:	647b      	str	r3, [r7, #68]	@ 0x44
 8107448:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810744c:	460b      	mov	r3, r1
 810744e:	4313      	orrs	r3, r2
 8107450:	d00e      	beq.n	8107470 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107452:	4b86      	ldr	r3, [pc, #536]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107454:	691b      	ldr	r3, [r3, #16]
 8107456:	4a85      	ldr	r2, [pc, #532]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107458:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810745c:	6113      	str	r3, [r2, #16]
 810745e:	4b83      	ldr	r3, [pc, #524]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107460:	6919      	ldr	r1, [r3, #16]
 8107462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107466:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810746a:	4a80      	ldr	r2, [pc, #512]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810746c:	430b      	orrs	r3, r1
 810746e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107478:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810747c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810747e:	2300      	movs	r3, #0
 8107480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107482:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8107486:	460b      	mov	r3, r1
 8107488:	4313      	orrs	r3, r2
 810748a:	d009      	beq.n	81074a0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810748c:	4b77      	ldr	r3, [pc, #476]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810748e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107490:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810749a:	4a74      	ldr	r2, [pc, #464]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810749c:	430b      	orrs	r3, r1
 810749e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81074a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81074ac:	633b      	str	r3, [r7, #48]	@ 0x30
 81074ae:	2300      	movs	r3, #0
 81074b0:	637b      	str	r3, [r7, #52]	@ 0x34
 81074b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81074b6:	460b      	mov	r3, r1
 81074b8:	4313      	orrs	r3, r2
 81074ba:	d00a      	beq.n	81074d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81074bc:	4b6b      	ldr	r3, [pc, #428]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81074c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81074c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81074cc:	4a67      	ldr	r2, [pc, #412]	@ (810766c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074ce:	430b      	orrs	r3, r1
 81074d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81074d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074da:	2100      	movs	r1, #0
 81074dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 81074de:	f003 0301 	and.w	r3, r3, #1
 81074e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81074e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81074e8:	460b      	mov	r3, r1
 81074ea:	4313      	orrs	r3, r2
 81074ec:	d011      	beq.n	8107512 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81074ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074f2:	3308      	adds	r3, #8
 81074f4:	2100      	movs	r1, #0
 81074f6:	4618      	mov	r0, r3
 81074f8:	f000 f8ba 	bl	8107670 <RCCEx_PLL2_Config>
 81074fc:	4603      	mov	r3, r0
 81074fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107506:	2b00      	cmp	r3, #0
 8107508:	d003      	beq.n	8107512 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810750a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810750e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107516:	e9d3 2300 	ldrd	r2, r3, [r3]
 810751a:	2100      	movs	r1, #0
 810751c:	6239      	str	r1, [r7, #32]
 810751e:	f003 0302 	and.w	r3, r3, #2
 8107522:	627b      	str	r3, [r7, #36]	@ 0x24
 8107524:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107528:	460b      	mov	r3, r1
 810752a:	4313      	orrs	r3, r2
 810752c:	d011      	beq.n	8107552 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810752e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107532:	3308      	adds	r3, #8
 8107534:	2101      	movs	r1, #1
 8107536:	4618      	mov	r0, r3
 8107538:	f000 f89a 	bl	8107670 <RCCEx_PLL2_Config>
 810753c:	4603      	mov	r3, r0
 810753e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107542:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107546:	2b00      	cmp	r3, #0
 8107548:	d003      	beq.n	8107552 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810754a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810754e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8107552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107556:	e9d3 2300 	ldrd	r2, r3, [r3]
 810755a:	2100      	movs	r1, #0
 810755c:	61b9      	str	r1, [r7, #24]
 810755e:	f003 0304 	and.w	r3, r3, #4
 8107562:	61fb      	str	r3, [r7, #28]
 8107564:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8107568:	460b      	mov	r3, r1
 810756a:	4313      	orrs	r3, r2
 810756c:	d011      	beq.n	8107592 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810756e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107572:	3308      	adds	r3, #8
 8107574:	2102      	movs	r1, #2
 8107576:	4618      	mov	r0, r3
 8107578:	f000 f87a 	bl	8107670 <RCCEx_PLL2_Config>
 810757c:	4603      	mov	r3, r0
 810757e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107582:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107586:	2b00      	cmp	r3, #0
 8107588:	d003      	beq.n	8107592 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810758a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810758e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8107592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107596:	e9d3 2300 	ldrd	r2, r3, [r3]
 810759a:	2100      	movs	r1, #0
 810759c:	6139      	str	r1, [r7, #16]
 810759e:	f003 0308 	and.w	r3, r3, #8
 81075a2:	617b      	str	r3, [r7, #20]
 81075a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81075a8:	460b      	mov	r3, r1
 81075aa:	4313      	orrs	r3, r2
 81075ac:	d011      	beq.n	81075d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81075ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075b2:	3328      	adds	r3, #40	@ 0x28
 81075b4:	2100      	movs	r1, #0
 81075b6:	4618      	mov	r0, r3
 81075b8:	f000 f90c 	bl	81077d4 <RCCEx_PLL3_Config>
 81075bc:	4603      	mov	r3, r0
 81075be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 81075c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81075c6:	2b00      	cmp	r3, #0
 81075c8:	d003      	beq.n	81075d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81075ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81075d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075da:	2100      	movs	r1, #0
 81075dc:	60b9      	str	r1, [r7, #8]
 81075de:	f003 0310 	and.w	r3, r3, #16
 81075e2:	60fb      	str	r3, [r7, #12]
 81075e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81075e8:	460b      	mov	r3, r1
 81075ea:	4313      	orrs	r3, r2
 81075ec:	d011      	beq.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81075ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075f2:	3328      	adds	r3, #40	@ 0x28
 81075f4:	2101      	movs	r1, #1
 81075f6:	4618      	mov	r0, r3
 81075f8:	f000 f8ec 	bl	81077d4 <RCCEx_PLL3_Config>
 81075fc:	4603      	mov	r3, r0
 81075fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107602:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107606:	2b00      	cmp	r3, #0
 8107608:	d003      	beq.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810760a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810760e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810761a:	2100      	movs	r1, #0
 810761c:	6039      	str	r1, [r7, #0]
 810761e:	f003 0320 	and.w	r3, r3, #32
 8107622:	607b      	str	r3, [r7, #4]
 8107624:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107628:	460b      	mov	r3, r1
 810762a:	4313      	orrs	r3, r2
 810762c:	d011      	beq.n	8107652 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810762e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107632:	3328      	adds	r3, #40	@ 0x28
 8107634:	2102      	movs	r1, #2
 8107636:	4618      	mov	r0, r3
 8107638:	f000 f8cc 	bl	81077d4 <RCCEx_PLL3_Config>
 810763c:	4603      	mov	r3, r0
 810763e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107642:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107646:	2b00      	cmp	r3, #0
 8107648:	d003      	beq.n	8107652 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810764a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810764e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8107652:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8107656:	2b00      	cmp	r3, #0
 8107658:	d101      	bne.n	810765e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810765a:	2300      	movs	r3, #0
 810765c:	e000      	b.n	8107660 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810765e:	2301      	movs	r3, #1
}
 8107660:	4618      	mov	r0, r3
 8107662:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8107666:	46bd      	mov	sp, r7
 8107668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810766c:	58024400 	.word	0x58024400

08107670 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107670:	b580      	push	{r7, lr}
 8107672:	b084      	sub	sp, #16
 8107674:	af00      	add	r7, sp, #0
 8107676:	6078      	str	r0, [r7, #4]
 8107678:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810767a:	2300      	movs	r3, #0
 810767c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810767e:	4b54      	ldr	r3, [pc, #336]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107682:	f003 0303 	and.w	r3, r3, #3
 8107686:	2b03      	cmp	r3, #3
 8107688:	d101      	bne.n	810768e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810768a:	2301      	movs	r3, #1
 810768c:	e09b      	b.n	81077c6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810768e:	4b50      	ldr	r3, [pc, #320]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	4a4f      	ldr	r2, [pc, #316]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107694:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8107698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810769a:	f7fe f83b 	bl	8105714 <HAL_GetTick>
 810769e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81076a0:	e008      	b.n	81076b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81076a2:	f7fe f837 	bl	8105714 <HAL_GetTick>
 81076a6:	4602      	mov	r2, r0
 81076a8:	68bb      	ldr	r3, [r7, #8]
 81076aa:	1ad3      	subs	r3, r2, r3
 81076ac:	2b02      	cmp	r3, #2
 81076ae:	d901      	bls.n	81076b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81076b0:	2303      	movs	r3, #3
 81076b2:	e088      	b.n	81077c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81076b4:	4b46      	ldr	r3, [pc, #280]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 81076b6:	681b      	ldr	r3, [r3, #0]
 81076b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81076bc:	2b00      	cmp	r3, #0
 81076be:	d1f0      	bne.n	81076a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81076c0:	4b43      	ldr	r3, [pc, #268]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 81076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81076c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	681b      	ldr	r3, [r3, #0]
 81076cc:	031b      	lsls	r3, r3, #12
 81076ce:	4940      	ldr	r1, [pc, #256]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 81076d0:	4313      	orrs	r3, r2
 81076d2:	628b      	str	r3, [r1, #40]	@ 0x28
 81076d4:	687b      	ldr	r3, [r7, #4]
 81076d6:	685b      	ldr	r3, [r3, #4]
 81076d8:	3b01      	subs	r3, #1
 81076da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	689b      	ldr	r3, [r3, #8]
 81076e2:	3b01      	subs	r3, #1
 81076e4:	025b      	lsls	r3, r3, #9
 81076e6:	b29b      	uxth	r3, r3
 81076e8:	431a      	orrs	r2, r3
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	68db      	ldr	r3, [r3, #12]
 81076ee:	3b01      	subs	r3, #1
 81076f0:	041b      	lsls	r3, r3, #16
 81076f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81076f6:	431a      	orrs	r2, r3
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	691b      	ldr	r3, [r3, #16]
 81076fc:	3b01      	subs	r3, #1
 81076fe:	061b      	lsls	r3, r3, #24
 8107700:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107704:	4932      	ldr	r1, [pc, #200]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107706:	4313      	orrs	r3, r2
 8107708:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810770a:	4b31      	ldr	r3, [pc, #196]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810770e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	695b      	ldr	r3, [r3, #20]
 8107716:	492e      	ldr	r1, [pc, #184]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107718:	4313      	orrs	r3, r2
 810771a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810771c:	4b2c      	ldr	r3, [pc, #176]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107720:	f023 0220 	bic.w	r2, r3, #32
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	699b      	ldr	r3, [r3, #24]
 8107728:	4929      	ldr	r1, [pc, #164]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810772a:	4313      	orrs	r3, r2
 810772c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810772e:	4b28      	ldr	r3, [pc, #160]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107732:	4a27      	ldr	r2, [pc, #156]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107734:	f023 0310 	bic.w	r3, r3, #16
 8107738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810773a:	4b25      	ldr	r3, [pc, #148]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810773c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810773e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107742:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107746:	687a      	ldr	r2, [r7, #4]
 8107748:	69d2      	ldr	r2, [r2, #28]
 810774a:	00d2      	lsls	r2, r2, #3
 810774c:	4920      	ldr	r1, [pc, #128]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810774e:	4313      	orrs	r3, r2
 8107750:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107752:	4b1f      	ldr	r3, [pc, #124]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107756:	4a1e      	ldr	r2, [pc, #120]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107758:	f043 0310 	orr.w	r3, r3, #16
 810775c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810775e:	683b      	ldr	r3, [r7, #0]
 8107760:	2b00      	cmp	r3, #0
 8107762:	d106      	bne.n	8107772 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107764:	4b1a      	ldr	r3, [pc, #104]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107768:	4a19      	ldr	r2, [pc, #100]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810776a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810776e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107770:	e00f      	b.n	8107792 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107772:	683b      	ldr	r3, [r7, #0]
 8107774:	2b01      	cmp	r3, #1
 8107776:	d106      	bne.n	8107786 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107778:	4b15      	ldr	r3, [pc, #84]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810777a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810777c:	4a14      	ldr	r2, [pc, #80]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810777e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8107782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107784:	e005      	b.n	8107792 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107786:	4b12      	ldr	r3, [pc, #72]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810778a:	4a11      	ldr	r2, [pc, #68]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 810778c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8107790:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107792:	4b0f      	ldr	r3, [pc, #60]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107794:	681b      	ldr	r3, [r3, #0]
 8107796:	4a0e      	ldr	r2, [pc, #56]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 8107798:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810779c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810779e:	f7fd ffb9 	bl	8105714 <HAL_GetTick>
 81077a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81077a4:	e008      	b.n	81077b8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81077a6:	f7fd ffb5 	bl	8105714 <HAL_GetTick>
 81077aa:	4602      	mov	r2, r0
 81077ac:	68bb      	ldr	r3, [r7, #8]
 81077ae:	1ad3      	subs	r3, r2, r3
 81077b0:	2b02      	cmp	r3, #2
 81077b2:	d901      	bls.n	81077b8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81077b4:	2303      	movs	r3, #3
 81077b6:	e006      	b.n	81077c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81077b8:	4b05      	ldr	r3, [pc, #20]	@ (81077d0 <RCCEx_PLL2_Config+0x160>)
 81077ba:	681b      	ldr	r3, [r3, #0]
 81077bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81077c0:	2b00      	cmp	r3, #0
 81077c2:	d0f0      	beq.n	81077a6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81077c6:	4618      	mov	r0, r3
 81077c8:	3710      	adds	r7, #16
 81077ca:	46bd      	mov	sp, r7
 81077cc:	bd80      	pop	{r7, pc}
 81077ce:	bf00      	nop
 81077d0:	58024400 	.word	0x58024400

081077d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81077d4:	b580      	push	{r7, lr}
 81077d6:	b084      	sub	sp, #16
 81077d8:	af00      	add	r7, sp, #0
 81077da:	6078      	str	r0, [r7, #4]
 81077dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81077de:	2300      	movs	r3, #0
 81077e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81077e2:	4b54      	ldr	r3, [pc, #336]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81077e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077e6:	f003 0303 	and.w	r3, r3, #3
 81077ea:	2b03      	cmp	r3, #3
 81077ec:	d101      	bne.n	81077f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81077ee:	2301      	movs	r3, #1
 81077f0:	e09b      	b.n	810792a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81077f2:	4b50      	ldr	r3, [pc, #320]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	4a4f      	ldr	r2, [pc, #316]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81077f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81077fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81077fe:	f7fd ff89 	bl	8105714 <HAL_GetTick>
 8107802:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107804:	e008      	b.n	8107818 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107806:	f7fd ff85 	bl	8105714 <HAL_GetTick>
 810780a:	4602      	mov	r2, r0
 810780c:	68bb      	ldr	r3, [r7, #8]
 810780e:	1ad3      	subs	r3, r2, r3
 8107810:	2b02      	cmp	r3, #2
 8107812:	d901      	bls.n	8107818 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107814:	2303      	movs	r3, #3
 8107816:	e088      	b.n	810792a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107818:	4b46      	ldr	r3, [pc, #280]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107820:	2b00      	cmp	r3, #0
 8107822:	d1f0      	bne.n	8107806 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107824:	4b43      	ldr	r3, [pc, #268]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 8107826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107828:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	681b      	ldr	r3, [r3, #0]
 8107830:	051b      	lsls	r3, r3, #20
 8107832:	4940      	ldr	r1, [pc, #256]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 8107834:	4313      	orrs	r3, r2
 8107836:	628b      	str	r3, [r1, #40]	@ 0x28
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	685b      	ldr	r3, [r3, #4]
 810783c:	3b01      	subs	r3, #1
 810783e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107842:	687b      	ldr	r3, [r7, #4]
 8107844:	689b      	ldr	r3, [r3, #8]
 8107846:	3b01      	subs	r3, #1
 8107848:	025b      	lsls	r3, r3, #9
 810784a:	b29b      	uxth	r3, r3
 810784c:	431a      	orrs	r2, r3
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	68db      	ldr	r3, [r3, #12]
 8107852:	3b01      	subs	r3, #1
 8107854:	041b      	lsls	r3, r3, #16
 8107856:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810785a:	431a      	orrs	r2, r3
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	691b      	ldr	r3, [r3, #16]
 8107860:	3b01      	subs	r3, #1
 8107862:	061b      	lsls	r3, r3, #24
 8107864:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107868:	4932      	ldr	r1, [pc, #200]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 810786a:	4313      	orrs	r3, r2
 810786c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810786e:	4b31      	ldr	r3, [pc, #196]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 8107870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107872:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	695b      	ldr	r3, [r3, #20]
 810787a:	492e      	ldr	r1, [pc, #184]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 810787c:	4313      	orrs	r3, r2
 810787e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107880:	4b2c      	ldr	r3, [pc, #176]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 8107882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107884:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	699b      	ldr	r3, [r3, #24]
 810788c:	4929      	ldr	r1, [pc, #164]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 810788e:	4313      	orrs	r3, r2
 8107890:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107892:	4b28      	ldr	r3, [pc, #160]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 8107894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107896:	4a27      	ldr	r2, [pc, #156]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 8107898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810789c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810789e:	4b25      	ldr	r3, [pc, #148]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81078a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81078a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81078aa:	687a      	ldr	r2, [r7, #4]
 81078ac:	69d2      	ldr	r2, [r2, #28]
 81078ae:	00d2      	lsls	r2, r2, #3
 81078b0:	4920      	ldr	r1, [pc, #128]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078b2:	4313      	orrs	r3, r2
 81078b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81078b6:	4b1f      	ldr	r3, [pc, #124]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078ba:	4a1e      	ldr	r2, [pc, #120]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81078c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81078c2:	683b      	ldr	r3, [r7, #0]
 81078c4:	2b00      	cmp	r3, #0
 81078c6:	d106      	bne.n	81078d6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81078c8:	4b1a      	ldr	r3, [pc, #104]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078cc:	4a19      	ldr	r2, [pc, #100]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81078d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81078d4:	e00f      	b.n	81078f6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81078d6:	683b      	ldr	r3, [r7, #0]
 81078d8:	2b01      	cmp	r3, #1
 81078da:	d106      	bne.n	81078ea <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81078dc:	4b15      	ldr	r3, [pc, #84]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078e0:	4a14      	ldr	r2, [pc, #80]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81078e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81078e8:	e005      	b.n	81078f6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81078ea:	4b12      	ldr	r3, [pc, #72]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078ee:	4a11      	ldr	r2, [pc, #68]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81078f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81078f6:	4b0f      	ldr	r3, [pc, #60]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078f8:	681b      	ldr	r3, [r3, #0]
 81078fa:	4a0e      	ldr	r2, [pc, #56]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 81078fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8107900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107902:	f7fd ff07 	bl	8105714 <HAL_GetTick>
 8107906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107908:	e008      	b.n	810791c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810790a:	f7fd ff03 	bl	8105714 <HAL_GetTick>
 810790e:	4602      	mov	r2, r0
 8107910:	68bb      	ldr	r3, [r7, #8]
 8107912:	1ad3      	subs	r3, r2, r3
 8107914:	2b02      	cmp	r3, #2
 8107916:	d901      	bls.n	810791c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107918:	2303      	movs	r3, #3
 810791a:	e006      	b.n	810792a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810791c:	4b05      	ldr	r3, [pc, #20]	@ (8107934 <RCCEx_PLL3_Config+0x160>)
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107924:	2b00      	cmp	r3, #0
 8107926:	d0f0      	beq.n	810790a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107928:	7bfb      	ldrb	r3, [r7, #15]
}
 810792a:	4618      	mov	r0, r3
 810792c:	3710      	adds	r7, #16
 810792e:	46bd      	mov	sp, r7
 8107930:	bd80      	pop	{r7, pc}
 8107932:	bf00      	nop
 8107934:	58024400 	.word	0x58024400

08107938 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8107938:	b580      	push	{r7, lr}
 810793a:	b084      	sub	sp, #16
 810793c:	af00      	add	r7, sp, #0
 810793e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	2b00      	cmp	r3, #0
 8107944:	d101      	bne.n	810794a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8107946:	2301      	movs	r3, #1
 8107948:	e10f      	b.n	8107b6a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	2200      	movs	r2, #0
 810794e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	681b      	ldr	r3, [r3, #0]
 8107954:	4a87      	ldr	r2, [pc, #540]	@ (8107b74 <HAL_SPI_Init+0x23c>)
 8107956:	4293      	cmp	r3, r2
 8107958:	d00f      	beq.n	810797a <HAL_SPI_Init+0x42>
 810795a:	687b      	ldr	r3, [r7, #4]
 810795c:	681b      	ldr	r3, [r3, #0]
 810795e:	4a86      	ldr	r2, [pc, #536]	@ (8107b78 <HAL_SPI_Init+0x240>)
 8107960:	4293      	cmp	r3, r2
 8107962:	d00a      	beq.n	810797a <HAL_SPI_Init+0x42>
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	681b      	ldr	r3, [r3, #0]
 8107968:	4a84      	ldr	r2, [pc, #528]	@ (8107b7c <HAL_SPI_Init+0x244>)
 810796a:	4293      	cmp	r3, r2
 810796c:	d005      	beq.n	810797a <HAL_SPI_Init+0x42>
 810796e:	687b      	ldr	r3, [r7, #4]
 8107970:	68db      	ldr	r3, [r3, #12]
 8107972:	2b0f      	cmp	r3, #15
 8107974:	d901      	bls.n	810797a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8107976:	2301      	movs	r3, #1
 8107978:	e0f7      	b.n	8107b6a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810797a:	6878      	ldr	r0, [r7, #4]
 810797c:	f000 fddf 	bl	810853e <SPI_GetPacketSize>
 8107980:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	4a7b      	ldr	r2, [pc, #492]	@ (8107b74 <HAL_SPI_Init+0x23c>)
 8107988:	4293      	cmp	r3, r2
 810798a:	d00c      	beq.n	81079a6 <HAL_SPI_Init+0x6e>
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	4a79      	ldr	r2, [pc, #484]	@ (8107b78 <HAL_SPI_Init+0x240>)
 8107992:	4293      	cmp	r3, r2
 8107994:	d007      	beq.n	81079a6 <HAL_SPI_Init+0x6e>
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	681b      	ldr	r3, [r3, #0]
 810799a:	4a78      	ldr	r2, [pc, #480]	@ (8107b7c <HAL_SPI_Init+0x244>)
 810799c:	4293      	cmp	r3, r2
 810799e:	d002      	beq.n	81079a6 <HAL_SPI_Init+0x6e>
 81079a0:	68fb      	ldr	r3, [r7, #12]
 81079a2:	2b08      	cmp	r3, #8
 81079a4:	d811      	bhi.n	81079ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81079aa:	4a72      	ldr	r2, [pc, #456]	@ (8107b74 <HAL_SPI_Init+0x23c>)
 81079ac:	4293      	cmp	r3, r2
 81079ae:	d009      	beq.n	81079c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	4a70      	ldr	r2, [pc, #448]	@ (8107b78 <HAL_SPI_Init+0x240>)
 81079b6:	4293      	cmp	r3, r2
 81079b8:	d004      	beq.n	81079c4 <HAL_SPI_Init+0x8c>
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	681b      	ldr	r3, [r3, #0]
 81079be:	4a6f      	ldr	r2, [pc, #444]	@ (8107b7c <HAL_SPI_Init+0x244>)
 81079c0:	4293      	cmp	r3, r2
 81079c2:	d104      	bne.n	81079ce <HAL_SPI_Init+0x96>
 81079c4:	68fb      	ldr	r3, [r7, #12]
 81079c6:	2b10      	cmp	r3, #16
 81079c8:	d901      	bls.n	81079ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81079ca:	2301      	movs	r3, #1
 81079cc:	e0cd      	b.n	8107b6a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81079d4:	b2db      	uxtb	r3, r3
 81079d6:	2b00      	cmp	r3, #0
 81079d8:	d106      	bne.n	81079e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	2200      	movs	r2, #0
 81079de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81079e2:	6878      	ldr	r0, [r7, #4]
 81079e4:	f7fd fbc8 	bl	8105178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	2202      	movs	r2, #2
 81079ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	681b      	ldr	r3, [r3, #0]
 81079f4:	681a      	ldr	r2, [r3, #0]
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	f022 0201 	bic.w	r2, r2, #1
 81079fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	681b      	ldr	r3, [r3, #0]
 8107a04:	689b      	ldr	r3, [r3, #8]
 8107a06:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8107a0a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	699b      	ldr	r3, [r3, #24]
 8107a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107a14:	d119      	bne.n	8107a4a <HAL_SPI_Init+0x112>
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	685b      	ldr	r3, [r3, #4]
 8107a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107a1e:	d103      	bne.n	8107a28 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8107a24:	2b00      	cmp	r3, #0
 8107a26:	d008      	beq.n	8107a3a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107a2c:	2b00      	cmp	r3, #0
 8107a2e:	d10c      	bne.n	8107a4a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8107a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107a38:	d107      	bne.n	8107a4a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8107a3a:	687b      	ldr	r3, [r7, #4]
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	681a      	ldr	r2, [r3, #0]
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	681b      	ldr	r3, [r3, #0]
 8107a44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8107a48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	685b      	ldr	r3, [r3, #4]
 8107a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107a52:	2b00      	cmp	r3, #0
 8107a54:	d00f      	beq.n	8107a76 <HAL_SPI_Init+0x13e>
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	68db      	ldr	r3, [r3, #12]
 8107a5a:	2b06      	cmp	r3, #6
 8107a5c:	d90b      	bls.n	8107a76 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	681b      	ldr	r3, [r3, #0]
 8107a70:	430a      	orrs	r2, r1
 8107a72:	601a      	str	r2, [r3, #0]
 8107a74:	e007      	b.n	8107a86 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	681a      	ldr	r2, [r3, #0]
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107a84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	69da      	ldr	r2, [r3, #28]
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107a8e:	431a      	orrs	r2, r3
 8107a90:	68bb      	ldr	r3, [r7, #8]
 8107a92:	431a      	orrs	r2, r3
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107a98:	ea42 0103 	orr.w	r1, r2, r3
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	68da      	ldr	r2, [r3, #12]
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	430a      	orrs	r2, r1
 8107aa6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107ab0:	431a      	orrs	r2, r3
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ab6:	431a      	orrs	r2, r3
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	699b      	ldr	r3, [r3, #24]
 8107abc:	431a      	orrs	r2, r3
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	691b      	ldr	r3, [r3, #16]
 8107ac2:	431a      	orrs	r2, r3
 8107ac4:	687b      	ldr	r3, [r7, #4]
 8107ac6:	695b      	ldr	r3, [r3, #20]
 8107ac8:	431a      	orrs	r2, r3
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	6a1b      	ldr	r3, [r3, #32]
 8107ace:	431a      	orrs	r2, r3
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	685b      	ldr	r3, [r3, #4]
 8107ad4:	431a      	orrs	r2, r3
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107ada:	431a      	orrs	r2, r3
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	689b      	ldr	r3, [r3, #8]
 8107ae0:	431a      	orrs	r2, r3
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107ae6:	ea42 0103 	orr.w	r1, r2, r3
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	681b      	ldr	r3, [r3, #0]
 8107af2:	430a      	orrs	r2, r1
 8107af4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	685b      	ldr	r3, [r3, #4]
 8107afa:	2b00      	cmp	r3, #0
 8107afc:	d113      	bne.n	8107b26 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	689b      	ldr	r3, [r3, #8]
 8107b04:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107b10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	681b      	ldr	r3, [r3, #0]
 8107b16:	689b      	ldr	r3, [r3, #8]
 8107b18:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	681b      	ldr	r3, [r3, #0]
 8107b20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8107b24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	681b      	ldr	r3, [r3, #0]
 8107b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	681b      	ldr	r3, [r3, #0]
 8107b30:	f022 0201 	bic.w	r2, r2, #1
 8107b34:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107b36:	687b      	ldr	r3, [r7, #4]
 8107b38:	685b      	ldr	r3, [r3, #4]
 8107b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107b3e:	2b00      	cmp	r3, #0
 8107b40:	d00a      	beq.n	8107b58 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107b42:	687b      	ldr	r3, [r7, #4]
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	68db      	ldr	r3, [r3, #12]
 8107b48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107b4c:	687b      	ldr	r3, [r7, #4]
 8107b4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	430a      	orrs	r2, r1
 8107b56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	2200      	movs	r2, #0
 8107b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	2201      	movs	r2, #1
 8107b64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8107b68:	2300      	movs	r3, #0
}
 8107b6a:	4618      	mov	r0, r3
 8107b6c:	3710      	adds	r7, #16
 8107b6e:	46bd      	mov	sp, r7
 8107b70:	bd80      	pop	{r7, pc}
 8107b72:	bf00      	nop
 8107b74:	40013000 	.word	0x40013000
 8107b78:	40003800 	.word	0x40003800
 8107b7c:	40003c00 	.word	0x40003c00

08107b80 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107b80:	b580      	push	{r7, lr}
 8107b82:	b08a      	sub	sp, #40	@ 0x28
 8107b84:	af02      	add	r7, sp, #8
 8107b86:	60f8      	str	r0, [r7, #12]
 8107b88:	60b9      	str	r1, [r7, #8]
 8107b8a:	603b      	str	r3, [r7, #0]
 8107b8c:	4613      	mov	r3, r2
 8107b8e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8107b90:	68fb      	ldr	r3, [r7, #12]
 8107b92:	681b      	ldr	r3, [r3, #0]
 8107b94:	3320      	adds	r3, #32
 8107b96:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8107b98:	2300      	movs	r3, #0
 8107b9a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8107b9c:	68fb      	ldr	r3, [r7, #12]
 8107b9e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8107ba2:	2b01      	cmp	r3, #1
 8107ba4:	d101      	bne.n	8107baa <HAL_SPI_Transmit+0x2a>
 8107ba6:	2302      	movs	r3, #2
 8107ba8:	e1df      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
 8107baa:	68fb      	ldr	r3, [r7, #12]
 8107bac:	2201      	movs	r2, #1
 8107bae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8107bb2:	f7fd fdaf 	bl	8105714 <HAL_GetTick>
 8107bb6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8107bb8:	68fb      	ldr	r3, [r7, #12]
 8107bba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8107bbe:	b2db      	uxtb	r3, r3
 8107bc0:	2b01      	cmp	r3, #1
 8107bc2:	d007      	beq.n	8107bd4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8107bc4:	2302      	movs	r3, #2
 8107bc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8107bc8:	68fb      	ldr	r3, [r7, #12]
 8107bca:	2200      	movs	r2, #0
 8107bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8107bd0:	7efb      	ldrb	r3, [r7, #27]
 8107bd2:	e1ca      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
  }

  if ((pData == NULL) || (Size == 0UL))
 8107bd4:	68bb      	ldr	r3, [r7, #8]
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	d002      	beq.n	8107be0 <HAL_SPI_Transmit+0x60>
 8107bda:	88fb      	ldrh	r3, [r7, #6]
 8107bdc:	2b00      	cmp	r3, #0
 8107bde:	d107      	bne.n	8107bf0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8107be0:	2301      	movs	r3, #1
 8107be2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8107be4:	68fb      	ldr	r3, [r7, #12]
 8107be6:	2200      	movs	r2, #0
 8107be8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8107bec:	7efb      	ldrb	r3, [r7, #27]
 8107bee:	e1bc      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8107bf0:	68fb      	ldr	r3, [r7, #12]
 8107bf2:	2203      	movs	r2, #3
 8107bf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8107bf8:	68fb      	ldr	r3, [r7, #12]
 8107bfa:	2200      	movs	r2, #0
 8107bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8107c00:	68fb      	ldr	r3, [r7, #12]
 8107c02:	68ba      	ldr	r2, [r7, #8]
 8107c04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8107c06:	68fb      	ldr	r3, [r7, #12]
 8107c08:	88fa      	ldrh	r2, [r7, #6]
 8107c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8107c0e:	68fb      	ldr	r3, [r7, #12]
 8107c10:	88fa      	ldrh	r2, [r7, #6]
 8107c12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8107c16:	68fb      	ldr	r3, [r7, #12]
 8107c18:	2200      	movs	r2, #0
 8107c1a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8107c1c:	68fb      	ldr	r3, [r7, #12]
 8107c1e:	2200      	movs	r2, #0
 8107c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8107c24:	68fb      	ldr	r3, [r7, #12]
 8107c26:	2200      	movs	r2, #0
 8107c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8107c2c:	68fb      	ldr	r3, [r7, #12]
 8107c2e:	2200      	movs	r2, #0
 8107c30:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8107c32:	68fb      	ldr	r3, [r7, #12]
 8107c34:	2200      	movs	r2, #0
 8107c36:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8107c38:	68fb      	ldr	r3, [r7, #12]
 8107c3a:	689b      	ldr	r3, [r3, #8]
 8107c3c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8107c40:	d108      	bne.n	8107c54 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8107c42:	68fb      	ldr	r3, [r7, #12]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	681a      	ldr	r2, [r3, #0]
 8107c48:	68fb      	ldr	r3, [r7, #12]
 8107c4a:	681b      	ldr	r3, [r3, #0]
 8107c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107c50:	601a      	str	r2, [r3, #0]
 8107c52:	e009      	b.n	8107c68 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8107c54:	68fb      	ldr	r3, [r7, #12]
 8107c56:	681b      	ldr	r3, [r3, #0]
 8107c58:	68db      	ldr	r3, [r3, #12]
 8107c5a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8107c5e:	68fb      	ldr	r3, [r7, #12]
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8107c66:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107c68:	68fb      	ldr	r3, [r7, #12]
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	685b      	ldr	r3, [r3, #4]
 8107c6e:	0c1b      	lsrs	r3, r3, #16
 8107c70:	041b      	lsls	r3, r3, #16
 8107c72:	88f9      	ldrh	r1, [r7, #6]
 8107c74:	68fa      	ldr	r2, [r7, #12]
 8107c76:	6812      	ldr	r2, [r2, #0]
 8107c78:	430b      	orrs	r3, r1
 8107c7a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8107c7c:	68fb      	ldr	r3, [r7, #12]
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	681a      	ldr	r2, [r3, #0]
 8107c82:	68fb      	ldr	r3, [r7, #12]
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	f042 0201 	orr.w	r2, r2, #1
 8107c8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8107c8c:	68fb      	ldr	r3, [r7, #12]
 8107c8e:	685b      	ldr	r3, [r3, #4]
 8107c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c94:	d107      	bne.n	8107ca6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8107c96:	68fb      	ldr	r3, [r7, #12]
 8107c98:	681b      	ldr	r3, [r3, #0]
 8107c9a:	681a      	ldr	r2, [r3, #0]
 8107c9c:	68fb      	ldr	r3, [r7, #12]
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8107ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8107ca6:	68fb      	ldr	r3, [r7, #12]
 8107ca8:	68db      	ldr	r3, [r3, #12]
 8107caa:	2b0f      	cmp	r3, #15
 8107cac:	d947      	bls.n	8107d3e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8107cae:	e03f      	b.n	8107d30 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107cb0:	68fb      	ldr	r3, [r7, #12]
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	695b      	ldr	r3, [r3, #20]
 8107cb6:	f003 0302 	and.w	r3, r3, #2
 8107cba:	2b02      	cmp	r3, #2
 8107cbc:	d114      	bne.n	8107ce8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8107cbe:	68fb      	ldr	r3, [r7, #12]
 8107cc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107cc2:	68fb      	ldr	r3, [r7, #12]
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	6812      	ldr	r2, [r2, #0]
 8107cc8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107cca:	68fb      	ldr	r3, [r7, #12]
 8107ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107cce:	1d1a      	adds	r2, r3, #4
 8107cd0:	68fb      	ldr	r3, [r7, #12]
 8107cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107cda:	b29b      	uxth	r3, r3
 8107cdc:	3b01      	subs	r3, #1
 8107cde:	b29a      	uxth	r2, r3
 8107ce0:	68fb      	ldr	r3, [r7, #12]
 8107ce2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107ce6:	e023      	b.n	8107d30 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107ce8:	f7fd fd14 	bl	8105714 <HAL_GetTick>
 8107cec:	4602      	mov	r2, r0
 8107cee:	697b      	ldr	r3, [r7, #20]
 8107cf0:	1ad3      	subs	r3, r2, r3
 8107cf2:	683a      	ldr	r2, [r7, #0]
 8107cf4:	429a      	cmp	r2, r3
 8107cf6:	d803      	bhi.n	8107d00 <HAL_SPI_Transmit+0x180>
 8107cf8:	683b      	ldr	r3, [r7, #0]
 8107cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107cfe:	d102      	bne.n	8107d06 <HAL_SPI_Transmit+0x186>
 8107d00:	683b      	ldr	r3, [r7, #0]
 8107d02:	2b00      	cmp	r3, #0
 8107d04:	d114      	bne.n	8107d30 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107d06:	68f8      	ldr	r0, [r7, #12]
 8107d08:	f000 fb4b 	bl	81083a2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107d0c:	68fb      	ldr	r3, [r7, #12]
 8107d0e:	2200      	movs	r2, #0
 8107d10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107d14:	68fb      	ldr	r3, [r7, #12]
 8107d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107d1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107d1e:	68fb      	ldr	r3, [r7, #12]
 8107d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107d24:	68fb      	ldr	r3, [r7, #12]
 8107d26:	2201      	movs	r2, #1
 8107d28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8107d2c:	2303      	movs	r3, #3
 8107d2e:	e11c      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
 8107d30:	68fb      	ldr	r3, [r7, #12]
 8107d32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107d36:	b29b      	uxth	r3, r3
 8107d38:	2b00      	cmp	r3, #0
 8107d3a:	d1b9      	bne.n	8107cb0 <HAL_SPI_Transmit+0x130>
 8107d3c:	e0ef      	b.n	8107f1e <HAL_SPI_Transmit+0x39e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107d3e:	68fb      	ldr	r3, [r7, #12]
 8107d40:	68db      	ldr	r3, [r3, #12]
 8107d42:	2b07      	cmp	r3, #7
 8107d44:	f240 80e4 	bls.w	8107f10 <HAL_SPI_Transmit+0x390>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8107d48:	e05d      	b.n	8107e06 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107d4a:	68fb      	ldr	r3, [r7, #12]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	695b      	ldr	r3, [r3, #20]
 8107d50:	f003 0302 	and.w	r3, r3, #2
 8107d54:	2b02      	cmp	r3, #2
 8107d56:	d132      	bne.n	8107dbe <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8107d58:	68fb      	ldr	r3, [r7, #12]
 8107d5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107d5e:	b29b      	uxth	r3, r3
 8107d60:	2b01      	cmp	r3, #1
 8107d62:	d918      	bls.n	8107d96 <HAL_SPI_Transmit+0x216>
 8107d64:	68fb      	ldr	r3, [r7, #12]
 8107d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107d68:	2b00      	cmp	r3, #0
 8107d6a:	d014      	beq.n	8107d96 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8107d6c:	68fb      	ldr	r3, [r7, #12]
 8107d6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107d70:	68fb      	ldr	r3, [r7, #12]
 8107d72:	681b      	ldr	r3, [r3, #0]
 8107d74:	6812      	ldr	r2, [r2, #0]
 8107d76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107d78:	68fb      	ldr	r3, [r7, #12]
 8107d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107d7c:	1d1a      	adds	r2, r3, #4
 8107d7e:	68fb      	ldr	r3, [r7, #12]
 8107d80:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8107d82:	68fb      	ldr	r3, [r7, #12]
 8107d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107d88:	b29b      	uxth	r3, r3
 8107d8a:	3b02      	subs	r3, #2
 8107d8c:	b29a      	uxth	r2, r3
 8107d8e:	68fb      	ldr	r3, [r7, #12]
 8107d90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107d94:	e037      	b.n	8107e06 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8107d96:	68fb      	ldr	r3, [r7, #12]
 8107d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107d9a:	881a      	ldrh	r2, [r3, #0]
 8107d9c:	69fb      	ldr	r3, [r7, #28]
 8107d9e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8107da0:	68fb      	ldr	r3, [r7, #12]
 8107da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107da4:	1c9a      	adds	r2, r3, #2
 8107da6:	68fb      	ldr	r3, [r7, #12]
 8107da8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8107daa:	68fb      	ldr	r3, [r7, #12]
 8107dac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107db0:	b29b      	uxth	r3, r3
 8107db2:	3b01      	subs	r3, #1
 8107db4:	b29a      	uxth	r2, r3
 8107db6:	68fb      	ldr	r3, [r7, #12]
 8107db8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107dbc:	e023      	b.n	8107e06 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107dbe:	f7fd fca9 	bl	8105714 <HAL_GetTick>
 8107dc2:	4602      	mov	r2, r0
 8107dc4:	697b      	ldr	r3, [r7, #20]
 8107dc6:	1ad3      	subs	r3, r2, r3
 8107dc8:	683a      	ldr	r2, [r7, #0]
 8107dca:	429a      	cmp	r2, r3
 8107dcc:	d803      	bhi.n	8107dd6 <HAL_SPI_Transmit+0x256>
 8107dce:	683b      	ldr	r3, [r7, #0]
 8107dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107dd4:	d102      	bne.n	8107ddc <HAL_SPI_Transmit+0x25c>
 8107dd6:	683b      	ldr	r3, [r7, #0]
 8107dd8:	2b00      	cmp	r3, #0
 8107dda:	d114      	bne.n	8107e06 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107ddc:	68f8      	ldr	r0, [r7, #12]
 8107dde:	f000 fae0 	bl	81083a2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107de2:	68fb      	ldr	r3, [r7, #12]
 8107de4:	2200      	movs	r2, #0
 8107de6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107dea:	68fb      	ldr	r3, [r7, #12]
 8107dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107df0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107df4:	68fb      	ldr	r3, [r7, #12]
 8107df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107dfa:	68fb      	ldr	r3, [r7, #12]
 8107dfc:	2201      	movs	r2, #1
 8107dfe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8107e02:	2303      	movs	r3, #3
 8107e04:	e0b1      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
 8107e06:	68fb      	ldr	r3, [r7, #12]
 8107e08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107e0c:	b29b      	uxth	r3, r3
 8107e0e:	2b00      	cmp	r3, #0
 8107e10:	d19b      	bne.n	8107d4a <HAL_SPI_Transmit+0x1ca>
 8107e12:	e084      	b.n	8107f1e <HAL_SPI_Transmit+0x39e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107e14:	68fb      	ldr	r3, [r7, #12]
 8107e16:	681b      	ldr	r3, [r3, #0]
 8107e18:	695b      	ldr	r3, [r3, #20]
 8107e1a:	f003 0302 	and.w	r3, r3, #2
 8107e1e:	2b02      	cmp	r3, #2
 8107e20:	d152      	bne.n	8107ec8 <HAL_SPI_Transmit+0x348>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8107e22:	68fb      	ldr	r3, [r7, #12]
 8107e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107e28:	b29b      	uxth	r3, r3
 8107e2a:	2b03      	cmp	r3, #3
 8107e2c:	d918      	bls.n	8107e60 <HAL_SPI_Transmit+0x2e0>
 8107e2e:	68fb      	ldr	r3, [r7, #12]
 8107e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107e32:	2b40      	cmp	r3, #64	@ 0x40
 8107e34:	d914      	bls.n	8107e60 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8107e36:	68fb      	ldr	r3, [r7, #12]
 8107e38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107e3a:	68fb      	ldr	r3, [r7, #12]
 8107e3c:	681b      	ldr	r3, [r3, #0]
 8107e3e:	6812      	ldr	r2, [r2, #0]
 8107e40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107e42:	68fb      	ldr	r3, [r7, #12]
 8107e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e46:	1d1a      	adds	r2, r3, #4
 8107e48:	68fb      	ldr	r3, [r7, #12]
 8107e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8107e4c:	68fb      	ldr	r3, [r7, #12]
 8107e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107e52:	b29b      	uxth	r3, r3
 8107e54:	3b04      	subs	r3, #4
 8107e56:	b29a      	uxth	r2, r3
 8107e58:	68fb      	ldr	r3, [r7, #12]
 8107e5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107e5e:	e057      	b.n	8107f10 <HAL_SPI_Transmit+0x390>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8107e60:	68fb      	ldr	r3, [r7, #12]
 8107e62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107e66:	b29b      	uxth	r3, r3
 8107e68:	2b01      	cmp	r3, #1
 8107e6a:	d917      	bls.n	8107e9c <HAL_SPI_Transmit+0x31c>
 8107e6c:	68fb      	ldr	r3, [r7, #12]
 8107e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107e70:	2b00      	cmp	r3, #0
 8107e72:	d013      	beq.n	8107e9c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8107e74:	68fb      	ldr	r3, [r7, #12]
 8107e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e78:	881a      	ldrh	r2, [r3, #0]
 8107e7a:	69fb      	ldr	r3, [r7, #28]
 8107e7c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8107e7e:	68fb      	ldr	r3, [r7, #12]
 8107e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e82:	1c9a      	adds	r2, r3, #2
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8107e88:	68fb      	ldr	r3, [r7, #12]
 8107e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107e8e:	b29b      	uxth	r3, r3
 8107e90:	3b02      	subs	r3, #2
 8107e92:	b29a      	uxth	r2, r3
 8107e94:	68fb      	ldr	r3, [r7, #12]
 8107e96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107e9a:	e039      	b.n	8107f10 <HAL_SPI_Transmit+0x390>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8107e9c:	68fb      	ldr	r3, [r7, #12]
 8107e9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107ea0:	68fb      	ldr	r3, [r7, #12]
 8107ea2:	681b      	ldr	r3, [r3, #0]
 8107ea4:	3320      	adds	r3, #32
 8107ea6:	7812      	ldrb	r2, [r2, #0]
 8107ea8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8107eaa:	68fb      	ldr	r3, [r7, #12]
 8107eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107eae:	1c5a      	adds	r2, r3, #1
 8107eb0:	68fb      	ldr	r3, [r7, #12]
 8107eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8107eb4:	68fb      	ldr	r3, [r7, #12]
 8107eb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107eba:	b29b      	uxth	r3, r3
 8107ebc:	3b01      	subs	r3, #1
 8107ebe:	b29a      	uxth	r2, r3
 8107ec0:	68fb      	ldr	r3, [r7, #12]
 8107ec2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107ec6:	e023      	b.n	8107f10 <HAL_SPI_Transmit+0x390>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107ec8:	f7fd fc24 	bl	8105714 <HAL_GetTick>
 8107ecc:	4602      	mov	r2, r0
 8107ece:	697b      	ldr	r3, [r7, #20]
 8107ed0:	1ad3      	subs	r3, r2, r3
 8107ed2:	683a      	ldr	r2, [r7, #0]
 8107ed4:	429a      	cmp	r2, r3
 8107ed6:	d803      	bhi.n	8107ee0 <HAL_SPI_Transmit+0x360>
 8107ed8:	683b      	ldr	r3, [r7, #0]
 8107eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107ede:	d102      	bne.n	8107ee6 <HAL_SPI_Transmit+0x366>
 8107ee0:	683b      	ldr	r3, [r7, #0]
 8107ee2:	2b00      	cmp	r3, #0
 8107ee4:	d114      	bne.n	8107f10 <HAL_SPI_Transmit+0x390>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107ee6:	68f8      	ldr	r0, [r7, #12]
 8107ee8:	f000 fa5b 	bl	81083a2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107eec:	68fb      	ldr	r3, [r7, #12]
 8107eee:	2200      	movs	r2, #0
 8107ef0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107ef4:	68fb      	ldr	r3, [r7, #12]
 8107ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107efa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107efe:	68fb      	ldr	r3, [r7, #12]
 8107f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107f04:	68fb      	ldr	r3, [r7, #12]
 8107f06:	2201      	movs	r2, #1
 8107f08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8107f0c:	2303      	movs	r3, #3
 8107f0e:	e02c      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
 8107f10:	68fb      	ldr	r3, [r7, #12]
 8107f12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107f16:	b29b      	uxth	r3, r3
 8107f18:	2b00      	cmp	r3, #0
 8107f1a:	f47f af7b 	bne.w	8107e14 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8107f1e:	697b      	ldr	r3, [r7, #20]
 8107f20:	9300      	str	r3, [sp, #0]
 8107f22:	683b      	ldr	r3, [r7, #0]
 8107f24:	2200      	movs	r2, #0
 8107f26:	2108      	movs	r1, #8
 8107f28:	68f8      	ldr	r0, [r7, #12]
 8107f2a:	f000 fada 	bl	81084e2 <SPI_WaitOnFlagUntilTimeout>
 8107f2e:	4603      	mov	r3, r0
 8107f30:	2b00      	cmp	r3, #0
 8107f32:	d007      	beq.n	8107f44 <HAL_SPI_Transmit+0x3c4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8107f34:	68fb      	ldr	r3, [r7, #12]
 8107f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107f3a:	f043 0220 	orr.w	r2, r3, #32
 8107f3e:	68fb      	ldr	r3, [r7, #12]
 8107f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8107f44:	68f8      	ldr	r0, [r7, #12]
 8107f46:	f000 fa2c 	bl	81083a2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8107f4a:	68fb      	ldr	r3, [r7, #12]
 8107f4c:	2200      	movs	r2, #0
 8107f4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8107f52:	68fb      	ldr	r3, [r7, #12]
 8107f54:	2201      	movs	r2, #1
 8107f56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107f5a:	68fb      	ldr	r3, [r7, #12]
 8107f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107f60:	2b00      	cmp	r3, #0
 8107f62:	d001      	beq.n	8107f68 <HAL_SPI_Transmit+0x3e8>
  {
    return HAL_ERROR;
 8107f64:	2301      	movs	r3, #1
 8107f66:	e000      	b.n	8107f6a <HAL_SPI_Transmit+0x3ea>
  }
  return errorcode;
 8107f68:	7efb      	ldrb	r3, [r7, #27]
}
 8107f6a:	4618      	mov	r0, r3
 8107f6c:	3720      	adds	r7, #32
 8107f6e:	46bd      	mov	sp, r7
 8107f70:	bd80      	pop	{r7, pc}

08107f72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8107f72:	b580      	push	{r7, lr}
 8107f74:	b08c      	sub	sp, #48	@ 0x30
 8107f76:	af02      	add	r7, sp, #8
 8107f78:	60f8      	str	r0, [r7, #12]
 8107f7a:	60b9      	str	r1, [r7, #8]
 8107f7c:	607a      	str	r2, [r7, #4]
 8107f7e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8107f80:	2300      	movs	r3, #0
 8107f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8107f86:	68fb      	ldr	r3, [r7, #12]
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	3320      	adds	r3, #32
 8107f8c:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8107f8e:	68fb      	ldr	r3, [r7, #12]
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	3330      	adds	r3, #48	@ 0x30
 8107f94:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8107f96:	68fb      	ldr	r3, [r7, #12]
 8107f98:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8107f9c:	2b01      	cmp	r3, #1
 8107f9e:	d101      	bne.n	8107fa4 <HAL_SPI_TransmitReceive+0x32>
 8107fa0:	2302      	movs	r3, #2
 8107fa2:	e1fa      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
 8107fa4:	68fb      	ldr	r3, [r7, #12]
 8107fa6:	2201      	movs	r2, #1
 8107fa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8107fac:	f7fd fbb2 	bl	8105714 <HAL_GetTick>
 8107fb0:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8107fb2:	887b      	ldrh	r3, [r7, #2]
 8107fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8107fb6:	887b      	ldrh	r3, [r7, #2]
 8107fb8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8107fba:	68fb      	ldr	r3, [r7, #12]
 8107fbc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8107fc0:	b2db      	uxtb	r3, r3
 8107fc2:	2b01      	cmp	r3, #1
 8107fc4:	d009      	beq.n	8107fda <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8107fc6:	2302      	movs	r3, #2
 8107fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 8107fcc:	68fb      	ldr	r3, [r7, #12]
 8107fce:	2200      	movs	r2, #0
 8107fd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8107fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8107fd8:	e1df      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8107fda:	68bb      	ldr	r3, [r7, #8]
 8107fdc:	2b00      	cmp	r3, #0
 8107fde:	d005      	beq.n	8107fec <HAL_SPI_TransmitReceive+0x7a>
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	2b00      	cmp	r3, #0
 8107fe4:	d002      	beq.n	8107fec <HAL_SPI_TransmitReceive+0x7a>
 8107fe6:	887b      	ldrh	r3, [r7, #2]
 8107fe8:	2b00      	cmp	r3, #0
 8107fea:	d109      	bne.n	8108000 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8107fec:	2301      	movs	r3, #1
 8107fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 8107ff2:	68fb      	ldr	r3, [r7, #12]
 8107ff4:	2200      	movs	r2, #0
 8107ff6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8107ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8107ffe:	e1cc      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8108000:	68fb      	ldr	r3, [r7, #12]
 8108002:	2205      	movs	r2, #5
 8108004:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8108008:	68fb      	ldr	r3, [r7, #12]
 810800a:	2200      	movs	r2, #0
 810800c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8108010:	68fb      	ldr	r3, [r7, #12]
 8108012:	687a      	ldr	r2, [r7, #4]
 8108014:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8108016:	68fb      	ldr	r3, [r7, #12]
 8108018:	887a      	ldrh	r2, [r7, #2]
 810801a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 810801e:	68fb      	ldr	r3, [r7, #12]
 8108020:	887a      	ldrh	r2, [r7, #2]
 8108022:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8108026:	68fb      	ldr	r3, [r7, #12]
 8108028:	68ba      	ldr	r2, [r7, #8]
 810802a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 810802c:	68fb      	ldr	r3, [r7, #12]
 810802e:	887a      	ldrh	r2, [r7, #2]
 8108030:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8108034:	68fb      	ldr	r3, [r7, #12]
 8108036:	887a      	ldrh	r2, [r7, #2]
 8108038:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810803c:	68fb      	ldr	r3, [r7, #12]
 810803e:	2200      	movs	r2, #0
 8108040:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8108042:	68fb      	ldr	r3, [r7, #12]
 8108044:	2200      	movs	r2, #0
 8108046:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8108048:	68fb      	ldr	r3, [r7, #12]
 810804a:	681b      	ldr	r3, [r3, #0]
 810804c:	68da      	ldr	r2, [r3, #12]
 810804e:	68fb      	ldr	r3, [r7, #12]
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8108056:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8108058:	68fb      	ldr	r3, [r7, #12]
 810805a:	681b      	ldr	r3, [r3, #0]
 810805c:	685b      	ldr	r3, [r3, #4]
 810805e:	0c1b      	lsrs	r3, r3, #16
 8108060:	041b      	lsls	r3, r3, #16
 8108062:	8879      	ldrh	r1, [r7, #2]
 8108064:	68fa      	ldr	r2, [r7, #12]
 8108066:	6812      	ldr	r2, [r2, #0]
 8108068:	430b      	orrs	r3, r1
 810806a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810806c:	68fb      	ldr	r3, [r7, #12]
 810806e:	681b      	ldr	r3, [r3, #0]
 8108070:	681a      	ldr	r2, [r3, #0]
 8108072:	68fb      	ldr	r3, [r7, #12]
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	f042 0201 	orr.w	r2, r2, #1
 810807a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810807c:	68fb      	ldr	r3, [r7, #12]
 810807e:	685b      	ldr	r3, [r3, #4]
 8108080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108084:	d107      	bne.n	8108096 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8108086:	68fb      	ldr	r3, [r7, #12]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	681a      	ldr	r2, [r3, #0]
 810808c:	68fb      	ldr	r3, [r7, #12]
 810808e:	681b      	ldr	r3, [r3, #0]
 8108090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8108094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8108096:	68fb      	ldr	r3, [r7, #12]
 8108098:	68db      	ldr	r3, [r3, #12]
 810809a:	2b0f      	cmp	r3, #15
 810809c:	d970      	bls.n	8108180 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810809e:	e068      	b.n	8108172 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81080a0:	68fb      	ldr	r3, [r7, #12]
 81080a2:	681b      	ldr	r3, [r3, #0]
 81080a4:	695b      	ldr	r3, [r3, #20]
 81080a6:	f003 0302 	and.w	r3, r3, #2
 81080aa:	2b02      	cmp	r3, #2
 81080ac:	d11a      	bne.n	81080e4 <HAL_SPI_TransmitReceive+0x172>
 81080ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81080b0:	2b00      	cmp	r3, #0
 81080b2:	d017      	beq.n	81080e4 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81080b4:	68fb      	ldr	r3, [r7, #12]
 81080b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81080b8:	68fb      	ldr	r3, [r7, #12]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	6812      	ldr	r2, [r2, #0]
 81080be:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81080c0:	68fb      	ldr	r3, [r7, #12]
 81080c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81080c4:	1d1a      	adds	r2, r3, #4
 81080c6:	68fb      	ldr	r3, [r7, #12]
 81080c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 81080ca:	68fb      	ldr	r3, [r7, #12]
 81080cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81080d0:	b29b      	uxth	r3, r3
 81080d2:	3b01      	subs	r3, #1
 81080d4:	b29a      	uxth	r2, r3
 81080d6:	68fb      	ldr	r3, [r7, #12]
 81080d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81080dc:	68fb      	ldr	r3, [r7, #12]
 81080de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81080e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 81080e4:	68fb      	ldr	r3, [r7, #12]
 81080e6:	681b      	ldr	r3, [r3, #0]
 81080e8:	695a      	ldr	r2, [r3, #20]
 81080ea:	f248 0308 	movw	r3, #32776	@ 0x8008
 81080ee:	4013      	ands	r3, r2
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d01a      	beq.n	810812a <HAL_SPI_TransmitReceive+0x1b8>
 81080f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81080f6:	2b00      	cmp	r3, #0
 81080f8:	d017      	beq.n	810812a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81080fa:	68fb      	ldr	r3, [r7, #12]
 81080fc:	681a      	ldr	r2, [r3, #0]
 81080fe:	68fb      	ldr	r3, [r7, #12]
 8108100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108102:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8108104:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8108106:	68fb      	ldr	r3, [r7, #12]
 8108108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810810a:	1d1a      	adds	r2, r3, #4
 810810c:	68fb      	ldr	r3, [r7, #12]
 810810e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount --;
 8108110:	68fb      	ldr	r3, [r7, #12]
 8108112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8108116:	b29b      	uxth	r3, r3
 8108118:	3b01      	subs	r3, #1
 810811a:	b29a      	uxth	r2, r3
 810811c:	68fb      	ldr	r3, [r7, #12]
 810811e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8108122:	68fb      	ldr	r3, [r7, #12]
 8108124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8108128:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810812a:	f7fd faf3 	bl	8105714 <HAL_GetTick>
 810812e:	4602      	mov	r2, r0
 8108130:	697b      	ldr	r3, [r7, #20]
 8108132:	1ad3      	subs	r3, r2, r3
 8108134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108136:	429a      	cmp	r2, r3
 8108138:	d803      	bhi.n	8108142 <HAL_SPI_TransmitReceive+0x1d0>
 810813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108140:	d102      	bne.n	8108148 <HAL_SPI_TransmitReceive+0x1d6>
 8108142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108144:	2b00      	cmp	r3, #0
 8108146:	d114      	bne.n	8108172 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8108148:	68f8      	ldr	r0, [r7, #12]
 810814a:	f000 f92a 	bl	81083a2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810814e:	68fb      	ldr	r3, [r7, #12]
 8108150:	2200      	movs	r2, #0
 8108152:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8108156:	68fb      	ldr	r3, [r7, #12]
 8108158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810815c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8108160:	68fb      	ldr	r3, [r7, #12]
 8108162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8108166:	68fb      	ldr	r3, [r7, #12]
 8108168:	2201      	movs	r2, #1
 810816a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 810816e:	2303      	movs	r3, #3
 8108170:	e113      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8108172:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8108174:	2b00      	cmp	r3, #0
 8108176:	d193      	bne.n	81080a0 <HAL_SPI_TransmitReceive+0x12e>
 8108178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810817a:	2b00      	cmp	r3, #0
 810817c:	d190      	bne.n	81080a0 <HAL_SPI_TransmitReceive+0x12e>
 810817e:	e0e5      	b.n	810834c <HAL_SPI_TransmitReceive+0x3da>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8108180:	68fb      	ldr	r3, [r7, #12]
 8108182:	68db      	ldr	r3, [r3, #12]
 8108184:	2b07      	cmp	r3, #7
 8108186:	f240 80db 	bls.w	8108340 <HAL_SPI_TransmitReceive+0x3ce>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810818a:	e066      	b.n	810825a <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810818c:	68fb      	ldr	r3, [r7, #12]
 810818e:	681b      	ldr	r3, [r3, #0]
 8108190:	695b      	ldr	r3, [r3, #20]
 8108192:	f003 0302 	and.w	r3, r3, #2
 8108196:	2b02      	cmp	r3, #2
 8108198:	d119      	bne.n	81081ce <HAL_SPI_TransmitReceive+0x25c>
 810819a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810819c:	2b00      	cmp	r3, #0
 810819e:	d016      	beq.n	81081ce <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81081a0:	68fb      	ldr	r3, [r7, #12]
 81081a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81081a4:	881a      	ldrh	r2, [r3, #0]
 81081a6:	69fb      	ldr	r3, [r7, #28]
 81081a8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 81081aa:	68fb      	ldr	r3, [r7, #12]
 81081ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81081ae:	1c9a      	adds	r2, r3, #2
 81081b0:	68fb      	ldr	r3, [r7, #12]
 81081b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 81081b4:	68fb      	ldr	r3, [r7, #12]
 81081b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81081ba:	b29b      	uxth	r3, r3
 81081bc:	3b01      	subs	r3, #1
 81081be:	b29a      	uxth	r2, r3
 81081c0:	68fb      	ldr	r3, [r7, #12]
 81081c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81081c6:	68fb      	ldr	r3, [r7, #12]
 81081c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81081cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 81081ce:	68fb      	ldr	r3, [r7, #12]
 81081d0:	681b      	ldr	r3, [r3, #0]
 81081d2:	695b      	ldr	r3, [r3, #20]
 81081d4:	f003 0301 	and.w	r3, r3, #1
 81081d8:	2b01      	cmp	r3, #1
 81081da:	d11a      	bne.n	8108212 <HAL_SPI_TransmitReceive+0x2a0>
 81081dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81081de:	2b00      	cmp	r3, #0
 81081e0:	d017      	beq.n	8108212 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81081e2:	68fb      	ldr	r3, [r7, #12]
 81081e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81081e6:	69ba      	ldr	r2, [r7, #24]
 81081e8:	8812      	ldrh	r2, [r2, #0]
 81081ea:	b292      	uxth	r2, r2
 81081ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 81081ee:	68fb      	ldr	r3, [r7, #12]
 81081f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81081f2:	1c9a      	adds	r2, r3, #2
 81081f4:	68fb      	ldr	r3, [r7, #12]
 81081f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 81081f8:	68fb      	ldr	r3, [r7, #12]
 81081fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81081fe:	b29b      	uxth	r3, r3
 8108200:	3b01      	subs	r3, #1
 8108202:	b29a      	uxth	r2, r3
 8108204:	68fb      	ldr	r3, [r7, #12]
 8108206:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810820a:	68fb      	ldr	r3, [r7, #12]
 810820c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8108210:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8108212:	f7fd fa7f 	bl	8105714 <HAL_GetTick>
 8108216:	4602      	mov	r2, r0
 8108218:	697b      	ldr	r3, [r7, #20]
 810821a:	1ad3      	subs	r3, r2, r3
 810821c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810821e:	429a      	cmp	r2, r3
 8108220:	d803      	bhi.n	810822a <HAL_SPI_TransmitReceive+0x2b8>
 8108222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108228:	d102      	bne.n	8108230 <HAL_SPI_TransmitReceive+0x2be>
 810822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810822c:	2b00      	cmp	r3, #0
 810822e:	d114      	bne.n	810825a <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8108230:	68f8      	ldr	r0, [r7, #12]
 8108232:	f000 f8b6 	bl	81083a2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8108236:	68fb      	ldr	r3, [r7, #12]
 8108238:	2200      	movs	r2, #0
 810823a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810823e:	68fb      	ldr	r3, [r7, #12]
 8108240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108244:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8108248:	68fb      	ldr	r3, [r7, #12]
 810824a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810824e:	68fb      	ldr	r3, [r7, #12]
 8108250:	2201      	movs	r2, #1
 8108252:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 8108256:	2303      	movs	r3, #3
 8108258:	e09f      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810825a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810825c:	2b00      	cmp	r3, #0
 810825e:	d195      	bne.n	810818c <HAL_SPI_TransmitReceive+0x21a>
 8108260:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8108262:	2b00      	cmp	r3, #0
 8108264:	d192      	bne.n	810818c <HAL_SPI_TransmitReceive+0x21a>
 8108266:	e071      	b.n	810834c <HAL_SPI_TransmitReceive+0x3da>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8108268:	68fb      	ldr	r3, [r7, #12]
 810826a:	681b      	ldr	r3, [r3, #0]
 810826c:	695b      	ldr	r3, [r3, #20]
 810826e:	f003 0302 	and.w	r3, r3, #2
 8108272:	2b02      	cmp	r3, #2
 8108274:	d11b      	bne.n	81082ae <HAL_SPI_TransmitReceive+0x33c>
 8108276:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8108278:	2b00      	cmp	r3, #0
 810827a:	d018      	beq.n	81082ae <HAL_SPI_TransmitReceive+0x33c>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 810827c:	68fb      	ldr	r3, [r7, #12]
 810827e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8108280:	68fb      	ldr	r3, [r7, #12]
 8108282:	681b      	ldr	r3, [r3, #0]
 8108284:	3320      	adds	r3, #32
 8108286:	7812      	ldrb	r2, [r2, #0]
 8108288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810828a:	68fb      	ldr	r3, [r7, #12]
 810828c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810828e:	1c5a      	adds	r2, r3, #1
 8108290:	68fb      	ldr	r3, [r7, #12]
 8108292:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8108294:	68fb      	ldr	r3, [r7, #12]
 8108296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810829a:	b29b      	uxth	r3, r3
 810829c:	3b01      	subs	r3, #1
 810829e:	b29a      	uxth	r2, r3
 81082a0:	68fb      	ldr	r3, [r7, #12]
 81082a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81082a6:	68fb      	ldr	r3, [r7, #12]
 81082a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81082ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 81082ae:	68fb      	ldr	r3, [r7, #12]
 81082b0:	681b      	ldr	r3, [r3, #0]
 81082b2:	695b      	ldr	r3, [r3, #20]
 81082b4:	f003 0301 	and.w	r3, r3, #1
 81082b8:	2b01      	cmp	r3, #1
 81082ba:	d11d      	bne.n	81082f8 <HAL_SPI_TransmitReceive+0x386>
 81082bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d01a      	beq.n	81082f8 <HAL_SPI_TransmitReceive+0x386>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81082c2:	68fb      	ldr	r3, [r7, #12]
 81082c4:	681b      	ldr	r3, [r3, #0]
 81082c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81082ca:	68fb      	ldr	r3, [r7, #12]
 81082cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81082ce:	7812      	ldrb	r2, [r2, #0]
 81082d0:	b2d2      	uxtb	r2, r2
 81082d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81082d4:	68fb      	ldr	r3, [r7, #12]
 81082d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81082d8:	1c5a      	adds	r2, r3, #1
 81082da:	68fb      	ldr	r3, [r7, #12]
 81082dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 81082de:	68fb      	ldr	r3, [r7, #12]
 81082e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81082e4:	b29b      	uxth	r3, r3
 81082e6:	3b01      	subs	r3, #1
 81082e8:	b29a      	uxth	r2, r3
 81082ea:	68fb      	ldr	r3, [r7, #12]
 81082ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81082f0:	68fb      	ldr	r3, [r7, #12]
 81082f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81082f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81082f8:	f7fd fa0c 	bl	8105714 <HAL_GetTick>
 81082fc:	4602      	mov	r2, r0
 81082fe:	697b      	ldr	r3, [r7, #20]
 8108300:	1ad3      	subs	r3, r2, r3
 8108302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108304:	429a      	cmp	r2, r3
 8108306:	d803      	bhi.n	8108310 <HAL_SPI_TransmitReceive+0x39e>
 8108308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810830e:	d102      	bne.n	8108316 <HAL_SPI_TransmitReceive+0x3a4>
 8108310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108312:	2b00      	cmp	r3, #0
 8108314:	d114      	bne.n	8108340 <HAL_SPI_TransmitReceive+0x3ce>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8108316:	68f8      	ldr	r0, [r7, #12]
 8108318:	f000 f843 	bl	81083a2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810831c:	68fb      	ldr	r3, [r7, #12]
 810831e:	2200      	movs	r2, #0
 8108320:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8108324:	68fb      	ldr	r3, [r7, #12]
 8108326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810832a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810832e:	68fb      	ldr	r3, [r7, #12]
 8108330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8108334:	68fb      	ldr	r3, [r7, #12]
 8108336:	2201      	movs	r2, #1
 8108338:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 810833c:	2303      	movs	r3, #3
 810833e:	e02c      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8108340:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8108342:	2b00      	cmp	r3, #0
 8108344:	d190      	bne.n	8108268 <HAL_SPI_TransmitReceive+0x2f6>
 8108346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8108348:	2b00      	cmp	r3, #0
 810834a:	d18d      	bne.n	8108268 <HAL_SPI_TransmitReceive+0x2f6>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 810834c:	697b      	ldr	r3, [r7, #20]
 810834e:	9300      	str	r3, [sp, #0]
 8108350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108352:	2200      	movs	r2, #0
 8108354:	2108      	movs	r1, #8
 8108356:	68f8      	ldr	r0, [r7, #12]
 8108358:	f000 f8c3 	bl	81084e2 <SPI_WaitOnFlagUntilTimeout>
 810835c:	4603      	mov	r3, r0
 810835e:	2b00      	cmp	r3, #0
 8108360:	d007      	beq.n	8108372 <HAL_SPI_TransmitReceive+0x400>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8108362:	68fb      	ldr	r3, [r7, #12]
 8108364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108368:	f043 0220 	orr.w	r2, r3, #32
 810836c:	68fb      	ldr	r3, [r7, #12]
 810836e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8108372:	68f8      	ldr	r0, [r7, #12]
 8108374:	f000 f815 	bl	81083a2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8108378:	68fb      	ldr	r3, [r7, #12]
 810837a:	2200      	movs	r2, #0
 810837c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8108380:	68fb      	ldr	r3, [r7, #12]
 8108382:	2201      	movs	r2, #1
 8108384:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8108388:	68fb      	ldr	r3, [r7, #12]
 810838a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810838e:	2b00      	cmp	r3, #0
 8108390:	d001      	beq.n	8108396 <HAL_SPI_TransmitReceive+0x424>
  {
    return HAL_ERROR;
 8108392:	2301      	movs	r3, #1
 8108394:	e001      	b.n	810839a <HAL_SPI_TransmitReceive+0x428>
  }
  return errorcode;
 8108396:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 810839a:	4618      	mov	r0, r3
 810839c:	3728      	adds	r7, #40	@ 0x28
 810839e:	46bd      	mov	sp, r7
 81083a0:	bd80      	pop	{r7, pc}

081083a2 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81083a2:	b480      	push	{r7}
 81083a4:	b085      	sub	sp, #20
 81083a6:	af00      	add	r7, sp, #0
 81083a8:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81083aa:	687b      	ldr	r3, [r7, #4]
 81083ac:	681b      	ldr	r3, [r3, #0]
 81083ae:	695b      	ldr	r3, [r3, #20]
 81083b0:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81083b2:	687b      	ldr	r3, [r7, #4]
 81083b4:	681b      	ldr	r3, [r3, #0]
 81083b6:	699a      	ldr	r2, [r3, #24]
 81083b8:	687b      	ldr	r3, [r7, #4]
 81083ba:	681b      	ldr	r3, [r3, #0]
 81083bc:	f042 0208 	orr.w	r2, r2, #8
 81083c0:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	699a      	ldr	r2, [r3, #24]
 81083c8:	687b      	ldr	r3, [r7, #4]
 81083ca:	681b      	ldr	r3, [r3, #0]
 81083cc:	f042 0210 	orr.w	r2, r2, #16
 81083d0:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81083d2:	687b      	ldr	r3, [r7, #4]
 81083d4:	681b      	ldr	r3, [r3, #0]
 81083d6:	681a      	ldr	r2, [r3, #0]
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	681b      	ldr	r3, [r3, #0]
 81083dc:	f022 0201 	bic.w	r2, r2, #1
 81083e0:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	681b      	ldr	r3, [r3, #0]
 81083e6:	691b      	ldr	r3, [r3, #16]
 81083e8:	687a      	ldr	r2, [r7, #4]
 81083ea:	6812      	ldr	r2, [r2, #0]
 81083ec:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 81083f0:	f023 0303 	bic.w	r3, r3, #3
 81083f4:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81083f6:	687b      	ldr	r3, [r7, #4]
 81083f8:	681b      	ldr	r3, [r3, #0]
 81083fa:	689a      	ldr	r2, [r3, #8]
 81083fc:	687b      	ldr	r3, [r7, #4]
 81083fe:	681b      	ldr	r3, [r3, #0]
 8108400:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8108404:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8108406:	687b      	ldr	r3, [r7, #4]
 8108408:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810840c:	b2db      	uxtb	r3, r3
 810840e:	2b04      	cmp	r3, #4
 8108410:	d014      	beq.n	810843c <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8108412:	68fb      	ldr	r3, [r7, #12]
 8108414:	f003 0320 	and.w	r3, r3, #32
 8108418:	2b00      	cmp	r3, #0
 810841a:	d00f      	beq.n	810843c <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108422:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	699a      	ldr	r2, [r3, #24]
 8108432:	687b      	ldr	r3, [r7, #4]
 8108434:	681b      	ldr	r3, [r3, #0]
 8108436:	f042 0220 	orr.w	r2, r2, #32
 810843a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8108442:	b2db      	uxtb	r3, r3
 8108444:	2b03      	cmp	r3, #3
 8108446:	d014      	beq.n	8108472 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8108448:	68fb      	ldr	r3, [r7, #12]
 810844a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810844e:	2b00      	cmp	r3, #0
 8108450:	d00f      	beq.n	8108472 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108458:	f043 0204 	orr.w	r2, r3, #4
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	699a      	ldr	r2, [r3, #24]
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	681b      	ldr	r3, [r3, #0]
 810846c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8108470:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8108472:	68fb      	ldr	r3, [r7, #12]
 8108474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108478:	2b00      	cmp	r3, #0
 810847a:	d00f      	beq.n	810849c <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108482:	f043 0201 	orr.w	r2, r3, #1
 8108486:	687b      	ldr	r3, [r7, #4]
 8108488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	699a      	ldr	r2, [r3, #24]
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810849a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810849c:	68fb      	ldr	r3, [r7, #12]
 810849e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d00f      	beq.n	81084c6 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81084ac:	f043 0208 	orr.w	r2, r3, #8
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81084b6:	687b      	ldr	r3, [r7, #4]
 81084b8:	681b      	ldr	r3, [r3, #0]
 81084ba:	699a      	ldr	r2, [r3, #24]
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81084c4:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81084c6:	687b      	ldr	r3, [r7, #4]
 81084c8:	2200      	movs	r2, #0
 81084ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	2200      	movs	r2, #0
 81084d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 81084d6:	bf00      	nop
 81084d8:	3714      	adds	r7, #20
 81084da:	46bd      	mov	sp, r7
 81084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084e0:	4770      	bx	lr

081084e2 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81084e2:	b580      	push	{r7, lr}
 81084e4:	b084      	sub	sp, #16
 81084e6:	af00      	add	r7, sp, #0
 81084e8:	60f8      	str	r0, [r7, #12]
 81084ea:	60b9      	str	r1, [r7, #8]
 81084ec:	603b      	str	r3, [r7, #0]
 81084ee:	4613      	mov	r3, r2
 81084f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81084f2:	e010      	b.n	8108516 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81084f4:	f7fd f90e 	bl	8105714 <HAL_GetTick>
 81084f8:	4602      	mov	r2, r0
 81084fa:	69bb      	ldr	r3, [r7, #24]
 81084fc:	1ad3      	subs	r3, r2, r3
 81084fe:	683a      	ldr	r2, [r7, #0]
 8108500:	429a      	cmp	r2, r3
 8108502:	d803      	bhi.n	810850c <SPI_WaitOnFlagUntilTimeout+0x2a>
 8108504:	683b      	ldr	r3, [r7, #0]
 8108506:	f1b3 3fff 	cmp.w	r3, #4294967295
 810850a:	d102      	bne.n	8108512 <SPI_WaitOnFlagUntilTimeout+0x30>
 810850c:	683b      	ldr	r3, [r7, #0]
 810850e:	2b00      	cmp	r3, #0
 8108510:	d101      	bne.n	8108516 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8108512:	2303      	movs	r3, #3
 8108514:	e00f      	b.n	8108536 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8108516:	68fb      	ldr	r3, [r7, #12]
 8108518:	681b      	ldr	r3, [r3, #0]
 810851a:	695a      	ldr	r2, [r3, #20]
 810851c:	68bb      	ldr	r3, [r7, #8]
 810851e:	4013      	ands	r3, r2
 8108520:	68ba      	ldr	r2, [r7, #8]
 8108522:	429a      	cmp	r2, r3
 8108524:	bf0c      	ite	eq
 8108526:	2301      	moveq	r3, #1
 8108528:	2300      	movne	r3, #0
 810852a:	b2db      	uxtb	r3, r3
 810852c:	461a      	mov	r2, r3
 810852e:	79fb      	ldrb	r3, [r7, #7]
 8108530:	429a      	cmp	r2, r3
 8108532:	d0df      	beq.n	81084f4 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8108534:	2300      	movs	r3, #0
}
 8108536:	4618      	mov	r0, r3
 8108538:	3710      	adds	r7, #16
 810853a:	46bd      	mov	sp, r7
 810853c:	bd80      	pop	{r7, pc}

0810853e <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810853e:	b480      	push	{r7}
 8108540:	b085      	sub	sp, #20
 8108542:	af00      	add	r7, sp, #0
 8108544:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8108546:	687b      	ldr	r3, [r7, #4]
 8108548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810854a:	095b      	lsrs	r3, r3, #5
 810854c:	3301      	adds	r3, #1
 810854e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	68db      	ldr	r3, [r3, #12]
 8108554:	3301      	adds	r3, #1
 8108556:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8108558:	68bb      	ldr	r3, [r7, #8]
 810855a:	3307      	adds	r3, #7
 810855c:	08db      	lsrs	r3, r3, #3
 810855e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8108560:	68bb      	ldr	r3, [r7, #8]
 8108562:	68fa      	ldr	r2, [r7, #12]
 8108564:	fb02 f303 	mul.w	r3, r2, r3
}
 8108568:	4618      	mov	r0, r3
 810856a:	3714      	adds	r7, #20
 810856c:	46bd      	mov	sp, r7
 810856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108572:	4770      	bx	lr

08108574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108574:	b580      	push	{r7, lr}
 8108576:	b082      	sub	sp, #8
 8108578:	af00      	add	r7, sp, #0
 810857a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810857c:	687b      	ldr	r3, [r7, #4]
 810857e:	2b00      	cmp	r3, #0
 8108580:	d101      	bne.n	8108586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8108582:	2301      	movs	r3, #1
 8108584:	e049      	b.n	810861a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810858c:	b2db      	uxtb	r3, r3
 810858e:	2b00      	cmp	r3, #0
 8108590:	d106      	bne.n	81085a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	2200      	movs	r2, #0
 8108596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810859a:	6878      	ldr	r0, [r7, #4]
 810859c:	f7fc fe54 	bl	8105248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	2202      	movs	r2, #2
 81085a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	681a      	ldr	r2, [r3, #0]
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	3304      	adds	r3, #4
 81085b0:	4619      	mov	r1, r3
 81085b2:	4610      	mov	r0, r2
 81085b4:	f000 fb8c 	bl	8108cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	2201      	movs	r2, #1
 81085bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81085c0:	687b      	ldr	r3, [r7, #4]
 81085c2:	2201      	movs	r2, #1
 81085c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	2201      	movs	r2, #1
 81085cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81085d0:	687b      	ldr	r3, [r7, #4]
 81085d2:	2201      	movs	r2, #1
 81085d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	2201      	movs	r2, #1
 81085dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81085e0:	687b      	ldr	r3, [r7, #4]
 81085e2:	2201      	movs	r2, #1
 81085e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81085e8:	687b      	ldr	r3, [r7, #4]
 81085ea:	2201      	movs	r2, #1
 81085ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81085f0:	687b      	ldr	r3, [r7, #4]
 81085f2:	2201      	movs	r2, #1
 81085f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	2201      	movs	r2, #1
 81085fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8108600:	687b      	ldr	r3, [r7, #4]
 8108602:	2201      	movs	r2, #1
 8108604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	2201      	movs	r2, #1
 810860c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	2201      	movs	r2, #1
 8108614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8108618:	2300      	movs	r3, #0
}
 810861a:	4618      	mov	r0, r3
 810861c:	3708      	adds	r7, #8
 810861e:	46bd      	mov	sp, r7
 8108620:	bd80      	pop	{r7, pc}
	...

08108624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8108624:	b480      	push	{r7}
 8108626:	b085      	sub	sp, #20
 8108628:	af00      	add	r7, sp, #0
 810862a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108632:	b2db      	uxtb	r3, r3
 8108634:	2b01      	cmp	r3, #1
 8108636:	d001      	beq.n	810863c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8108638:	2301      	movs	r3, #1
 810863a:	e04c      	b.n	81086d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	2202      	movs	r2, #2
 8108640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	681b      	ldr	r3, [r3, #0]
 8108648:	4a26      	ldr	r2, [pc, #152]	@ (81086e4 <HAL_TIM_Base_Start+0xc0>)
 810864a:	4293      	cmp	r3, r2
 810864c:	d022      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	681b      	ldr	r3, [r3, #0]
 8108652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108656:	d01d      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	681b      	ldr	r3, [r3, #0]
 810865c:	4a22      	ldr	r2, [pc, #136]	@ (81086e8 <HAL_TIM_Base_Start+0xc4>)
 810865e:	4293      	cmp	r3, r2
 8108660:	d018      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 8108662:	687b      	ldr	r3, [r7, #4]
 8108664:	681b      	ldr	r3, [r3, #0]
 8108666:	4a21      	ldr	r2, [pc, #132]	@ (81086ec <HAL_TIM_Base_Start+0xc8>)
 8108668:	4293      	cmp	r3, r2
 810866a:	d013      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	4a1f      	ldr	r2, [pc, #124]	@ (81086f0 <HAL_TIM_Base_Start+0xcc>)
 8108672:	4293      	cmp	r3, r2
 8108674:	d00e      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	681b      	ldr	r3, [r3, #0]
 810867a:	4a1e      	ldr	r2, [pc, #120]	@ (81086f4 <HAL_TIM_Base_Start+0xd0>)
 810867c:	4293      	cmp	r3, r2
 810867e:	d009      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	4a1c      	ldr	r2, [pc, #112]	@ (81086f8 <HAL_TIM_Base_Start+0xd4>)
 8108686:	4293      	cmp	r3, r2
 8108688:	d004      	beq.n	8108694 <HAL_TIM_Base_Start+0x70>
 810868a:	687b      	ldr	r3, [r7, #4]
 810868c:	681b      	ldr	r3, [r3, #0]
 810868e:	4a1b      	ldr	r2, [pc, #108]	@ (81086fc <HAL_TIM_Base_Start+0xd8>)
 8108690:	4293      	cmp	r3, r2
 8108692:	d115      	bne.n	81086c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	689a      	ldr	r2, [r3, #8]
 810869a:	4b19      	ldr	r3, [pc, #100]	@ (8108700 <HAL_TIM_Base_Start+0xdc>)
 810869c:	4013      	ands	r3, r2
 810869e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81086a0:	68fb      	ldr	r3, [r7, #12]
 81086a2:	2b06      	cmp	r3, #6
 81086a4:	d015      	beq.n	81086d2 <HAL_TIM_Base_Start+0xae>
 81086a6:	68fb      	ldr	r3, [r7, #12]
 81086a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81086ac:	d011      	beq.n	81086d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 81086ae:	687b      	ldr	r3, [r7, #4]
 81086b0:	681b      	ldr	r3, [r3, #0]
 81086b2:	681a      	ldr	r2, [r3, #0]
 81086b4:	687b      	ldr	r3, [r7, #4]
 81086b6:	681b      	ldr	r3, [r3, #0]
 81086b8:	f042 0201 	orr.w	r2, r2, #1
 81086bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81086be:	e008      	b.n	81086d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	681a      	ldr	r2, [r3, #0]
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	f042 0201 	orr.w	r2, r2, #1
 81086ce:	601a      	str	r2, [r3, #0]
 81086d0:	e000      	b.n	81086d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81086d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81086d4:	2300      	movs	r3, #0
}
 81086d6:	4618      	mov	r0, r3
 81086d8:	3714      	adds	r7, #20
 81086da:	46bd      	mov	sp, r7
 81086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086e0:	4770      	bx	lr
 81086e2:	bf00      	nop
 81086e4:	40010000 	.word	0x40010000
 81086e8:	40000400 	.word	0x40000400
 81086ec:	40000800 	.word	0x40000800
 81086f0:	40000c00 	.word	0x40000c00
 81086f4:	40010400 	.word	0x40010400
 81086f8:	40001800 	.word	0x40001800
 81086fc:	40014000 	.word	0x40014000
 8108700:	00010007 	.word	0x00010007

08108704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108704:	b480      	push	{r7}
 8108706:	b085      	sub	sp, #20
 8108708:	af00      	add	r7, sp, #0
 810870a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810870c:	687b      	ldr	r3, [r7, #4]
 810870e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108712:	b2db      	uxtb	r3, r3
 8108714:	2b01      	cmp	r3, #1
 8108716:	d001      	beq.n	810871c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8108718:	2301      	movs	r3, #1
 810871a:	e054      	b.n	81087c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810871c:	687b      	ldr	r3, [r7, #4]
 810871e:	2202      	movs	r2, #2
 8108720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	68da      	ldr	r2, [r3, #12]
 810872a:	687b      	ldr	r3, [r7, #4]
 810872c:	681b      	ldr	r3, [r3, #0]
 810872e:	f042 0201 	orr.w	r2, r2, #1
 8108732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	681b      	ldr	r3, [r3, #0]
 8108738:	4a26      	ldr	r2, [pc, #152]	@ (81087d4 <HAL_TIM_Base_Start_IT+0xd0>)
 810873a:	4293      	cmp	r3, r2
 810873c:	d022      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 810873e:	687b      	ldr	r3, [r7, #4]
 8108740:	681b      	ldr	r3, [r3, #0]
 8108742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108746:	d01d      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 8108748:	687b      	ldr	r3, [r7, #4]
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	4a22      	ldr	r2, [pc, #136]	@ (81087d8 <HAL_TIM_Base_Start_IT+0xd4>)
 810874e:	4293      	cmp	r3, r2
 8108750:	d018      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 8108752:	687b      	ldr	r3, [r7, #4]
 8108754:	681b      	ldr	r3, [r3, #0]
 8108756:	4a21      	ldr	r2, [pc, #132]	@ (81087dc <HAL_TIM_Base_Start_IT+0xd8>)
 8108758:	4293      	cmp	r3, r2
 810875a:	d013      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 810875c:	687b      	ldr	r3, [r7, #4]
 810875e:	681b      	ldr	r3, [r3, #0]
 8108760:	4a1f      	ldr	r2, [pc, #124]	@ (81087e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8108762:	4293      	cmp	r3, r2
 8108764:	d00e      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 8108766:	687b      	ldr	r3, [r7, #4]
 8108768:	681b      	ldr	r3, [r3, #0]
 810876a:	4a1e      	ldr	r2, [pc, #120]	@ (81087e4 <HAL_TIM_Base_Start_IT+0xe0>)
 810876c:	4293      	cmp	r3, r2
 810876e:	d009      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 8108770:	687b      	ldr	r3, [r7, #4]
 8108772:	681b      	ldr	r3, [r3, #0]
 8108774:	4a1c      	ldr	r2, [pc, #112]	@ (81087e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8108776:	4293      	cmp	r3, r2
 8108778:	d004      	beq.n	8108784 <HAL_TIM_Base_Start_IT+0x80>
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	681b      	ldr	r3, [r3, #0]
 810877e:	4a1b      	ldr	r2, [pc, #108]	@ (81087ec <HAL_TIM_Base_Start_IT+0xe8>)
 8108780:	4293      	cmp	r3, r2
 8108782:	d115      	bne.n	81087b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	689a      	ldr	r2, [r3, #8]
 810878a:	4b19      	ldr	r3, [pc, #100]	@ (81087f0 <HAL_TIM_Base_Start_IT+0xec>)
 810878c:	4013      	ands	r3, r2
 810878e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108790:	68fb      	ldr	r3, [r7, #12]
 8108792:	2b06      	cmp	r3, #6
 8108794:	d015      	beq.n	81087c2 <HAL_TIM_Base_Start_IT+0xbe>
 8108796:	68fb      	ldr	r3, [r7, #12]
 8108798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810879c:	d011      	beq.n	81087c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810879e:	687b      	ldr	r3, [r7, #4]
 81087a0:	681b      	ldr	r3, [r3, #0]
 81087a2:	681a      	ldr	r2, [r3, #0]
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	f042 0201 	orr.w	r2, r2, #1
 81087ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81087ae:	e008      	b.n	81087c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	681b      	ldr	r3, [r3, #0]
 81087b4:	681a      	ldr	r2, [r3, #0]
 81087b6:	687b      	ldr	r3, [r7, #4]
 81087b8:	681b      	ldr	r3, [r3, #0]
 81087ba:	f042 0201 	orr.w	r2, r2, #1
 81087be:	601a      	str	r2, [r3, #0]
 81087c0:	e000      	b.n	81087c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81087c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81087c4:	2300      	movs	r3, #0
}
 81087c6:	4618      	mov	r0, r3
 81087c8:	3714      	adds	r7, #20
 81087ca:	46bd      	mov	sp, r7
 81087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087d0:	4770      	bx	lr
 81087d2:	bf00      	nop
 81087d4:	40010000 	.word	0x40010000
 81087d8:	40000400 	.word	0x40000400
 81087dc:	40000800 	.word	0x40000800
 81087e0:	40000c00 	.word	0x40000c00
 81087e4:	40010400 	.word	0x40010400
 81087e8:	40001800 	.word	0x40001800
 81087ec:	40014000 	.word	0x40014000
 81087f0:	00010007 	.word	0x00010007

081087f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 81087f4:	b480      	push	{r7}
 81087f6:	b083      	sub	sp, #12
 81087f8:	af00      	add	r7, sp, #0
 81087fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	681b      	ldr	r3, [r3, #0]
 8108800:	68da      	ldr	r2, [r3, #12]
 8108802:	687b      	ldr	r3, [r7, #4]
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	f022 0201 	bic.w	r2, r2, #1
 810880a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 810880c:	687b      	ldr	r3, [r7, #4]
 810880e:	681b      	ldr	r3, [r3, #0]
 8108810:	6a1a      	ldr	r2, [r3, #32]
 8108812:	f241 1311 	movw	r3, #4369	@ 0x1111
 8108816:	4013      	ands	r3, r2
 8108818:	2b00      	cmp	r3, #0
 810881a:	d10f      	bne.n	810883c <HAL_TIM_Base_Stop_IT+0x48>
 810881c:	687b      	ldr	r3, [r7, #4]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	6a1a      	ldr	r2, [r3, #32]
 8108822:	f240 4344 	movw	r3, #1092	@ 0x444
 8108826:	4013      	ands	r3, r2
 8108828:	2b00      	cmp	r3, #0
 810882a:	d107      	bne.n	810883c <HAL_TIM_Base_Stop_IT+0x48>
 810882c:	687b      	ldr	r3, [r7, #4]
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	681a      	ldr	r2, [r3, #0]
 8108832:	687b      	ldr	r3, [r7, #4]
 8108834:	681b      	ldr	r3, [r3, #0]
 8108836:	f022 0201 	bic.w	r2, r2, #1
 810883a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 810883c:	687b      	ldr	r3, [r7, #4]
 810883e:	2201      	movs	r2, #1
 8108840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8108844:	2300      	movs	r3, #0
}
 8108846:	4618      	mov	r0, r3
 8108848:	370c      	adds	r7, #12
 810884a:	46bd      	mov	sp, r7
 810884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108850:	4770      	bx	lr

08108852 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108852:	b580      	push	{r7, lr}
 8108854:	b082      	sub	sp, #8
 8108856:	af00      	add	r7, sp, #0
 8108858:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810885a:	687b      	ldr	r3, [r7, #4]
 810885c:	681b      	ldr	r3, [r3, #0]
 810885e:	691b      	ldr	r3, [r3, #16]
 8108860:	f003 0302 	and.w	r3, r3, #2
 8108864:	2b02      	cmp	r3, #2
 8108866:	d122      	bne.n	81088ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	68db      	ldr	r3, [r3, #12]
 810886e:	f003 0302 	and.w	r3, r3, #2
 8108872:	2b02      	cmp	r3, #2
 8108874:	d11b      	bne.n	81088ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	681b      	ldr	r3, [r3, #0]
 810887a:	f06f 0202 	mvn.w	r2, #2
 810887e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	2201      	movs	r2, #1
 8108884:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	681b      	ldr	r3, [r3, #0]
 810888a:	699b      	ldr	r3, [r3, #24]
 810888c:	f003 0303 	and.w	r3, r3, #3
 8108890:	2b00      	cmp	r3, #0
 8108892:	d003      	beq.n	810889c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8108894:	6878      	ldr	r0, [r7, #4]
 8108896:	f000 f9fd 	bl	8108c94 <HAL_TIM_IC_CaptureCallback>
 810889a:	e005      	b.n	81088a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810889c:	6878      	ldr	r0, [r7, #4]
 810889e:	f000 f9ef 	bl	8108c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81088a2:	6878      	ldr	r0, [r7, #4]
 81088a4:	f000 fa00 	bl	8108ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	2200      	movs	r2, #0
 81088ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	681b      	ldr	r3, [r3, #0]
 81088b2:	691b      	ldr	r3, [r3, #16]
 81088b4:	f003 0304 	and.w	r3, r3, #4
 81088b8:	2b04      	cmp	r3, #4
 81088ba:	d122      	bne.n	8108902 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	68db      	ldr	r3, [r3, #12]
 81088c2:	f003 0304 	and.w	r3, r3, #4
 81088c6:	2b04      	cmp	r3, #4
 81088c8:	d11b      	bne.n	8108902 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	681b      	ldr	r3, [r3, #0]
 81088ce:	f06f 0204 	mvn.w	r2, #4
 81088d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	2202      	movs	r2, #2
 81088d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81088da:	687b      	ldr	r3, [r7, #4]
 81088dc:	681b      	ldr	r3, [r3, #0]
 81088de:	699b      	ldr	r3, [r3, #24]
 81088e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81088e4:	2b00      	cmp	r3, #0
 81088e6:	d003      	beq.n	81088f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81088e8:	6878      	ldr	r0, [r7, #4]
 81088ea:	f000 f9d3 	bl	8108c94 <HAL_TIM_IC_CaptureCallback>
 81088ee:	e005      	b.n	81088fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81088f0:	6878      	ldr	r0, [r7, #4]
 81088f2:	f000 f9c5 	bl	8108c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81088f6:	6878      	ldr	r0, [r7, #4]
 81088f8:	f000 f9d6 	bl	8108ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81088fc:	687b      	ldr	r3, [r7, #4]
 81088fe:	2200      	movs	r2, #0
 8108900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108902:	687b      	ldr	r3, [r7, #4]
 8108904:	681b      	ldr	r3, [r3, #0]
 8108906:	691b      	ldr	r3, [r3, #16]
 8108908:	f003 0308 	and.w	r3, r3, #8
 810890c:	2b08      	cmp	r3, #8
 810890e:	d122      	bne.n	8108956 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	681b      	ldr	r3, [r3, #0]
 8108914:	68db      	ldr	r3, [r3, #12]
 8108916:	f003 0308 	and.w	r3, r3, #8
 810891a:	2b08      	cmp	r3, #8
 810891c:	d11b      	bne.n	8108956 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	681b      	ldr	r3, [r3, #0]
 8108922:	f06f 0208 	mvn.w	r2, #8
 8108926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8108928:	687b      	ldr	r3, [r7, #4]
 810892a:	2204      	movs	r2, #4
 810892c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810892e:	687b      	ldr	r3, [r7, #4]
 8108930:	681b      	ldr	r3, [r3, #0]
 8108932:	69db      	ldr	r3, [r3, #28]
 8108934:	f003 0303 	and.w	r3, r3, #3
 8108938:	2b00      	cmp	r3, #0
 810893a:	d003      	beq.n	8108944 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810893c:	6878      	ldr	r0, [r7, #4]
 810893e:	f000 f9a9 	bl	8108c94 <HAL_TIM_IC_CaptureCallback>
 8108942:	e005      	b.n	8108950 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108944:	6878      	ldr	r0, [r7, #4]
 8108946:	f000 f99b 	bl	8108c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810894a:	6878      	ldr	r0, [r7, #4]
 810894c:	f000 f9ac 	bl	8108ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	2200      	movs	r2, #0
 8108954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	681b      	ldr	r3, [r3, #0]
 810895a:	691b      	ldr	r3, [r3, #16]
 810895c:	f003 0310 	and.w	r3, r3, #16
 8108960:	2b10      	cmp	r3, #16
 8108962:	d122      	bne.n	81089aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8108964:	687b      	ldr	r3, [r7, #4]
 8108966:	681b      	ldr	r3, [r3, #0]
 8108968:	68db      	ldr	r3, [r3, #12]
 810896a:	f003 0310 	and.w	r3, r3, #16
 810896e:	2b10      	cmp	r3, #16
 8108970:	d11b      	bne.n	81089aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	681b      	ldr	r3, [r3, #0]
 8108976:	f06f 0210 	mvn.w	r2, #16
 810897a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	2208      	movs	r2, #8
 8108980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	681b      	ldr	r3, [r3, #0]
 8108986:	69db      	ldr	r3, [r3, #28]
 8108988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810898c:	2b00      	cmp	r3, #0
 810898e:	d003      	beq.n	8108998 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108990:	6878      	ldr	r0, [r7, #4]
 8108992:	f000 f97f 	bl	8108c94 <HAL_TIM_IC_CaptureCallback>
 8108996:	e005      	b.n	81089a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108998:	6878      	ldr	r0, [r7, #4]
 810899a:	f000 f971 	bl	8108c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810899e:	6878      	ldr	r0, [r7, #4]
 81089a0:	f000 f982 	bl	8108ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81089a4:	687b      	ldr	r3, [r7, #4]
 81089a6:	2200      	movs	r2, #0
 81089a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81089aa:	687b      	ldr	r3, [r7, #4]
 81089ac:	681b      	ldr	r3, [r3, #0]
 81089ae:	691b      	ldr	r3, [r3, #16]
 81089b0:	f003 0301 	and.w	r3, r3, #1
 81089b4:	2b01      	cmp	r3, #1
 81089b6:	d10e      	bne.n	81089d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81089b8:	687b      	ldr	r3, [r7, #4]
 81089ba:	681b      	ldr	r3, [r3, #0]
 81089bc:	68db      	ldr	r3, [r3, #12]
 81089be:	f003 0301 	and.w	r3, r3, #1
 81089c2:	2b01      	cmp	r3, #1
 81089c4:	d107      	bne.n	81089d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	f06f 0201 	mvn.w	r2, #1
 81089ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81089d0:	6878      	ldr	r0, [r7, #4]
 81089d2:	f7fc fa6b 	bl	8104eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	681b      	ldr	r3, [r3, #0]
 81089da:	691b      	ldr	r3, [r3, #16]
 81089dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81089e0:	2b80      	cmp	r3, #128	@ 0x80
 81089e2:	d10e      	bne.n	8108a02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81089e4:	687b      	ldr	r3, [r7, #4]
 81089e6:	681b      	ldr	r3, [r3, #0]
 81089e8:	68db      	ldr	r3, [r3, #12]
 81089ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81089ee:	2b80      	cmp	r3, #128	@ 0x80
 81089f0:	d107      	bne.n	8108a02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	681b      	ldr	r3, [r3, #0]
 81089f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 81089fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81089fc:	6878      	ldr	r0, [r7, #4]
 81089fe:	f000 fb35 	bl	810906c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108a02:	687b      	ldr	r3, [r7, #4]
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	691b      	ldr	r3, [r3, #16]
 8108a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108a10:	d10e      	bne.n	8108a30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108a12:	687b      	ldr	r3, [r7, #4]
 8108a14:	681b      	ldr	r3, [r3, #0]
 8108a16:	68db      	ldr	r3, [r3, #12]
 8108a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108a1c:	2b80      	cmp	r3, #128	@ 0x80
 8108a1e:	d107      	bne.n	8108a30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	681b      	ldr	r3, [r3, #0]
 8108a24:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8108a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108a2a:	6878      	ldr	r0, [r7, #4]
 8108a2c:	f000 fb28 	bl	8109080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	691b      	ldr	r3, [r3, #16]
 8108a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108a3a:	2b40      	cmp	r3, #64	@ 0x40
 8108a3c:	d10e      	bne.n	8108a5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8108a3e:	687b      	ldr	r3, [r7, #4]
 8108a40:	681b      	ldr	r3, [r3, #0]
 8108a42:	68db      	ldr	r3, [r3, #12]
 8108a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108a48:	2b40      	cmp	r3, #64	@ 0x40
 8108a4a:	d107      	bne.n	8108a5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	681b      	ldr	r3, [r3, #0]
 8108a50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8108a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108a56:	6878      	ldr	r0, [r7, #4]
 8108a58:	f000 f930 	bl	8108cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	691b      	ldr	r3, [r3, #16]
 8108a62:	f003 0320 	and.w	r3, r3, #32
 8108a66:	2b20      	cmp	r3, #32
 8108a68:	d10e      	bne.n	8108a88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	68db      	ldr	r3, [r3, #12]
 8108a70:	f003 0320 	and.w	r3, r3, #32
 8108a74:	2b20      	cmp	r3, #32
 8108a76:	d107      	bne.n	8108a88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	f06f 0220 	mvn.w	r2, #32
 8108a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108a82:	6878      	ldr	r0, [r7, #4]
 8108a84:	f000 fae8 	bl	8109058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108a88:	bf00      	nop
 8108a8a:	3708      	adds	r7, #8
 8108a8c:	46bd      	mov	sp, r7
 8108a8e:	bd80      	pop	{r7, pc}

08108a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8108a90:	b580      	push	{r7, lr}
 8108a92:	b084      	sub	sp, #16
 8108a94:	af00      	add	r7, sp, #0
 8108a96:	6078      	str	r0, [r7, #4]
 8108a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8108a9a:	2300      	movs	r3, #0
 8108a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108aa4:	2b01      	cmp	r3, #1
 8108aa6:	d101      	bne.n	8108aac <HAL_TIM_ConfigClockSource+0x1c>
 8108aa8:	2302      	movs	r3, #2
 8108aaa:	e0de      	b.n	8108c6a <HAL_TIM_ConfigClockSource+0x1da>
 8108aac:	687b      	ldr	r3, [r7, #4]
 8108aae:	2201      	movs	r2, #1
 8108ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	2202      	movs	r2, #2
 8108ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	681b      	ldr	r3, [r3, #0]
 8108ac0:	689b      	ldr	r3, [r3, #8]
 8108ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8108ac4:	68bb      	ldr	r3, [r7, #8]
 8108ac6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8108aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8108ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108ad0:	68bb      	ldr	r3, [r7, #8]
 8108ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8108ad8:	687b      	ldr	r3, [r7, #4]
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	68ba      	ldr	r2, [r7, #8]
 8108ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8108ae0:	683b      	ldr	r3, [r7, #0]
 8108ae2:	681b      	ldr	r3, [r3, #0]
 8108ae4:	4a63      	ldr	r2, [pc, #396]	@ (8108c74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108ae6:	4293      	cmp	r3, r2
 8108ae8:	f000 80a9 	beq.w	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108aec:	4a61      	ldr	r2, [pc, #388]	@ (8108c74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108aee:	4293      	cmp	r3, r2
 8108af0:	f200 80ae 	bhi.w	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108af4:	4a60      	ldr	r2, [pc, #384]	@ (8108c78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108af6:	4293      	cmp	r3, r2
 8108af8:	f000 80a1 	beq.w	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108afc:	4a5e      	ldr	r2, [pc, #376]	@ (8108c78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108afe:	4293      	cmp	r3, r2
 8108b00:	f200 80a6 	bhi.w	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b04:	4a5d      	ldr	r2, [pc, #372]	@ (8108c7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8108b06:	4293      	cmp	r3, r2
 8108b08:	f000 8099 	beq.w	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b0c:	4a5b      	ldr	r2, [pc, #364]	@ (8108c7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8108b0e:	4293      	cmp	r3, r2
 8108b10:	f200 809e 	bhi.w	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8108b18:	f000 8091 	beq.w	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8108b20:	f200 8096 	bhi.w	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108b28:	f000 8089 	beq.w	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108b30:	f200 808e 	bhi.w	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108b38:	d03e      	beq.n	8108bb8 <HAL_TIM_ConfigClockSource+0x128>
 8108b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108b3e:	f200 8087 	bhi.w	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108b46:	f000 8086 	beq.w	8108c56 <HAL_TIM_ConfigClockSource+0x1c6>
 8108b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108b4e:	d87f      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b50:	2b70      	cmp	r3, #112	@ 0x70
 8108b52:	d01a      	beq.n	8108b8a <HAL_TIM_ConfigClockSource+0xfa>
 8108b54:	2b70      	cmp	r3, #112	@ 0x70
 8108b56:	d87b      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b58:	2b60      	cmp	r3, #96	@ 0x60
 8108b5a:	d050      	beq.n	8108bfe <HAL_TIM_ConfigClockSource+0x16e>
 8108b5c:	2b60      	cmp	r3, #96	@ 0x60
 8108b5e:	d877      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b60:	2b50      	cmp	r3, #80	@ 0x50
 8108b62:	d03c      	beq.n	8108bde <HAL_TIM_ConfigClockSource+0x14e>
 8108b64:	2b50      	cmp	r3, #80	@ 0x50
 8108b66:	d873      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b68:	2b40      	cmp	r3, #64	@ 0x40
 8108b6a:	d058      	beq.n	8108c1e <HAL_TIM_ConfigClockSource+0x18e>
 8108b6c:	2b40      	cmp	r3, #64	@ 0x40
 8108b6e:	d86f      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b70:	2b30      	cmp	r3, #48	@ 0x30
 8108b72:	d064      	beq.n	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b74:	2b30      	cmp	r3, #48	@ 0x30
 8108b76:	d86b      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b78:	2b20      	cmp	r3, #32
 8108b7a:	d060      	beq.n	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b7c:	2b20      	cmp	r3, #32
 8108b7e:	d867      	bhi.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
 8108b80:	2b00      	cmp	r3, #0
 8108b82:	d05c      	beq.n	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b84:	2b10      	cmp	r3, #16
 8108b86:	d05a      	beq.n	8108c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8108b88:	e062      	b.n	8108c50 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108b8a:	687b      	ldr	r3, [r7, #4]
 8108b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8108b8e:	683b      	ldr	r3, [r7, #0]
 8108b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8108b92:	683b      	ldr	r3, [r7, #0]
 8108b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8108b96:	683b      	ldr	r3, [r7, #0]
 8108b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8108b9a:	f000 f9af 	bl	8108efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8108b9e:	687b      	ldr	r3, [r7, #4]
 8108ba0:	681b      	ldr	r3, [r3, #0]
 8108ba2:	689b      	ldr	r3, [r3, #8]
 8108ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8108ba6:	68bb      	ldr	r3, [r7, #8]
 8108ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8108bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	68ba      	ldr	r2, [r7, #8]
 8108bb4:	609a      	str	r2, [r3, #8]
      break;
 8108bb6:	e04f      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108bb8:	687b      	ldr	r3, [r7, #4]
 8108bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8108bbc:	683b      	ldr	r3, [r7, #0]
 8108bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8108bc0:	683b      	ldr	r3, [r7, #0]
 8108bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8108bc4:	683b      	ldr	r3, [r7, #0]
 8108bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8108bc8:	f000 f998 	bl	8108efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	681b      	ldr	r3, [r3, #0]
 8108bd0:	689a      	ldr	r2, [r3, #8]
 8108bd2:	687b      	ldr	r3, [r7, #4]
 8108bd4:	681b      	ldr	r3, [r3, #0]
 8108bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8108bda:	609a      	str	r2, [r3, #8]
      break;
 8108bdc:	e03c      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8108be2:	683b      	ldr	r3, [r7, #0]
 8108be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8108be6:	683b      	ldr	r3, [r7, #0]
 8108be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108bea:	461a      	mov	r2, r3
 8108bec:	f000 f90a 	bl	8108e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	681b      	ldr	r3, [r3, #0]
 8108bf4:	2150      	movs	r1, #80	@ 0x50
 8108bf6:	4618      	mov	r0, r3
 8108bf8:	f000 f963 	bl	8108ec2 <TIM_ITRx_SetConfig>
      break;
 8108bfc:	e02c      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8108c02:	683b      	ldr	r3, [r7, #0]
 8108c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8108c06:	683b      	ldr	r3, [r7, #0]
 8108c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8108c0a:	461a      	mov	r2, r3
 8108c0c:	f000 f929 	bl	8108e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	681b      	ldr	r3, [r3, #0]
 8108c14:	2160      	movs	r1, #96	@ 0x60
 8108c16:	4618      	mov	r0, r3
 8108c18:	f000 f953 	bl	8108ec2 <TIM_ITRx_SetConfig>
      break;
 8108c1c:	e01c      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8108c22:	683b      	ldr	r3, [r7, #0]
 8108c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8108c26:	683b      	ldr	r3, [r7, #0]
 8108c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108c2a:	461a      	mov	r2, r3
 8108c2c:	f000 f8ea 	bl	8108e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8108c30:	687b      	ldr	r3, [r7, #4]
 8108c32:	681b      	ldr	r3, [r3, #0]
 8108c34:	2140      	movs	r1, #64	@ 0x40
 8108c36:	4618      	mov	r0, r3
 8108c38:	f000 f943 	bl	8108ec2 <TIM_ITRx_SetConfig>
      break;
 8108c3c:	e00c      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	681a      	ldr	r2, [r3, #0]
 8108c42:	683b      	ldr	r3, [r7, #0]
 8108c44:	681b      	ldr	r3, [r3, #0]
 8108c46:	4619      	mov	r1, r3
 8108c48:	4610      	mov	r0, r2
 8108c4a:	f000 f93a 	bl	8108ec2 <TIM_ITRx_SetConfig>
      break;
 8108c4e:	e003      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8108c50:	2301      	movs	r3, #1
 8108c52:	73fb      	strb	r3, [r7, #15]
      break;
 8108c54:	e000      	b.n	8108c58 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8108c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8108c58:	687b      	ldr	r3, [r7, #4]
 8108c5a:	2201      	movs	r2, #1
 8108c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8108c60:	687b      	ldr	r3, [r7, #4]
 8108c62:	2200      	movs	r2, #0
 8108c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8108c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8108c6a:	4618      	mov	r0, r3
 8108c6c:	3710      	adds	r7, #16
 8108c6e:	46bd      	mov	sp, r7
 8108c70:	bd80      	pop	{r7, pc}
 8108c72:	bf00      	nop
 8108c74:	00100040 	.word	0x00100040
 8108c78:	00100030 	.word	0x00100030
 8108c7c:	00100020 	.word	0x00100020

08108c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108c80:	b480      	push	{r7}
 8108c82:	b083      	sub	sp, #12
 8108c84:	af00      	add	r7, sp, #0
 8108c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108c88:	bf00      	nop
 8108c8a:	370c      	adds	r7, #12
 8108c8c:	46bd      	mov	sp, r7
 8108c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c92:	4770      	bx	lr

08108c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108c94:	b480      	push	{r7}
 8108c96:	b083      	sub	sp, #12
 8108c98:	af00      	add	r7, sp, #0
 8108c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8108c9c:	bf00      	nop
 8108c9e:	370c      	adds	r7, #12
 8108ca0:	46bd      	mov	sp, r7
 8108ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ca6:	4770      	bx	lr

08108ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108ca8:	b480      	push	{r7}
 8108caa:	b083      	sub	sp, #12
 8108cac:	af00      	add	r7, sp, #0
 8108cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108cb0:	bf00      	nop
 8108cb2:	370c      	adds	r7, #12
 8108cb4:	46bd      	mov	sp, r7
 8108cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cba:	4770      	bx	lr

08108cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108cbc:	b480      	push	{r7}
 8108cbe:	b083      	sub	sp, #12
 8108cc0:	af00      	add	r7, sp, #0
 8108cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108cc4:	bf00      	nop
 8108cc6:	370c      	adds	r7, #12
 8108cc8:	46bd      	mov	sp, r7
 8108cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cce:	4770      	bx	lr

08108cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8108cd0:	b480      	push	{r7}
 8108cd2:	b085      	sub	sp, #20
 8108cd4:	af00      	add	r7, sp, #0
 8108cd6:	6078      	str	r0, [r7, #4]
 8108cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	4a40      	ldr	r2, [pc, #256]	@ (8108de4 <TIM_Base_SetConfig+0x114>)
 8108ce4:	4293      	cmp	r3, r2
 8108ce6:	d013      	beq.n	8108d10 <TIM_Base_SetConfig+0x40>
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108cee:	d00f      	beq.n	8108d10 <TIM_Base_SetConfig+0x40>
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8108de8 <TIM_Base_SetConfig+0x118>)
 8108cf4:	4293      	cmp	r3, r2
 8108cf6:	d00b      	beq.n	8108d10 <TIM_Base_SetConfig+0x40>
 8108cf8:	687b      	ldr	r3, [r7, #4]
 8108cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8108dec <TIM_Base_SetConfig+0x11c>)
 8108cfc:	4293      	cmp	r3, r2
 8108cfe:	d007      	beq.n	8108d10 <TIM_Base_SetConfig+0x40>
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	4a3b      	ldr	r2, [pc, #236]	@ (8108df0 <TIM_Base_SetConfig+0x120>)
 8108d04:	4293      	cmp	r3, r2
 8108d06:	d003      	beq.n	8108d10 <TIM_Base_SetConfig+0x40>
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	4a3a      	ldr	r2, [pc, #232]	@ (8108df4 <TIM_Base_SetConfig+0x124>)
 8108d0c:	4293      	cmp	r3, r2
 8108d0e:	d108      	bne.n	8108d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108d10:	68fb      	ldr	r3, [r7, #12]
 8108d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8108d18:	683b      	ldr	r3, [r7, #0]
 8108d1a:	685b      	ldr	r3, [r3, #4]
 8108d1c:	68fa      	ldr	r2, [r7, #12]
 8108d1e:	4313      	orrs	r3, r2
 8108d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	4a2f      	ldr	r2, [pc, #188]	@ (8108de4 <TIM_Base_SetConfig+0x114>)
 8108d26:	4293      	cmp	r3, r2
 8108d28:	d01f      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d2a:	687b      	ldr	r3, [r7, #4]
 8108d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108d30:	d01b      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	4a2c      	ldr	r2, [pc, #176]	@ (8108de8 <TIM_Base_SetConfig+0x118>)
 8108d36:	4293      	cmp	r3, r2
 8108d38:	d017      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8108dec <TIM_Base_SetConfig+0x11c>)
 8108d3e:	4293      	cmp	r3, r2
 8108d40:	d013      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	4a2a      	ldr	r2, [pc, #168]	@ (8108df0 <TIM_Base_SetConfig+0x120>)
 8108d46:	4293      	cmp	r3, r2
 8108d48:	d00f      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d4a:	687b      	ldr	r3, [r7, #4]
 8108d4c:	4a29      	ldr	r2, [pc, #164]	@ (8108df4 <TIM_Base_SetConfig+0x124>)
 8108d4e:	4293      	cmp	r3, r2
 8108d50:	d00b      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	4a28      	ldr	r2, [pc, #160]	@ (8108df8 <TIM_Base_SetConfig+0x128>)
 8108d56:	4293      	cmp	r3, r2
 8108d58:	d007      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	4a27      	ldr	r2, [pc, #156]	@ (8108dfc <TIM_Base_SetConfig+0x12c>)
 8108d5e:	4293      	cmp	r3, r2
 8108d60:	d003      	beq.n	8108d6a <TIM_Base_SetConfig+0x9a>
 8108d62:	687b      	ldr	r3, [r7, #4]
 8108d64:	4a26      	ldr	r2, [pc, #152]	@ (8108e00 <TIM_Base_SetConfig+0x130>)
 8108d66:	4293      	cmp	r3, r2
 8108d68:	d108      	bne.n	8108d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108d6a:	68fb      	ldr	r3, [r7, #12]
 8108d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8108d72:	683b      	ldr	r3, [r7, #0]
 8108d74:	68db      	ldr	r3, [r3, #12]
 8108d76:	68fa      	ldr	r2, [r7, #12]
 8108d78:	4313      	orrs	r3, r2
 8108d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108d7c:	68fb      	ldr	r3, [r7, #12]
 8108d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8108d82:	683b      	ldr	r3, [r7, #0]
 8108d84:	695b      	ldr	r3, [r3, #20]
 8108d86:	4313      	orrs	r3, r2
 8108d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8108d8a:	687b      	ldr	r3, [r7, #4]
 8108d8c:	68fa      	ldr	r2, [r7, #12]
 8108d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108d90:	683b      	ldr	r3, [r7, #0]
 8108d92:	689a      	ldr	r2, [r3, #8]
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108d98:	683b      	ldr	r3, [r7, #0]
 8108d9a:	681a      	ldr	r2, [r3, #0]
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108da0:	687b      	ldr	r3, [r7, #4]
 8108da2:	4a10      	ldr	r2, [pc, #64]	@ (8108de4 <TIM_Base_SetConfig+0x114>)
 8108da4:	4293      	cmp	r3, r2
 8108da6:	d00f      	beq.n	8108dc8 <TIM_Base_SetConfig+0xf8>
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	4a12      	ldr	r2, [pc, #72]	@ (8108df4 <TIM_Base_SetConfig+0x124>)
 8108dac:	4293      	cmp	r3, r2
 8108dae:	d00b      	beq.n	8108dc8 <TIM_Base_SetConfig+0xf8>
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	4a11      	ldr	r2, [pc, #68]	@ (8108df8 <TIM_Base_SetConfig+0x128>)
 8108db4:	4293      	cmp	r3, r2
 8108db6:	d007      	beq.n	8108dc8 <TIM_Base_SetConfig+0xf8>
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	4a10      	ldr	r2, [pc, #64]	@ (8108dfc <TIM_Base_SetConfig+0x12c>)
 8108dbc:	4293      	cmp	r3, r2
 8108dbe:	d003      	beq.n	8108dc8 <TIM_Base_SetConfig+0xf8>
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8108e00 <TIM_Base_SetConfig+0x130>)
 8108dc4:	4293      	cmp	r3, r2
 8108dc6:	d103      	bne.n	8108dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108dc8:	683b      	ldr	r3, [r7, #0]
 8108dca:	691a      	ldr	r2, [r3, #16]
 8108dcc:	687b      	ldr	r3, [r7, #4]
 8108dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	2201      	movs	r2, #1
 8108dd4:	615a      	str	r2, [r3, #20]
}
 8108dd6:	bf00      	nop
 8108dd8:	3714      	adds	r7, #20
 8108dda:	46bd      	mov	sp, r7
 8108ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108de0:	4770      	bx	lr
 8108de2:	bf00      	nop
 8108de4:	40010000 	.word	0x40010000
 8108de8:	40000400 	.word	0x40000400
 8108dec:	40000800 	.word	0x40000800
 8108df0:	40000c00 	.word	0x40000c00
 8108df4:	40010400 	.word	0x40010400
 8108df8:	40014000 	.word	0x40014000
 8108dfc:	40014400 	.word	0x40014400
 8108e00:	40014800 	.word	0x40014800

08108e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108e04:	b480      	push	{r7}
 8108e06:	b087      	sub	sp, #28
 8108e08:	af00      	add	r7, sp, #0
 8108e0a:	60f8      	str	r0, [r7, #12]
 8108e0c:	60b9      	str	r1, [r7, #8]
 8108e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108e10:	68fb      	ldr	r3, [r7, #12]
 8108e12:	6a1b      	ldr	r3, [r3, #32]
 8108e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108e16:	68fb      	ldr	r3, [r7, #12]
 8108e18:	6a1b      	ldr	r3, [r3, #32]
 8108e1a:	f023 0201 	bic.w	r2, r3, #1
 8108e1e:	68fb      	ldr	r3, [r7, #12]
 8108e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	699b      	ldr	r3, [r3, #24]
 8108e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108e28:	693b      	ldr	r3, [r7, #16]
 8108e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8108e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8108e30:	687b      	ldr	r3, [r7, #4]
 8108e32:	011b      	lsls	r3, r3, #4
 8108e34:	693a      	ldr	r2, [r7, #16]
 8108e36:	4313      	orrs	r3, r2
 8108e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8108e3a:	697b      	ldr	r3, [r7, #20]
 8108e3c:	f023 030a 	bic.w	r3, r3, #10
 8108e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8108e42:	697a      	ldr	r2, [r7, #20]
 8108e44:	68bb      	ldr	r3, [r7, #8]
 8108e46:	4313      	orrs	r3, r2
 8108e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8108e4a:	68fb      	ldr	r3, [r7, #12]
 8108e4c:	693a      	ldr	r2, [r7, #16]
 8108e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108e50:	68fb      	ldr	r3, [r7, #12]
 8108e52:	697a      	ldr	r2, [r7, #20]
 8108e54:	621a      	str	r2, [r3, #32]
}
 8108e56:	bf00      	nop
 8108e58:	371c      	adds	r7, #28
 8108e5a:	46bd      	mov	sp, r7
 8108e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e60:	4770      	bx	lr

08108e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108e62:	b480      	push	{r7}
 8108e64:	b087      	sub	sp, #28
 8108e66:	af00      	add	r7, sp, #0
 8108e68:	60f8      	str	r0, [r7, #12]
 8108e6a:	60b9      	str	r1, [r7, #8]
 8108e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108e6e:	68fb      	ldr	r3, [r7, #12]
 8108e70:	6a1b      	ldr	r3, [r3, #32]
 8108e72:	f023 0210 	bic.w	r2, r3, #16
 8108e76:	68fb      	ldr	r3, [r7, #12]
 8108e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108e7a:	68fb      	ldr	r3, [r7, #12]
 8108e7c:	699b      	ldr	r3, [r3, #24]
 8108e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8108e80:	68fb      	ldr	r3, [r7, #12]
 8108e82:	6a1b      	ldr	r3, [r3, #32]
 8108e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108e86:	697b      	ldr	r3, [r7, #20]
 8108e88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	031b      	lsls	r3, r3, #12
 8108e92:	697a      	ldr	r2, [r7, #20]
 8108e94:	4313      	orrs	r3, r2
 8108e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108e98:	693b      	ldr	r3, [r7, #16]
 8108e9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8108e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8108ea0:	68bb      	ldr	r3, [r7, #8]
 8108ea2:	011b      	lsls	r3, r3, #4
 8108ea4:	693a      	ldr	r2, [r7, #16]
 8108ea6:	4313      	orrs	r3, r2
 8108ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108eaa:	68fb      	ldr	r3, [r7, #12]
 8108eac:	697a      	ldr	r2, [r7, #20]
 8108eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108eb0:	68fb      	ldr	r3, [r7, #12]
 8108eb2:	693a      	ldr	r2, [r7, #16]
 8108eb4:	621a      	str	r2, [r3, #32]
}
 8108eb6:	bf00      	nop
 8108eb8:	371c      	adds	r7, #28
 8108eba:	46bd      	mov	sp, r7
 8108ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ec0:	4770      	bx	lr

08108ec2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8108ec2:	b480      	push	{r7}
 8108ec4:	b085      	sub	sp, #20
 8108ec6:	af00      	add	r7, sp, #0
 8108ec8:	6078      	str	r0, [r7, #4]
 8108eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	689b      	ldr	r3, [r3, #8]
 8108ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8108ed2:	68fb      	ldr	r3, [r7, #12]
 8108ed4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8108ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8108ede:	683a      	ldr	r2, [r7, #0]
 8108ee0:	68fb      	ldr	r3, [r7, #12]
 8108ee2:	4313      	orrs	r3, r2
 8108ee4:	f043 0307 	orr.w	r3, r3, #7
 8108ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108eea:	687b      	ldr	r3, [r7, #4]
 8108eec:	68fa      	ldr	r2, [r7, #12]
 8108eee:	609a      	str	r2, [r3, #8]
}
 8108ef0:	bf00      	nop
 8108ef2:	3714      	adds	r7, #20
 8108ef4:	46bd      	mov	sp, r7
 8108ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108efa:	4770      	bx	lr

08108efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8108efc:	b480      	push	{r7}
 8108efe:	b087      	sub	sp, #28
 8108f00:	af00      	add	r7, sp, #0
 8108f02:	60f8      	str	r0, [r7, #12]
 8108f04:	60b9      	str	r1, [r7, #8]
 8108f06:	607a      	str	r2, [r7, #4]
 8108f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8108f0a:	68fb      	ldr	r3, [r7, #12]
 8108f0c:	689b      	ldr	r3, [r3, #8]
 8108f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108f10:	697b      	ldr	r3, [r7, #20]
 8108f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8108f18:	683b      	ldr	r3, [r7, #0]
 8108f1a:	021a      	lsls	r2, r3, #8
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	431a      	orrs	r2, r3
 8108f20:	68bb      	ldr	r3, [r7, #8]
 8108f22:	4313      	orrs	r3, r2
 8108f24:	697a      	ldr	r2, [r7, #20]
 8108f26:	4313      	orrs	r3, r2
 8108f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108f2a:	68fb      	ldr	r3, [r7, #12]
 8108f2c:	697a      	ldr	r2, [r7, #20]
 8108f2e:	609a      	str	r2, [r3, #8]
}
 8108f30:	bf00      	nop
 8108f32:	371c      	adds	r7, #28
 8108f34:	46bd      	mov	sp, r7
 8108f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f3a:	4770      	bx	lr

08108f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108f3c:	b480      	push	{r7}
 8108f3e:	b085      	sub	sp, #20
 8108f40:	af00      	add	r7, sp, #0
 8108f42:	6078      	str	r0, [r7, #4]
 8108f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8108f46:	687b      	ldr	r3, [r7, #4]
 8108f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108f4c:	2b01      	cmp	r3, #1
 8108f4e:	d101      	bne.n	8108f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108f50:	2302      	movs	r3, #2
 8108f52:	e06d      	b.n	8109030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	2201      	movs	r2, #1
 8108f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	2202      	movs	r2, #2
 8108f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	681b      	ldr	r3, [r3, #0]
 8108f68:	685b      	ldr	r3, [r3, #4]
 8108f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	681b      	ldr	r3, [r3, #0]
 8108f70:	689b      	ldr	r3, [r3, #8]
 8108f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8108f74:	687b      	ldr	r3, [r7, #4]
 8108f76:	681b      	ldr	r3, [r3, #0]
 8108f78:	4a30      	ldr	r2, [pc, #192]	@ (810903c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108f7a:	4293      	cmp	r3, r2
 8108f7c:	d004      	beq.n	8108f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	681b      	ldr	r3, [r3, #0]
 8108f82:	4a2f      	ldr	r2, [pc, #188]	@ (8109040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108f84:	4293      	cmp	r3, r2
 8108f86:	d108      	bne.n	8108f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108f88:	68fb      	ldr	r3, [r7, #12]
 8108f8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8108f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108f90:	683b      	ldr	r3, [r7, #0]
 8108f92:	685b      	ldr	r3, [r3, #4]
 8108f94:	68fa      	ldr	r2, [r7, #12]
 8108f96:	4313      	orrs	r3, r2
 8108f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8108f9a:	68fb      	ldr	r3, [r7, #12]
 8108f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108fa2:	683b      	ldr	r3, [r7, #0]
 8108fa4:	681b      	ldr	r3, [r3, #0]
 8108fa6:	68fa      	ldr	r2, [r7, #12]
 8108fa8:	4313      	orrs	r3, r2
 8108faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	68fa      	ldr	r2, [r7, #12]
 8108fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	681b      	ldr	r3, [r3, #0]
 8108fb8:	4a20      	ldr	r2, [pc, #128]	@ (810903c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108fba:	4293      	cmp	r3, r2
 8108fbc:	d022      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108fbe:	687b      	ldr	r3, [r7, #4]
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108fc6:	d01d      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	681b      	ldr	r3, [r3, #0]
 8108fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8109044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108fce:	4293      	cmp	r3, r2
 8108fd0:	d018      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108fd2:	687b      	ldr	r3, [r7, #4]
 8108fd4:	681b      	ldr	r3, [r3, #0]
 8108fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8109048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108fd8:	4293      	cmp	r3, r2
 8108fda:	d013      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108fdc:	687b      	ldr	r3, [r7, #4]
 8108fde:	681b      	ldr	r3, [r3, #0]
 8108fe0:	4a1a      	ldr	r2, [pc, #104]	@ (810904c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8108fe2:	4293      	cmp	r3, r2
 8108fe4:	d00e      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108fe6:	687b      	ldr	r3, [r7, #4]
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	4a15      	ldr	r2, [pc, #84]	@ (8109040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108fec:	4293      	cmp	r3, r2
 8108fee:	d009      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108ff0:	687b      	ldr	r3, [r7, #4]
 8108ff2:	681b      	ldr	r3, [r3, #0]
 8108ff4:	4a16      	ldr	r2, [pc, #88]	@ (8109050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8108ff6:	4293      	cmp	r3, r2
 8108ff8:	d004      	beq.n	8109004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	681b      	ldr	r3, [r3, #0]
 8108ffe:	4a15      	ldr	r2, [pc, #84]	@ (8109054 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8109000:	4293      	cmp	r3, r2
 8109002:	d10c      	bne.n	810901e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109004:	68bb      	ldr	r3, [r7, #8]
 8109006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810900a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810900c:	683b      	ldr	r3, [r7, #0]
 810900e:	689b      	ldr	r3, [r3, #8]
 8109010:	68ba      	ldr	r2, [r7, #8]
 8109012:	4313      	orrs	r3, r2
 8109014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109016:	687b      	ldr	r3, [r7, #4]
 8109018:	681b      	ldr	r3, [r3, #0]
 810901a:	68ba      	ldr	r2, [r7, #8]
 810901c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810901e:	687b      	ldr	r3, [r7, #4]
 8109020:	2201      	movs	r2, #1
 8109022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8109026:	687b      	ldr	r3, [r7, #4]
 8109028:	2200      	movs	r2, #0
 810902a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810902e:	2300      	movs	r3, #0
}
 8109030:	4618      	mov	r0, r3
 8109032:	3714      	adds	r7, #20
 8109034:	46bd      	mov	sp, r7
 8109036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810903a:	4770      	bx	lr
 810903c:	40010000 	.word	0x40010000
 8109040:	40010400 	.word	0x40010400
 8109044:	40000400 	.word	0x40000400
 8109048:	40000800 	.word	0x40000800
 810904c:	40000c00 	.word	0x40000c00
 8109050:	40001800 	.word	0x40001800
 8109054:	40014000 	.word	0x40014000

08109058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109058:	b480      	push	{r7}
 810905a:	b083      	sub	sp, #12
 810905c:	af00      	add	r7, sp, #0
 810905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109060:	bf00      	nop
 8109062:	370c      	adds	r7, #12
 8109064:	46bd      	mov	sp, r7
 8109066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810906a:	4770      	bx	lr

0810906c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810906c:	b480      	push	{r7}
 810906e:	b083      	sub	sp, #12
 8109070:	af00      	add	r7, sp, #0
 8109072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109074:	bf00      	nop
 8109076:	370c      	adds	r7, #12
 8109078:	46bd      	mov	sp, r7
 810907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810907e:	4770      	bx	lr

08109080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109080:	b480      	push	{r7}
 8109082:	b083      	sub	sp, #12
 8109084:	af00      	add	r7, sp, #0
 8109086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109088:	bf00      	nop
 810908a:	370c      	adds	r7, #12
 810908c:	46bd      	mov	sp, r7
 810908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109092:	4770      	bx	lr

08109094 <__cvt>:
 8109094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109098:	ec57 6b10 	vmov	r6, r7, d0
 810909c:	2f00      	cmp	r7, #0
 810909e:	460c      	mov	r4, r1
 81090a0:	4619      	mov	r1, r3
 81090a2:	463b      	mov	r3, r7
 81090a4:	bfbb      	ittet	lt
 81090a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 81090aa:	461f      	movlt	r7, r3
 81090ac:	2300      	movge	r3, #0
 81090ae:	232d      	movlt	r3, #45	@ 0x2d
 81090b0:	700b      	strb	r3, [r1, #0]
 81090b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81090b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 81090b8:	4691      	mov	r9, r2
 81090ba:	f023 0820 	bic.w	r8, r3, #32
 81090be:	bfbc      	itt	lt
 81090c0:	4632      	movlt	r2, r6
 81090c2:	4616      	movlt	r6, r2
 81090c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81090c8:	d005      	beq.n	81090d6 <__cvt+0x42>
 81090ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 81090ce:	d100      	bne.n	81090d2 <__cvt+0x3e>
 81090d0:	3401      	adds	r4, #1
 81090d2:	2102      	movs	r1, #2
 81090d4:	e000      	b.n	81090d8 <__cvt+0x44>
 81090d6:	2103      	movs	r1, #3
 81090d8:	ab03      	add	r3, sp, #12
 81090da:	9301      	str	r3, [sp, #4]
 81090dc:	ab02      	add	r3, sp, #8
 81090de:	9300      	str	r3, [sp, #0]
 81090e0:	ec47 6b10 	vmov	d0, r6, r7
 81090e4:	4653      	mov	r3, sl
 81090e6:	4622      	mov	r2, r4
 81090e8:	f000 fe5a 	bl	8109da0 <_dtoa_r>
 81090ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 81090f0:	4605      	mov	r5, r0
 81090f2:	d119      	bne.n	8109128 <__cvt+0x94>
 81090f4:	f019 0f01 	tst.w	r9, #1
 81090f8:	d00e      	beq.n	8109118 <__cvt+0x84>
 81090fa:	eb00 0904 	add.w	r9, r0, r4
 81090fe:	2200      	movs	r2, #0
 8109100:	2300      	movs	r3, #0
 8109102:	4630      	mov	r0, r6
 8109104:	4639      	mov	r1, r7
 8109106:	f7f7 fd67 	bl	8100bd8 <__aeabi_dcmpeq>
 810910a:	b108      	cbz	r0, 8109110 <__cvt+0x7c>
 810910c:	f8cd 900c 	str.w	r9, [sp, #12]
 8109110:	2230      	movs	r2, #48	@ 0x30
 8109112:	9b03      	ldr	r3, [sp, #12]
 8109114:	454b      	cmp	r3, r9
 8109116:	d31e      	bcc.n	8109156 <__cvt+0xc2>
 8109118:	9b03      	ldr	r3, [sp, #12]
 810911a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810911c:	1b5b      	subs	r3, r3, r5
 810911e:	4628      	mov	r0, r5
 8109120:	6013      	str	r3, [r2, #0]
 8109122:	b004      	add	sp, #16
 8109124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810912c:	eb00 0904 	add.w	r9, r0, r4
 8109130:	d1e5      	bne.n	81090fe <__cvt+0x6a>
 8109132:	7803      	ldrb	r3, [r0, #0]
 8109134:	2b30      	cmp	r3, #48	@ 0x30
 8109136:	d10a      	bne.n	810914e <__cvt+0xba>
 8109138:	2200      	movs	r2, #0
 810913a:	2300      	movs	r3, #0
 810913c:	4630      	mov	r0, r6
 810913e:	4639      	mov	r1, r7
 8109140:	f7f7 fd4a 	bl	8100bd8 <__aeabi_dcmpeq>
 8109144:	b918      	cbnz	r0, 810914e <__cvt+0xba>
 8109146:	f1c4 0401 	rsb	r4, r4, #1
 810914a:	f8ca 4000 	str.w	r4, [sl]
 810914e:	f8da 3000 	ldr.w	r3, [sl]
 8109152:	4499      	add	r9, r3
 8109154:	e7d3      	b.n	81090fe <__cvt+0x6a>
 8109156:	1c59      	adds	r1, r3, #1
 8109158:	9103      	str	r1, [sp, #12]
 810915a:	701a      	strb	r2, [r3, #0]
 810915c:	e7d9      	b.n	8109112 <__cvt+0x7e>

0810915e <__exponent>:
 810915e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109160:	2900      	cmp	r1, #0
 8109162:	bfba      	itte	lt
 8109164:	4249      	neglt	r1, r1
 8109166:	232d      	movlt	r3, #45	@ 0x2d
 8109168:	232b      	movge	r3, #43	@ 0x2b
 810916a:	2909      	cmp	r1, #9
 810916c:	7002      	strb	r2, [r0, #0]
 810916e:	7043      	strb	r3, [r0, #1]
 8109170:	dd29      	ble.n	81091c6 <__exponent+0x68>
 8109172:	f10d 0307 	add.w	r3, sp, #7
 8109176:	461d      	mov	r5, r3
 8109178:	270a      	movs	r7, #10
 810917a:	461a      	mov	r2, r3
 810917c:	fbb1 f6f7 	udiv	r6, r1, r7
 8109180:	fb07 1416 	mls	r4, r7, r6, r1
 8109184:	3430      	adds	r4, #48	@ 0x30
 8109186:	f802 4c01 	strb.w	r4, [r2, #-1]
 810918a:	460c      	mov	r4, r1
 810918c:	2c63      	cmp	r4, #99	@ 0x63
 810918e:	f103 33ff 	add.w	r3, r3, #4294967295
 8109192:	4631      	mov	r1, r6
 8109194:	dcf1      	bgt.n	810917a <__exponent+0x1c>
 8109196:	3130      	adds	r1, #48	@ 0x30
 8109198:	1e94      	subs	r4, r2, #2
 810919a:	f803 1c01 	strb.w	r1, [r3, #-1]
 810919e:	1c41      	adds	r1, r0, #1
 81091a0:	4623      	mov	r3, r4
 81091a2:	42ab      	cmp	r3, r5
 81091a4:	d30a      	bcc.n	81091bc <__exponent+0x5e>
 81091a6:	f10d 0309 	add.w	r3, sp, #9
 81091aa:	1a9b      	subs	r3, r3, r2
 81091ac:	42ac      	cmp	r4, r5
 81091ae:	bf88      	it	hi
 81091b0:	2300      	movhi	r3, #0
 81091b2:	3302      	adds	r3, #2
 81091b4:	4403      	add	r3, r0
 81091b6:	1a18      	subs	r0, r3, r0
 81091b8:	b003      	add	sp, #12
 81091ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81091bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 81091c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 81091c4:	e7ed      	b.n	81091a2 <__exponent+0x44>
 81091c6:	2330      	movs	r3, #48	@ 0x30
 81091c8:	3130      	adds	r1, #48	@ 0x30
 81091ca:	7083      	strb	r3, [r0, #2]
 81091cc:	70c1      	strb	r1, [r0, #3]
 81091ce:	1d03      	adds	r3, r0, #4
 81091d0:	e7f1      	b.n	81091b6 <__exponent+0x58>
	...

081091d4 <_printf_float>:
 81091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81091d8:	b08d      	sub	sp, #52	@ 0x34
 81091da:	460c      	mov	r4, r1
 81091dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81091e0:	4616      	mov	r6, r2
 81091e2:	461f      	mov	r7, r3
 81091e4:	4605      	mov	r5, r0
 81091e6:	f000 fcdb 	bl	8109ba0 <_localeconv_r>
 81091ea:	6803      	ldr	r3, [r0, #0]
 81091ec:	9304      	str	r3, [sp, #16]
 81091ee:	4618      	mov	r0, r3
 81091f0:	f7f7 f8c6 	bl	8100380 <strlen>
 81091f4:	2300      	movs	r3, #0
 81091f6:	930a      	str	r3, [sp, #40]	@ 0x28
 81091f8:	f8d8 3000 	ldr.w	r3, [r8]
 81091fc:	9005      	str	r0, [sp, #20]
 81091fe:	3307      	adds	r3, #7
 8109200:	f023 0307 	bic.w	r3, r3, #7
 8109204:	f103 0208 	add.w	r2, r3, #8
 8109208:	f894 a018 	ldrb.w	sl, [r4, #24]
 810920c:	f8d4 b000 	ldr.w	fp, [r4]
 8109210:	f8c8 2000 	str.w	r2, [r8]
 8109214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109218:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810921c:	9307      	str	r3, [sp, #28]
 810921e:	f8cd 8018 	str.w	r8, [sp, #24]
 8109222:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8109226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810922a:	4b9c      	ldr	r3, [pc, #624]	@ (810949c <_printf_float+0x2c8>)
 810922c:	f04f 32ff 	mov.w	r2, #4294967295
 8109230:	f7f7 fd04 	bl	8100c3c <__aeabi_dcmpun>
 8109234:	bb70      	cbnz	r0, 8109294 <_printf_float+0xc0>
 8109236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810923a:	4b98      	ldr	r3, [pc, #608]	@ (810949c <_printf_float+0x2c8>)
 810923c:	f04f 32ff 	mov.w	r2, #4294967295
 8109240:	f7f7 fcde 	bl	8100c00 <__aeabi_dcmple>
 8109244:	bb30      	cbnz	r0, 8109294 <_printf_float+0xc0>
 8109246:	2200      	movs	r2, #0
 8109248:	2300      	movs	r3, #0
 810924a:	4640      	mov	r0, r8
 810924c:	4649      	mov	r1, r9
 810924e:	f7f7 fccd 	bl	8100bec <__aeabi_dcmplt>
 8109252:	b110      	cbz	r0, 810925a <_printf_float+0x86>
 8109254:	232d      	movs	r3, #45	@ 0x2d
 8109256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810925a:	4a91      	ldr	r2, [pc, #580]	@ (81094a0 <_printf_float+0x2cc>)
 810925c:	4b91      	ldr	r3, [pc, #580]	@ (81094a4 <_printf_float+0x2d0>)
 810925e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8109262:	bf94      	ite	ls
 8109264:	4690      	movls	r8, r2
 8109266:	4698      	movhi	r8, r3
 8109268:	2303      	movs	r3, #3
 810926a:	6123      	str	r3, [r4, #16]
 810926c:	f02b 0304 	bic.w	r3, fp, #4
 8109270:	6023      	str	r3, [r4, #0]
 8109272:	f04f 0900 	mov.w	r9, #0
 8109276:	9700      	str	r7, [sp, #0]
 8109278:	4633      	mov	r3, r6
 810927a:	aa0b      	add	r2, sp, #44	@ 0x2c
 810927c:	4621      	mov	r1, r4
 810927e:	4628      	mov	r0, r5
 8109280:	f000 f9d2 	bl	8109628 <_printf_common>
 8109284:	3001      	adds	r0, #1
 8109286:	f040 808d 	bne.w	81093a4 <_printf_float+0x1d0>
 810928a:	f04f 30ff 	mov.w	r0, #4294967295
 810928e:	b00d      	add	sp, #52	@ 0x34
 8109290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109294:	4642      	mov	r2, r8
 8109296:	464b      	mov	r3, r9
 8109298:	4640      	mov	r0, r8
 810929a:	4649      	mov	r1, r9
 810929c:	f7f7 fcce 	bl	8100c3c <__aeabi_dcmpun>
 81092a0:	b140      	cbz	r0, 81092b4 <_printf_float+0xe0>
 81092a2:	464b      	mov	r3, r9
 81092a4:	2b00      	cmp	r3, #0
 81092a6:	bfbc      	itt	lt
 81092a8:	232d      	movlt	r3, #45	@ 0x2d
 81092aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 81092ae:	4a7e      	ldr	r2, [pc, #504]	@ (81094a8 <_printf_float+0x2d4>)
 81092b0:	4b7e      	ldr	r3, [pc, #504]	@ (81094ac <_printf_float+0x2d8>)
 81092b2:	e7d4      	b.n	810925e <_printf_float+0x8a>
 81092b4:	6863      	ldr	r3, [r4, #4]
 81092b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 81092ba:	9206      	str	r2, [sp, #24]
 81092bc:	1c5a      	adds	r2, r3, #1
 81092be:	d13b      	bne.n	8109338 <_printf_float+0x164>
 81092c0:	2306      	movs	r3, #6
 81092c2:	6063      	str	r3, [r4, #4]
 81092c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 81092c8:	2300      	movs	r3, #0
 81092ca:	6022      	str	r2, [r4, #0]
 81092cc:	9303      	str	r3, [sp, #12]
 81092ce:	ab0a      	add	r3, sp, #40	@ 0x28
 81092d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 81092d4:	ab09      	add	r3, sp, #36	@ 0x24
 81092d6:	9300      	str	r3, [sp, #0]
 81092d8:	6861      	ldr	r1, [r4, #4]
 81092da:	ec49 8b10 	vmov	d0, r8, r9
 81092de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 81092e2:	4628      	mov	r0, r5
 81092e4:	f7ff fed6 	bl	8109094 <__cvt>
 81092e8:	9b06      	ldr	r3, [sp, #24]
 81092ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81092ec:	2b47      	cmp	r3, #71	@ 0x47
 81092ee:	4680      	mov	r8, r0
 81092f0:	d129      	bne.n	8109346 <_printf_float+0x172>
 81092f2:	1cc8      	adds	r0, r1, #3
 81092f4:	db02      	blt.n	81092fc <_printf_float+0x128>
 81092f6:	6863      	ldr	r3, [r4, #4]
 81092f8:	4299      	cmp	r1, r3
 81092fa:	dd41      	ble.n	8109380 <_printf_float+0x1ac>
 81092fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8109300:	fa5f fa8a 	uxtb.w	sl, sl
 8109304:	3901      	subs	r1, #1
 8109306:	4652      	mov	r2, sl
 8109308:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810930c:	9109      	str	r1, [sp, #36]	@ 0x24
 810930e:	f7ff ff26 	bl	810915e <__exponent>
 8109312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109314:	1813      	adds	r3, r2, r0
 8109316:	2a01      	cmp	r2, #1
 8109318:	4681      	mov	r9, r0
 810931a:	6123      	str	r3, [r4, #16]
 810931c:	dc02      	bgt.n	8109324 <_printf_float+0x150>
 810931e:	6822      	ldr	r2, [r4, #0]
 8109320:	07d2      	lsls	r2, r2, #31
 8109322:	d501      	bpl.n	8109328 <_printf_float+0x154>
 8109324:	3301      	adds	r3, #1
 8109326:	6123      	str	r3, [r4, #16]
 8109328:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810932c:	2b00      	cmp	r3, #0
 810932e:	d0a2      	beq.n	8109276 <_printf_float+0xa2>
 8109330:	232d      	movs	r3, #45	@ 0x2d
 8109332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109336:	e79e      	b.n	8109276 <_printf_float+0xa2>
 8109338:	9a06      	ldr	r2, [sp, #24]
 810933a:	2a47      	cmp	r2, #71	@ 0x47
 810933c:	d1c2      	bne.n	81092c4 <_printf_float+0xf0>
 810933e:	2b00      	cmp	r3, #0
 8109340:	d1c0      	bne.n	81092c4 <_printf_float+0xf0>
 8109342:	2301      	movs	r3, #1
 8109344:	e7bd      	b.n	81092c2 <_printf_float+0xee>
 8109346:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810934a:	d9db      	bls.n	8109304 <_printf_float+0x130>
 810934c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8109350:	d118      	bne.n	8109384 <_printf_float+0x1b0>
 8109352:	2900      	cmp	r1, #0
 8109354:	6863      	ldr	r3, [r4, #4]
 8109356:	dd0b      	ble.n	8109370 <_printf_float+0x19c>
 8109358:	6121      	str	r1, [r4, #16]
 810935a:	b913      	cbnz	r3, 8109362 <_printf_float+0x18e>
 810935c:	6822      	ldr	r2, [r4, #0]
 810935e:	07d0      	lsls	r0, r2, #31
 8109360:	d502      	bpl.n	8109368 <_printf_float+0x194>
 8109362:	3301      	adds	r3, #1
 8109364:	440b      	add	r3, r1
 8109366:	6123      	str	r3, [r4, #16]
 8109368:	65a1      	str	r1, [r4, #88]	@ 0x58
 810936a:	f04f 0900 	mov.w	r9, #0
 810936e:	e7db      	b.n	8109328 <_printf_float+0x154>
 8109370:	b913      	cbnz	r3, 8109378 <_printf_float+0x1a4>
 8109372:	6822      	ldr	r2, [r4, #0]
 8109374:	07d2      	lsls	r2, r2, #31
 8109376:	d501      	bpl.n	810937c <_printf_float+0x1a8>
 8109378:	3302      	adds	r3, #2
 810937a:	e7f4      	b.n	8109366 <_printf_float+0x192>
 810937c:	2301      	movs	r3, #1
 810937e:	e7f2      	b.n	8109366 <_printf_float+0x192>
 8109380:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8109384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109386:	4299      	cmp	r1, r3
 8109388:	db05      	blt.n	8109396 <_printf_float+0x1c2>
 810938a:	6823      	ldr	r3, [r4, #0]
 810938c:	6121      	str	r1, [r4, #16]
 810938e:	07d8      	lsls	r0, r3, #31
 8109390:	d5ea      	bpl.n	8109368 <_printf_float+0x194>
 8109392:	1c4b      	adds	r3, r1, #1
 8109394:	e7e7      	b.n	8109366 <_printf_float+0x192>
 8109396:	2900      	cmp	r1, #0
 8109398:	bfd4      	ite	le
 810939a:	f1c1 0202 	rsble	r2, r1, #2
 810939e:	2201      	movgt	r2, #1
 81093a0:	4413      	add	r3, r2
 81093a2:	e7e0      	b.n	8109366 <_printf_float+0x192>
 81093a4:	6823      	ldr	r3, [r4, #0]
 81093a6:	055a      	lsls	r2, r3, #21
 81093a8:	d407      	bmi.n	81093ba <_printf_float+0x1e6>
 81093aa:	6923      	ldr	r3, [r4, #16]
 81093ac:	4642      	mov	r2, r8
 81093ae:	4631      	mov	r1, r6
 81093b0:	4628      	mov	r0, r5
 81093b2:	47b8      	blx	r7
 81093b4:	3001      	adds	r0, #1
 81093b6:	d12b      	bne.n	8109410 <_printf_float+0x23c>
 81093b8:	e767      	b.n	810928a <_printf_float+0xb6>
 81093ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81093be:	f240 80dd 	bls.w	810957c <_printf_float+0x3a8>
 81093c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81093c6:	2200      	movs	r2, #0
 81093c8:	2300      	movs	r3, #0
 81093ca:	f7f7 fc05 	bl	8100bd8 <__aeabi_dcmpeq>
 81093ce:	2800      	cmp	r0, #0
 81093d0:	d033      	beq.n	810943a <_printf_float+0x266>
 81093d2:	4a37      	ldr	r2, [pc, #220]	@ (81094b0 <_printf_float+0x2dc>)
 81093d4:	2301      	movs	r3, #1
 81093d6:	4631      	mov	r1, r6
 81093d8:	4628      	mov	r0, r5
 81093da:	47b8      	blx	r7
 81093dc:	3001      	adds	r0, #1
 81093de:	f43f af54 	beq.w	810928a <_printf_float+0xb6>
 81093e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 81093e6:	4543      	cmp	r3, r8
 81093e8:	db02      	blt.n	81093f0 <_printf_float+0x21c>
 81093ea:	6823      	ldr	r3, [r4, #0]
 81093ec:	07d8      	lsls	r0, r3, #31
 81093ee:	d50f      	bpl.n	8109410 <_printf_float+0x23c>
 81093f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81093f4:	4631      	mov	r1, r6
 81093f6:	4628      	mov	r0, r5
 81093f8:	47b8      	blx	r7
 81093fa:	3001      	adds	r0, #1
 81093fc:	f43f af45 	beq.w	810928a <_printf_float+0xb6>
 8109400:	f04f 0900 	mov.w	r9, #0
 8109404:	f108 38ff 	add.w	r8, r8, #4294967295
 8109408:	f104 0a1a 	add.w	sl, r4, #26
 810940c:	45c8      	cmp	r8, r9
 810940e:	dc09      	bgt.n	8109424 <_printf_float+0x250>
 8109410:	6823      	ldr	r3, [r4, #0]
 8109412:	079b      	lsls	r3, r3, #30
 8109414:	f100 8103 	bmi.w	810961e <_printf_float+0x44a>
 8109418:	68e0      	ldr	r0, [r4, #12]
 810941a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810941c:	4298      	cmp	r0, r3
 810941e:	bfb8      	it	lt
 8109420:	4618      	movlt	r0, r3
 8109422:	e734      	b.n	810928e <_printf_float+0xba>
 8109424:	2301      	movs	r3, #1
 8109426:	4652      	mov	r2, sl
 8109428:	4631      	mov	r1, r6
 810942a:	4628      	mov	r0, r5
 810942c:	47b8      	blx	r7
 810942e:	3001      	adds	r0, #1
 8109430:	f43f af2b 	beq.w	810928a <_printf_float+0xb6>
 8109434:	f109 0901 	add.w	r9, r9, #1
 8109438:	e7e8      	b.n	810940c <_printf_float+0x238>
 810943a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810943c:	2b00      	cmp	r3, #0
 810943e:	dc39      	bgt.n	81094b4 <_printf_float+0x2e0>
 8109440:	4a1b      	ldr	r2, [pc, #108]	@ (81094b0 <_printf_float+0x2dc>)
 8109442:	2301      	movs	r3, #1
 8109444:	4631      	mov	r1, r6
 8109446:	4628      	mov	r0, r5
 8109448:	47b8      	blx	r7
 810944a:	3001      	adds	r0, #1
 810944c:	f43f af1d 	beq.w	810928a <_printf_float+0xb6>
 8109450:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8109454:	ea59 0303 	orrs.w	r3, r9, r3
 8109458:	d102      	bne.n	8109460 <_printf_float+0x28c>
 810945a:	6823      	ldr	r3, [r4, #0]
 810945c:	07d9      	lsls	r1, r3, #31
 810945e:	d5d7      	bpl.n	8109410 <_printf_float+0x23c>
 8109460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109464:	4631      	mov	r1, r6
 8109466:	4628      	mov	r0, r5
 8109468:	47b8      	blx	r7
 810946a:	3001      	adds	r0, #1
 810946c:	f43f af0d 	beq.w	810928a <_printf_float+0xb6>
 8109470:	f04f 0a00 	mov.w	sl, #0
 8109474:	f104 0b1a 	add.w	fp, r4, #26
 8109478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810947a:	425b      	negs	r3, r3
 810947c:	4553      	cmp	r3, sl
 810947e:	dc01      	bgt.n	8109484 <_printf_float+0x2b0>
 8109480:	464b      	mov	r3, r9
 8109482:	e793      	b.n	81093ac <_printf_float+0x1d8>
 8109484:	2301      	movs	r3, #1
 8109486:	465a      	mov	r2, fp
 8109488:	4631      	mov	r1, r6
 810948a:	4628      	mov	r0, r5
 810948c:	47b8      	blx	r7
 810948e:	3001      	adds	r0, #1
 8109490:	f43f aefb 	beq.w	810928a <_printf_float+0xb6>
 8109494:	f10a 0a01 	add.w	sl, sl, #1
 8109498:	e7ee      	b.n	8109478 <_printf_float+0x2a4>
 810949a:	bf00      	nop
 810949c:	7fefffff 	.word	0x7fefffff
 81094a0:	0810bdc0 	.word	0x0810bdc0
 81094a4:	0810bdc4 	.word	0x0810bdc4
 81094a8:	0810bdc8 	.word	0x0810bdc8
 81094ac:	0810bdcc 	.word	0x0810bdcc
 81094b0:	0810bdd0 	.word	0x0810bdd0
 81094b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81094b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81094ba:	4553      	cmp	r3, sl
 81094bc:	bfa8      	it	ge
 81094be:	4653      	movge	r3, sl
 81094c0:	2b00      	cmp	r3, #0
 81094c2:	4699      	mov	r9, r3
 81094c4:	dc36      	bgt.n	8109534 <_printf_float+0x360>
 81094c6:	f04f 0b00 	mov.w	fp, #0
 81094ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81094ce:	f104 021a 	add.w	r2, r4, #26
 81094d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81094d4:	9306      	str	r3, [sp, #24]
 81094d6:	eba3 0309 	sub.w	r3, r3, r9
 81094da:	455b      	cmp	r3, fp
 81094dc:	dc31      	bgt.n	8109542 <_printf_float+0x36e>
 81094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81094e0:	459a      	cmp	sl, r3
 81094e2:	dc3a      	bgt.n	810955a <_printf_float+0x386>
 81094e4:	6823      	ldr	r3, [r4, #0]
 81094e6:	07da      	lsls	r2, r3, #31
 81094e8:	d437      	bmi.n	810955a <_printf_float+0x386>
 81094ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81094ec:	ebaa 0903 	sub.w	r9, sl, r3
 81094f0:	9b06      	ldr	r3, [sp, #24]
 81094f2:	ebaa 0303 	sub.w	r3, sl, r3
 81094f6:	4599      	cmp	r9, r3
 81094f8:	bfa8      	it	ge
 81094fa:	4699      	movge	r9, r3
 81094fc:	f1b9 0f00 	cmp.w	r9, #0
 8109500:	dc33      	bgt.n	810956a <_printf_float+0x396>
 8109502:	f04f 0800 	mov.w	r8, #0
 8109506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810950a:	f104 0b1a 	add.w	fp, r4, #26
 810950e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109510:	ebaa 0303 	sub.w	r3, sl, r3
 8109514:	eba3 0309 	sub.w	r3, r3, r9
 8109518:	4543      	cmp	r3, r8
 810951a:	f77f af79 	ble.w	8109410 <_printf_float+0x23c>
 810951e:	2301      	movs	r3, #1
 8109520:	465a      	mov	r2, fp
 8109522:	4631      	mov	r1, r6
 8109524:	4628      	mov	r0, r5
 8109526:	47b8      	blx	r7
 8109528:	3001      	adds	r0, #1
 810952a:	f43f aeae 	beq.w	810928a <_printf_float+0xb6>
 810952e:	f108 0801 	add.w	r8, r8, #1
 8109532:	e7ec      	b.n	810950e <_printf_float+0x33a>
 8109534:	4642      	mov	r2, r8
 8109536:	4631      	mov	r1, r6
 8109538:	4628      	mov	r0, r5
 810953a:	47b8      	blx	r7
 810953c:	3001      	adds	r0, #1
 810953e:	d1c2      	bne.n	81094c6 <_printf_float+0x2f2>
 8109540:	e6a3      	b.n	810928a <_printf_float+0xb6>
 8109542:	2301      	movs	r3, #1
 8109544:	4631      	mov	r1, r6
 8109546:	4628      	mov	r0, r5
 8109548:	9206      	str	r2, [sp, #24]
 810954a:	47b8      	blx	r7
 810954c:	3001      	adds	r0, #1
 810954e:	f43f ae9c 	beq.w	810928a <_printf_float+0xb6>
 8109552:	9a06      	ldr	r2, [sp, #24]
 8109554:	f10b 0b01 	add.w	fp, fp, #1
 8109558:	e7bb      	b.n	81094d2 <_printf_float+0x2fe>
 810955a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810955e:	4631      	mov	r1, r6
 8109560:	4628      	mov	r0, r5
 8109562:	47b8      	blx	r7
 8109564:	3001      	adds	r0, #1
 8109566:	d1c0      	bne.n	81094ea <_printf_float+0x316>
 8109568:	e68f      	b.n	810928a <_printf_float+0xb6>
 810956a:	9a06      	ldr	r2, [sp, #24]
 810956c:	464b      	mov	r3, r9
 810956e:	4442      	add	r2, r8
 8109570:	4631      	mov	r1, r6
 8109572:	4628      	mov	r0, r5
 8109574:	47b8      	blx	r7
 8109576:	3001      	adds	r0, #1
 8109578:	d1c3      	bne.n	8109502 <_printf_float+0x32e>
 810957a:	e686      	b.n	810928a <_printf_float+0xb6>
 810957c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109580:	f1ba 0f01 	cmp.w	sl, #1
 8109584:	dc01      	bgt.n	810958a <_printf_float+0x3b6>
 8109586:	07db      	lsls	r3, r3, #31
 8109588:	d536      	bpl.n	81095f8 <_printf_float+0x424>
 810958a:	2301      	movs	r3, #1
 810958c:	4642      	mov	r2, r8
 810958e:	4631      	mov	r1, r6
 8109590:	4628      	mov	r0, r5
 8109592:	47b8      	blx	r7
 8109594:	3001      	adds	r0, #1
 8109596:	f43f ae78 	beq.w	810928a <_printf_float+0xb6>
 810959a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810959e:	4631      	mov	r1, r6
 81095a0:	4628      	mov	r0, r5
 81095a2:	47b8      	blx	r7
 81095a4:	3001      	adds	r0, #1
 81095a6:	f43f ae70 	beq.w	810928a <_printf_float+0xb6>
 81095aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81095ae:	2200      	movs	r2, #0
 81095b0:	2300      	movs	r3, #0
 81095b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81095b6:	f7f7 fb0f 	bl	8100bd8 <__aeabi_dcmpeq>
 81095ba:	b9c0      	cbnz	r0, 81095ee <_printf_float+0x41a>
 81095bc:	4653      	mov	r3, sl
 81095be:	f108 0201 	add.w	r2, r8, #1
 81095c2:	4631      	mov	r1, r6
 81095c4:	4628      	mov	r0, r5
 81095c6:	47b8      	blx	r7
 81095c8:	3001      	adds	r0, #1
 81095ca:	d10c      	bne.n	81095e6 <_printf_float+0x412>
 81095cc:	e65d      	b.n	810928a <_printf_float+0xb6>
 81095ce:	2301      	movs	r3, #1
 81095d0:	465a      	mov	r2, fp
 81095d2:	4631      	mov	r1, r6
 81095d4:	4628      	mov	r0, r5
 81095d6:	47b8      	blx	r7
 81095d8:	3001      	adds	r0, #1
 81095da:	f43f ae56 	beq.w	810928a <_printf_float+0xb6>
 81095de:	f108 0801 	add.w	r8, r8, #1
 81095e2:	45d0      	cmp	r8, sl
 81095e4:	dbf3      	blt.n	81095ce <_printf_float+0x3fa>
 81095e6:	464b      	mov	r3, r9
 81095e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 81095ec:	e6df      	b.n	81093ae <_printf_float+0x1da>
 81095ee:	f04f 0800 	mov.w	r8, #0
 81095f2:	f104 0b1a 	add.w	fp, r4, #26
 81095f6:	e7f4      	b.n	81095e2 <_printf_float+0x40e>
 81095f8:	2301      	movs	r3, #1
 81095fa:	4642      	mov	r2, r8
 81095fc:	e7e1      	b.n	81095c2 <_printf_float+0x3ee>
 81095fe:	2301      	movs	r3, #1
 8109600:	464a      	mov	r2, r9
 8109602:	4631      	mov	r1, r6
 8109604:	4628      	mov	r0, r5
 8109606:	47b8      	blx	r7
 8109608:	3001      	adds	r0, #1
 810960a:	f43f ae3e 	beq.w	810928a <_printf_float+0xb6>
 810960e:	f108 0801 	add.w	r8, r8, #1
 8109612:	68e3      	ldr	r3, [r4, #12]
 8109614:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109616:	1a5b      	subs	r3, r3, r1
 8109618:	4543      	cmp	r3, r8
 810961a:	dcf0      	bgt.n	81095fe <_printf_float+0x42a>
 810961c:	e6fc      	b.n	8109418 <_printf_float+0x244>
 810961e:	f04f 0800 	mov.w	r8, #0
 8109622:	f104 0919 	add.w	r9, r4, #25
 8109626:	e7f4      	b.n	8109612 <_printf_float+0x43e>

08109628 <_printf_common>:
 8109628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810962c:	4616      	mov	r6, r2
 810962e:	4698      	mov	r8, r3
 8109630:	688a      	ldr	r2, [r1, #8]
 8109632:	690b      	ldr	r3, [r1, #16]
 8109634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8109638:	4293      	cmp	r3, r2
 810963a:	bfb8      	it	lt
 810963c:	4613      	movlt	r3, r2
 810963e:	6033      	str	r3, [r6, #0]
 8109640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8109644:	4607      	mov	r7, r0
 8109646:	460c      	mov	r4, r1
 8109648:	b10a      	cbz	r2, 810964e <_printf_common+0x26>
 810964a:	3301      	adds	r3, #1
 810964c:	6033      	str	r3, [r6, #0]
 810964e:	6823      	ldr	r3, [r4, #0]
 8109650:	0699      	lsls	r1, r3, #26
 8109652:	bf42      	ittt	mi
 8109654:	6833      	ldrmi	r3, [r6, #0]
 8109656:	3302      	addmi	r3, #2
 8109658:	6033      	strmi	r3, [r6, #0]
 810965a:	6825      	ldr	r5, [r4, #0]
 810965c:	f015 0506 	ands.w	r5, r5, #6
 8109660:	d106      	bne.n	8109670 <_printf_common+0x48>
 8109662:	f104 0a19 	add.w	sl, r4, #25
 8109666:	68e3      	ldr	r3, [r4, #12]
 8109668:	6832      	ldr	r2, [r6, #0]
 810966a:	1a9b      	subs	r3, r3, r2
 810966c:	42ab      	cmp	r3, r5
 810966e:	dc26      	bgt.n	81096be <_printf_common+0x96>
 8109670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8109674:	6822      	ldr	r2, [r4, #0]
 8109676:	3b00      	subs	r3, #0
 8109678:	bf18      	it	ne
 810967a:	2301      	movne	r3, #1
 810967c:	0692      	lsls	r2, r2, #26
 810967e:	d42b      	bmi.n	81096d8 <_printf_common+0xb0>
 8109680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8109684:	4641      	mov	r1, r8
 8109686:	4638      	mov	r0, r7
 8109688:	47c8      	blx	r9
 810968a:	3001      	adds	r0, #1
 810968c:	d01e      	beq.n	81096cc <_printf_common+0xa4>
 810968e:	6823      	ldr	r3, [r4, #0]
 8109690:	6922      	ldr	r2, [r4, #16]
 8109692:	f003 0306 	and.w	r3, r3, #6
 8109696:	2b04      	cmp	r3, #4
 8109698:	bf02      	ittt	eq
 810969a:	68e5      	ldreq	r5, [r4, #12]
 810969c:	6833      	ldreq	r3, [r6, #0]
 810969e:	1aed      	subeq	r5, r5, r3
 81096a0:	68a3      	ldr	r3, [r4, #8]
 81096a2:	bf0c      	ite	eq
 81096a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81096a8:	2500      	movne	r5, #0
 81096aa:	4293      	cmp	r3, r2
 81096ac:	bfc4      	itt	gt
 81096ae:	1a9b      	subgt	r3, r3, r2
 81096b0:	18ed      	addgt	r5, r5, r3
 81096b2:	2600      	movs	r6, #0
 81096b4:	341a      	adds	r4, #26
 81096b6:	42b5      	cmp	r5, r6
 81096b8:	d11a      	bne.n	81096f0 <_printf_common+0xc8>
 81096ba:	2000      	movs	r0, #0
 81096bc:	e008      	b.n	81096d0 <_printf_common+0xa8>
 81096be:	2301      	movs	r3, #1
 81096c0:	4652      	mov	r2, sl
 81096c2:	4641      	mov	r1, r8
 81096c4:	4638      	mov	r0, r7
 81096c6:	47c8      	blx	r9
 81096c8:	3001      	adds	r0, #1
 81096ca:	d103      	bne.n	81096d4 <_printf_common+0xac>
 81096cc:	f04f 30ff 	mov.w	r0, #4294967295
 81096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81096d4:	3501      	adds	r5, #1
 81096d6:	e7c6      	b.n	8109666 <_printf_common+0x3e>
 81096d8:	18e1      	adds	r1, r4, r3
 81096da:	1c5a      	adds	r2, r3, #1
 81096dc:	2030      	movs	r0, #48	@ 0x30
 81096de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 81096e2:	4422      	add	r2, r4
 81096e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81096e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81096ec:	3302      	adds	r3, #2
 81096ee:	e7c7      	b.n	8109680 <_printf_common+0x58>
 81096f0:	2301      	movs	r3, #1
 81096f2:	4622      	mov	r2, r4
 81096f4:	4641      	mov	r1, r8
 81096f6:	4638      	mov	r0, r7
 81096f8:	47c8      	blx	r9
 81096fa:	3001      	adds	r0, #1
 81096fc:	d0e6      	beq.n	81096cc <_printf_common+0xa4>
 81096fe:	3601      	adds	r6, #1
 8109700:	e7d9      	b.n	81096b6 <_printf_common+0x8e>
	...

08109704 <_printf_i>:
 8109704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109708:	7e0f      	ldrb	r7, [r1, #24]
 810970a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810970c:	2f78      	cmp	r7, #120	@ 0x78
 810970e:	4691      	mov	r9, r2
 8109710:	4680      	mov	r8, r0
 8109712:	460c      	mov	r4, r1
 8109714:	469a      	mov	sl, r3
 8109716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810971a:	d807      	bhi.n	810972c <_printf_i+0x28>
 810971c:	2f62      	cmp	r7, #98	@ 0x62
 810971e:	d80a      	bhi.n	8109736 <_printf_i+0x32>
 8109720:	2f00      	cmp	r7, #0
 8109722:	f000 80d2 	beq.w	81098ca <_printf_i+0x1c6>
 8109726:	2f58      	cmp	r7, #88	@ 0x58
 8109728:	f000 80b9 	beq.w	810989e <_printf_i+0x19a>
 810972c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8109734:	e03a      	b.n	81097ac <_printf_i+0xa8>
 8109736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810973a:	2b15      	cmp	r3, #21
 810973c:	d8f6      	bhi.n	810972c <_printf_i+0x28>
 810973e:	a101      	add	r1, pc, #4	@ (adr r1, 8109744 <_printf_i+0x40>)
 8109740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109744:	0810979d 	.word	0x0810979d
 8109748:	081097b1 	.word	0x081097b1
 810974c:	0810972d 	.word	0x0810972d
 8109750:	0810972d 	.word	0x0810972d
 8109754:	0810972d 	.word	0x0810972d
 8109758:	0810972d 	.word	0x0810972d
 810975c:	081097b1 	.word	0x081097b1
 8109760:	0810972d 	.word	0x0810972d
 8109764:	0810972d 	.word	0x0810972d
 8109768:	0810972d 	.word	0x0810972d
 810976c:	0810972d 	.word	0x0810972d
 8109770:	081098b1 	.word	0x081098b1
 8109774:	081097db 	.word	0x081097db
 8109778:	0810986b 	.word	0x0810986b
 810977c:	0810972d 	.word	0x0810972d
 8109780:	0810972d 	.word	0x0810972d
 8109784:	081098d3 	.word	0x081098d3
 8109788:	0810972d 	.word	0x0810972d
 810978c:	081097db 	.word	0x081097db
 8109790:	0810972d 	.word	0x0810972d
 8109794:	0810972d 	.word	0x0810972d
 8109798:	08109873 	.word	0x08109873
 810979c:	6833      	ldr	r3, [r6, #0]
 810979e:	1d1a      	adds	r2, r3, #4
 81097a0:	681b      	ldr	r3, [r3, #0]
 81097a2:	6032      	str	r2, [r6, #0]
 81097a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81097a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81097ac:	2301      	movs	r3, #1
 81097ae:	e09d      	b.n	81098ec <_printf_i+0x1e8>
 81097b0:	6833      	ldr	r3, [r6, #0]
 81097b2:	6820      	ldr	r0, [r4, #0]
 81097b4:	1d19      	adds	r1, r3, #4
 81097b6:	6031      	str	r1, [r6, #0]
 81097b8:	0606      	lsls	r6, r0, #24
 81097ba:	d501      	bpl.n	81097c0 <_printf_i+0xbc>
 81097bc:	681d      	ldr	r5, [r3, #0]
 81097be:	e003      	b.n	81097c8 <_printf_i+0xc4>
 81097c0:	0645      	lsls	r5, r0, #25
 81097c2:	d5fb      	bpl.n	81097bc <_printf_i+0xb8>
 81097c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 81097c8:	2d00      	cmp	r5, #0
 81097ca:	da03      	bge.n	81097d4 <_printf_i+0xd0>
 81097cc:	232d      	movs	r3, #45	@ 0x2d
 81097ce:	426d      	negs	r5, r5
 81097d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81097d4:	4859      	ldr	r0, [pc, #356]	@ (810993c <_printf_i+0x238>)
 81097d6:	230a      	movs	r3, #10
 81097d8:	e011      	b.n	81097fe <_printf_i+0xfa>
 81097da:	6821      	ldr	r1, [r4, #0]
 81097dc:	6833      	ldr	r3, [r6, #0]
 81097de:	0608      	lsls	r0, r1, #24
 81097e0:	f853 5b04 	ldr.w	r5, [r3], #4
 81097e4:	d402      	bmi.n	81097ec <_printf_i+0xe8>
 81097e6:	0649      	lsls	r1, r1, #25
 81097e8:	bf48      	it	mi
 81097ea:	b2ad      	uxthmi	r5, r5
 81097ec:	2f6f      	cmp	r7, #111	@ 0x6f
 81097ee:	4853      	ldr	r0, [pc, #332]	@ (810993c <_printf_i+0x238>)
 81097f0:	6033      	str	r3, [r6, #0]
 81097f2:	bf14      	ite	ne
 81097f4:	230a      	movne	r3, #10
 81097f6:	2308      	moveq	r3, #8
 81097f8:	2100      	movs	r1, #0
 81097fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 81097fe:	6866      	ldr	r6, [r4, #4]
 8109800:	60a6      	str	r6, [r4, #8]
 8109802:	2e00      	cmp	r6, #0
 8109804:	bfa2      	ittt	ge
 8109806:	6821      	ldrge	r1, [r4, #0]
 8109808:	f021 0104 	bicge.w	r1, r1, #4
 810980c:	6021      	strge	r1, [r4, #0]
 810980e:	b90d      	cbnz	r5, 8109814 <_printf_i+0x110>
 8109810:	2e00      	cmp	r6, #0
 8109812:	d04b      	beq.n	81098ac <_printf_i+0x1a8>
 8109814:	4616      	mov	r6, r2
 8109816:	fbb5 f1f3 	udiv	r1, r5, r3
 810981a:	fb03 5711 	mls	r7, r3, r1, r5
 810981e:	5dc7      	ldrb	r7, [r0, r7]
 8109820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8109824:	462f      	mov	r7, r5
 8109826:	42bb      	cmp	r3, r7
 8109828:	460d      	mov	r5, r1
 810982a:	d9f4      	bls.n	8109816 <_printf_i+0x112>
 810982c:	2b08      	cmp	r3, #8
 810982e:	d10b      	bne.n	8109848 <_printf_i+0x144>
 8109830:	6823      	ldr	r3, [r4, #0]
 8109832:	07df      	lsls	r7, r3, #31
 8109834:	d508      	bpl.n	8109848 <_printf_i+0x144>
 8109836:	6923      	ldr	r3, [r4, #16]
 8109838:	6861      	ldr	r1, [r4, #4]
 810983a:	4299      	cmp	r1, r3
 810983c:	bfde      	ittt	le
 810983e:	2330      	movle	r3, #48	@ 0x30
 8109840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8109844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8109848:	1b92      	subs	r2, r2, r6
 810984a:	6122      	str	r2, [r4, #16]
 810984c:	f8cd a000 	str.w	sl, [sp]
 8109850:	464b      	mov	r3, r9
 8109852:	aa03      	add	r2, sp, #12
 8109854:	4621      	mov	r1, r4
 8109856:	4640      	mov	r0, r8
 8109858:	f7ff fee6 	bl	8109628 <_printf_common>
 810985c:	3001      	adds	r0, #1
 810985e:	d14a      	bne.n	81098f6 <_printf_i+0x1f2>
 8109860:	f04f 30ff 	mov.w	r0, #4294967295
 8109864:	b004      	add	sp, #16
 8109866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810986a:	6823      	ldr	r3, [r4, #0]
 810986c:	f043 0320 	orr.w	r3, r3, #32
 8109870:	6023      	str	r3, [r4, #0]
 8109872:	4833      	ldr	r0, [pc, #204]	@ (8109940 <_printf_i+0x23c>)
 8109874:	2778      	movs	r7, #120	@ 0x78
 8109876:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810987a:	6823      	ldr	r3, [r4, #0]
 810987c:	6831      	ldr	r1, [r6, #0]
 810987e:	061f      	lsls	r7, r3, #24
 8109880:	f851 5b04 	ldr.w	r5, [r1], #4
 8109884:	d402      	bmi.n	810988c <_printf_i+0x188>
 8109886:	065f      	lsls	r7, r3, #25
 8109888:	bf48      	it	mi
 810988a:	b2ad      	uxthmi	r5, r5
 810988c:	6031      	str	r1, [r6, #0]
 810988e:	07d9      	lsls	r1, r3, #31
 8109890:	bf44      	itt	mi
 8109892:	f043 0320 	orrmi.w	r3, r3, #32
 8109896:	6023      	strmi	r3, [r4, #0]
 8109898:	b11d      	cbz	r5, 81098a2 <_printf_i+0x19e>
 810989a:	2310      	movs	r3, #16
 810989c:	e7ac      	b.n	81097f8 <_printf_i+0xf4>
 810989e:	4827      	ldr	r0, [pc, #156]	@ (810993c <_printf_i+0x238>)
 81098a0:	e7e9      	b.n	8109876 <_printf_i+0x172>
 81098a2:	6823      	ldr	r3, [r4, #0]
 81098a4:	f023 0320 	bic.w	r3, r3, #32
 81098a8:	6023      	str	r3, [r4, #0]
 81098aa:	e7f6      	b.n	810989a <_printf_i+0x196>
 81098ac:	4616      	mov	r6, r2
 81098ae:	e7bd      	b.n	810982c <_printf_i+0x128>
 81098b0:	6833      	ldr	r3, [r6, #0]
 81098b2:	6825      	ldr	r5, [r4, #0]
 81098b4:	6961      	ldr	r1, [r4, #20]
 81098b6:	1d18      	adds	r0, r3, #4
 81098b8:	6030      	str	r0, [r6, #0]
 81098ba:	062e      	lsls	r6, r5, #24
 81098bc:	681b      	ldr	r3, [r3, #0]
 81098be:	d501      	bpl.n	81098c4 <_printf_i+0x1c0>
 81098c0:	6019      	str	r1, [r3, #0]
 81098c2:	e002      	b.n	81098ca <_printf_i+0x1c6>
 81098c4:	0668      	lsls	r0, r5, #25
 81098c6:	d5fb      	bpl.n	81098c0 <_printf_i+0x1bc>
 81098c8:	8019      	strh	r1, [r3, #0]
 81098ca:	2300      	movs	r3, #0
 81098cc:	6123      	str	r3, [r4, #16]
 81098ce:	4616      	mov	r6, r2
 81098d0:	e7bc      	b.n	810984c <_printf_i+0x148>
 81098d2:	6833      	ldr	r3, [r6, #0]
 81098d4:	1d1a      	adds	r2, r3, #4
 81098d6:	6032      	str	r2, [r6, #0]
 81098d8:	681e      	ldr	r6, [r3, #0]
 81098da:	6862      	ldr	r2, [r4, #4]
 81098dc:	2100      	movs	r1, #0
 81098de:	4630      	mov	r0, r6
 81098e0:	f7f6 fcfe 	bl	81002e0 <memchr>
 81098e4:	b108      	cbz	r0, 81098ea <_printf_i+0x1e6>
 81098e6:	1b80      	subs	r0, r0, r6
 81098e8:	6060      	str	r0, [r4, #4]
 81098ea:	6863      	ldr	r3, [r4, #4]
 81098ec:	6123      	str	r3, [r4, #16]
 81098ee:	2300      	movs	r3, #0
 81098f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81098f4:	e7aa      	b.n	810984c <_printf_i+0x148>
 81098f6:	6923      	ldr	r3, [r4, #16]
 81098f8:	4632      	mov	r2, r6
 81098fa:	4649      	mov	r1, r9
 81098fc:	4640      	mov	r0, r8
 81098fe:	47d0      	blx	sl
 8109900:	3001      	adds	r0, #1
 8109902:	d0ad      	beq.n	8109860 <_printf_i+0x15c>
 8109904:	6823      	ldr	r3, [r4, #0]
 8109906:	079b      	lsls	r3, r3, #30
 8109908:	d413      	bmi.n	8109932 <_printf_i+0x22e>
 810990a:	68e0      	ldr	r0, [r4, #12]
 810990c:	9b03      	ldr	r3, [sp, #12]
 810990e:	4298      	cmp	r0, r3
 8109910:	bfb8      	it	lt
 8109912:	4618      	movlt	r0, r3
 8109914:	e7a6      	b.n	8109864 <_printf_i+0x160>
 8109916:	2301      	movs	r3, #1
 8109918:	4632      	mov	r2, r6
 810991a:	4649      	mov	r1, r9
 810991c:	4640      	mov	r0, r8
 810991e:	47d0      	blx	sl
 8109920:	3001      	adds	r0, #1
 8109922:	d09d      	beq.n	8109860 <_printf_i+0x15c>
 8109924:	3501      	adds	r5, #1
 8109926:	68e3      	ldr	r3, [r4, #12]
 8109928:	9903      	ldr	r1, [sp, #12]
 810992a:	1a5b      	subs	r3, r3, r1
 810992c:	42ab      	cmp	r3, r5
 810992e:	dcf2      	bgt.n	8109916 <_printf_i+0x212>
 8109930:	e7eb      	b.n	810990a <_printf_i+0x206>
 8109932:	2500      	movs	r5, #0
 8109934:	f104 0619 	add.w	r6, r4, #25
 8109938:	e7f5      	b.n	8109926 <_printf_i+0x222>
 810993a:	bf00      	nop
 810993c:	0810bdd2 	.word	0x0810bdd2
 8109940:	0810bde3 	.word	0x0810bde3

08109944 <std>:
 8109944:	2300      	movs	r3, #0
 8109946:	b510      	push	{r4, lr}
 8109948:	4604      	mov	r4, r0
 810994a:	e9c0 3300 	strd	r3, r3, [r0]
 810994e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109952:	6083      	str	r3, [r0, #8]
 8109954:	8181      	strh	r1, [r0, #12]
 8109956:	6643      	str	r3, [r0, #100]	@ 0x64
 8109958:	81c2      	strh	r2, [r0, #14]
 810995a:	6183      	str	r3, [r0, #24]
 810995c:	4619      	mov	r1, r3
 810995e:	2208      	movs	r2, #8
 8109960:	305c      	adds	r0, #92	@ 0x5c
 8109962:	f000 f914 	bl	8109b8e <memset>
 8109966:	4b0d      	ldr	r3, [pc, #52]	@ (810999c <std+0x58>)
 8109968:	6263      	str	r3, [r4, #36]	@ 0x24
 810996a:	4b0d      	ldr	r3, [pc, #52]	@ (81099a0 <std+0x5c>)
 810996c:	62a3      	str	r3, [r4, #40]	@ 0x28
 810996e:	4b0d      	ldr	r3, [pc, #52]	@ (81099a4 <std+0x60>)
 8109970:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8109972:	4b0d      	ldr	r3, [pc, #52]	@ (81099a8 <std+0x64>)
 8109974:	6323      	str	r3, [r4, #48]	@ 0x30
 8109976:	4b0d      	ldr	r3, [pc, #52]	@ (81099ac <std+0x68>)
 8109978:	6224      	str	r4, [r4, #32]
 810997a:	429c      	cmp	r4, r3
 810997c:	d006      	beq.n	810998c <std+0x48>
 810997e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8109982:	4294      	cmp	r4, r2
 8109984:	d002      	beq.n	810998c <std+0x48>
 8109986:	33d0      	adds	r3, #208	@ 0xd0
 8109988:	429c      	cmp	r4, r3
 810998a:	d105      	bne.n	8109998 <std+0x54>
 810998c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8109990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109994:	f000 b978 	b.w	8109c88 <__retarget_lock_init_recursive>
 8109998:	bd10      	pop	{r4, pc}
 810999a:	bf00      	nop
 810999c:	08109b09 	.word	0x08109b09
 81099a0:	08109b2b 	.word	0x08109b2b
 81099a4:	08109b63 	.word	0x08109b63
 81099a8:	08109b87 	.word	0x08109b87
 81099ac:	10000404 	.word	0x10000404

081099b0 <stdio_exit_handler>:
 81099b0:	4a02      	ldr	r2, [pc, #8]	@ (81099bc <stdio_exit_handler+0xc>)
 81099b2:	4903      	ldr	r1, [pc, #12]	@ (81099c0 <stdio_exit_handler+0x10>)
 81099b4:	4803      	ldr	r0, [pc, #12]	@ (81099c4 <stdio_exit_handler+0x14>)
 81099b6:	f000 b869 	b.w	8109a8c <_fwalk_sglue>
 81099ba:	bf00      	nop
 81099bc:	10000038 	.word	0x10000038
 81099c0:	0810b5e5 	.word	0x0810b5e5
 81099c4:	10000048 	.word	0x10000048

081099c8 <cleanup_stdio>:
 81099c8:	6841      	ldr	r1, [r0, #4]
 81099ca:	4b0c      	ldr	r3, [pc, #48]	@ (81099fc <cleanup_stdio+0x34>)
 81099cc:	4299      	cmp	r1, r3
 81099ce:	b510      	push	{r4, lr}
 81099d0:	4604      	mov	r4, r0
 81099d2:	d001      	beq.n	81099d8 <cleanup_stdio+0x10>
 81099d4:	f001 fe06 	bl	810b5e4 <_fflush_r>
 81099d8:	68a1      	ldr	r1, [r4, #8]
 81099da:	4b09      	ldr	r3, [pc, #36]	@ (8109a00 <cleanup_stdio+0x38>)
 81099dc:	4299      	cmp	r1, r3
 81099de:	d002      	beq.n	81099e6 <cleanup_stdio+0x1e>
 81099e0:	4620      	mov	r0, r4
 81099e2:	f001 fdff 	bl	810b5e4 <_fflush_r>
 81099e6:	68e1      	ldr	r1, [r4, #12]
 81099e8:	4b06      	ldr	r3, [pc, #24]	@ (8109a04 <cleanup_stdio+0x3c>)
 81099ea:	4299      	cmp	r1, r3
 81099ec:	d004      	beq.n	81099f8 <cleanup_stdio+0x30>
 81099ee:	4620      	mov	r0, r4
 81099f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81099f4:	f001 bdf6 	b.w	810b5e4 <_fflush_r>
 81099f8:	bd10      	pop	{r4, pc}
 81099fa:	bf00      	nop
 81099fc:	10000404 	.word	0x10000404
 8109a00:	1000046c 	.word	0x1000046c
 8109a04:	100004d4 	.word	0x100004d4

08109a08 <global_stdio_init.part.0>:
 8109a08:	b510      	push	{r4, lr}
 8109a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8109a38 <global_stdio_init.part.0+0x30>)
 8109a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8109a3c <global_stdio_init.part.0+0x34>)
 8109a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8109a40 <global_stdio_init.part.0+0x38>)
 8109a10:	601a      	str	r2, [r3, #0]
 8109a12:	4620      	mov	r0, r4
 8109a14:	2200      	movs	r2, #0
 8109a16:	2104      	movs	r1, #4
 8109a18:	f7ff ff94 	bl	8109944 <std>
 8109a1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8109a20:	2201      	movs	r2, #1
 8109a22:	2109      	movs	r1, #9
 8109a24:	f7ff ff8e 	bl	8109944 <std>
 8109a28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8109a2c:	2202      	movs	r2, #2
 8109a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109a32:	2112      	movs	r1, #18
 8109a34:	f7ff bf86 	b.w	8109944 <std>
 8109a38:	1000053c 	.word	0x1000053c
 8109a3c:	10000404 	.word	0x10000404
 8109a40:	081099b1 	.word	0x081099b1

08109a44 <__sfp_lock_acquire>:
 8109a44:	4801      	ldr	r0, [pc, #4]	@ (8109a4c <__sfp_lock_acquire+0x8>)
 8109a46:	f000 b920 	b.w	8109c8a <__retarget_lock_acquire_recursive>
 8109a4a:	bf00      	nop
 8109a4c:	10000545 	.word	0x10000545

08109a50 <__sfp_lock_release>:
 8109a50:	4801      	ldr	r0, [pc, #4]	@ (8109a58 <__sfp_lock_release+0x8>)
 8109a52:	f000 b91b 	b.w	8109c8c <__retarget_lock_release_recursive>
 8109a56:	bf00      	nop
 8109a58:	10000545 	.word	0x10000545

08109a5c <__sinit>:
 8109a5c:	b510      	push	{r4, lr}
 8109a5e:	4604      	mov	r4, r0
 8109a60:	f7ff fff0 	bl	8109a44 <__sfp_lock_acquire>
 8109a64:	6a23      	ldr	r3, [r4, #32]
 8109a66:	b11b      	cbz	r3, 8109a70 <__sinit+0x14>
 8109a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109a6c:	f7ff bff0 	b.w	8109a50 <__sfp_lock_release>
 8109a70:	4b04      	ldr	r3, [pc, #16]	@ (8109a84 <__sinit+0x28>)
 8109a72:	6223      	str	r3, [r4, #32]
 8109a74:	4b04      	ldr	r3, [pc, #16]	@ (8109a88 <__sinit+0x2c>)
 8109a76:	681b      	ldr	r3, [r3, #0]
 8109a78:	2b00      	cmp	r3, #0
 8109a7a:	d1f5      	bne.n	8109a68 <__sinit+0xc>
 8109a7c:	f7ff ffc4 	bl	8109a08 <global_stdio_init.part.0>
 8109a80:	e7f2      	b.n	8109a68 <__sinit+0xc>
 8109a82:	bf00      	nop
 8109a84:	081099c9 	.word	0x081099c9
 8109a88:	1000053c 	.word	0x1000053c

08109a8c <_fwalk_sglue>:
 8109a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109a90:	4607      	mov	r7, r0
 8109a92:	4688      	mov	r8, r1
 8109a94:	4614      	mov	r4, r2
 8109a96:	2600      	movs	r6, #0
 8109a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8109a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8109aa0:	d505      	bpl.n	8109aae <_fwalk_sglue+0x22>
 8109aa2:	6824      	ldr	r4, [r4, #0]
 8109aa4:	2c00      	cmp	r4, #0
 8109aa6:	d1f7      	bne.n	8109a98 <_fwalk_sglue+0xc>
 8109aa8:	4630      	mov	r0, r6
 8109aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109aae:	89ab      	ldrh	r3, [r5, #12]
 8109ab0:	2b01      	cmp	r3, #1
 8109ab2:	d907      	bls.n	8109ac4 <_fwalk_sglue+0x38>
 8109ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8109ab8:	3301      	adds	r3, #1
 8109aba:	d003      	beq.n	8109ac4 <_fwalk_sglue+0x38>
 8109abc:	4629      	mov	r1, r5
 8109abe:	4638      	mov	r0, r7
 8109ac0:	47c0      	blx	r8
 8109ac2:	4306      	orrs	r6, r0
 8109ac4:	3568      	adds	r5, #104	@ 0x68
 8109ac6:	e7e9      	b.n	8109a9c <_fwalk_sglue+0x10>

08109ac8 <siprintf>:
 8109ac8:	b40e      	push	{r1, r2, r3}
 8109aca:	b500      	push	{lr}
 8109acc:	b09c      	sub	sp, #112	@ 0x70
 8109ace:	ab1d      	add	r3, sp, #116	@ 0x74
 8109ad0:	9002      	str	r0, [sp, #8]
 8109ad2:	9006      	str	r0, [sp, #24]
 8109ad4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8109ad8:	4809      	ldr	r0, [pc, #36]	@ (8109b00 <siprintf+0x38>)
 8109ada:	9107      	str	r1, [sp, #28]
 8109adc:	9104      	str	r1, [sp, #16]
 8109ade:	4909      	ldr	r1, [pc, #36]	@ (8109b04 <siprintf+0x3c>)
 8109ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8109ae4:	9105      	str	r1, [sp, #20]
 8109ae6:	6800      	ldr	r0, [r0, #0]
 8109ae8:	9301      	str	r3, [sp, #4]
 8109aea:	a902      	add	r1, sp, #8
 8109aec:	f001 fbfa 	bl	810b2e4 <_svfiprintf_r>
 8109af0:	9b02      	ldr	r3, [sp, #8]
 8109af2:	2200      	movs	r2, #0
 8109af4:	701a      	strb	r2, [r3, #0]
 8109af6:	b01c      	add	sp, #112	@ 0x70
 8109af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8109afc:	b003      	add	sp, #12
 8109afe:	4770      	bx	lr
 8109b00:	10000044 	.word	0x10000044
 8109b04:	ffff0208 	.word	0xffff0208

08109b08 <__sread>:
 8109b08:	b510      	push	{r4, lr}
 8109b0a:	460c      	mov	r4, r1
 8109b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109b10:	f000 f86c 	bl	8109bec <_read_r>
 8109b14:	2800      	cmp	r0, #0
 8109b16:	bfab      	itete	ge
 8109b18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8109b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8109b1c:	181b      	addge	r3, r3, r0
 8109b1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8109b22:	bfac      	ite	ge
 8109b24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8109b26:	81a3      	strhlt	r3, [r4, #12]
 8109b28:	bd10      	pop	{r4, pc}

08109b2a <__swrite>:
 8109b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109b2e:	461f      	mov	r7, r3
 8109b30:	898b      	ldrh	r3, [r1, #12]
 8109b32:	05db      	lsls	r3, r3, #23
 8109b34:	4605      	mov	r5, r0
 8109b36:	460c      	mov	r4, r1
 8109b38:	4616      	mov	r6, r2
 8109b3a:	d505      	bpl.n	8109b48 <__swrite+0x1e>
 8109b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109b40:	2302      	movs	r3, #2
 8109b42:	2200      	movs	r2, #0
 8109b44:	f000 f840 	bl	8109bc8 <_lseek_r>
 8109b48:	89a3      	ldrh	r3, [r4, #12]
 8109b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109b4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8109b52:	81a3      	strh	r3, [r4, #12]
 8109b54:	4632      	mov	r2, r6
 8109b56:	463b      	mov	r3, r7
 8109b58:	4628      	mov	r0, r5
 8109b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109b5e:	f000 b857 	b.w	8109c10 <_write_r>

08109b62 <__sseek>:
 8109b62:	b510      	push	{r4, lr}
 8109b64:	460c      	mov	r4, r1
 8109b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109b6a:	f000 f82d 	bl	8109bc8 <_lseek_r>
 8109b6e:	1c43      	adds	r3, r0, #1
 8109b70:	89a3      	ldrh	r3, [r4, #12]
 8109b72:	bf15      	itete	ne
 8109b74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8109b76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8109b7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8109b7e:	81a3      	strheq	r3, [r4, #12]
 8109b80:	bf18      	it	ne
 8109b82:	81a3      	strhne	r3, [r4, #12]
 8109b84:	bd10      	pop	{r4, pc}

08109b86 <__sclose>:
 8109b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109b8a:	f000 b80d 	b.w	8109ba8 <_close_r>

08109b8e <memset>:
 8109b8e:	4402      	add	r2, r0
 8109b90:	4603      	mov	r3, r0
 8109b92:	4293      	cmp	r3, r2
 8109b94:	d100      	bne.n	8109b98 <memset+0xa>
 8109b96:	4770      	bx	lr
 8109b98:	f803 1b01 	strb.w	r1, [r3], #1
 8109b9c:	e7f9      	b.n	8109b92 <memset+0x4>
	...

08109ba0 <_localeconv_r>:
 8109ba0:	4800      	ldr	r0, [pc, #0]	@ (8109ba4 <_localeconv_r+0x4>)
 8109ba2:	4770      	bx	lr
 8109ba4:	10000184 	.word	0x10000184

08109ba8 <_close_r>:
 8109ba8:	b538      	push	{r3, r4, r5, lr}
 8109baa:	4d06      	ldr	r5, [pc, #24]	@ (8109bc4 <_close_r+0x1c>)
 8109bac:	2300      	movs	r3, #0
 8109bae:	4604      	mov	r4, r0
 8109bb0:	4608      	mov	r0, r1
 8109bb2:	602b      	str	r3, [r5, #0]
 8109bb4:	f7fb fc72 	bl	810549c <_close>
 8109bb8:	1c43      	adds	r3, r0, #1
 8109bba:	d102      	bne.n	8109bc2 <_close_r+0x1a>
 8109bbc:	682b      	ldr	r3, [r5, #0]
 8109bbe:	b103      	cbz	r3, 8109bc2 <_close_r+0x1a>
 8109bc0:	6023      	str	r3, [r4, #0]
 8109bc2:	bd38      	pop	{r3, r4, r5, pc}
 8109bc4:	10000540 	.word	0x10000540

08109bc8 <_lseek_r>:
 8109bc8:	b538      	push	{r3, r4, r5, lr}
 8109bca:	4d07      	ldr	r5, [pc, #28]	@ (8109be8 <_lseek_r+0x20>)
 8109bcc:	4604      	mov	r4, r0
 8109bce:	4608      	mov	r0, r1
 8109bd0:	4611      	mov	r1, r2
 8109bd2:	2200      	movs	r2, #0
 8109bd4:	602a      	str	r2, [r5, #0]
 8109bd6:	461a      	mov	r2, r3
 8109bd8:	f7fb fc87 	bl	81054ea <_lseek>
 8109bdc:	1c43      	adds	r3, r0, #1
 8109bde:	d102      	bne.n	8109be6 <_lseek_r+0x1e>
 8109be0:	682b      	ldr	r3, [r5, #0]
 8109be2:	b103      	cbz	r3, 8109be6 <_lseek_r+0x1e>
 8109be4:	6023      	str	r3, [r4, #0]
 8109be6:	bd38      	pop	{r3, r4, r5, pc}
 8109be8:	10000540 	.word	0x10000540

08109bec <_read_r>:
 8109bec:	b538      	push	{r3, r4, r5, lr}
 8109bee:	4d07      	ldr	r5, [pc, #28]	@ (8109c0c <_read_r+0x20>)
 8109bf0:	4604      	mov	r4, r0
 8109bf2:	4608      	mov	r0, r1
 8109bf4:	4611      	mov	r1, r2
 8109bf6:	2200      	movs	r2, #0
 8109bf8:	602a      	str	r2, [r5, #0]
 8109bfa:	461a      	mov	r2, r3
 8109bfc:	f7fb fc15 	bl	810542a <_read>
 8109c00:	1c43      	adds	r3, r0, #1
 8109c02:	d102      	bne.n	8109c0a <_read_r+0x1e>
 8109c04:	682b      	ldr	r3, [r5, #0]
 8109c06:	b103      	cbz	r3, 8109c0a <_read_r+0x1e>
 8109c08:	6023      	str	r3, [r4, #0]
 8109c0a:	bd38      	pop	{r3, r4, r5, pc}
 8109c0c:	10000540 	.word	0x10000540

08109c10 <_write_r>:
 8109c10:	b538      	push	{r3, r4, r5, lr}
 8109c12:	4d07      	ldr	r5, [pc, #28]	@ (8109c30 <_write_r+0x20>)
 8109c14:	4604      	mov	r4, r0
 8109c16:	4608      	mov	r0, r1
 8109c18:	4611      	mov	r1, r2
 8109c1a:	2200      	movs	r2, #0
 8109c1c:	602a      	str	r2, [r5, #0]
 8109c1e:	461a      	mov	r2, r3
 8109c20:	f7fb fc20 	bl	8105464 <_write>
 8109c24:	1c43      	adds	r3, r0, #1
 8109c26:	d102      	bne.n	8109c2e <_write_r+0x1e>
 8109c28:	682b      	ldr	r3, [r5, #0]
 8109c2a:	b103      	cbz	r3, 8109c2e <_write_r+0x1e>
 8109c2c:	6023      	str	r3, [r4, #0]
 8109c2e:	bd38      	pop	{r3, r4, r5, pc}
 8109c30:	10000540 	.word	0x10000540

08109c34 <__errno>:
 8109c34:	4b01      	ldr	r3, [pc, #4]	@ (8109c3c <__errno+0x8>)
 8109c36:	6818      	ldr	r0, [r3, #0]
 8109c38:	4770      	bx	lr
 8109c3a:	bf00      	nop
 8109c3c:	10000044 	.word	0x10000044

08109c40 <__libc_init_array>:
 8109c40:	b570      	push	{r4, r5, r6, lr}
 8109c42:	4d0d      	ldr	r5, [pc, #52]	@ (8109c78 <__libc_init_array+0x38>)
 8109c44:	4c0d      	ldr	r4, [pc, #52]	@ (8109c7c <__libc_init_array+0x3c>)
 8109c46:	1b64      	subs	r4, r4, r5
 8109c48:	10a4      	asrs	r4, r4, #2
 8109c4a:	2600      	movs	r6, #0
 8109c4c:	42a6      	cmp	r6, r4
 8109c4e:	d109      	bne.n	8109c64 <__libc_init_array+0x24>
 8109c50:	4d0b      	ldr	r5, [pc, #44]	@ (8109c80 <__libc_init_array+0x40>)
 8109c52:	4c0c      	ldr	r4, [pc, #48]	@ (8109c84 <__libc_init_array+0x44>)
 8109c54:	f002 f864 	bl	810bd20 <_init>
 8109c58:	1b64      	subs	r4, r4, r5
 8109c5a:	10a4      	asrs	r4, r4, #2
 8109c5c:	2600      	movs	r6, #0
 8109c5e:	42a6      	cmp	r6, r4
 8109c60:	d105      	bne.n	8109c6e <__libc_init_array+0x2e>
 8109c62:	bd70      	pop	{r4, r5, r6, pc}
 8109c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8109c68:	4798      	blx	r3
 8109c6a:	3601      	adds	r6, #1
 8109c6c:	e7ee      	b.n	8109c4c <__libc_init_array+0xc>
 8109c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8109c72:	4798      	blx	r3
 8109c74:	3601      	adds	r6, #1
 8109c76:	e7f2      	b.n	8109c5e <__libc_init_array+0x1e>
 8109c78:	0810c138 	.word	0x0810c138
 8109c7c:	0810c138 	.word	0x0810c138
 8109c80:	0810c138 	.word	0x0810c138
 8109c84:	0810c13c 	.word	0x0810c13c

08109c88 <__retarget_lock_init_recursive>:
 8109c88:	4770      	bx	lr

08109c8a <__retarget_lock_acquire_recursive>:
 8109c8a:	4770      	bx	lr

08109c8c <__retarget_lock_release_recursive>:
 8109c8c:	4770      	bx	lr

08109c8e <quorem>:
 8109c8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109c92:	6903      	ldr	r3, [r0, #16]
 8109c94:	690c      	ldr	r4, [r1, #16]
 8109c96:	42a3      	cmp	r3, r4
 8109c98:	4607      	mov	r7, r0
 8109c9a:	db7e      	blt.n	8109d9a <quorem+0x10c>
 8109c9c:	3c01      	subs	r4, #1
 8109c9e:	f101 0814 	add.w	r8, r1, #20
 8109ca2:	00a3      	lsls	r3, r4, #2
 8109ca4:	f100 0514 	add.w	r5, r0, #20
 8109ca8:	9300      	str	r3, [sp, #0]
 8109caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109cae:	9301      	str	r3, [sp, #4]
 8109cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109cb8:	3301      	adds	r3, #1
 8109cba:	429a      	cmp	r2, r3
 8109cbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8109cc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8109cc4:	d32e      	bcc.n	8109d24 <quorem+0x96>
 8109cc6:	f04f 0a00 	mov.w	sl, #0
 8109cca:	46c4      	mov	ip, r8
 8109ccc:	46ae      	mov	lr, r5
 8109cce:	46d3      	mov	fp, sl
 8109cd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8109cd4:	b298      	uxth	r0, r3
 8109cd6:	fb06 a000 	mla	r0, r6, r0, sl
 8109cda:	0c02      	lsrs	r2, r0, #16
 8109cdc:	0c1b      	lsrs	r3, r3, #16
 8109cde:	fb06 2303 	mla	r3, r6, r3, r2
 8109ce2:	f8de 2000 	ldr.w	r2, [lr]
 8109ce6:	b280      	uxth	r0, r0
 8109ce8:	b292      	uxth	r2, r2
 8109cea:	1a12      	subs	r2, r2, r0
 8109cec:	445a      	add	r2, fp
 8109cee:	f8de 0000 	ldr.w	r0, [lr]
 8109cf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8109cf6:	b29b      	uxth	r3, r3
 8109cf8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8109cfc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8109d00:	b292      	uxth	r2, r2
 8109d02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8109d06:	45e1      	cmp	r9, ip
 8109d08:	f84e 2b04 	str.w	r2, [lr], #4
 8109d0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8109d10:	d2de      	bcs.n	8109cd0 <quorem+0x42>
 8109d12:	9b00      	ldr	r3, [sp, #0]
 8109d14:	58eb      	ldr	r3, [r5, r3]
 8109d16:	b92b      	cbnz	r3, 8109d24 <quorem+0x96>
 8109d18:	9b01      	ldr	r3, [sp, #4]
 8109d1a:	3b04      	subs	r3, #4
 8109d1c:	429d      	cmp	r5, r3
 8109d1e:	461a      	mov	r2, r3
 8109d20:	d32f      	bcc.n	8109d82 <quorem+0xf4>
 8109d22:	613c      	str	r4, [r7, #16]
 8109d24:	4638      	mov	r0, r7
 8109d26:	f001 f979 	bl	810b01c <__mcmp>
 8109d2a:	2800      	cmp	r0, #0
 8109d2c:	db25      	blt.n	8109d7a <quorem+0xec>
 8109d2e:	4629      	mov	r1, r5
 8109d30:	2000      	movs	r0, #0
 8109d32:	f858 2b04 	ldr.w	r2, [r8], #4
 8109d36:	f8d1 c000 	ldr.w	ip, [r1]
 8109d3a:	fa1f fe82 	uxth.w	lr, r2
 8109d3e:	fa1f f38c 	uxth.w	r3, ip
 8109d42:	eba3 030e 	sub.w	r3, r3, lr
 8109d46:	4403      	add	r3, r0
 8109d48:	0c12      	lsrs	r2, r2, #16
 8109d4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8109d4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8109d52:	b29b      	uxth	r3, r3
 8109d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109d58:	45c1      	cmp	r9, r8
 8109d5a:	f841 3b04 	str.w	r3, [r1], #4
 8109d5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8109d62:	d2e6      	bcs.n	8109d32 <quorem+0xa4>
 8109d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109d6c:	b922      	cbnz	r2, 8109d78 <quorem+0xea>
 8109d6e:	3b04      	subs	r3, #4
 8109d70:	429d      	cmp	r5, r3
 8109d72:	461a      	mov	r2, r3
 8109d74:	d30b      	bcc.n	8109d8e <quorem+0x100>
 8109d76:	613c      	str	r4, [r7, #16]
 8109d78:	3601      	adds	r6, #1
 8109d7a:	4630      	mov	r0, r6
 8109d7c:	b003      	add	sp, #12
 8109d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109d82:	6812      	ldr	r2, [r2, #0]
 8109d84:	3b04      	subs	r3, #4
 8109d86:	2a00      	cmp	r2, #0
 8109d88:	d1cb      	bne.n	8109d22 <quorem+0x94>
 8109d8a:	3c01      	subs	r4, #1
 8109d8c:	e7c6      	b.n	8109d1c <quorem+0x8e>
 8109d8e:	6812      	ldr	r2, [r2, #0]
 8109d90:	3b04      	subs	r3, #4
 8109d92:	2a00      	cmp	r2, #0
 8109d94:	d1ef      	bne.n	8109d76 <quorem+0xe8>
 8109d96:	3c01      	subs	r4, #1
 8109d98:	e7ea      	b.n	8109d70 <quorem+0xe2>
 8109d9a:	2000      	movs	r0, #0
 8109d9c:	e7ee      	b.n	8109d7c <quorem+0xee>
	...

08109da0 <_dtoa_r>:
 8109da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109da4:	69c7      	ldr	r7, [r0, #28]
 8109da6:	b099      	sub	sp, #100	@ 0x64
 8109da8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8109dac:	ec55 4b10 	vmov	r4, r5, d0
 8109db0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8109db2:	9109      	str	r1, [sp, #36]	@ 0x24
 8109db4:	4683      	mov	fp, r0
 8109db6:	920e      	str	r2, [sp, #56]	@ 0x38
 8109db8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8109dba:	b97f      	cbnz	r7, 8109ddc <_dtoa_r+0x3c>
 8109dbc:	2010      	movs	r0, #16
 8109dbe:	f000 fdfd 	bl	810a9bc <malloc>
 8109dc2:	4602      	mov	r2, r0
 8109dc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8109dc8:	b920      	cbnz	r0, 8109dd4 <_dtoa_r+0x34>
 8109dca:	4ba7      	ldr	r3, [pc, #668]	@ (810a068 <_dtoa_r+0x2c8>)
 8109dcc:	21ef      	movs	r1, #239	@ 0xef
 8109dce:	48a7      	ldr	r0, [pc, #668]	@ (810a06c <_dtoa_r+0x2cc>)
 8109dd0:	f001 fc68 	bl	810b6a4 <__assert_func>
 8109dd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8109dd8:	6007      	str	r7, [r0, #0]
 8109dda:	60c7      	str	r7, [r0, #12]
 8109ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8109de0:	6819      	ldr	r1, [r3, #0]
 8109de2:	b159      	cbz	r1, 8109dfc <_dtoa_r+0x5c>
 8109de4:	685a      	ldr	r2, [r3, #4]
 8109de6:	604a      	str	r2, [r1, #4]
 8109de8:	2301      	movs	r3, #1
 8109dea:	4093      	lsls	r3, r2
 8109dec:	608b      	str	r3, [r1, #8]
 8109dee:	4658      	mov	r0, fp
 8109df0:	f000 feda 	bl	810aba8 <_Bfree>
 8109df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8109df8:	2200      	movs	r2, #0
 8109dfa:	601a      	str	r2, [r3, #0]
 8109dfc:	1e2b      	subs	r3, r5, #0
 8109dfe:	bfb9      	ittee	lt
 8109e00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8109e04:	9303      	strlt	r3, [sp, #12]
 8109e06:	2300      	movge	r3, #0
 8109e08:	6033      	strge	r3, [r6, #0]
 8109e0a:	9f03      	ldr	r7, [sp, #12]
 8109e0c:	4b98      	ldr	r3, [pc, #608]	@ (810a070 <_dtoa_r+0x2d0>)
 8109e0e:	bfbc      	itt	lt
 8109e10:	2201      	movlt	r2, #1
 8109e12:	6032      	strlt	r2, [r6, #0]
 8109e14:	43bb      	bics	r3, r7
 8109e16:	d112      	bne.n	8109e3e <_dtoa_r+0x9e>
 8109e18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8109e1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8109e1e:	6013      	str	r3, [r2, #0]
 8109e20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8109e24:	4323      	orrs	r3, r4
 8109e26:	f000 854d 	beq.w	810a8c4 <_dtoa_r+0xb24>
 8109e2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8109e2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810a084 <_dtoa_r+0x2e4>
 8109e30:	2b00      	cmp	r3, #0
 8109e32:	f000 854f 	beq.w	810a8d4 <_dtoa_r+0xb34>
 8109e36:	f10a 0303 	add.w	r3, sl, #3
 8109e3a:	f000 bd49 	b.w	810a8d0 <_dtoa_r+0xb30>
 8109e3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109e42:	2200      	movs	r2, #0
 8109e44:	ec51 0b17 	vmov	r0, r1, d7
 8109e48:	2300      	movs	r3, #0
 8109e4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8109e4e:	f7f6 fec3 	bl	8100bd8 <__aeabi_dcmpeq>
 8109e52:	4680      	mov	r8, r0
 8109e54:	b158      	cbz	r0, 8109e6e <_dtoa_r+0xce>
 8109e56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8109e58:	2301      	movs	r3, #1
 8109e5a:	6013      	str	r3, [r2, #0]
 8109e5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8109e5e:	b113      	cbz	r3, 8109e66 <_dtoa_r+0xc6>
 8109e60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8109e62:	4b84      	ldr	r3, [pc, #528]	@ (810a074 <_dtoa_r+0x2d4>)
 8109e64:	6013      	str	r3, [r2, #0]
 8109e66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810a088 <_dtoa_r+0x2e8>
 8109e6a:	f000 bd33 	b.w	810a8d4 <_dtoa_r+0xb34>
 8109e6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8109e72:	aa16      	add	r2, sp, #88	@ 0x58
 8109e74:	a917      	add	r1, sp, #92	@ 0x5c
 8109e76:	4658      	mov	r0, fp
 8109e78:	f001 f980 	bl	810b17c <__d2b>
 8109e7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8109e80:	4681      	mov	r9, r0
 8109e82:	2e00      	cmp	r6, #0
 8109e84:	d077      	beq.n	8109f76 <_dtoa_r+0x1d6>
 8109e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8109e88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8109e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8109e94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8109e98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8109e9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8109ea0:	4619      	mov	r1, r3
 8109ea2:	2200      	movs	r2, #0
 8109ea4:	4b74      	ldr	r3, [pc, #464]	@ (810a078 <_dtoa_r+0x2d8>)
 8109ea6:	f7f6 fa77 	bl	8100398 <__aeabi_dsub>
 8109eaa:	a369      	add	r3, pc, #420	@ (adr r3, 810a050 <_dtoa_r+0x2b0>)
 8109eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109eb0:	f7f6 fc2a 	bl	8100708 <__aeabi_dmul>
 8109eb4:	a368      	add	r3, pc, #416	@ (adr r3, 810a058 <_dtoa_r+0x2b8>)
 8109eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109eba:	f7f6 fa6f 	bl	810039c <__adddf3>
 8109ebe:	4604      	mov	r4, r0
 8109ec0:	4630      	mov	r0, r6
 8109ec2:	460d      	mov	r5, r1
 8109ec4:	f7f6 fbb6 	bl	8100634 <__aeabi_i2d>
 8109ec8:	a365      	add	r3, pc, #404	@ (adr r3, 810a060 <_dtoa_r+0x2c0>)
 8109eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ece:	f7f6 fc1b 	bl	8100708 <__aeabi_dmul>
 8109ed2:	4602      	mov	r2, r0
 8109ed4:	460b      	mov	r3, r1
 8109ed6:	4620      	mov	r0, r4
 8109ed8:	4629      	mov	r1, r5
 8109eda:	f7f6 fa5f 	bl	810039c <__adddf3>
 8109ede:	4604      	mov	r4, r0
 8109ee0:	460d      	mov	r5, r1
 8109ee2:	f7f6 fec1 	bl	8100c68 <__aeabi_d2iz>
 8109ee6:	2200      	movs	r2, #0
 8109ee8:	4607      	mov	r7, r0
 8109eea:	2300      	movs	r3, #0
 8109eec:	4620      	mov	r0, r4
 8109eee:	4629      	mov	r1, r5
 8109ef0:	f7f6 fe7c 	bl	8100bec <__aeabi_dcmplt>
 8109ef4:	b140      	cbz	r0, 8109f08 <_dtoa_r+0x168>
 8109ef6:	4638      	mov	r0, r7
 8109ef8:	f7f6 fb9c 	bl	8100634 <__aeabi_i2d>
 8109efc:	4622      	mov	r2, r4
 8109efe:	462b      	mov	r3, r5
 8109f00:	f7f6 fe6a 	bl	8100bd8 <__aeabi_dcmpeq>
 8109f04:	b900      	cbnz	r0, 8109f08 <_dtoa_r+0x168>
 8109f06:	3f01      	subs	r7, #1
 8109f08:	2f16      	cmp	r7, #22
 8109f0a:	d851      	bhi.n	8109fb0 <_dtoa_r+0x210>
 8109f0c:	4b5b      	ldr	r3, [pc, #364]	@ (810a07c <_dtoa_r+0x2dc>)
 8109f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8109f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8109f1a:	f7f6 fe67 	bl	8100bec <__aeabi_dcmplt>
 8109f1e:	2800      	cmp	r0, #0
 8109f20:	d048      	beq.n	8109fb4 <_dtoa_r+0x214>
 8109f22:	3f01      	subs	r7, #1
 8109f24:	2300      	movs	r3, #0
 8109f26:	9312      	str	r3, [sp, #72]	@ 0x48
 8109f28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8109f2a:	1b9b      	subs	r3, r3, r6
 8109f2c:	1e5a      	subs	r2, r3, #1
 8109f2e:	bf44      	itt	mi
 8109f30:	f1c3 0801 	rsbmi	r8, r3, #1
 8109f34:	2300      	movmi	r3, #0
 8109f36:	9208      	str	r2, [sp, #32]
 8109f38:	bf54      	ite	pl
 8109f3a:	f04f 0800 	movpl.w	r8, #0
 8109f3e:	9308      	strmi	r3, [sp, #32]
 8109f40:	2f00      	cmp	r7, #0
 8109f42:	db39      	blt.n	8109fb8 <_dtoa_r+0x218>
 8109f44:	9b08      	ldr	r3, [sp, #32]
 8109f46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8109f48:	443b      	add	r3, r7
 8109f4a:	9308      	str	r3, [sp, #32]
 8109f4c:	2300      	movs	r3, #0
 8109f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8109f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109f52:	2b09      	cmp	r3, #9
 8109f54:	d864      	bhi.n	810a020 <_dtoa_r+0x280>
 8109f56:	2b05      	cmp	r3, #5
 8109f58:	bfc4      	itt	gt
 8109f5a:	3b04      	subgt	r3, #4
 8109f5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8109f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109f60:	f1a3 0302 	sub.w	r3, r3, #2
 8109f64:	bfcc      	ite	gt
 8109f66:	2400      	movgt	r4, #0
 8109f68:	2401      	movle	r4, #1
 8109f6a:	2b03      	cmp	r3, #3
 8109f6c:	d863      	bhi.n	810a036 <_dtoa_r+0x296>
 8109f6e:	e8df f003 	tbb	[pc, r3]
 8109f72:	372a      	.short	0x372a
 8109f74:	5535      	.short	0x5535
 8109f76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8109f7a:	441e      	add	r6, r3
 8109f7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8109f80:	2b20      	cmp	r3, #32
 8109f82:	bfc1      	itttt	gt
 8109f84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8109f88:	409f      	lslgt	r7, r3
 8109f8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8109f8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8109f92:	bfd6      	itet	le
 8109f94:	f1c3 0320 	rsble	r3, r3, #32
 8109f98:	ea47 0003 	orrgt.w	r0, r7, r3
 8109f9c:	fa04 f003 	lslle.w	r0, r4, r3
 8109fa0:	f7f6 fb38 	bl	8100614 <__aeabi_ui2d>
 8109fa4:	2201      	movs	r2, #1
 8109fa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8109faa:	3e01      	subs	r6, #1
 8109fac:	9214      	str	r2, [sp, #80]	@ 0x50
 8109fae:	e777      	b.n	8109ea0 <_dtoa_r+0x100>
 8109fb0:	2301      	movs	r3, #1
 8109fb2:	e7b8      	b.n	8109f26 <_dtoa_r+0x186>
 8109fb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8109fb6:	e7b7      	b.n	8109f28 <_dtoa_r+0x188>
 8109fb8:	427b      	negs	r3, r7
 8109fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8109fbc:	2300      	movs	r3, #0
 8109fbe:	eba8 0807 	sub.w	r8, r8, r7
 8109fc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8109fc4:	e7c4      	b.n	8109f50 <_dtoa_r+0x1b0>
 8109fc6:	2300      	movs	r3, #0
 8109fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8109fcc:	2b00      	cmp	r3, #0
 8109fce:	dc35      	bgt.n	810a03c <_dtoa_r+0x29c>
 8109fd0:	2301      	movs	r3, #1
 8109fd2:	9300      	str	r3, [sp, #0]
 8109fd4:	9307      	str	r3, [sp, #28]
 8109fd6:	461a      	mov	r2, r3
 8109fd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8109fda:	e00b      	b.n	8109ff4 <_dtoa_r+0x254>
 8109fdc:	2301      	movs	r3, #1
 8109fde:	e7f3      	b.n	8109fc8 <_dtoa_r+0x228>
 8109fe0:	2300      	movs	r3, #0
 8109fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8109fe6:	18fb      	adds	r3, r7, r3
 8109fe8:	9300      	str	r3, [sp, #0]
 8109fea:	3301      	adds	r3, #1
 8109fec:	2b01      	cmp	r3, #1
 8109fee:	9307      	str	r3, [sp, #28]
 8109ff0:	bfb8      	it	lt
 8109ff2:	2301      	movlt	r3, #1
 8109ff4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8109ff8:	2100      	movs	r1, #0
 8109ffa:	2204      	movs	r2, #4
 8109ffc:	f102 0514 	add.w	r5, r2, #20
 810a000:	429d      	cmp	r5, r3
 810a002:	d91f      	bls.n	810a044 <_dtoa_r+0x2a4>
 810a004:	6041      	str	r1, [r0, #4]
 810a006:	4658      	mov	r0, fp
 810a008:	f000 fd8e 	bl	810ab28 <_Balloc>
 810a00c:	4682      	mov	sl, r0
 810a00e:	2800      	cmp	r0, #0
 810a010:	d13c      	bne.n	810a08c <_dtoa_r+0x2ec>
 810a012:	4b1b      	ldr	r3, [pc, #108]	@ (810a080 <_dtoa_r+0x2e0>)
 810a014:	4602      	mov	r2, r0
 810a016:	f240 11af 	movw	r1, #431	@ 0x1af
 810a01a:	e6d8      	b.n	8109dce <_dtoa_r+0x2e>
 810a01c:	2301      	movs	r3, #1
 810a01e:	e7e0      	b.n	8109fe2 <_dtoa_r+0x242>
 810a020:	2401      	movs	r4, #1
 810a022:	2300      	movs	r3, #0
 810a024:	9309      	str	r3, [sp, #36]	@ 0x24
 810a026:	940b      	str	r4, [sp, #44]	@ 0x2c
 810a028:	f04f 33ff 	mov.w	r3, #4294967295
 810a02c:	9300      	str	r3, [sp, #0]
 810a02e:	9307      	str	r3, [sp, #28]
 810a030:	2200      	movs	r2, #0
 810a032:	2312      	movs	r3, #18
 810a034:	e7d0      	b.n	8109fd8 <_dtoa_r+0x238>
 810a036:	2301      	movs	r3, #1
 810a038:	930b      	str	r3, [sp, #44]	@ 0x2c
 810a03a:	e7f5      	b.n	810a028 <_dtoa_r+0x288>
 810a03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810a03e:	9300      	str	r3, [sp, #0]
 810a040:	9307      	str	r3, [sp, #28]
 810a042:	e7d7      	b.n	8109ff4 <_dtoa_r+0x254>
 810a044:	3101      	adds	r1, #1
 810a046:	0052      	lsls	r2, r2, #1
 810a048:	e7d8      	b.n	8109ffc <_dtoa_r+0x25c>
 810a04a:	bf00      	nop
 810a04c:	f3af 8000 	nop.w
 810a050:	636f4361 	.word	0x636f4361
 810a054:	3fd287a7 	.word	0x3fd287a7
 810a058:	8b60c8b3 	.word	0x8b60c8b3
 810a05c:	3fc68a28 	.word	0x3fc68a28
 810a060:	509f79fb 	.word	0x509f79fb
 810a064:	3fd34413 	.word	0x3fd34413
 810a068:	0810be01 	.word	0x0810be01
 810a06c:	0810be18 	.word	0x0810be18
 810a070:	7ff00000 	.word	0x7ff00000
 810a074:	0810bdd1 	.word	0x0810bdd1
 810a078:	3ff80000 	.word	0x3ff80000
 810a07c:	0810bf10 	.word	0x0810bf10
 810a080:	0810be70 	.word	0x0810be70
 810a084:	0810bdfd 	.word	0x0810bdfd
 810a088:	0810bdd0 	.word	0x0810bdd0
 810a08c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810a090:	6018      	str	r0, [r3, #0]
 810a092:	9b07      	ldr	r3, [sp, #28]
 810a094:	2b0e      	cmp	r3, #14
 810a096:	f200 80a4 	bhi.w	810a1e2 <_dtoa_r+0x442>
 810a09a:	2c00      	cmp	r4, #0
 810a09c:	f000 80a1 	beq.w	810a1e2 <_dtoa_r+0x442>
 810a0a0:	2f00      	cmp	r7, #0
 810a0a2:	dd33      	ble.n	810a10c <_dtoa_r+0x36c>
 810a0a4:	4bad      	ldr	r3, [pc, #692]	@ (810a35c <_dtoa_r+0x5bc>)
 810a0a6:	f007 020f 	and.w	r2, r7, #15
 810a0aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a0ae:	ed93 7b00 	vldr	d7, [r3]
 810a0b2:	05f8      	lsls	r0, r7, #23
 810a0b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 810a0b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 810a0bc:	d516      	bpl.n	810a0ec <_dtoa_r+0x34c>
 810a0be:	4ba8      	ldr	r3, [pc, #672]	@ (810a360 <_dtoa_r+0x5c0>)
 810a0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810a0c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810a0c8:	f7f6 fc48 	bl	810095c <__aeabi_ddiv>
 810a0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a0d0:	f004 040f 	and.w	r4, r4, #15
 810a0d4:	2603      	movs	r6, #3
 810a0d6:	4da2      	ldr	r5, [pc, #648]	@ (810a360 <_dtoa_r+0x5c0>)
 810a0d8:	b954      	cbnz	r4, 810a0f0 <_dtoa_r+0x350>
 810a0da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a0e2:	f7f6 fc3b 	bl	810095c <__aeabi_ddiv>
 810a0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a0ea:	e028      	b.n	810a13e <_dtoa_r+0x39e>
 810a0ec:	2602      	movs	r6, #2
 810a0ee:	e7f2      	b.n	810a0d6 <_dtoa_r+0x336>
 810a0f0:	07e1      	lsls	r1, r4, #31
 810a0f2:	d508      	bpl.n	810a106 <_dtoa_r+0x366>
 810a0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810a0f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 810a0fc:	f7f6 fb04 	bl	8100708 <__aeabi_dmul>
 810a100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810a104:	3601      	adds	r6, #1
 810a106:	1064      	asrs	r4, r4, #1
 810a108:	3508      	adds	r5, #8
 810a10a:	e7e5      	b.n	810a0d8 <_dtoa_r+0x338>
 810a10c:	f000 80d2 	beq.w	810a2b4 <_dtoa_r+0x514>
 810a110:	427c      	negs	r4, r7
 810a112:	4b92      	ldr	r3, [pc, #584]	@ (810a35c <_dtoa_r+0x5bc>)
 810a114:	4d92      	ldr	r5, [pc, #584]	@ (810a360 <_dtoa_r+0x5c0>)
 810a116:	f004 020f 	and.w	r2, r4, #15
 810a11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810a126:	f7f6 faef 	bl	8100708 <__aeabi_dmul>
 810a12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a12e:	1124      	asrs	r4, r4, #4
 810a130:	2300      	movs	r3, #0
 810a132:	2602      	movs	r6, #2
 810a134:	2c00      	cmp	r4, #0
 810a136:	f040 80b2 	bne.w	810a29e <_dtoa_r+0x4fe>
 810a13a:	2b00      	cmp	r3, #0
 810a13c:	d1d3      	bne.n	810a0e6 <_dtoa_r+0x346>
 810a13e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810a140:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810a144:	2b00      	cmp	r3, #0
 810a146:	f000 80b7 	beq.w	810a2b8 <_dtoa_r+0x518>
 810a14a:	4b86      	ldr	r3, [pc, #536]	@ (810a364 <_dtoa_r+0x5c4>)
 810a14c:	2200      	movs	r2, #0
 810a14e:	4620      	mov	r0, r4
 810a150:	4629      	mov	r1, r5
 810a152:	f7f6 fd4b 	bl	8100bec <__aeabi_dcmplt>
 810a156:	2800      	cmp	r0, #0
 810a158:	f000 80ae 	beq.w	810a2b8 <_dtoa_r+0x518>
 810a15c:	9b07      	ldr	r3, [sp, #28]
 810a15e:	2b00      	cmp	r3, #0
 810a160:	f000 80aa 	beq.w	810a2b8 <_dtoa_r+0x518>
 810a164:	9b00      	ldr	r3, [sp, #0]
 810a166:	2b00      	cmp	r3, #0
 810a168:	dd37      	ble.n	810a1da <_dtoa_r+0x43a>
 810a16a:	1e7b      	subs	r3, r7, #1
 810a16c:	9304      	str	r3, [sp, #16]
 810a16e:	4620      	mov	r0, r4
 810a170:	4b7d      	ldr	r3, [pc, #500]	@ (810a368 <_dtoa_r+0x5c8>)
 810a172:	2200      	movs	r2, #0
 810a174:	4629      	mov	r1, r5
 810a176:	f7f6 fac7 	bl	8100708 <__aeabi_dmul>
 810a17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a17e:	9c00      	ldr	r4, [sp, #0]
 810a180:	3601      	adds	r6, #1
 810a182:	4630      	mov	r0, r6
 810a184:	f7f6 fa56 	bl	8100634 <__aeabi_i2d>
 810a188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a18c:	f7f6 fabc 	bl	8100708 <__aeabi_dmul>
 810a190:	4b76      	ldr	r3, [pc, #472]	@ (810a36c <_dtoa_r+0x5cc>)
 810a192:	2200      	movs	r2, #0
 810a194:	f7f6 f902 	bl	810039c <__adddf3>
 810a198:	4605      	mov	r5, r0
 810a19a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810a19e:	2c00      	cmp	r4, #0
 810a1a0:	f040 808d 	bne.w	810a2be <_dtoa_r+0x51e>
 810a1a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a1a8:	4b71      	ldr	r3, [pc, #452]	@ (810a370 <_dtoa_r+0x5d0>)
 810a1aa:	2200      	movs	r2, #0
 810a1ac:	f7f6 f8f4 	bl	8100398 <__aeabi_dsub>
 810a1b0:	4602      	mov	r2, r0
 810a1b2:	460b      	mov	r3, r1
 810a1b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810a1b8:	462a      	mov	r2, r5
 810a1ba:	4633      	mov	r3, r6
 810a1bc:	f7f6 fd34 	bl	8100c28 <__aeabi_dcmpgt>
 810a1c0:	2800      	cmp	r0, #0
 810a1c2:	f040 828b 	bne.w	810a6dc <_dtoa_r+0x93c>
 810a1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a1ca:	462a      	mov	r2, r5
 810a1cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810a1d0:	f7f6 fd0c 	bl	8100bec <__aeabi_dcmplt>
 810a1d4:	2800      	cmp	r0, #0
 810a1d6:	f040 8128 	bne.w	810a42a <_dtoa_r+0x68a>
 810a1da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810a1de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810a1e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810a1e4:	2b00      	cmp	r3, #0
 810a1e6:	f2c0 815a 	blt.w	810a49e <_dtoa_r+0x6fe>
 810a1ea:	2f0e      	cmp	r7, #14
 810a1ec:	f300 8157 	bgt.w	810a49e <_dtoa_r+0x6fe>
 810a1f0:	4b5a      	ldr	r3, [pc, #360]	@ (810a35c <_dtoa_r+0x5bc>)
 810a1f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810a1f6:	ed93 7b00 	vldr	d7, [r3]
 810a1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810a1fc:	2b00      	cmp	r3, #0
 810a1fe:	ed8d 7b00 	vstr	d7, [sp]
 810a202:	da03      	bge.n	810a20c <_dtoa_r+0x46c>
 810a204:	9b07      	ldr	r3, [sp, #28]
 810a206:	2b00      	cmp	r3, #0
 810a208:	f340 8101 	ble.w	810a40e <_dtoa_r+0x66e>
 810a20c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810a210:	4656      	mov	r6, sl
 810a212:	e9dd 2300 	ldrd	r2, r3, [sp]
 810a216:	4620      	mov	r0, r4
 810a218:	4629      	mov	r1, r5
 810a21a:	f7f6 fb9f 	bl	810095c <__aeabi_ddiv>
 810a21e:	f7f6 fd23 	bl	8100c68 <__aeabi_d2iz>
 810a222:	4680      	mov	r8, r0
 810a224:	f7f6 fa06 	bl	8100634 <__aeabi_i2d>
 810a228:	e9dd 2300 	ldrd	r2, r3, [sp]
 810a22c:	f7f6 fa6c 	bl	8100708 <__aeabi_dmul>
 810a230:	4602      	mov	r2, r0
 810a232:	460b      	mov	r3, r1
 810a234:	4620      	mov	r0, r4
 810a236:	4629      	mov	r1, r5
 810a238:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810a23c:	f7f6 f8ac 	bl	8100398 <__aeabi_dsub>
 810a240:	f806 4b01 	strb.w	r4, [r6], #1
 810a244:	9d07      	ldr	r5, [sp, #28]
 810a246:	eba6 040a 	sub.w	r4, r6, sl
 810a24a:	42a5      	cmp	r5, r4
 810a24c:	4602      	mov	r2, r0
 810a24e:	460b      	mov	r3, r1
 810a250:	f040 8117 	bne.w	810a482 <_dtoa_r+0x6e2>
 810a254:	f7f6 f8a2 	bl	810039c <__adddf3>
 810a258:	e9dd 2300 	ldrd	r2, r3, [sp]
 810a25c:	4604      	mov	r4, r0
 810a25e:	460d      	mov	r5, r1
 810a260:	f7f6 fce2 	bl	8100c28 <__aeabi_dcmpgt>
 810a264:	2800      	cmp	r0, #0
 810a266:	f040 80f9 	bne.w	810a45c <_dtoa_r+0x6bc>
 810a26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810a26e:	4620      	mov	r0, r4
 810a270:	4629      	mov	r1, r5
 810a272:	f7f6 fcb1 	bl	8100bd8 <__aeabi_dcmpeq>
 810a276:	b118      	cbz	r0, 810a280 <_dtoa_r+0x4e0>
 810a278:	f018 0f01 	tst.w	r8, #1
 810a27c:	f040 80ee 	bne.w	810a45c <_dtoa_r+0x6bc>
 810a280:	4649      	mov	r1, r9
 810a282:	4658      	mov	r0, fp
 810a284:	f000 fc90 	bl	810aba8 <_Bfree>
 810a288:	2300      	movs	r3, #0
 810a28a:	7033      	strb	r3, [r6, #0]
 810a28c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810a28e:	3701      	adds	r7, #1
 810a290:	601f      	str	r7, [r3, #0]
 810a292:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810a294:	2b00      	cmp	r3, #0
 810a296:	f000 831d 	beq.w	810a8d4 <_dtoa_r+0xb34>
 810a29a:	601e      	str	r6, [r3, #0]
 810a29c:	e31a      	b.n	810a8d4 <_dtoa_r+0xb34>
 810a29e:	07e2      	lsls	r2, r4, #31
 810a2a0:	d505      	bpl.n	810a2ae <_dtoa_r+0x50e>
 810a2a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 810a2a6:	f7f6 fa2f 	bl	8100708 <__aeabi_dmul>
 810a2aa:	3601      	adds	r6, #1
 810a2ac:	2301      	movs	r3, #1
 810a2ae:	1064      	asrs	r4, r4, #1
 810a2b0:	3508      	adds	r5, #8
 810a2b2:	e73f      	b.n	810a134 <_dtoa_r+0x394>
 810a2b4:	2602      	movs	r6, #2
 810a2b6:	e742      	b.n	810a13e <_dtoa_r+0x39e>
 810a2b8:	9c07      	ldr	r4, [sp, #28]
 810a2ba:	9704      	str	r7, [sp, #16]
 810a2bc:	e761      	b.n	810a182 <_dtoa_r+0x3e2>
 810a2be:	4b27      	ldr	r3, [pc, #156]	@ (810a35c <_dtoa_r+0x5bc>)
 810a2c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810a2c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810a2c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a2ca:	4454      	add	r4, sl
 810a2cc:	2900      	cmp	r1, #0
 810a2ce:	d053      	beq.n	810a378 <_dtoa_r+0x5d8>
 810a2d0:	4928      	ldr	r1, [pc, #160]	@ (810a374 <_dtoa_r+0x5d4>)
 810a2d2:	2000      	movs	r0, #0
 810a2d4:	f7f6 fb42 	bl	810095c <__aeabi_ddiv>
 810a2d8:	4633      	mov	r3, r6
 810a2da:	462a      	mov	r2, r5
 810a2dc:	f7f6 f85c 	bl	8100398 <__aeabi_dsub>
 810a2e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810a2e4:	4656      	mov	r6, sl
 810a2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a2ea:	f7f6 fcbd 	bl	8100c68 <__aeabi_d2iz>
 810a2ee:	4605      	mov	r5, r0
 810a2f0:	f7f6 f9a0 	bl	8100634 <__aeabi_i2d>
 810a2f4:	4602      	mov	r2, r0
 810a2f6:	460b      	mov	r3, r1
 810a2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a2fc:	f7f6 f84c 	bl	8100398 <__aeabi_dsub>
 810a300:	3530      	adds	r5, #48	@ 0x30
 810a302:	4602      	mov	r2, r0
 810a304:	460b      	mov	r3, r1
 810a306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810a30a:	f806 5b01 	strb.w	r5, [r6], #1
 810a30e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810a312:	f7f6 fc6b 	bl	8100bec <__aeabi_dcmplt>
 810a316:	2800      	cmp	r0, #0
 810a318:	d171      	bne.n	810a3fe <_dtoa_r+0x65e>
 810a31a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a31e:	4911      	ldr	r1, [pc, #68]	@ (810a364 <_dtoa_r+0x5c4>)
 810a320:	2000      	movs	r0, #0
 810a322:	f7f6 f839 	bl	8100398 <__aeabi_dsub>
 810a326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810a32a:	f7f6 fc5f 	bl	8100bec <__aeabi_dcmplt>
 810a32e:	2800      	cmp	r0, #0
 810a330:	f040 8095 	bne.w	810a45e <_dtoa_r+0x6be>
 810a334:	42a6      	cmp	r6, r4
 810a336:	f43f af50 	beq.w	810a1da <_dtoa_r+0x43a>
 810a33a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810a33e:	4b0a      	ldr	r3, [pc, #40]	@ (810a368 <_dtoa_r+0x5c8>)
 810a340:	2200      	movs	r2, #0
 810a342:	f7f6 f9e1 	bl	8100708 <__aeabi_dmul>
 810a346:	4b08      	ldr	r3, [pc, #32]	@ (810a368 <_dtoa_r+0x5c8>)
 810a348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810a34c:	2200      	movs	r2, #0
 810a34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a352:	f7f6 f9d9 	bl	8100708 <__aeabi_dmul>
 810a356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a35a:	e7c4      	b.n	810a2e6 <_dtoa_r+0x546>
 810a35c:	0810bf10 	.word	0x0810bf10
 810a360:	0810bee8 	.word	0x0810bee8
 810a364:	3ff00000 	.word	0x3ff00000
 810a368:	40240000 	.word	0x40240000
 810a36c:	401c0000 	.word	0x401c0000
 810a370:	40140000 	.word	0x40140000
 810a374:	3fe00000 	.word	0x3fe00000
 810a378:	4631      	mov	r1, r6
 810a37a:	4628      	mov	r0, r5
 810a37c:	f7f6 f9c4 	bl	8100708 <__aeabi_dmul>
 810a380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810a384:	9415      	str	r4, [sp, #84]	@ 0x54
 810a386:	4656      	mov	r6, sl
 810a388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a38c:	f7f6 fc6c 	bl	8100c68 <__aeabi_d2iz>
 810a390:	4605      	mov	r5, r0
 810a392:	f7f6 f94f 	bl	8100634 <__aeabi_i2d>
 810a396:	4602      	mov	r2, r0
 810a398:	460b      	mov	r3, r1
 810a39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a39e:	f7f5 fffb 	bl	8100398 <__aeabi_dsub>
 810a3a2:	3530      	adds	r5, #48	@ 0x30
 810a3a4:	f806 5b01 	strb.w	r5, [r6], #1
 810a3a8:	4602      	mov	r2, r0
 810a3aa:	460b      	mov	r3, r1
 810a3ac:	42a6      	cmp	r6, r4
 810a3ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810a3b2:	f04f 0200 	mov.w	r2, #0
 810a3b6:	d124      	bne.n	810a402 <_dtoa_r+0x662>
 810a3b8:	4bac      	ldr	r3, [pc, #688]	@ (810a66c <_dtoa_r+0x8cc>)
 810a3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810a3be:	f7f5 ffed 	bl	810039c <__adddf3>
 810a3c2:	4602      	mov	r2, r0
 810a3c4:	460b      	mov	r3, r1
 810a3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a3ca:	f7f6 fc2d 	bl	8100c28 <__aeabi_dcmpgt>
 810a3ce:	2800      	cmp	r0, #0
 810a3d0:	d145      	bne.n	810a45e <_dtoa_r+0x6be>
 810a3d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810a3d6:	49a5      	ldr	r1, [pc, #660]	@ (810a66c <_dtoa_r+0x8cc>)
 810a3d8:	2000      	movs	r0, #0
 810a3da:	f7f5 ffdd 	bl	8100398 <__aeabi_dsub>
 810a3de:	4602      	mov	r2, r0
 810a3e0:	460b      	mov	r3, r1
 810a3e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a3e6:	f7f6 fc01 	bl	8100bec <__aeabi_dcmplt>
 810a3ea:	2800      	cmp	r0, #0
 810a3ec:	f43f aef5 	beq.w	810a1da <_dtoa_r+0x43a>
 810a3f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810a3f2:	1e73      	subs	r3, r6, #1
 810a3f4:	9315      	str	r3, [sp, #84]	@ 0x54
 810a3f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810a3fa:	2b30      	cmp	r3, #48	@ 0x30
 810a3fc:	d0f8      	beq.n	810a3f0 <_dtoa_r+0x650>
 810a3fe:	9f04      	ldr	r7, [sp, #16]
 810a400:	e73e      	b.n	810a280 <_dtoa_r+0x4e0>
 810a402:	4b9b      	ldr	r3, [pc, #620]	@ (810a670 <_dtoa_r+0x8d0>)
 810a404:	f7f6 f980 	bl	8100708 <__aeabi_dmul>
 810a408:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a40c:	e7bc      	b.n	810a388 <_dtoa_r+0x5e8>
 810a40e:	d10c      	bne.n	810a42a <_dtoa_r+0x68a>
 810a410:	4b98      	ldr	r3, [pc, #608]	@ (810a674 <_dtoa_r+0x8d4>)
 810a412:	2200      	movs	r2, #0
 810a414:	e9dd 0100 	ldrd	r0, r1, [sp]
 810a418:	f7f6 f976 	bl	8100708 <__aeabi_dmul>
 810a41c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a420:	f7f6 fbf8 	bl	8100c14 <__aeabi_dcmpge>
 810a424:	2800      	cmp	r0, #0
 810a426:	f000 8157 	beq.w	810a6d8 <_dtoa_r+0x938>
 810a42a:	2400      	movs	r4, #0
 810a42c:	4625      	mov	r5, r4
 810a42e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810a430:	43db      	mvns	r3, r3
 810a432:	9304      	str	r3, [sp, #16]
 810a434:	4656      	mov	r6, sl
 810a436:	2700      	movs	r7, #0
 810a438:	4621      	mov	r1, r4
 810a43a:	4658      	mov	r0, fp
 810a43c:	f000 fbb4 	bl	810aba8 <_Bfree>
 810a440:	2d00      	cmp	r5, #0
 810a442:	d0dc      	beq.n	810a3fe <_dtoa_r+0x65e>
 810a444:	b12f      	cbz	r7, 810a452 <_dtoa_r+0x6b2>
 810a446:	42af      	cmp	r7, r5
 810a448:	d003      	beq.n	810a452 <_dtoa_r+0x6b2>
 810a44a:	4639      	mov	r1, r7
 810a44c:	4658      	mov	r0, fp
 810a44e:	f000 fbab 	bl	810aba8 <_Bfree>
 810a452:	4629      	mov	r1, r5
 810a454:	4658      	mov	r0, fp
 810a456:	f000 fba7 	bl	810aba8 <_Bfree>
 810a45a:	e7d0      	b.n	810a3fe <_dtoa_r+0x65e>
 810a45c:	9704      	str	r7, [sp, #16]
 810a45e:	4633      	mov	r3, r6
 810a460:	461e      	mov	r6, r3
 810a462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a466:	2a39      	cmp	r2, #57	@ 0x39
 810a468:	d107      	bne.n	810a47a <_dtoa_r+0x6da>
 810a46a:	459a      	cmp	sl, r3
 810a46c:	d1f8      	bne.n	810a460 <_dtoa_r+0x6c0>
 810a46e:	9a04      	ldr	r2, [sp, #16]
 810a470:	3201      	adds	r2, #1
 810a472:	9204      	str	r2, [sp, #16]
 810a474:	2230      	movs	r2, #48	@ 0x30
 810a476:	f88a 2000 	strb.w	r2, [sl]
 810a47a:	781a      	ldrb	r2, [r3, #0]
 810a47c:	3201      	adds	r2, #1
 810a47e:	701a      	strb	r2, [r3, #0]
 810a480:	e7bd      	b.n	810a3fe <_dtoa_r+0x65e>
 810a482:	4b7b      	ldr	r3, [pc, #492]	@ (810a670 <_dtoa_r+0x8d0>)
 810a484:	2200      	movs	r2, #0
 810a486:	f7f6 f93f 	bl	8100708 <__aeabi_dmul>
 810a48a:	2200      	movs	r2, #0
 810a48c:	2300      	movs	r3, #0
 810a48e:	4604      	mov	r4, r0
 810a490:	460d      	mov	r5, r1
 810a492:	f7f6 fba1 	bl	8100bd8 <__aeabi_dcmpeq>
 810a496:	2800      	cmp	r0, #0
 810a498:	f43f aebb 	beq.w	810a212 <_dtoa_r+0x472>
 810a49c:	e6f0      	b.n	810a280 <_dtoa_r+0x4e0>
 810a49e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810a4a0:	2a00      	cmp	r2, #0
 810a4a2:	f000 80db 	beq.w	810a65c <_dtoa_r+0x8bc>
 810a4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810a4a8:	2a01      	cmp	r2, #1
 810a4aa:	f300 80bf 	bgt.w	810a62c <_dtoa_r+0x88c>
 810a4ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810a4b0:	2a00      	cmp	r2, #0
 810a4b2:	f000 80b7 	beq.w	810a624 <_dtoa_r+0x884>
 810a4b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810a4ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810a4bc:	4646      	mov	r6, r8
 810a4be:	9a08      	ldr	r2, [sp, #32]
 810a4c0:	2101      	movs	r1, #1
 810a4c2:	441a      	add	r2, r3
 810a4c4:	4658      	mov	r0, fp
 810a4c6:	4498      	add	r8, r3
 810a4c8:	9208      	str	r2, [sp, #32]
 810a4ca:	f000 fc21 	bl	810ad10 <__i2b>
 810a4ce:	4605      	mov	r5, r0
 810a4d0:	b15e      	cbz	r6, 810a4ea <_dtoa_r+0x74a>
 810a4d2:	9b08      	ldr	r3, [sp, #32]
 810a4d4:	2b00      	cmp	r3, #0
 810a4d6:	dd08      	ble.n	810a4ea <_dtoa_r+0x74a>
 810a4d8:	42b3      	cmp	r3, r6
 810a4da:	9a08      	ldr	r2, [sp, #32]
 810a4dc:	bfa8      	it	ge
 810a4de:	4633      	movge	r3, r6
 810a4e0:	eba8 0803 	sub.w	r8, r8, r3
 810a4e4:	1af6      	subs	r6, r6, r3
 810a4e6:	1ad3      	subs	r3, r2, r3
 810a4e8:	9308      	str	r3, [sp, #32]
 810a4ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a4ec:	b1f3      	cbz	r3, 810a52c <_dtoa_r+0x78c>
 810a4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a4f0:	2b00      	cmp	r3, #0
 810a4f2:	f000 80b7 	beq.w	810a664 <_dtoa_r+0x8c4>
 810a4f6:	b18c      	cbz	r4, 810a51c <_dtoa_r+0x77c>
 810a4f8:	4629      	mov	r1, r5
 810a4fa:	4622      	mov	r2, r4
 810a4fc:	4658      	mov	r0, fp
 810a4fe:	f000 fcc7 	bl	810ae90 <__pow5mult>
 810a502:	464a      	mov	r2, r9
 810a504:	4601      	mov	r1, r0
 810a506:	4605      	mov	r5, r0
 810a508:	4658      	mov	r0, fp
 810a50a:	f000 fc17 	bl	810ad3c <__multiply>
 810a50e:	4649      	mov	r1, r9
 810a510:	9004      	str	r0, [sp, #16]
 810a512:	4658      	mov	r0, fp
 810a514:	f000 fb48 	bl	810aba8 <_Bfree>
 810a518:	9b04      	ldr	r3, [sp, #16]
 810a51a:	4699      	mov	r9, r3
 810a51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a51e:	1b1a      	subs	r2, r3, r4
 810a520:	d004      	beq.n	810a52c <_dtoa_r+0x78c>
 810a522:	4649      	mov	r1, r9
 810a524:	4658      	mov	r0, fp
 810a526:	f000 fcb3 	bl	810ae90 <__pow5mult>
 810a52a:	4681      	mov	r9, r0
 810a52c:	2101      	movs	r1, #1
 810a52e:	4658      	mov	r0, fp
 810a530:	f000 fbee 	bl	810ad10 <__i2b>
 810a534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a536:	4604      	mov	r4, r0
 810a538:	2b00      	cmp	r3, #0
 810a53a:	f000 81cf 	beq.w	810a8dc <_dtoa_r+0xb3c>
 810a53e:	461a      	mov	r2, r3
 810a540:	4601      	mov	r1, r0
 810a542:	4658      	mov	r0, fp
 810a544:	f000 fca4 	bl	810ae90 <__pow5mult>
 810a548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a54a:	2b01      	cmp	r3, #1
 810a54c:	4604      	mov	r4, r0
 810a54e:	f300 8095 	bgt.w	810a67c <_dtoa_r+0x8dc>
 810a552:	9b02      	ldr	r3, [sp, #8]
 810a554:	2b00      	cmp	r3, #0
 810a556:	f040 8087 	bne.w	810a668 <_dtoa_r+0x8c8>
 810a55a:	9b03      	ldr	r3, [sp, #12]
 810a55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a560:	2b00      	cmp	r3, #0
 810a562:	f040 8089 	bne.w	810a678 <_dtoa_r+0x8d8>
 810a566:	9b03      	ldr	r3, [sp, #12]
 810a568:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810a56c:	0d1b      	lsrs	r3, r3, #20
 810a56e:	051b      	lsls	r3, r3, #20
 810a570:	b12b      	cbz	r3, 810a57e <_dtoa_r+0x7de>
 810a572:	9b08      	ldr	r3, [sp, #32]
 810a574:	3301      	adds	r3, #1
 810a576:	9308      	str	r3, [sp, #32]
 810a578:	f108 0801 	add.w	r8, r8, #1
 810a57c:	2301      	movs	r3, #1
 810a57e:	930a      	str	r3, [sp, #40]	@ 0x28
 810a580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a582:	2b00      	cmp	r3, #0
 810a584:	f000 81b0 	beq.w	810a8e8 <_dtoa_r+0xb48>
 810a588:	6923      	ldr	r3, [r4, #16]
 810a58a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810a58e:	6918      	ldr	r0, [r3, #16]
 810a590:	f000 fb72 	bl	810ac78 <__hi0bits>
 810a594:	f1c0 0020 	rsb	r0, r0, #32
 810a598:	9b08      	ldr	r3, [sp, #32]
 810a59a:	4418      	add	r0, r3
 810a59c:	f010 001f 	ands.w	r0, r0, #31
 810a5a0:	d077      	beq.n	810a692 <_dtoa_r+0x8f2>
 810a5a2:	f1c0 0320 	rsb	r3, r0, #32
 810a5a6:	2b04      	cmp	r3, #4
 810a5a8:	dd6b      	ble.n	810a682 <_dtoa_r+0x8e2>
 810a5aa:	9b08      	ldr	r3, [sp, #32]
 810a5ac:	f1c0 001c 	rsb	r0, r0, #28
 810a5b0:	4403      	add	r3, r0
 810a5b2:	4480      	add	r8, r0
 810a5b4:	4406      	add	r6, r0
 810a5b6:	9308      	str	r3, [sp, #32]
 810a5b8:	f1b8 0f00 	cmp.w	r8, #0
 810a5bc:	dd05      	ble.n	810a5ca <_dtoa_r+0x82a>
 810a5be:	4649      	mov	r1, r9
 810a5c0:	4642      	mov	r2, r8
 810a5c2:	4658      	mov	r0, fp
 810a5c4:	f000 fcbe 	bl	810af44 <__lshift>
 810a5c8:	4681      	mov	r9, r0
 810a5ca:	9b08      	ldr	r3, [sp, #32]
 810a5cc:	2b00      	cmp	r3, #0
 810a5ce:	dd05      	ble.n	810a5dc <_dtoa_r+0x83c>
 810a5d0:	4621      	mov	r1, r4
 810a5d2:	461a      	mov	r2, r3
 810a5d4:	4658      	mov	r0, fp
 810a5d6:	f000 fcb5 	bl	810af44 <__lshift>
 810a5da:	4604      	mov	r4, r0
 810a5dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810a5de:	2b00      	cmp	r3, #0
 810a5e0:	d059      	beq.n	810a696 <_dtoa_r+0x8f6>
 810a5e2:	4621      	mov	r1, r4
 810a5e4:	4648      	mov	r0, r9
 810a5e6:	f000 fd19 	bl	810b01c <__mcmp>
 810a5ea:	2800      	cmp	r0, #0
 810a5ec:	da53      	bge.n	810a696 <_dtoa_r+0x8f6>
 810a5ee:	1e7b      	subs	r3, r7, #1
 810a5f0:	9304      	str	r3, [sp, #16]
 810a5f2:	4649      	mov	r1, r9
 810a5f4:	2300      	movs	r3, #0
 810a5f6:	220a      	movs	r2, #10
 810a5f8:	4658      	mov	r0, fp
 810a5fa:	f000 faf7 	bl	810abec <__multadd>
 810a5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a600:	4681      	mov	r9, r0
 810a602:	2b00      	cmp	r3, #0
 810a604:	f000 8172 	beq.w	810a8ec <_dtoa_r+0xb4c>
 810a608:	2300      	movs	r3, #0
 810a60a:	4629      	mov	r1, r5
 810a60c:	220a      	movs	r2, #10
 810a60e:	4658      	mov	r0, fp
 810a610:	f000 faec 	bl	810abec <__multadd>
 810a614:	9b00      	ldr	r3, [sp, #0]
 810a616:	2b00      	cmp	r3, #0
 810a618:	4605      	mov	r5, r0
 810a61a:	dc67      	bgt.n	810a6ec <_dtoa_r+0x94c>
 810a61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a61e:	2b02      	cmp	r3, #2
 810a620:	dc41      	bgt.n	810a6a6 <_dtoa_r+0x906>
 810a622:	e063      	b.n	810a6ec <_dtoa_r+0x94c>
 810a624:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810a626:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810a62a:	e746      	b.n	810a4ba <_dtoa_r+0x71a>
 810a62c:	9b07      	ldr	r3, [sp, #28]
 810a62e:	1e5c      	subs	r4, r3, #1
 810a630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a632:	42a3      	cmp	r3, r4
 810a634:	bfbf      	itttt	lt
 810a636:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810a638:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810a63a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810a63c:	1ae3      	sublt	r3, r4, r3
 810a63e:	bfb4      	ite	lt
 810a640:	18d2      	addlt	r2, r2, r3
 810a642:	1b1c      	subge	r4, r3, r4
 810a644:	9b07      	ldr	r3, [sp, #28]
 810a646:	bfbc      	itt	lt
 810a648:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810a64a:	2400      	movlt	r4, #0
 810a64c:	2b00      	cmp	r3, #0
 810a64e:	bfb5      	itete	lt
 810a650:	eba8 0603 	sublt.w	r6, r8, r3
 810a654:	9b07      	ldrge	r3, [sp, #28]
 810a656:	2300      	movlt	r3, #0
 810a658:	4646      	movge	r6, r8
 810a65a:	e730      	b.n	810a4be <_dtoa_r+0x71e>
 810a65c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810a65e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810a660:	4646      	mov	r6, r8
 810a662:	e735      	b.n	810a4d0 <_dtoa_r+0x730>
 810a664:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810a666:	e75c      	b.n	810a522 <_dtoa_r+0x782>
 810a668:	2300      	movs	r3, #0
 810a66a:	e788      	b.n	810a57e <_dtoa_r+0x7de>
 810a66c:	3fe00000 	.word	0x3fe00000
 810a670:	40240000 	.word	0x40240000
 810a674:	40140000 	.word	0x40140000
 810a678:	9b02      	ldr	r3, [sp, #8]
 810a67a:	e780      	b.n	810a57e <_dtoa_r+0x7de>
 810a67c:	2300      	movs	r3, #0
 810a67e:	930a      	str	r3, [sp, #40]	@ 0x28
 810a680:	e782      	b.n	810a588 <_dtoa_r+0x7e8>
 810a682:	d099      	beq.n	810a5b8 <_dtoa_r+0x818>
 810a684:	9a08      	ldr	r2, [sp, #32]
 810a686:	331c      	adds	r3, #28
 810a688:	441a      	add	r2, r3
 810a68a:	4498      	add	r8, r3
 810a68c:	441e      	add	r6, r3
 810a68e:	9208      	str	r2, [sp, #32]
 810a690:	e792      	b.n	810a5b8 <_dtoa_r+0x818>
 810a692:	4603      	mov	r3, r0
 810a694:	e7f6      	b.n	810a684 <_dtoa_r+0x8e4>
 810a696:	9b07      	ldr	r3, [sp, #28]
 810a698:	9704      	str	r7, [sp, #16]
 810a69a:	2b00      	cmp	r3, #0
 810a69c:	dc20      	bgt.n	810a6e0 <_dtoa_r+0x940>
 810a69e:	9300      	str	r3, [sp, #0]
 810a6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a6a2:	2b02      	cmp	r3, #2
 810a6a4:	dd1e      	ble.n	810a6e4 <_dtoa_r+0x944>
 810a6a6:	9b00      	ldr	r3, [sp, #0]
 810a6a8:	2b00      	cmp	r3, #0
 810a6aa:	f47f aec0 	bne.w	810a42e <_dtoa_r+0x68e>
 810a6ae:	4621      	mov	r1, r4
 810a6b0:	2205      	movs	r2, #5
 810a6b2:	4658      	mov	r0, fp
 810a6b4:	f000 fa9a 	bl	810abec <__multadd>
 810a6b8:	4601      	mov	r1, r0
 810a6ba:	4604      	mov	r4, r0
 810a6bc:	4648      	mov	r0, r9
 810a6be:	f000 fcad 	bl	810b01c <__mcmp>
 810a6c2:	2800      	cmp	r0, #0
 810a6c4:	f77f aeb3 	ble.w	810a42e <_dtoa_r+0x68e>
 810a6c8:	4656      	mov	r6, sl
 810a6ca:	2331      	movs	r3, #49	@ 0x31
 810a6cc:	f806 3b01 	strb.w	r3, [r6], #1
 810a6d0:	9b04      	ldr	r3, [sp, #16]
 810a6d2:	3301      	adds	r3, #1
 810a6d4:	9304      	str	r3, [sp, #16]
 810a6d6:	e6ae      	b.n	810a436 <_dtoa_r+0x696>
 810a6d8:	9c07      	ldr	r4, [sp, #28]
 810a6da:	9704      	str	r7, [sp, #16]
 810a6dc:	4625      	mov	r5, r4
 810a6de:	e7f3      	b.n	810a6c8 <_dtoa_r+0x928>
 810a6e0:	9b07      	ldr	r3, [sp, #28]
 810a6e2:	9300      	str	r3, [sp, #0]
 810a6e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a6e6:	2b00      	cmp	r3, #0
 810a6e8:	f000 8104 	beq.w	810a8f4 <_dtoa_r+0xb54>
 810a6ec:	2e00      	cmp	r6, #0
 810a6ee:	dd05      	ble.n	810a6fc <_dtoa_r+0x95c>
 810a6f0:	4629      	mov	r1, r5
 810a6f2:	4632      	mov	r2, r6
 810a6f4:	4658      	mov	r0, fp
 810a6f6:	f000 fc25 	bl	810af44 <__lshift>
 810a6fa:	4605      	mov	r5, r0
 810a6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a6fe:	2b00      	cmp	r3, #0
 810a700:	d05a      	beq.n	810a7b8 <_dtoa_r+0xa18>
 810a702:	6869      	ldr	r1, [r5, #4]
 810a704:	4658      	mov	r0, fp
 810a706:	f000 fa0f 	bl	810ab28 <_Balloc>
 810a70a:	4606      	mov	r6, r0
 810a70c:	b928      	cbnz	r0, 810a71a <_dtoa_r+0x97a>
 810a70e:	4b84      	ldr	r3, [pc, #528]	@ (810a920 <_dtoa_r+0xb80>)
 810a710:	4602      	mov	r2, r0
 810a712:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810a716:	f7ff bb5a 	b.w	8109dce <_dtoa_r+0x2e>
 810a71a:	692a      	ldr	r2, [r5, #16]
 810a71c:	3202      	adds	r2, #2
 810a71e:	0092      	lsls	r2, r2, #2
 810a720:	f105 010c 	add.w	r1, r5, #12
 810a724:	300c      	adds	r0, #12
 810a726:	f000 ffaf 	bl	810b688 <memcpy>
 810a72a:	2201      	movs	r2, #1
 810a72c:	4631      	mov	r1, r6
 810a72e:	4658      	mov	r0, fp
 810a730:	f000 fc08 	bl	810af44 <__lshift>
 810a734:	f10a 0301 	add.w	r3, sl, #1
 810a738:	9307      	str	r3, [sp, #28]
 810a73a:	9b00      	ldr	r3, [sp, #0]
 810a73c:	4453      	add	r3, sl
 810a73e:	930b      	str	r3, [sp, #44]	@ 0x2c
 810a740:	9b02      	ldr	r3, [sp, #8]
 810a742:	f003 0301 	and.w	r3, r3, #1
 810a746:	462f      	mov	r7, r5
 810a748:	930a      	str	r3, [sp, #40]	@ 0x28
 810a74a:	4605      	mov	r5, r0
 810a74c:	9b07      	ldr	r3, [sp, #28]
 810a74e:	4621      	mov	r1, r4
 810a750:	3b01      	subs	r3, #1
 810a752:	4648      	mov	r0, r9
 810a754:	9300      	str	r3, [sp, #0]
 810a756:	f7ff fa9a 	bl	8109c8e <quorem>
 810a75a:	4639      	mov	r1, r7
 810a75c:	9002      	str	r0, [sp, #8]
 810a75e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810a762:	4648      	mov	r0, r9
 810a764:	f000 fc5a 	bl	810b01c <__mcmp>
 810a768:	462a      	mov	r2, r5
 810a76a:	9008      	str	r0, [sp, #32]
 810a76c:	4621      	mov	r1, r4
 810a76e:	4658      	mov	r0, fp
 810a770:	f000 fc70 	bl	810b054 <__mdiff>
 810a774:	68c2      	ldr	r2, [r0, #12]
 810a776:	4606      	mov	r6, r0
 810a778:	bb02      	cbnz	r2, 810a7bc <_dtoa_r+0xa1c>
 810a77a:	4601      	mov	r1, r0
 810a77c:	4648      	mov	r0, r9
 810a77e:	f000 fc4d 	bl	810b01c <__mcmp>
 810a782:	4602      	mov	r2, r0
 810a784:	4631      	mov	r1, r6
 810a786:	4658      	mov	r0, fp
 810a788:	920e      	str	r2, [sp, #56]	@ 0x38
 810a78a:	f000 fa0d 	bl	810aba8 <_Bfree>
 810a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810a792:	9e07      	ldr	r6, [sp, #28]
 810a794:	ea43 0102 	orr.w	r1, r3, r2
 810a798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a79a:	4319      	orrs	r1, r3
 810a79c:	d110      	bne.n	810a7c0 <_dtoa_r+0xa20>
 810a79e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810a7a2:	d029      	beq.n	810a7f8 <_dtoa_r+0xa58>
 810a7a4:	9b08      	ldr	r3, [sp, #32]
 810a7a6:	2b00      	cmp	r3, #0
 810a7a8:	dd02      	ble.n	810a7b0 <_dtoa_r+0xa10>
 810a7aa:	9b02      	ldr	r3, [sp, #8]
 810a7ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810a7b0:	9b00      	ldr	r3, [sp, #0]
 810a7b2:	f883 8000 	strb.w	r8, [r3]
 810a7b6:	e63f      	b.n	810a438 <_dtoa_r+0x698>
 810a7b8:	4628      	mov	r0, r5
 810a7ba:	e7bb      	b.n	810a734 <_dtoa_r+0x994>
 810a7bc:	2201      	movs	r2, #1
 810a7be:	e7e1      	b.n	810a784 <_dtoa_r+0x9e4>
 810a7c0:	9b08      	ldr	r3, [sp, #32]
 810a7c2:	2b00      	cmp	r3, #0
 810a7c4:	db04      	blt.n	810a7d0 <_dtoa_r+0xa30>
 810a7c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810a7c8:	430b      	orrs	r3, r1
 810a7ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810a7cc:	430b      	orrs	r3, r1
 810a7ce:	d120      	bne.n	810a812 <_dtoa_r+0xa72>
 810a7d0:	2a00      	cmp	r2, #0
 810a7d2:	dded      	ble.n	810a7b0 <_dtoa_r+0xa10>
 810a7d4:	4649      	mov	r1, r9
 810a7d6:	2201      	movs	r2, #1
 810a7d8:	4658      	mov	r0, fp
 810a7da:	f000 fbb3 	bl	810af44 <__lshift>
 810a7de:	4621      	mov	r1, r4
 810a7e0:	4681      	mov	r9, r0
 810a7e2:	f000 fc1b 	bl	810b01c <__mcmp>
 810a7e6:	2800      	cmp	r0, #0
 810a7e8:	dc03      	bgt.n	810a7f2 <_dtoa_r+0xa52>
 810a7ea:	d1e1      	bne.n	810a7b0 <_dtoa_r+0xa10>
 810a7ec:	f018 0f01 	tst.w	r8, #1
 810a7f0:	d0de      	beq.n	810a7b0 <_dtoa_r+0xa10>
 810a7f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810a7f6:	d1d8      	bne.n	810a7aa <_dtoa_r+0xa0a>
 810a7f8:	9a00      	ldr	r2, [sp, #0]
 810a7fa:	2339      	movs	r3, #57	@ 0x39
 810a7fc:	7013      	strb	r3, [r2, #0]
 810a7fe:	4633      	mov	r3, r6
 810a800:	461e      	mov	r6, r3
 810a802:	3b01      	subs	r3, #1
 810a804:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810a808:	2a39      	cmp	r2, #57	@ 0x39
 810a80a:	d052      	beq.n	810a8b2 <_dtoa_r+0xb12>
 810a80c:	3201      	adds	r2, #1
 810a80e:	701a      	strb	r2, [r3, #0]
 810a810:	e612      	b.n	810a438 <_dtoa_r+0x698>
 810a812:	2a00      	cmp	r2, #0
 810a814:	dd07      	ble.n	810a826 <_dtoa_r+0xa86>
 810a816:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810a81a:	d0ed      	beq.n	810a7f8 <_dtoa_r+0xa58>
 810a81c:	9a00      	ldr	r2, [sp, #0]
 810a81e:	f108 0301 	add.w	r3, r8, #1
 810a822:	7013      	strb	r3, [r2, #0]
 810a824:	e608      	b.n	810a438 <_dtoa_r+0x698>
 810a826:	9b07      	ldr	r3, [sp, #28]
 810a828:	9a07      	ldr	r2, [sp, #28]
 810a82a:	f803 8c01 	strb.w	r8, [r3, #-1]
 810a82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a830:	4293      	cmp	r3, r2
 810a832:	d028      	beq.n	810a886 <_dtoa_r+0xae6>
 810a834:	4649      	mov	r1, r9
 810a836:	2300      	movs	r3, #0
 810a838:	220a      	movs	r2, #10
 810a83a:	4658      	mov	r0, fp
 810a83c:	f000 f9d6 	bl	810abec <__multadd>
 810a840:	42af      	cmp	r7, r5
 810a842:	4681      	mov	r9, r0
 810a844:	f04f 0300 	mov.w	r3, #0
 810a848:	f04f 020a 	mov.w	r2, #10
 810a84c:	4639      	mov	r1, r7
 810a84e:	4658      	mov	r0, fp
 810a850:	d107      	bne.n	810a862 <_dtoa_r+0xac2>
 810a852:	f000 f9cb 	bl	810abec <__multadd>
 810a856:	4607      	mov	r7, r0
 810a858:	4605      	mov	r5, r0
 810a85a:	9b07      	ldr	r3, [sp, #28]
 810a85c:	3301      	adds	r3, #1
 810a85e:	9307      	str	r3, [sp, #28]
 810a860:	e774      	b.n	810a74c <_dtoa_r+0x9ac>
 810a862:	f000 f9c3 	bl	810abec <__multadd>
 810a866:	4629      	mov	r1, r5
 810a868:	4607      	mov	r7, r0
 810a86a:	2300      	movs	r3, #0
 810a86c:	220a      	movs	r2, #10
 810a86e:	4658      	mov	r0, fp
 810a870:	f000 f9bc 	bl	810abec <__multadd>
 810a874:	4605      	mov	r5, r0
 810a876:	e7f0      	b.n	810a85a <_dtoa_r+0xaba>
 810a878:	9b00      	ldr	r3, [sp, #0]
 810a87a:	2b00      	cmp	r3, #0
 810a87c:	bfcc      	ite	gt
 810a87e:	461e      	movgt	r6, r3
 810a880:	2601      	movle	r6, #1
 810a882:	4456      	add	r6, sl
 810a884:	2700      	movs	r7, #0
 810a886:	4649      	mov	r1, r9
 810a888:	2201      	movs	r2, #1
 810a88a:	4658      	mov	r0, fp
 810a88c:	f000 fb5a 	bl	810af44 <__lshift>
 810a890:	4621      	mov	r1, r4
 810a892:	4681      	mov	r9, r0
 810a894:	f000 fbc2 	bl	810b01c <__mcmp>
 810a898:	2800      	cmp	r0, #0
 810a89a:	dcb0      	bgt.n	810a7fe <_dtoa_r+0xa5e>
 810a89c:	d102      	bne.n	810a8a4 <_dtoa_r+0xb04>
 810a89e:	f018 0f01 	tst.w	r8, #1
 810a8a2:	d1ac      	bne.n	810a7fe <_dtoa_r+0xa5e>
 810a8a4:	4633      	mov	r3, r6
 810a8a6:	461e      	mov	r6, r3
 810a8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a8ac:	2a30      	cmp	r2, #48	@ 0x30
 810a8ae:	d0fa      	beq.n	810a8a6 <_dtoa_r+0xb06>
 810a8b0:	e5c2      	b.n	810a438 <_dtoa_r+0x698>
 810a8b2:	459a      	cmp	sl, r3
 810a8b4:	d1a4      	bne.n	810a800 <_dtoa_r+0xa60>
 810a8b6:	9b04      	ldr	r3, [sp, #16]
 810a8b8:	3301      	adds	r3, #1
 810a8ba:	9304      	str	r3, [sp, #16]
 810a8bc:	2331      	movs	r3, #49	@ 0x31
 810a8be:	f88a 3000 	strb.w	r3, [sl]
 810a8c2:	e5b9      	b.n	810a438 <_dtoa_r+0x698>
 810a8c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810a8c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810a924 <_dtoa_r+0xb84>
 810a8ca:	b11b      	cbz	r3, 810a8d4 <_dtoa_r+0xb34>
 810a8cc:	f10a 0308 	add.w	r3, sl, #8
 810a8d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810a8d2:	6013      	str	r3, [r2, #0]
 810a8d4:	4650      	mov	r0, sl
 810a8d6:	b019      	add	sp, #100	@ 0x64
 810a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a8de:	2b01      	cmp	r3, #1
 810a8e0:	f77f ae37 	ble.w	810a552 <_dtoa_r+0x7b2>
 810a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a8e6:	930a      	str	r3, [sp, #40]	@ 0x28
 810a8e8:	2001      	movs	r0, #1
 810a8ea:	e655      	b.n	810a598 <_dtoa_r+0x7f8>
 810a8ec:	9b00      	ldr	r3, [sp, #0]
 810a8ee:	2b00      	cmp	r3, #0
 810a8f0:	f77f aed6 	ble.w	810a6a0 <_dtoa_r+0x900>
 810a8f4:	4656      	mov	r6, sl
 810a8f6:	4621      	mov	r1, r4
 810a8f8:	4648      	mov	r0, r9
 810a8fa:	f7ff f9c8 	bl	8109c8e <quorem>
 810a8fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810a902:	f806 8b01 	strb.w	r8, [r6], #1
 810a906:	9b00      	ldr	r3, [sp, #0]
 810a908:	eba6 020a 	sub.w	r2, r6, sl
 810a90c:	4293      	cmp	r3, r2
 810a90e:	ddb3      	ble.n	810a878 <_dtoa_r+0xad8>
 810a910:	4649      	mov	r1, r9
 810a912:	2300      	movs	r3, #0
 810a914:	220a      	movs	r2, #10
 810a916:	4658      	mov	r0, fp
 810a918:	f000 f968 	bl	810abec <__multadd>
 810a91c:	4681      	mov	r9, r0
 810a91e:	e7ea      	b.n	810a8f6 <_dtoa_r+0xb56>
 810a920:	0810be70 	.word	0x0810be70
 810a924:	0810bdf4 	.word	0x0810bdf4

0810a928 <_free_r>:
 810a928:	b538      	push	{r3, r4, r5, lr}
 810a92a:	4605      	mov	r5, r0
 810a92c:	2900      	cmp	r1, #0
 810a92e:	d041      	beq.n	810a9b4 <_free_r+0x8c>
 810a930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a934:	1f0c      	subs	r4, r1, #4
 810a936:	2b00      	cmp	r3, #0
 810a938:	bfb8      	it	lt
 810a93a:	18e4      	addlt	r4, r4, r3
 810a93c:	f000 f8e8 	bl	810ab10 <__malloc_lock>
 810a940:	4a1d      	ldr	r2, [pc, #116]	@ (810a9b8 <_free_r+0x90>)
 810a942:	6813      	ldr	r3, [r2, #0]
 810a944:	b933      	cbnz	r3, 810a954 <_free_r+0x2c>
 810a946:	6063      	str	r3, [r4, #4]
 810a948:	6014      	str	r4, [r2, #0]
 810a94a:	4628      	mov	r0, r5
 810a94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810a950:	f000 b8e4 	b.w	810ab1c <__malloc_unlock>
 810a954:	42a3      	cmp	r3, r4
 810a956:	d908      	bls.n	810a96a <_free_r+0x42>
 810a958:	6820      	ldr	r0, [r4, #0]
 810a95a:	1821      	adds	r1, r4, r0
 810a95c:	428b      	cmp	r3, r1
 810a95e:	bf01      	itttt	eq
 810a960:	6819      	ldreq	r1, [r3, #0]
 810a962:	685b      	ldreq	r3, [r3, #4]
 810a964:	1809      	addeq	r1, r1, r0
 810a966:	6021      	streq	r1, [r4, #0]
 810a968:	e7ed      	b.n	810a946 <_free_r+0x1e>
 810a96a:	461a      	mov	r2, r3
 810a96c:	685b      	ldr	r3, [r3, #4]
 810a96e:	b10b      	cbz	r3, 810a974 <_free_r+0x4c>
 810a970:	42a3      	cmp	r3, r4
 810a972:	d9fa      	bls.n	810a96a <_free_r+0x42>
 810a974:	6811      	ldr	r1, [r2, #0]
 810a976:	1850      	adds	r0, r2, r1
 810a978:	42a0      	cmp	r0, r4
 810a97a:	d10b      	bne.n	810a994 <_free_r+0x6c>
 810a97c:	6820      	ldr	r0, [r4, #0]
 810a97e:	4401      	add	r1, r0
 810a980:	1850      	adds	r0, r2, r1
 810a982:	4283      	cmp	r3, r0
 810a984:	6011      	str	r1, [r2, #0]
 810a986:	d1e0      	bne.n	810a94a <_free_r+0x22>
 810a988:	6818      	ldr	r0, [r3, #0]
 810a98a:	685b      	ldr	r3, [r3, #4]
 810a98c:	6053      	str	r3, [r2, #4]
 810a98e:	4408      	add	r0, r1
 810a990:	6010      	str	r0, [r2, #0]
 810a992:	e7da      	b.n	810a94a <_free_r+0x22>
 810a994:	d902      	bls.n	810a99c <_free_r+0x74>
 810a996:	230c      	movs	r3, #12
 810a998:	602b      	str	r3, [r5, #0]
 810a99a:	e7d6      	b.n	810a94a <_free_r+0x22>
 810a99c:	6820      	ldr	r0, [r4, #0]
 810a99e:	1821      	adds	r1, r4, r0
 810a9a0:	428b      	cmp	r3, r1
 810a9a2:	bf04      	itt	eq
 810a9a4:	6819      	ldreq	r1, [r3, #0]
 810a9a6:	685b      	ldreq	r3, [r3, #4]
 810a9a8:	6063      	str	r3, [r4, #4]
 810a9aa:	bf04      	itt	eq
 810a9ac:	1809      	addeq	r1, r1, r0
 810a9ae:	6021      	streq	r1, [r4, #0]
 810a9b0:	6054      	str	r4, [r2, #4]
 810a9b2:	e7ca      	b.n	810a94a <_free_r+0x22>
 810a9b4:	bd38      	pop	{r3, r4, r5, pc}
 810a9b6:	bf00      	nop
 810a9b8:	1000054c 	.word	0x1000054c

0810a9bc <malloc>:
 810a9bc:	4b02      	ldr	r3, [pc, #8]	@ (810a9c8 <malloc+0xc>)
 810a9be:	4601      	mov	r1, r0
 810a9c0:	6818      	ldr	r0, [r3, #0]
 810a9c2:	f000 b825 	b.w	810aa10 <_malloc_r>
 810a9c6:	bf00      	nop
 810a9c8:	10000044 	.word	0x10000044

0810a9cc <sbrk_aligned>:
 810a9cc:	b570      	push	{r4, r5, r6, lr}
 810a9ce:	4e0f      	ldr	r6, [pc, #60]	@ (810aa0c <sbrk_aligned+0x40>)
 810a9d0:	460c      	mov	r4, r1
 810a9d2:	6831      	ldr	r1, [r6, #0]
 810a9d4:	4605      	mov	r5, r0
 810a9d6:	b911      	cbnz	r1, 810a9de <sbrk_aligned+0x12>
 810a9d8:	f000 fe46 	bl	810b668 <_sbrk_r>
 810a9dc:	6030      	str	r0, [r6, #0]
 810a9de:	4621      	mov	r1, r4
 810a9e0:	4628      	mov	r0, r5
 810a9e2:	f000 fe41 	bl	810b668 <_sbrk_r>
 810a9e6:	1c43      	adds	r3, r0, #1
 810a9e8:	d103      	bne.n	810a9f2 <sbrk_aligned+0x26>
 810a9ea:	f04f 34ff 	mov.w	r4, #4294967295
 810a9ee:	4620      	mov	r0, r4
 810a9f0:	bd70      	pop	{r4, r5, r6, pc}
 810a9f2:	1cc4      	adds	r4, r0, #3
 810a9f4:	f024 0403 	bic.w	r4, r4, #3
 810a9f8:	42a0      	cmp	r0, r4
 810a9fa:	d0f8      	beq.n	810a9ee <sbrk_aligned+0x22>
 810a9fc:	1a21      	subs	r1, r4, r0
 810a9fe:	4628      	mov	r0, r5
 810aa00:	f000 fe32 	bl	810b668 <_sbrk_r>
 810aa04:	3001      	adds	r0, #1
 810aa06:	d1f2      	bne.n	810a9ee <sbrk_aligned+0x22>
 810aa08:	e7ef      	b.n	810a9ea <sbrk_aligned+0x1e>
 810aa0a:	bf00      	nop
 810aa0c:	10000548 	.word	0x10000548

0810aa10 <_malloc_r>:
 810aa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810aa14:	1ccd      	adds	r5, r1, #3
 810aa16:	f025 0503 	bic.w	r5, r5, #3
 810aa1a:	3508      	adds	r5, #8
 810aa1c:	2d0c      	cmp	r5, #12
 810aa1e:	bf38      	it	cc
 810aa20:	250c      	movcc	r5, #12
 810aa22:	2d00      	cmp	r5, #0
 810aa24:	4606      	mov	r6, r0
 810aa26:	db01      	blt.n	810aa2c <_malloc_r+0x1c>
 810aa28:	42a9      	cmp	r1, r5
 810aa2a:	d904      	bls.n	810aa36 <_malloc_r+0x26>
 810aa2c:	230c      	movs	r3, #12
 810aa2e:	6033      	str	r3, [r6, #0]
 810aa30:	2000      	movs	r0, #0
 810aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810aa36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810ab0c <_malloc_r+0xfc>
 810aa3a:	f000 f869 	bl	810ab10 <__malloc_lock>
 810aa3e:	f8d8 3000 	ldr.w	r3, [r8]
 810aa42:	461c      	mov	r4, r3
 810aa44:	bb44      	cbnz	r4, 810aa98 <_malloc_r+0x88>
 810aa46:	4629      	mov	r1, r5
 810aa48:	4630      	mov	r0, r6
 810aa4a:	f7ff ffbf 	bl	810a9cc <sbrk_aligned>
 810aa4e:	1c43      	adds	r3, r0, #1
 810aa50:	4604      	mov	r4, r0
 810aa52:	d158      	bne.n	810ab06 <_malloc_r+0xf6>
 810aa54:	f8d8 4000 	ldr.w	r4, [r8]
 810aa58:	4627      	mov	r7, r4
 810aa5a:	2f00      	cmp	r7, #0
 810aa5c:	d143      	bne.n	810aae6 <_malloc_r+0xd6>
 810aa5e:	2c00      	cmp	r4, #0
 810aa60:	d04b      	beq.n	810aafa <_malloc_r+0xea>
 810aa62:	6823      	ldr	r3, [r4, #0]
 810aa64:	4639      	mov	r1, r7
 810aa66:	4630      	mov	r0, r6
 810aa68:	eb04 0903 	add.w	r9, r4, r3
 810aa6c:	f000 fdfc 	bl	810b668 <_sbrk_r>
 810aa70:	4581      	cmp	r9, r0
 810aa72:	d142      	bne.n	810aafa <_malloc_r+0xea>
 810aa74:	6821      	ldr	r1, [r4, #0]
 810aa76:	1a6d      	subs	r5, r5, r1
 810aa78:	4629      	mov	r1, r5
 810aa7a:	4630      	mov	r0, r6
 810aa7c:	f7ff ffa6 	bl	810a9cc <sbrk_aligned>
 810aa80:	3001      	adds	r0, #1
 810aa82:	d03a      	beq.n	810aafa <_malloc_r+0xea>
 810aa84:	6823      	ldr	r3, [r4, #0]
 810aa86:	442b      	add	r3, r5
 810aa88:	6023      	str	r3, [r4, #0]
 810aa8a:	f8d8 3000 	ldr.w	r3, [r8]
 810aa8e:	685a      	ldr	r2, [r3, #4]
 810aa90:	bb62      	cbnz	r2, 810aaec <_malloc_r+0xdc>
 810aa92:	f8c8 7000 	str.w	r7, [r8]
 810aa96:	e00f      	b.n	810aab8 <_malloc_r+0xa8>
 810aa98:	6822      	ldr	r2, [r4, #0]
 810aa9a:	1b52      	subs	r2, r2, r5
 810aa9c:	d420      	bmi.n	810aae0 <_malloc_r+0xd0>
 810aa9e:	2a0b      	cmp	r2, #11
 810aaa0:	d917      	bls.n	810aad2 <_malloc_r+0xc2>
 810aaa2:	1961      	adds	r1, r4, r5
 810aaa4:	42a3      	cmp	r3, r4
 810aaa6:	6025      	str	r5, [r4, #0]
 810aaa8:	bf18      	it	ne
 810aaaa:	6059      	strne	r1, [r3, #4]
 810aaac:	6863      	ldr	r3, [r4, #4]
 810aaae:	bf08      	it	eq
 810aab0:	f8c8 1000 	streq.w	r1, [r8]
 810aab4:	5162      	str	r2, [r4, r5]
 810aab6:	604b      	str	r3, [r1, #4]
 810aab8:	4630      	mov	r0, r6
 810aaba:	f000 f82f 	bl	810ab1c <__malloc_unlock>
 810aabe:	f104 000b 	add.w	r0, r4, #11
 810aac2:	1d23      	adds	r3, r4, #4
 810aac4:	f020 0007 	bic.w	r0, r0, #7
 810aac8:	1ac2      	subs	r2, r0, r3
 810aaca:	bf1c      	itt	ne
 810aacc:	1a1b      	subne	r3, r3, r0
 810aace:	50a3      	strne	r3, [r4, r2]
 810aad0:	e7af      	b.n	810aa32 <_malloc_r+0x22>
 810aad2:	6862      	ldr	r2, [r4, #4]
 810aad4:	42a3      	cmp	r3, r4
 810aad6:	bf0c      	ite	eq
 810aad8:	f8c8 2000 	streq.w	r2, [r8]
 810aadc:	605a      	strne	r2, [r3, #4]
 810aade:	e7eb      	b.n	810aab8 <_malloc_r+0xa8>
 810aae0:	4623      	mov	r3, r4
 810aae2:	6864      	ldr	r4, [r4, #4]
 810aae4:	e7ae      	b.n	810aa44 <_malloc_r+0x34>
 810aae6:	463c      	mov	r4, r7
 810aae8:	687f      	ldr	r7, [r7, #4]
 810aaea:	e7b6      	b.n	810aa5a <_malloc_r+0x4a>
 810aaec:	461a      	mov	r2, r3
 810aaee:	685b      	ldr	r3, [r3, #4]
 810aaf0:	42a3      	cmp	r3, r4
 810aaf2:	d1fb      	bne.n	810aaec <_malloc_r+0xdc>
 810aaf4:	2300      	movs	r3, #0
 810aaf6:	6053      	str	r3, [r2, #4]
 810aaf8:	e7de      	b.n	810aab8 <_malloc_r+0xa8>
 810aafa:	230c      	movs	r3, #12
 810aafc:	6033      	str	r3, [r6, #0]
 810aafe:	4630      	mov	r0, r6
 810ab00:	f000 f80c 	bl	810ab1c <__malloc_unlock>
 810ab04:	e794      	b.n	810aa30 <_malloc_r+0x20>
 810ab06:	6005      	str	r5, [r0, #0]
 810ab08:	e7d6      	b.n	810aab8 <_malloc_r+0xa8>
 810ab0a:	bf00      	nop
 810ab0c:	1000054c 	.word	0x1000054c

0810ab10 <__malloc_lock>:
 810ab10:	4801      	ldr	r0, [pc, #4]	@ (810ab18 <__malloc_lock+0x8>)
 810ab12:	f7ff b8ba 	b.w	8109c8a <__retarget_lock_acquire_recursive>
 810ab16:	bf00      	nop
 810ab18:	10000544 	.word	0x10000544

0810ab1c <__malloc_unlock>:
 810ab1c:	4801      	ldr	r0, [pc, #4]	@ (810ab24 <__malloc_unlock+0x8>)
 810ab1e:	f7ff b8b5 	b.w	8109c8c <__retarget_lock_release_recursive>
 810ab22:	bf00      	nop
 810ab24:	10000544 	.word	0x10000544

0810ab28 <_Balloc>:
 810ab28:	b570      	push	{r4, r5, r6, lr}
 810ab2a:	69c6      	ldr	r6, [r0, #28]
 810ab2c:	4604      	mov	r4, r0
 810ab2e:	460d      	mov	r5, r1
 810ab30:	b976      	cbnz	r6, 810ab50 <_Balloc+0x28>
 810ab32:	2010      	movs	r0, #16
 810ab34:	f7ff ff42 	bl	810a9bc <malloc>
 810ab38:	4602      	mov	r2, r0
 810ab3a:	61e0      	str	r0, [r4, #28]
 810ab3c:	b920      	cbnz	r0, 810ab48 <_Balloc+0x20>
 810ab3e:	4b18      	ldr	r3, [pc, #96]	@ (810aba0 <_Balloc+0x78>)
 810ab40:	4818      	ldr	r0, [pc, #96]	@ (810aba4 <_Balloc+0x7c>)
 810ab42:	216b      	movs	r1, #107	@ 0x6b
 810ab44:	f000 fdae 	bl	810b6a4 <__assert_func>
 810ab48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ab4c:	6006      	str	r6, [r0, #0]
 810ab4e:	60c6      	str	r6, [r0, #12]
 810ab50:	69e6      	ldr	r6, [r4, #28]
 810ab52:	68f3      	ldr	r3, [r6, #12]
 810ab54:	b183      	cbz	r3, 810ab78 <_Balloc+0x50>
 810ab56:	69e3      	ldr	r3, [r4, #28]
 810ab58:	68db      	ldr	r3, [r3, #12]
 810ab5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810ab5e:	b9b8      	cbnz	r0, 810ab90 <_Balloc+0x68>
 810ab60:	2101      	movs	r1, #1
 810ab62:	fa01 f605 	lsl.w	r6, r1, r5
 810ab66:	1d72      	adds	r2, r6, #5
 810ab68:	0092      	lsls	r2, r2, #2
 810ab6a:	4620      	mov	r0, r4
 810ab6c:	f000 fdb8 	bl	810b6e0 <_calloc_r>
 810ab70:	b160      	cbz	r0, 810ab8c <_Balloc+0x64>
 810ab72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810ab76:	e00e      	b.n	810ab96 <_Balloc+0x6e>
 810ab78:	2221      	movs	r2, #33	@ 0x21
 810ab7a:	2104      	movs	r1, #4
 810ab7c:	4620      	mov	r0, r4
 810ab7e:	f000 fdaf 	bl	810b6e0 <_calloc_r>
 810ab82:	69e3      	ldr	r3, [r4, #28]
 810ab84:	60f0      	str	r0, [r6, #12]
 810ab86:	68db      	ldr	r3, [r3, #12]
 810ab88:	2b00      	cmp	r3, #0
 810ab8a:	d1e4      	bne.n	810ab56 <_Balloc+0x2e>
 810ab8c:	2000      	movs	r0, #0
 810ab8e:	bd70      	pop	{r4, r5, r6, pc}
 810ab90:	6802      	ldr	r2, [r0, #0]
 810ab92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810ab96:	2300      	movs	r3, #0
 810ab98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810ab9c:	e7f7      	b.n	810ab8e <_Balloc+0x66>
 810ab9e:	bf00      	nop
 810aba0:	0810be01 	.word	0x0810be01
 810aba4:	0810be81 	.word	0x0810be81

0810aba8 <_Bfree>:
 810aba8:	b570      	push	{r4, r5, r6, lr}
 810abaa:	69c6      	ldr	r6, [r0, #28]
 810abac:	4605      	mov	r5, r0
 810abae:	460c      	mov	r4, r1
 810abb0:	b976      	cbnz	r6, 810abd0 <_Bfree+0x28>
 810abb2:	2010      	movs	r0, #16
 810abb4:	f7ff ff02 	bl	810a9bc <malloc>
 810abb8:	4602      	mov	r2, r0
 810abba:	61e8      	str	r0, [r5, #28]
 810abbc:	b920      	cbnz	r0, 810abc8 <_Bfree+0x20>
 810abbe:	4b09      	ldr	r3, [pc, #36]	@ (810abe4 <_Bfree+0x3c>)
 810abc0:	4809      	ldr	r0, [pc, #36]	@ (810abe8 <_Bfree+0x40>)
 810abc2:	218f      	movs	r1, #143	@ 0x8f
 810abc4:	f000 fd6e 	bl	810b6a4 <__assert_func>
 810abc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810abcc:	6006      	str	r6, [r0, #0]
 810abce:	60c6      	str	r6, [r0, #12]
 810abd0:	b13c      	cbz	r4, 810abe2 <_Bfree+0x3a>
 810abd2:	69eb      	ldr	r3, [r5, #28]
 810abd4:	6862      	ldr	r2, [r4, #4]
 810abd6:	68db      	ldr	r3, [r3, #12]
 810abd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810abdc:	6021      	str	r1, [r4, #0]
 810abde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810abe2:	bd70      	pop	{r4, r5, r6, pc}
 810abe4:	0810be01 	.word	0x0810be01
 810abe8:	0810be81 	.word	0x0810be81

0810abec <__multadd>:
 810abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810abf0:	690d      	ldr	r5, [r1, #16]
 810abf2:	4607      	mov	r7, r0
 810abf4:	460c      	mov	r4, r1
 810abf6:	461e      	mov	r6, r3
 810abf8:	f101 0c14 	add.w	ip, r1, #20
 810abfc:	2000      	movs	r0, #0
 810abfe:	f8dc 3000 	ldr.w	r3, [ip]
 810ac02:	b299      	uxth	r1, r3
 810ac04:	fb02 6101 	mla	r1, r2, r1, r6
 810ac08:	0c1e      	lsrs	r6, r3, #16
 810ac0a:	0c0b      	lsrs	r3, r1, #16
 810ac0c:	fb02 3306 	mla	r3, r2, r6, r3
 810ac10:	b289      	uxth	r1, r1
 810ac12:	3001      	adds	r0, #1
 810ac14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810ac18:	4285      	cmp	r5, r0
 810ac1a:	f84c 1b04 	str.w	r1, [ip], #4
 810ac1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810ac22:	dcec      	bgt.n	810abfe <__multadd+0x12>
 810ac24:	b30e      	cbz	r6, 810ac6a <__multadd+0x7e>
 810ac26:	68a3      	ldr	r3, [r4, #8]
 810ac28:	42ab      	cmp	r3, r5
 810ac2a:	dc19      	bgt.n	810ac60 <__multadd+0x74>
 810ac2c:	6861      	ldr	r1, [r4, #4]
 810ac2e:	4638      	mov	r0, r7
 810ac30:	3101      	adds	r1, #1
 810ac32:	f7ff ff79 	bl	810ab28 <_Balloc>
 810ac36:	4680      	mov	r8, r0
 810ac38:	b928      	cbnz	r0, 810ac46 <__multadd+0x5a>
 810ac3a:	4602      	mov	r2, r0
 810ac3c:	4b0c      	ldr	r3, [pc, #48]	@ (810ac70 <__multadd+0x84>)
 810ac3e:	480d      	ldr	r0, [pc, #52]	@ (810ac74 <__multadd+0x88>)
 810ac40:	21ba      	movs	r1, #186	@ 0xba
 810ac42:	f000 fd2f 	bl	810b6a4 <__assert_func>
 810ac46:	6922      	ldr	r2, [r4, #16]
 810ac48:	3202      	adds	r2, #2
 810ac4a:	f104 010c 	add.w	r1, r4, #12
 810ac4e:	0092      	lsls	r2, r2, #2
 810ac50:	300c      	adds	r0, #12
 810ac52:	f000 fd19 	bl	810b688 <memcpy>
 810ac56:	4621      	mov	r1, r4
 810ac58:	4638      	mov	r0, r7
 810ac5a:	f7ff ffa5 	bl	810aba8 <_Bfree>
 810ac5e:	4644      	mov	r4, r8
 810ac60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810ac64:	3501      	adds	r5, #1
 810ac66:	615e      	str	r6, [r3, #20]
 810ac68:	6125      	str	r5, [r4, #16]
 810ac6a:	4620      	mov	r0, r4
 810ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ac70:	0810be70 	.word	0x0810be70
 810ac74:	0810be81 	.word	0x0810be81

0810ac78 <__hi0bits>:
 810ac78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810ac7c:	4603      	mov	r3, r0
 810ac7e:	bf36      	itet	cc
 810ac80:	0403      	lslcc	r3, r0, #16
 810ac82:	2000      	movcs	r0, #0
 810ac84:	2010      	movcc	r0, #16
 810ac86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810ac8a:	bf3c      	itt	cc
 810ac8c:	021b      	lslcc	r3, r3, #8
 810ac8e:	3008      	addcc	r0, #8
 810ac90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ac94:	bf3c      	itt	cc
 810ac96:	011b      	lslcc	r3, r3, #4
 810ac98:	3004      	addcc	r0, #4
 810ac9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ac9e:	bf3c      	itt	cc
 810aca0:	009b      	lslcc	r3, r3, #2
 810aca2:	3002      	addcc	r0, #2
 810aca4:	2b00      	cmp	r3, #0
 810aca6:	db05      	blt.n	810acb4 <__hi0bits+0x3c>
 810aca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810acac:	f100 0001 	add.w	r0, r0, #1
 810acb0:	bf08      	it	eq
 810acb2:	2020      	moveq	r0, #32
 810acb4:	4770      	bx	lr

0810acb6 <__lo0bits>:
 810acb6:	6803      	ldr	r3, [r0, #0]
 810acb8:	4602      	mov	r2, r0
 810acba:	f013 0007 	ands.w	r0, r3, #7
 810acbe:	d00b      	beq.n	810acd8 <__lo0bits+0x22>
 810acc0:	07d9      	lsls	r1, r3, #31
 810acc2:	d421      	bmi.n	810ad08 <__lo0bits+0x52>
 810acc4:	0798      	lsls	r0, r3, #30
 810acc6:	bf49      	itett	mi
 810acc8:	085b      	lsrmi	r3, r3, #1
 810acca:	089b      	lsrpl	r3, r3, #2
 810accc:	2001      	movmi	r0, #1
 810acce:	6013      	strmi	r3, [r2, #0]
 810acd0:	bf5c      	itt	pl
 810acd2:	6013      	strpl	r3, [r2, #0]
 810acd4:	2002      	movpl	r0, #2
 810acd6:	4770      	bx	lr
 810acd8:	b299      	uxth	r1, r3
 810acda:	b909      	cbnz	r1, 810ace0 <__lo0bits+0x2a>
 810acdc:	0c1b      	lsrs	r3, r3, #16
 810acde:	2010      	movs	r0, #16
 810ace0:	b2d9      	uxtb	r1, r3
 810ace2:	b909      	cbnz	r1, 810ace8 <__lo0bits+0x32>
 810ace4:	3008      	adds	r0, #8
 810ace6:	0a1b      	lsrs	r3, r3, #8
 810ace8:	0719      	lsls	r1, r3, #28
 810acea:	bf04      	itt	eq
 810acec:	091b      	lsreq	r3, r3, #4
 810acee:	3004      	addeq	r0, #4
 810acf0:	0799      	lsls	r1, r3, #30
 810acf2:	bf04      	itt	eq
 810acf4:	089b      	lsreq	r3, r3, #2
 810acf6:	3002      	addeq	r0, #2
 810acf8:	07d9      	lsls	r1, r3, #31
 810acfa:	d403      	bmi.n	810ad04 <__lo0bits+0x4e>
 810acfc:	085b      	lsrs	r3, r3, #1
 810acfe:	f100 0001 	add.w	r0, r0, #1
 810ad02:	d003      	beq.n	810ad0c <__lo0bits+0x56>
 810ad04:	6013      	str	r3, [r2, #0]
 810ad06:	4770      	bx	lr
 810ad08:	2000      	movs	r0, #0
 810ad0a:	4770      	bx	lr
 810ad0c:	2020      	movs	r0, #32
 810ad0e:	4770      	bx	lr

0810ad10 <__i2b>:
 810ad10:	b510      	push	{r4, lr}
 810ad12:	460c      	mov	r4, r1
 810ad14:	2101      	movs	r1, #1
 810ad16:	f7ff ff07 	bl	810ab28 <_Balloc>
 810ad1a:	4602      	mov	r2, r0
 810ad1c:	b928      	cbnz	r0, 810ad2a <__i2b+0x1a>
 810ad1e:	4b05      	ldr	r3, [pc, #20]	@ (810ad34 <__i2b+0x24>)
 810ad20:	4805      	ldr	r0, [pc, #20]	@ (810ad38 <__i2b+0x28>)
 810ad22:	f240 1145 	movw	r1, #325	@ 0x145
 810ad26:	f000 fcbd 	bl	810b6a4 <__assert_func>
 810ad2a:	2301      	movs	r3, #1
 810ad2c:	6144      	str	r4, [r0, #20]
 810ad2e:	6103      	str	r3, [r0, #16]
 810ad30:	bd10      	pop	{r4, pc}
 810ad32:	bf00      	nop
 810ad34:	0810be70 	.word	0x0810be70
 810ad38:	0810be81 	.word	0x0810be81

0810ad3c <__multiply>:
 810ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad40:	4614      	mov	r4, r2
 810ad42:	690a      	ldr	r2, [r1, #16]
 810ad44:	6923      	ldr	r3, [r4, #16]
 810ad46:	429a      	cmp	r2, r3
 810ad48:	bfa8      	it	ge
 810ad4a:	4623      	movge	r3, r4
 810ad4c:	460f      	mov	r7, r1
 810ad4e:	bfa4      	itt	ge
 810ad50:	460c      	movge	r4, r1
 810ad52:	461f      	movge	r7, r3
 810ad54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810ad58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810ad5c:	68a3      	ldr	r3, [r4, #8]
 810ad5e:	6861      	ldr	r1, [r4, #4]
 810ad60:	eb0a 0609 	add.w	r6, sl, r9
 810ad64:	42b3      	cmp	r3, r6
 810ad66:	b085      	sub	sp, #20
 810ad68:	bfb8      	it	lt
 810ad6a:	3101      	addlt	r1, #1
 810ad6c:	f7ff fedc 	bl	810ab28 <_Balloc>
 810ad70:	b930      	cbnz	r0, 810ad80 <__multiply+0x44>
 810ad72:	4602      	mov	r2, r0
 810ad74:	4b44      	ldr	r3, [pc, #272]	@ (810ae88 <__multiply+0x14c>)
 810ad76:	4845      	ldr	r0, [pc, #276]	@ (810ae8c <__multiply+0x150>)
 810ad78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810ad7c:	f000 fc92 	bl	810b6a4 <__assert_func>
 810ad80:	f100 0514 	add.w	r5, r0, #20
 810ad84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810ad88:	462b      	mov	r3, r5
 810ad8a:	2200      	movs	r2, #0
 810ad8c:	4543      	cmp	r3, r8
 810ad8e:	d321      	bcc.n	810add4 <__multiply+0x98>
 810ad90:	f107 0114 	add.w	r1, r7, #20
 810ad94:	f104 0214 	add.w	r2, r4, #20
 810ad98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810ad9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810ada0:	9302      	str	r3, [sp, #8]
 810ada2:	1b13      	subs	r3, r2, r4
 810ada4:	3b15      	subs	r3, #21
 810ada6:	f023 0303 	bic.w	r3, r3, #3
 810adaa:	3304      	adds	r3, #4
 810adac:	f104 0715 	add.w	r7, r4, #21
 810adb0:	42ba      	cmp	r2, r7
 810adb2:	bf38      	it	cc
 810adb4:	2304      	movcc	r3, #4
 810adb6:	9301      	str	r3, [sp, #4]
 810adb8:	9b02      	ldr	r3, [sp, #8]
 810adba:	9103      	str	r1, [sp, #12]
 810adbc:	428b      	cmp	r3, r1
 810adbe:	d80c      	bhi.n	810adda <__multiply+0x9e>
 810adc0:	2e00      	cmp	r6, #0
 810adc2:	dd03      	ble.n	810adcc <__multiply+0x90>
 810adc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810adc8:	2b00      	cmp	r3, #0
 810adca:	d05b      	beq.n	810ae84 <__multiply+0x148>
 810adcc:	6106      	str	r6, [r0, #16]
 810adce:	b005      	add	sp, #20
 810add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810add4:	f843 2b04 	str.w	r2, [r3], #4
 810add8:	e7d8      	b.n	810ad8c <__multiply+0x50>
 810adda:	f8b1 a000 	ldrh.w	sl, [r1]
 810adde:	f1ba 0f00 	cmp.w	sl, #0
 810ade2:	d024      	beq.n	810ae2e <__multiply+0xf2>
 810ade4:	f104 0e14 	add.w	lr, r4, #20
 810ade8:	46a9      	mov	r9, r5
 810adea:	f04f 0c00 	mov.w	ip, #0
 810adee:	f85e 7b04 	ldr.w	r7, [lr], #4
 810adf2:	f8d9 3000 	ldr.w	r3, [r9]
 810adf6:	fa1f fb87 	uxth.w	fp, r7
 810adfa:	b29b      	uxth	r3, r3
 810adfc:	fb0a 330b 	mla	r3, sl, fp, r3
 810ae00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810ae04:	f8d9 7000 	ldr.w	r7, [r9]
 810ae08:	4463      	add	r3, ip
 810ae0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810ae0e:	fb0a c70b 	mla	r7, sl, fp, ip
 810ae12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810ae16:	b29b      	uxth	r3, r3
 810ae18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810ae1c:	4572      	cmp	r2, lr
 810ae1e:	f849 3b04 	str.w	r3, [r9], #4
 810ae22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810ae26:	d8e2      	bhi.n	810adee <__multiply+0xb2>
 810ae28:	9b01      	ldr	r3, [sp, #4]
 810ae2a:	f845 c003 	str.w	ip, [r5, r3]
 810ae2e:	9b03      	ldr	r3, [sp, #12]
 810ae30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810ae34:	3104      	adds	r1, #4
 810ae36:	f1b9 0f00 	cmp.w	r9, #0
 810ae3a:	d021      	beq.n	810ae80 <__multiply+0x144>
 810ae3c:	682b      	ldr	r3, [r5, #0]
 810ae3e:	f104 0c14 	add.w	ip, r4, #20
 810ae42:	46ae      	mov	lr, r5
 810ae44:	f04f 0a00 	mov.w	sl, #0
 810ae48:	f8bc b000 	ldrh.w	fp, [ip]
 810ae4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810ae50:	fb09 770b 	mla	r7, r9, fp, r7
 810ae54:	4457      	add	r7, sl
 810ae56:	b29b      	uxth	r3, r3
 810ae58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810ae5c:	f84e 3b04 	str.w	r3, [lr], #4
 810ae60:	f85c 3b04 	ldr.w	r3, [ip], #4
 810ae64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810ae68:	f8be 3000 	ldrh.w	r3, [lr]
 810ae6c:	fb09 330a 	mla	r3, r9, sl, r3
 810ae70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810ae74:	4562      	cmp	r2, ip
 810ae76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810ae7a:	d8e5      	bhi.n	810ae48 <__multiply+0x10c>
 810ae7c:	9f01      	ldr	r7, [sp, #4]
 810ae7e:	51eb      	str	r3, [r5, r7]
 810ae80:	3504      	adds	r5, #4
 810ae82:	e799      	b.n	810adb8 <__multiply+0x7c>
 810ae84:	3e01      	subs	r6, #1
 810ae86:	e79b      	b.n	810adc0 <__multiply+0x84>
 810ae88:	0810be70 	.word	0x0810be70
 810ae8c:	0810be81 	.word	0x0810be81

0810ae90 <__pow5mult>:
 810ae90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ae94:	4615      	mov	r5, r2
 810ae96:	f012 0203 	ands.w	r2, r2, #3
 810ae9a:	4607      	mov	r7, r0
 810ae9c:	460e      	mov	r6, r1
 810ae9e:	d007      	beq.n	810aeb0 <__pow5mult+0x20>
 810aea0:	4c25      	ldr	r4, [pc, #148]	@ (810af38 <__pow5mult+0xa8>)
 810aea2:	3a01      	subs	r2, #1
 810aea4:	2300      	movs	r3, #0
 810aea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810aeaa:	f7ff fe9f 	bl	810abec <__multadd>
 810aeae:	4606      	mov	r6, r0
 810aeb0:	10ad      	asrs	r5, r5, #2
 810aeb2:	d03d      	beq.n	810af30 <__pow5mult+0xa0>
 810aeb4:	69fc      	ldr	r4, [r7, #28]
 810aeb6:	b97c      	cbnz	r4, 810aed8 <__pow5mult+0x48>
 810aeb8:	2010      	movs	r0, #16
 810aeba:	f7ff fd7f 	bl	810a9bc <malloc>
 810aebe:	4602      	mov	r2, r0
 810aec0:	61f8      	str	r0, [r7, #28]
 810aec2:	b928      	cbnz	r0, 810aed0 <__pow5mult+0x40>
 810aec4:	4b1d      	ldr	r3, [pc, #116]	@ (810af3c <__pow5mult+0xac>)
 810aec6:	481e      	ldr	r0, [pc, #120]	@ (810af40 <__pow5mult+0xb0>)
 810aec8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810aecc:	f000 fbea 	bl	810b6a4 <__assert_func>
 810aed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810aed4:	6004      	str	r4, [r0, #0]
 810aed6:	60c4      	str	r4, [r0, #12]
 810aed8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810aedc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810aee0:	b94c      	cbnz	r4, 810aef6 <__pow5mult+0x66>
 810aee2:	f240 2171 	movw	r1, #625	@ 0x271
 810aee6:	4638      	mov	r0, r7
 810aee8:	f7ff ff12 	bl	810ad10 <__i2b>
 810aeec:	2300      	movs	r3, #0
 810aeee:	f8c8 0008 	str.w	r0, [r8, #8]
 810aef2:	4604      	mov	r4, r0
 810aef4:	6003      	str	r3, [r0, #0]
 810aef6:	f04f 0900 	mov.w	r9, #0
 810aefa:	07eb      	lsls	r3, r5, #31
 810aefc:	d50a      	bpl.n	810af14 <__pow5mult+0x84>
 810aefe:	4631      	mov	r1, r6
 810af00:	4622      	mov	r2, r4
 810af02:	4638      	mov	r0, r7
 810af04:	f7ff ff1a 	bl	810ad3c <__multiply>
 810af08:	4631      	mov	r1, r6
 810af0a:	4680      	mov	r8, r0
 810af0c:	4638      	mov	r0, r7
 810af0e:	f7ff fe4b 	bl	810aba8 <_Bfree>
 810af12:	4646      	mov	r6, r8
 810af14:	106d      	asrs	r5, r5, #1
 810af16:	d00b      	beq.n	810af30 <__pow5mult+0xa0>
 810af18:	6820      	ldr	r0, [r4, #0]
 810af1a:	b938      	cbnz	r0, 810af2c <__pow5mult+0x9c>
 810af1c:	4622      	mov	r2, r4
 810af1e:	4621      	mov	r1, r4
 810af20:	4638      	mov	r0, r7
 810af22:	f7ff ff0b 	bl	810ad3c <__multiply>
 810af26:	6020      	str	r0, [r4, #0]
 810af28:	f8c0 9000 	str.w	r9, [r0]
 810af2c:	4604      	mov	r4, r0
 810af2e:	e7e4      	b.n	810aefa <__pow5mult+0x6a>
 810af30:	4630      	mov	r0, r6
 810af32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810af36:	bf00      	nop
 810af38:	0810bedc 	.word	0x0810bedc
 810af3c:	0810be01 	.word	0x0810be01
 810af40:	0810be81 	.word	0x0810be81

0810af44 <__lshift>:
 810af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810af48:	460c      	mov	r4, r1
 810af4a:	6849      	ldr	r1, [r1, #4]
 810af4c:	6923      	ldr	r3, [r4, #16]
 810af4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810af52:	68a3      	ldr	r3, [r4, #8]
 810af54:	4607      	mov	r7, r0
 810af56:	4691      	mov	r9, r2
 810af58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810af5c:	f108 0601 	add.w	r6, r8, #1
 810af60:	42b3      	cmp	r3, r6
 810af62:	db0b      	blt.n	810af7c <__lshift+0x38>
 810af64:	4638      	mov	r0, r7
 810af66:	f7ff fddf 	bl	810ab28 <_Balloc>
 810af6a:	4605      	mov	r5, r0
 810af6c:	b948      	cbnz	r0, 810af82 <__lshift+0x3e>
 810af6e:	4602      	mov	r2, r0
 810af70:	4b28      	ldr	r3, [pc, #160]	@ (810b014 <__lshift+0xd0>)
 810af72:	4829      	ldr	r0, [pc, #164]	@ (810b018 <__lshift+0xd4>)
 810af74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810af78:	f000 fb94 	bl	810b6a4 <__assert_func>
 810af7c:	3101      	adds	r1, #1
 810af7e:	005b      	lsls	r3, r3, #1
 810af80:	e7ee      	b.n	810af60 <__lshift+0x1c>
 810af82:	2300      	movs	r3, #0
 810af84:	f100 0114 	add.w	r1, r0, #20
 810af88:	f100 0210 	add.w	r2, r0, #16
 810af8c:	4618      	mov	r0, r3
 810af8e:	4553      	cmp	r3, sl
 810af90:	db33      	blt.n	810affa <__lshift+0xb6>
 810af92:	6920      	ldr	r0, [r4, #16]
 810af94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810af98:	f104 0314 	add.w	r3, r4, #20
 810af9c:	f019 091f 	ands.w	r9, r9, #31
 810afa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810afa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810afa8:	d02b      	beq.n	810b002 <__lshift+0xbe>
 810afaa:	f1c9 0e20 	rsb	lr, r9, #32
 810afae:	468a      	mov	sl, r1
 810afb0:	2200      	movs	r2, #0
 810afb2:	6818      	ldr	r0, [r3, #0]
 810afb4:	fa00 f009 	lsl.w	r0, r0, r9
 810afb8:	4310      	orrs	r0, r2
 810afba:	f84a 0b04 	str.w	r0, [sl], #4
 810afbe:	f853 2b04 	ldr.w	r2, [r3], #4
 810afc2:	459c      	cmp	ip, r3
 810afc4:	fa22 f20e 	lsr.w	r2, r2, lr
 810afc8:	d8f3      	bhi.n	810afb2 <__lshift+0x6e>
 810afca:	ebac 0304 	sub.w	r3, ip, r4
 810afce:	3b15      	subs	r3, #21
 810afd0:	f023 0303 	bic.w	r3, r3, #3
 810afd4:	3304      	adds	r3, #4
 810afd6:	f104 0015 	add.w	r0, r4, #21
 810afda:	4584      	cmp	ip, r0
 810afdc:	bf38      	it	cc
 810afde:	2304      	movcc	r3, #4
 810afe0:	50ca      	str	r2, [r1, r3]
 810afe2:	b10a      	cbz	r2, 810afe8 <__lshift+0xa4>
 810afe4:	f108 0602 	add.w	r6, r8, #2
 810afe8:	3e01      	subs	r6, #1
 810afea:	4638      	mov	r0, r7
 810afec:	612e      	str	r6, [r5, #16]
 810afee:	4621      	mov	r1, r4
 810aff0:	f7ff fdda 	bl	810aba8 <_Bfree>
 810aff4:	4628      	mov	r0, r5
 810aff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810affa:	f842 0f04 	str.w	r0, [r2, #4]!
 810affe:	3301      	adds	r3, #1
 810b000:	e7c5      	b.n	810af8e <__lshift+0x4a>
 810b002:	3904      	subs	r1, #4
 810b004:	f853 2b04 	ldr.w	r2, [r3], #4
 810b008:	f841 2f04 	str.w	r2, [r1, #4]!
 810b00c:	459c      	cmp	ip, r3
 810b00e:	d8f9      	bhi.n	810b004 <__lshift+0xc0>
 810b010:	e7ea      	b.n	810afe8 <__lshift+0xa4>
 810b012:	bf00      	nop
 810b014:	0810be70 	.word	0x0810be70
 810b018:	0810be81 	.word	0x0810be81

0810b01c <__mcmp>:
 810b01c:	690a      	ldr	r2, [r1, #16]
 810b01e:	4603      	mov	r3, r0
 810b020:	6900      	ldr	r0, [r0, #16]
 810b022:	1a80      	subs	r0, r0, r2
 810b024:	b530      	push	{r4, r5, lr}
 810b026:	d10e      	bne.n	810b046 <__mcmp+0x2a>
 810b028:	3314      	adds	r3, #20
 810b02a:	3114      	adds	r1, #20
 810b02c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810b030:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810b034:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810b038:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810b03c:	4295      	cmp	r5, r2
 810b03e:	d003      	beq.n	810b048 <__mcmp+0x2c>
 810b040:	d205      	bcs.n	810b04e <__mcmp+0x32>
 810b042:	f04f 30ff 	mov.w	r0, #4294967295
 810b046:	bd30      	pop	{r4, r5, pc}
 810b048:	42a3      	cmp	r3, r4
 810b04a:	d3f3      	bcc.n	810b034 <__mcmp+0x18>
 810b04c:	e7fb      	b.n	810b046 <__mcmp+0x2a>
 810b04e:	2001      	movs	r0, #1
 810b050:	e7f9      	b.n	810b046 <__mcmp+0x2a>
	...

0810b054 <__mdiff>:
 810b054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b058:	4689      	mov	r9, r1
 810b05a:	4606      	mov	r6, r0
 810b05c:	4611      	mov	r1, r2
 810b05e:	4648      	mov	r0, r9
 810b060:	4614      	mov	r4, r2
 810b062:	f7ff ffdb 	bl	810b01c <__mcmp>
 810b066:	1e05      	subs	r5, r0, #0
 810b068:	d112      	bne.n	810b090 <__mdiff+0x3c>
 810b06a:	4629      	mov	r1, r5
 810b06c:	4630      	mov	r0, r6
 810b06e:	f7ff fd5b 	bl	810ab28 <_Balloc>
 810b072:	4602      	mov	r2, r0
 810b074:	b928      	cbnz	r0, 810b082 <__mdiff+0x2e>
 810b076:	4b3f      	ldr	r3, [pc, #252]	@ (810b174 <__mdiff+0x120>)
 810b078:	f240 2137 	movw	r1, #567	@ 0x237
 810b07c:	483e      	ldr	r0, [pc, #248]	@ (810b178 <__mdiff+0x124>)
 810b07e:	f000 fb11 	bl	810b6a4 <__assert_func>
 810b082:	2301      	movs	r3, #1
 810b084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b088:	4610      	mov	r0, r2
 810b08a:	b003      	add	sp, #12
 810b08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b090:	bfbc      	itt	lt
 810b092:	464b      	movlt	r3, r9
 810b094:	46a1      	movlt	r9, r4
 810b096:	4630      	mov	r0, r6
 810b098:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810b09c:	bfba      	itte	lt
 810b09e:	461c      	movlt	r4, r3
 810b0a0:	2501      	movlt	r5, #1
 810b0a2:	2500      	movge	r5, #0
 810b0a4:	f7ff fd40 	bl	810ab28 <_Balloc>
 810b0a8:	4602      	mov	r2, r0
 810b0aa:	b918      	cbnz	r0, 810b0b4 <__mdiff+0x60>
 810b0ac:	4b31      	ldr	r3, [pc, #196]	@ (810b174 <__mdiff+0x120>)
 810b0ae:	f240 2145 	movw	r1, #581	@ 0x245
 810b0b2:	e7e3      	b.n	810b07c <__mdiff+0x28>
 810b0b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810b0b8:	6926      	ldr	r6, [r4, #16]
 810b0ba:	60c5      	str	r5, [r0, #12]
 810b0bc:	f109 0310 	add.w	r3, r9, #16
 810b0c0:	f109 0514 	add.w	r5, r9, #20
 810b0c4:	f104 0e14 	add.w	lr, r4, #20
 810b0c8:	f100 0b14 	add.w	fp, r0, #20
 810b0cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810b0d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810b0d4:	9301      	str	r3, [sp, #4]
 810b0d6:	46d9      	mov	r9, fp
 810b0d8:	f04f 0c00 	mov.w	ip, #0
 810b0dc:	9b01      	ldr	r3, [sp, #4]
 810b0de:	f85e 0b04 	ldr.w	r0, [lr], #4
 810b0e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 810b0e6:	9301      	str	r3, [sp, #4]
 810b0e8:	fa1f f38a 	uxth.w	r3, sl
 810b0ec:	4619      	mov	r1, r3
 810b0ee:	b283      	uxth	r3, r0
 810b0f0:	1acb      	subs	r3, r1, r3
 810b0f2:	0c00      	lsrs	r0, r0, #16
 810b0f4:	4463      	add	r3, ip
 810b0f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810b0fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810b0fe:	b29b      	uxth	r3, r3
 810b100:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810b104:	4576      	cmp	r6, lr
 810b106:	f849 3b04 	str.w	r3, [r9], #4
 810b10a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810b10e:	d8e5      	bhi.n	810b0dc <__mdiff+0x88>
 810b110:	1b33      	subs	r3, r6, r4
 810b112:	3b15      	subs	r3, #21
 810b114:	f023 0303 	bic.w	r3, r3, #3
 810b118:	3415      	adds	r4, #21
 810b11a:	3304      	adds	r3, #4
 810b11c:	42a6      	cmp	r6, r4
 810b11e:	bf38      	it	cc
 810b120:	2304      	movcc	r3, #4
 810b122:	441d      	add	r5, r3
 810b124:	445b      	add	r3, fp
 810b126:	461e      	mov	r6, r3
 810b128:	462c      	mov	r4, r5
 810b12a:	4544      	cmp	r4, r8
 810b12c:	d30e      	bcc.n	810b14c <__mdiff+0xf8>
 810b12e:	f108 0103 	add.w	r1, r8, #3
 810b132:	1b49      	subs	r1, r1, r5
 810b134:	f021 0103 	bic.w	r1, r1, #3
 810b138:	3d03      	subs	r5, #3
 810b13a:	45a8      	cmp	r8, r5
 810b13c:	bf38      	it	cc
 810b13e:	2100      	movcc	r1, #0
 810b140:	440b      	add	r3, r1
 810b142:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b146:	b191      	cbz	r1, 810b16e <__mdiff+0x11a>
 810b148:	6117      	str	r7, [r2, #16]
 810b14a:	e79d      	b.n	810b088 <__mdiff+0x34>
 810b14c:	f854 1b04 	ldr.w	r1, [r4], #4
 810b150:	46e6      	mov	lr, ip
 810b152:	0c08      	lsrs	r0, r1, #16
 810b154:	fa1c fc81 	uxtah	ip, ip, r1
 810b158:	4471      	add	r1, lr
 810b15a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810b15e:	b289      	uxth	r1, r1
 810b160:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810b164:	f846 1b04 	str.w	r1, [r6], #4
 810b168:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810b16c:	e7dd      	b.n	810b12a <__mdiff+0xd6>
 810b16e:	3f01      	subs	r7, #1
 810b170:	e7e7      	b.n	810b142 <__mdiff+0xee>
 810b172:	bf00      	nop
 810b174:	0810be70 	.word	0x0810be70
 810b178:	0810be81 	.word	0x0810be81

0810b17c <__d2b>:
 810b17c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b180:	460f      	mov	r7, r1
 810b182:	2101      	movs	r1, #1
 810b184:	ec59 8b10 	vmov	r8, r9, d0
 810b188:	4616      	mov	r6, r2
 810b18a:	f7ff fccd 	bl	810ab28 <_Balloc>
 810b18e:	4604      	mov	r4, r0
 810b190:	b930      	cbnz	r0, 810b1a0 <__d2b+0x24>
 810b192:	4602      	mov	r2, r0
 810b194:	4b23      	ldr	r3, [pc, #140]	@ (810b224 <__d2b+0xa8>)
 810b196:	4824      	ldr	r0, [pc, #144]	@ (810b228 <__d2b+0xac>)
 810b198:	f240 310f 	movw	r1, #783	@ 0x30f
 810b19c:	f000 fa82 	bl	810b6a4 <__assert_func>
 810b1a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810b1a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810b1a8:	b10d      	cbz	r5, 810b1ae <__d2b+0x32>
 810b1aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810b1ae:	9301      	str	r3, [sp, #4]
 810b1b0:	f1b8 0300 	subs.w	r3, r8, #0
 810b1b4:	d023      	beq.n	810b1fe <__d2b+0x82>
 810b1b6:	4668      	mov	r0, sp
 810b1b8:	9300      	str	r3, [sp, #0]
 810b1ba:	f7ff fd7c 	bl	810acb6 <__lo0bits>
 810b1be:	e9dd 1200 	ldrd	r1, r2, [sp]
 810b1c2:	b1d0      	cbz	r0, 810b1fa <__d2b+0x7e>
 810b1c4:	f1c0 0320 	rsb	r3, r0, #32
 810b1c8:	fa02 f303 	lsl.w	r3, r2, r3
 810b1cc:	430b      	orrs	r3, r1
 810b1ce:	40c2      	lsrs	r2, r0
 810b1d0:	6163      	str	r3, [r4, #20]
 810b1d2:	9201      	str	r2, [sp, #4]
 810b1d4:	9b01      	ldr	r3, [sp, #4]
 810b1d6:	61a3      	str	r3, [r4, #24]
 810b1d8:	2b00      	cmp	r3, #0
 810b1da:	bf0c      	ite	eq
 810b1dc:	2201      	moveq	r2, #1
 810b1de:	2202      	movne	r2, #2
 810b1e0:	6122      	str	r2, [r4, #16]
 810b1e2:	b1a5      	cbz	r5, 810b20e <__d2b+0x92>
 810b1e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810b1e8:	4405      	add	r5, r0
 810b1ea:	603d      	str	r5, [r7, #0]
 810b1ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810b1f0:	6030      	str	r0, [r6, #0]
 810b1f2:	4620      	mov	r0, r4
 810b1f4:	b003      	add	sp, #12
 810b1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b1fa:	6161      	str	r1, [r4, #20]
 810b1fc:	e7ea      	b.n	810b1d4 <__d2b+0x58>
 810b1fe:	a801      	add	r0, sp, #4
 810b200:	f7ff fd59 	bl	810acb6 <__lo0bits>
 810b204:	9b01      	ldr	r3, [sp, #4]
 810b206:	6163      	str	r3, [r4, #20]
 810b208:	3020      	adds	r0, #32
 810b20a:	2201      	movs	r2, #1
 810b20c:	e7e8      	b.n	810b1e0 <__d2b+0x64>
 810b20e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b212:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810b216:	6038      	str	r0, [r7, #0]
 810b218:	6918      	ldr	r0, [r3, #16]
 810b21a:	f7ff fd2d 	bl	810ac78 <__hi0bits>
 810b21e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b222:	e7e5      	b.n	810b1f0 <__d2b+0x74>
 810b224:	0810be70 	.word	0x0810be70
 810b228:	0810be81 	.word	0x0810be81

0810b22c <__ssputs_r>:
 810b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b230:	688e      	ldr	r6, [r1, #8]
 810b232:	461f      	mov	r7, r3
 810b234:	42be      	cmp	r6, r7
 810b236:	680b      	ldr	r3, [r1, #0]
 810b238:	4682      	mov	sl, r0
 810b23a:	460c      	mov	r4, r1
 810b23c:	4690      	mov	r8, r2
 810b23e:	d82d      	bhi.n	810b29c <__ssputs_r+0x70>
 810b240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810b244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810b248:	d026      	beq.n	810b298 <__ssputs_r+0x6c>
 810b24a:	6965      	ldr	r5, [r4, #20]
 810b24c:	6909      	ldr	r1, [r1, #16]
 810b24e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b252:	eba3 0901 	sub.w	r9, r3, r1
 810b256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b25a:	1c7b      	adds	r3, r7, #1
 810b25c:	444b      	add	r3, r9
 810b25e:	106d      	asrs	r5, r5, #1
 810b260:	429d      	cmp	r5, r3
 810b262:	bf38      	it	cc
 810b264:	461d      	movcc	r5, r3
 810b266:	0553      	lsls	r3, r2, #21
 810b268:	d527      	bpl.n	810b2ba <__ssputs_r+0x8e>
 810b26a:	4629      	mov	r1, r5
 810b26c:	f7ff fbd0 	bl	810aa10 <_malloc_r>
 810b270:	4606      	mov	r6, r0
 810b272:	b360      	cbz	r0, 810b2ce <__ssputs_r+0xa2>
 810b274:	6921      	ldr	r1, [r4, #16]
 810b276:	464a      	mov	r2, r9
 810b278:	f000 fa06 	bl	810b688 <memcpy>
 810b27c:	89a3      	ldrh	r3, [r4, #12]
 810b27e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810b282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810b286:	81a3      	strh	r3, [r4, #12]
 810b288:	6126      	str	r6, [r4, #16]
 810b28a:	6165      	str	r5, [r4, #20]
 810b28c:	444e      	add	r6, r9
 810b28e:	eba5 0509 	sub.w	r5, r5, r9
 810b292:	6026      	str	r6, [r4, #0]
 810b294:	60a5      	str	r5, [r4, #8]
 810b296:	463e      	mov	r6, r7
 810b298:	42be      	cmp	r6, r7
 810b29a:	d900      	bls.n	810b29e <__ssputs_r+0x72>
 810b29c:	463e      	mov	r6, r7
 810b29e:	6820      	ldr	r0, [r4, #0]
 810b2a0:	4632      	mov	r2, r6
 810b2a2:	4641      	mov	r1, r8
 810b2a4:	f000 f9c6 	bl	810b634 <memmove>
 810b2a8:	68a3      	ldr	r3, [r4, #8]
 810b2aa:	1b9b      	subs	r3, r3, r6
 810b2ac:	60a3      	str	r3, [r4, #8]
 810b2ae:	6823      	ldr	r3, [r4, #0]
 810b2b0:	4433      	add	r3, r6
 810b2b2:	6023      	str	r3, [r4, #0]
 810b2b4:	2000      	movs	r0, #0
 810b2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b2ba:	462a      	mov	r2, r5
 810b2bc:	f000 fa36 	bl	810b72c <_realloc_r>
 810b2c0:	4606      	mov	r6, r0
 810b2c2:	2800      	cmp	r0, #0
 810b2c4:	d1e0      	bne.n	810b288 <__ssputs_r+0x5c>
 810b2c6:	6921      	ldr	r1, [r4, #16]
 810b2c8:	4650      	mov	r0, sl
 810b2ca:	f7ff fb2d 	bl	810a928 <_free_r>
 810b2ce:	230c      	movs	r3, #12
 810b2d0:	f8ca 3000 	str.w	r3, [sl]
 810b2d4:	89a3      	ldrh	r3, [r4, #12]
 810b2d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b2da:	81a3      	strh	r3, [r4, #12]
 810b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 810b2e0:	e7e9      	b.n	810b2b6 <__ssputs_r+0x8a>
	...

0810b2e4 <_svfiprintf_r>:
 810b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b2e8:	4698      	mov	r8, r3
 810b2ea:	898b      	ldrh	r3, [r1, #12]
 810b2ec:	061b      	lsls	r3, r3, #24
 810b2ee:	b09d      	sub	sp, #116	@ 0x74
 810b2f0:	4607      	mov	r7, r0
 810b2f2:	460d      	mov	r5, r1
 810b2f4:	4614      	mov	r4, r2
 810b2f6:	d510      	bpl.n	810b31a <_svfiprintf_r+0x36>
 810b2f8:	690b      	ldr	r3, [r1, #16]
 810b2fa:	b973      	cbnz	r3, 810b31a <_svfiprintf_r+0x36>
 810b2fc:	2140      	movs	r1, #64	@ 0x40
 810b2fe:	f7ff fb87 	bl	810aa10 <_malloc_r>
 810b302:	6028      	str	r0, [r5, #0]
 810b304:	6128      	str	r0, [r5, #16]
 810b306:	b930      	cbnz	r0, 810b316 <_svfiprintf_r+0x32>
 810b308:	230c      	movs	r3, #12
 810b30a:	603b      	str	r3, [r7, #0]
 810b30c:	f04f 30ff 	mov.w	r0, #4294967295
 810b310:	b01d      	add	sp, #116	@ 0x74
 810b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b316:	2340      	movs	r3, #64	@ 0x40
 810b318:	616b      	str	r3, [r5, #20]
 810b31a:	2300      	movs	r3, #0
 810b31c:	9309      	str	r3, [sp, #36]	@ 0x24
 810b31e:	2320      	movs	r3, #32
 810b320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810b324:	f8cd 800c 	str.w	r8, [sp, #12]
 810b328:	2330      	movs	r3, #48	@ 0x30
 810b32a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810b4c8 <_svfiprintf_r+0x1e4>
 810b32e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810b332:	f04f 0901 	mov.w	r9, #1
 810b336:	4623      	mov	r3, r4
 810b338:	469a      	mov	sl, r3
 810b33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b33e:	b10a      	cbz	r2, 810b344 <_svfiprintf_r+0x60>
 810b340:	2a25      	cmp	r2, #37	@ 0x25
 810b342:	d1f9      	bne.n	810b338 <_svfiprintf_r+0x54>
 810b344:	ebba 0b04 	subs.w	fp, sl, r4
 810b348:	d00b      	beq.n	810b362 <_svfiprintf_r+0x7e>
 810b34a:	465b      	mov	r3, fp
 810b34c:	4622      	mov	r2, r4
 810b34e:	4629      	mov	r1, r5
 810b350:	4638      	mov	r0, r7
 810b352:	f7ff ff6b 	bl	810b22c <__ssputs_r>
 810b356:	3001      	adds	r0, #1
 810b358:	f000 80a7 	beq.w	810b4aa <_svfiprintf_r+0x1c6>
 810b35c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b35e:	445a      	add	r2, fp
 810b360:	9209      	str	r2, [sp, #36]	@ 0x24
 810b362:	f89a 3000 	ldrb.w	r3, [sl]
 810b366:	2b00      	cmp	r3, #0
 810b368:	f000 809f 	beq.w	810b4aa <_svfiprintf_r+0x1c6>
 810b36c:	2300      	movs	r3, #0
 810b36e:	f04f 32ff 	mov.w	r2, #4294967295
 810b372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b376:	f10a 0a01 	add.w	sl, sl, #1
 810b37a:	9304      	str	r3, [sp, #16]
 810b37c:	9307      	str	r3, [sp, #28]
 810b37e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810b382:	931a      	str	r3, [sp, #104]	@ 0x68
 810b384:	4654      	mov	r4, sl
 810b386:	2205      	movs	r2, #5
 810b388:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b38c:	484e      	ldr	r0, [pc, #312]	@ (810b4c8 <_svfiprintf_r+0x1e4>)
 810b38e:	f7f4 ffa7 	bl	81002e0 <memchr>
 810b392:	9a04      	ldr	r2, [sp, #16]
 810b394:	b9d8      	cbnz	r0, 810b3ce <_svfiprintf_r+0xea>
 810b396:	06d0      	lsls	r0, r2, #27
 810b398:	bf44      	itt	mi
 810b39a:	2320      	movmi	r3, #32
 810b39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b3a0:	0711      	lsls	r1, r2, #28
 810b3a2:	bf44      	itt	mi
 810b3a4:	232b      	movmi	r3, #43	@ 0x2b
 810b3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b3aa:	f89a 3000 	ldrb.w	r3, [sl]
 810b3ae:	2b2a      	cmp	r3, #42	@ 0x2a
 810b3b0:	d015      	beq.n	810b3de <_svfiprintf_r+0xfa>
 810b3b2:	9a07      	ldr	r2, [sp, #28]
 810b3b4:	4654      	mov	r4, sl
 810b3b6:	2000      	movs	r0, #0
 810b3b8:	f04f 0c0a 	mov.w	ip, #10
 810b3bc:	4621      	mov	r1, r4
 810b3be:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b3c2:	3b30      	subs	r3, #48	@ 0x30
 810b3c4:	2b09      	cmp	r3, #9
 810b3c6:	d94b      	bls.n	810b460 <_svfiprintf_r+0x17c>
 810b3c8:	b1b0      	cbz	r0, 810b3f8 <_svfiprintf_r+0x114>
 810b3ca:	9207      	str	r2, [sp, #28]
 810b3cc:	e014      	b.n	810b3f8 <_svfiprintf_r+0x114>
 810b3ce:	eba0 0308 	sub.w	r3, r0, r8
 810b3d2:	fa09 f303 	lsl.w	r3, r9, r3
 810b3d6:	4313      	orrs	r3, r2
 810b3d8:	9304      	str	r3, [sp, #16]
 810b3da:	46a2      	mov	sl, r4
 810b3dc:	e7d2      	b.n	810b384 <_svfiprintf_r+0xa0>
 810b3de:	9b03      	ldr	r3, [sp, #12]
 810b3e0:	1d19      	adds	r1, r3, #4
 810b3e2:	681b      	ldr	r3, [r3, #0]
 810b3e4:	9103      	str	r1, [sp, #12]
 810b3e6:	2b00      	cmp	r3, #0
 810b3e8:	bfbb      	ittet	lt
 810b3ea:	425b      	neglt	r3, r3
 810b3ec:	f042 0202 	orrlt.w	r2, r2, #2
 810b3f0:	9307      	strge	r3, [sp, #28]
 810b3f2:	9307      	strlt	r3, [sp, #28]
 810b3f4:	bfb8      	it	lt
 810b3f6:	9204      	strlt	r2, [sp, #16]
 810b3f8:	7823      	ldrb	r3, [r4, #0]
 810b3fa:	2b2e      	cmp	r3, #46	@ 0x2e
 810b3fc:	d10a      	bne.n	810b414 <_svfiprintf_r+0x130>
 810b3fe:	7863      	ldrb	r3, [r4, #1]
 810b400:	2b2a      	cmp	r3, #42	@ 0x2a
 810b402:	d132      	bne.n	810b46a <_svfiprintf_r+0x186>
 810b404:	9b03      	ldr	r3, [sp, #12]
 810b406:	1d1a      	adds	r2, r3, #4
 810b408:	681b      	ldr	r3, [r3, #0]
 810b40a:	9203      	str	r2, [sp, #12]
 810b40c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810b410:	3402      	adds	r4, #2
 810b412:	9305      	str	r3, [sp, #20]
 810b414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810b4d8 <_svfiprintf_r+0x1f4>
 810b418:	7821      	ldrb	r1, [r4, #0]
 810b41a:	2203      	movs	r2, #3
 810b41c:	4650      	mov	r0, sl
 810b41e:	f7f4 ff5f 	bl	81002e0 <memchr>
 810b422:	b138      	cbz	r0, 810b434 <_svfiprintf_r+0x150>
 810b424:	9b04      	ldr	r3, [sp, #16]
 810b426:	eba0 000a 	sub.w	r0, r0, sl
 810b42a:	2240      	movs	r2, #64	@ 0x40
 810b42c:	4082      	lsls	r2, r0
 810b42e:	4313      	orrs	r3, r2
 810b430:	3401      	adds	r4, #1
 810b432:	9304      	str	r3, [sp, #16]
 810b434:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b438:	4824      	ldr	r0, [pc, #144]	@ (810b4cc <_svfiprintf_r+0x1e8>)
 810b43a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810b43e:	2206      	movs	r2, #6
 810b440:	f7f4 ff4e 	bl	81002e0 <memchr>
 810b444:	2800      	cmp	r0, #0
 810b446:	d036      	beq.n	810b4b6 <_svfiprintf_r+0x1d2>
 810b448:	4b21      	ldr	r3, [pc, #132]	@ (810b4d0 <_svfiprintf_r+0x1ec>)
 810b44a:	bb1b      	cbnz	r3, 810b494 <_svfiprintf_r+0x1b0>
 810b44c:	9b03      	ldr	r3, [sp, #12]
 810b44e:	3307      	adds	r3, #7
 810b450:	f023 0307 	bic.w	r3, r3, #7
 810b454:	3308      	adds	r3, #8
 810b456:	9303      	str	r3, [sp, #12]
 810b458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b45a:	4433      	add	r3, r6
 810b45c:	9309      	str	r3, [sp, #36]	@ 0x24
 810b45e:	e76a      	b.n	810b336 <_svfiprintf_r+0x52>
 810b460:	fb0c 3202 	mla	r2, ip, r2, r3
 810b464:	460c      	mov	r4, r1
 810b466:	2001      	movs	r0, #1
 810b468:	e7a8      	b.n	810b3bc <_svfiprintf_r+0xd8>
 810b46a:	2300      	movs	r3, #0
 810b46c:	3401      	adds	r4, #1
 810b46e:	9305      	str	r3, [sp, #20]
 810b470:	4619      	mov	r1, r3
 810b472:	f04f 0c0a 	mov.w	ip, #10
 810b476:	4620      	mov	r0, r4
 810b478:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b47c:	3a30      	subs	r2, #48	@ 0x30
 810b47e:	2a09      	cmp	r2, #9
 810b480:	d903      	bls.n	810b48a <_svfiprintf_r+0x1a6>
 810b482:	2b00      	cmp	r3, #0
 810b484:	d0c6      	beq.n	810b414 <_svfiprintf_r+0x130>
 810b486:	9105      	str	r1, [sp, #20]
 810b488:	e7c4      	b.n	810b414 <_svfiprintf_r+0x130>
 810b48a:	fb0c 2101 	mla	r1, ip, r1, r2
 810b48e:	4604      	mov	r4, r0
 810b490:	2301      	movs	r3, #1
 810b492:	e7f0      	b.n	810b476 <_svfiprintf_r+0x192>
 810b494:	ab03      	add	r3, sp, #12
 810b496:	9300      	str	r3, [sp, #0]
 810b498:	462a      	mov	r2, r5
 810b49a:	4b0e      	ldr	r3, [pc, #56]	@ (810b4d4 <_svfiprintf_r+0x1f0>)
 810b49c:	a904      	add	r1, sp, #16
 810b49e:	4638      	mov	r0, r7
 810b4a0:	f7fd fe98 	bl	81091d4 <_printf_float>
 810b4a4:	1c42      	adds	r2, r0, #1
 810b4a6:	4606      	mov	r6, r0
 810b4a8:	d1d6      	bne.n	810b458 <_svfiprintf_r+0x174>
 810b4aa:	89ab      	ldrh	r3, [r5, #12]
 810b4ac:	065b      	lsls	r3, r3, #25
 810b4ae:	f53f af2d 	bmi.w	810b30c <_svfiprintf_r+0x28>
 810b4b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810b4b4:	e72c      	b.n	810b310 <_svfiprintf_r+0x2c>
 810b4b6:	ab03      	add	r3, sp, #12
 810b4b8:	9300      	str	r3, [sp, #0]
 810b4ba:	462a      	mov	r2, r5
 810b4bc:	4b05      	ldr	r3, [pc, #20]	@ (810b4d4 <_svfiprintf_r+0x1f0>)
 810b4be:	a904      	add	r1, sp, #16
 810b4c0:	4638      	mov	r0, r7
 810b4c2:	f7fe f91f 	bl	8109704 <_printf_i>
 810b4c6:	e7ed      	b.n	810b4a4 <_svfiprintf_r+0x1c0>
 810b4c8:	0810bfd8 	.word	0x0810bfd8
 810b4cc:	0810bfe2 	.word	0x0810bfe2
 810b4d0:	081091d5 	.word	0x081091d5
 810b4d4:	0810b22d 	.word	0x0810b22d
 810b4d8:	0810bfde 	.word	0x0810bfde

0810b4dc <__sflush_r>:
 810b4dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b4e4:	0716      	lsls	r6, r2, #28
 810b4e6:	4605      	mov	r5, r0
 810b4e8:	460c      	mov	r4, r1
 810b4ea:	d454      	bmi.n	810b596 <__sflush_r+0xba>
 810b4ec:	684b      	ldr	r3, [r1, #4]
 810b4ee:	2b00      	cmp	r3, #0
 810b4f0:	dc02      	bgt.n	810b4f8 <__sflush_r+0x1c>
 810b4f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810b4f4:	2b00      	cmp	r3, #0
 810b4f6:	dd48      	ble.n	810b58a <__sflush_r+0xae>
 810b4f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810b4fa:	2e00      	cmp	r6, #0
 810b4fc:	d045      	beq.n	810b58a <__sflush_r+0xae>
 810b4fe:	2300      	movs	r3, #0
 810b500:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810b504:	682f      	ldr	r7, [r5, #0]
 810b506:	6a21      	ldr	r1, [r4, #32]
 810b508:	602b      	str	r3, [r5, #0]
 810b50a:	d030      	beq.n	810b56e <__sflush_r+0x92>
 810b50c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810b50e:	89a3      	ldrh	r3, [r4, #12]
 810b510:	0759      	lsls	r1, r3, #29
 810b512:	d505      	bpl.n	810b520 <__sflush_r+0x44>
 810b514:	6863      	ldr	r3, [r4, #4]
 810b516:	1ad2      	subs	r2, r2, r3
 810b518:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810b51a:	b10b      	cbz	r3, 810b520 <__sflush_r+0x44>
 810b51c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810b51e:	1ad2      	subs	r2, r2, r3
 810b520:	2300      	movs	r3, #0
 810b522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810b524:	6a21      	ldr	r1, [r4, #32]
 810b526:	4628      	mov	r0, r5
 810b528:	47b0      	blx	r6
 810b52a:	1c43      	adds	r3, r0, #1
 810b52c:	89a3      	ldrh	r3, [r4, #12]
 810b52e:	d106      	bne.n	810b53e <__sflush_r+0x62>
 810b530:	6829      	ldr	r1, [r5, #0]
 810b532:	291d      	cmp	r1, #29
 810b534:	d82b      	bhi.n	810b58e <__sflush_r+0xb2>
 810b536:	4a2a      	ldr	r2, [pc, #168]	@ (810b5e0 <__sflush_r+0x104>)
 810b538:	410a      	asrs	r2, r1
 810b53a:	07d6      	lsls	r6, r2, #31
 810b53c:	d427      	bmi.n	810b58e <__sflush_r+0xb2>
 810b53e:	2200      	movs	r2, #0
 810b540:	6062      	str	r2, [r4, #4]
 810b542:	04d9      	lsls	r1, r3, #19
 810b544:	6922      	ldr	r2, [r4, #16]
 810b546:	6022      	str	r2, [r4, #0]
 810b548:	d504      	bpl.n	810b554 <__sflush_r+0x78>
 810b54a:	1c42      	adds	r2, r0, #1
 810b54c:	d101      	bne.n	810b552 <__sflush_r+0x76>
 810b54e:	682b      	ldr	r3, [r5, #0]
 810b550:	b903      	cbnz	r3, 810b554 <__sflush_r+0x78>
 810b552:	6560      	str	r0, [r4, #84]	@ 0x54
 810b554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810b556:	602f      	str	r7, [r5, #0]
 810b558:	b1b9      	cbz	r1, 810b58a <__sflush_r+0xae>
 810b55a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810b55e:	4299      	cmp	r1, r3
 810b560:	d002      	beq.n	810b568 <__sflush_r+0x8c>
 810b562:	4628      	mov	r0, r5
 810b564:	f7ff f9e0 	bl	810a928 <_free_r>
 810b568:	2300      	movs	r3, #0
 810b56a:	6363      	str	r3, [r4, #52]	@ 0x34
 810b56c:	e00d      	b.n	810b58a <__sflush_r+0xae>
 810b56e:	2301      	movs	r3, #1
 810b570:	4628      	mov	r0, r5
 810b572:	47b0      	blx	r6
 810b574:	4602      	mov	r2, r0
 810b576:	1c50      	adds	r0, r2, #1
 810b578:	d1c9      	bne.n	810b50e <__sflush_r+0x32>
 810b57a:	682b      	ldr	r3, [r5, #0]
 810b57c:	2b00      	cmp	r3, #0
 810b57e:	d0c6      	beq.n	810b50e <__sflush_r+0x32>
 810b580:	2b1d      	cmp	r3, #29
 810b582:	d001      	beq.n	810b588 <__sflush_r+0xac>
 810b584:	2b16      	cmp	r3, #22
 810b586:	d11e      	bne.n	810b5c6 <__sflush_r+0xea>
 810b588:	602f      	str	r7, [r5, #0]
 810b58a:	2000      	movs	r0, #0
 810b58c:	e022      	b.n	810b5d4 <__sflush_r+0xf8>
 810b58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b592:	b21b      	sxth	r3, r3
 810b594:	e01b      	b.n	810b5ce <__sflush_r+0xf2>
 810b596:	690f      	ldr	r7, [r1, #16]
 810b598:	2f00      	cmp	r7, #0
 810b59a:	d0f6      	beq.n	810b58a <__sflush_r+0xae>
 810b59c:	0793      	lsls	r3, r2, #30
 810b59e:	680e      	ldr	r6, [r1, #0]
 810b5a0:	bf08      	it	eq
 810b5a2:	694b      	ldreq	r3, [r1, #20]
 810b5a4:	600f      	str	r7, [r1, #0]
 810b5a6:	bf18      	it	ne
 810b5a8:	2300      	movne	r3, #0
 810b5aa:	eba6 0807 	sub.w	r8, r6, r7
 810b5ae:	608b      	str	r3, [r1, #8]
 810b5b0:	f1b8 0f00 	cmp.w	r8, #0
 810b5b4:	dde9      	ble.n	810b58a <__sflush_r+0xae>
 810b5b6:	6a21      	ldr	r1, [r4, #32]
 810b5b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810b5ba:	4643      	mov	r3, r8
 810b5bc:	463a      	mov	r2, r7
 810b5be:	4628      	mov	r0, r5
 810b5c0:	47b0      	blx	r6
 810b5c2:	2800      	cmp	r0, #0
 810b5c4:	dc08      	bgt.n	810b5d8 <__sflush_r+0xfc>
 810b5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b5ce:	81a3      	strh	r3, [r4, #12]
 810b5d0:	f04f 30ff 	mov.w	r0, #4294967295
 810b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b5d8:	4407      	add	r7, r0
 810b5da:	eba8 0800 	sub.w	r8, r8, r0
 810b5de:	e7e7      	b.n	810b5b0 <__sflush_r+0xd4>
 810b5e0:	dfbffffe 	.word	0xdfbffffe

0810b5e4 <_fflush_r>:
 810b5e4:	b538      	push	{r3, r4, r5, lr}
 810b5e6:	690b      	ldr	r3, [r1, #16]
 810b5e8:	4605      	mov	r5, r0
 810b5ea:	460c      	mov	r4, r1
 810b5ec:	b913      	cbnz	r3, 810b5f4 <_fflush_r+0x10>
 810b5ee:	2500      	movs	r5, #0
 810b5f0:	4628      	mov	r0, r5
 810b5f2:	bd38      	pop	{r3, r4, r5, pc}
 810b5f4:	b118      	cbz	r0, 810b5fe <_fflush_r+0x1a>
 810b5f6:	6a03      	ldr	r3, [r0, #32]
 810b5f8:	b90b      	cbnz	r3, 810b5fe <_fflush_r+0x1a>
 810b5fa:	f7fe fa2f 	bl	8109a5c <__sinit>
 810b5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b602:	2b00      	cmp	r3, #0
 810b604:	d0f3      	beq.n	810b5ee <_fflush_r+0xa>
 810b606:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810b608:	07d0      	lsls	r0, r2, #31
 810b60a:	d404      	bmi.n	810b616 <_fflush_r+0x32>
 810b60c:	0599      	lsls	r1, r3, #22
 810b60e:	d402      	bmi.n	810b616 <_fflush_r+0x32>
 810b610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810b612:	f7fe fb3a 	bl	8109c8a <__retarget_lock_acquire_recursive>
 810b616:	4628      	mov	r0, r5
 810b618:	4621      	mov	r1, r4
 810b61a:	f7ff ff5f 	bl	810b4dc <__sflush_r>
 810b61e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810b620:	07da      	lsls	r2, r3, #31
 810b622:	4605      	mov	r5, r0
 810b624:	d4e4      	bmi.n	810b5f0 <_fflush_r+0xc>
 810b626:	89a3      	ldrh	r3, [r4, #12]
 810b628:	059b      	lsls	r3, r3, #22
 810b62a:	d4e1      	bmi.n	810b5f0 <_fflush_r+0xc>
 810b62c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810b62e:	f7fe fb2d 	bl	8109c8c <__retarget_lock_release_recursive>
 810b632:	e7dd      	b.n	810b5f0 <_fflush_r+0xc>

0810b634 <memmove>:
 810b634:	4288      	cmp	r0, r1
 810b636:	b510      	push	{r4, lr}
 810b638:	eb01 0402 	add.w	r4, r1, r2
 810b63c:	d902      	bls.n	810b644 <memmove+0x10>
 810b63e:	4284      	cmp	r4, r0
 810b640:	4623      	mov	r3, r4
 810b642:	d807      	bhi.n	810b654 <memmove+0x20>
 810b644:	1e43      	subs	r3, r0, #1
 810b646:	42a1      	cmp	r1, r4
 810b648:	d008      	beq.n	810b65c <memmove+0x28>
 810b64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b64e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810b652:	e7f8      	b.n	810b646 <memmove+0x12>
 810b654:	4402      	add	r2, r0
 810b656:	4601      	mov	r1, r0
 810b658:	428a      	cmp	r2, r1
 810b65a:	d100      	bne.n	810b65e <memmove+0x2a>
 810b65c:	bd10      	pop	{r4, pc}
 810b65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810b662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810b666:	e7f7      	b.n	810b658 <memmove+0x24>

0810b668 <_sbrk_r>:
 810b668:	b538      	push	{r3, r4, r5, lr}
 810b66a:	4d06      	ldr	r5, [pc, #24]	@ (810b684 <_sbrk_r+0x1c>)
 810b66c:	2300      	movs	r3, #0
 810b66e:	4604      	mov	r4, r0
 810b670:	4608      	mov	r0, r1
 810b672:	602b      	str	r3, [r5, #0]
 810b674:	f7f9 ff46 	bl	8105504 <_sbrk>
 810b678:	1c43      	adds	r3, r0, #1
 810b67a:	d102      	bne.n	810b682 <_sbrk_r+0x1a>
 810b67c:	682b      	ldr	r3, [r5, #0]
 810b67e:	b103      	cbz	r3, 810b682 <_sbrk_r+0x1a>
 810b680:	6023      	str	r3, [r4, #0]
 810b682:	bd38      	pop	{r3, r4, r5, pc}
 810b684:	10000540 	.word	0x10000540

0810b688 <memcpy>:
 810b688:	440a      	add	r2, r1
 810b68a:	4291      	cmp	r1, r2
 810b68c:	f100 33ff 	add.w	r3, r0, #4294967295
 810b690:	d100      	bne.n	810b694 <memcpy+0xc>
 810b692:	4770      	bx	lr
 810b694:	b510      	push	{r4, lr}
 810b696:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b69e:	4291      	cmp	r1, r2
 810b6a0:	d1f9      	bne.n	810b696 <memcpy+0xe>
 810b6a2:	bd10      	pop	{r4, pc}

0810b6a4 <__assert_func>:
 810b6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b6a6:	4614      	mov	r4, r2
 810b6a8:	461a      	mov	r2, r3
 810b6aa:	4b09      	ldr	r3, [pc, #36]	@ (810b6d0 <__assert_func+0x2c>)
 810b6ac:	681b      	ldr	r3, [r3, #0]
 810b6ae:	4605      	mov	r5, r0
 810b6b0:	68d8      	ldr	r0, [r3, #12]
 810b6b2:	b954      	cbnz	r4, 810b6ca <__assert_func+0x26>
 810b6b4:	4b07      	ldr	r3, [pc, #28]	@ (810b6d4 <__assert_func+0x30>)
 810b6b6:	461c      	mov	r4, r3
 810b6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810b6bc:	9100      	str	r1, [sp, #0]
 810b6be:	462b      	mov	r3, r5
 810b6c0:	4905      	ldr	r1, [pc, #20]	@ (810b6d8 <__assert_func+0x34>)
 810b6c2:	f000 f86f 	bl	810b7a4 <fiprintf>
 810b6c6:	f000 f87f 	bl	810b7c8 <abort>
 810b6ca:	4b04      	ldr	r3, [pc, #16]	@ (810b6dc <__assert_func+0x38>)
 810b6cc:	e7f4      	b.n	810b6b8 <__assert_func+0x14>
 810b6ce:	bf00      	nop
 810b6d0:	10000044 	.word	0x10000044
 810b6d4:	0810c02e 	.word	0x0810c02e
 810b6d8:	0810c000 	.word	0x0810c000
 810b6dc:	0810bff3 	.word	0x0810bff3

0810b6e0 <_calloc_r>:
 810b6e0:	b570      	push	{r4, r5, r6, lr}
 810b6e2:	fba1 5402 	umull	r5, r4, r1, r2
 810b6e6:	b93c      	cbnz	r4, 810b6f8 <_calloc_r+0x18>
 810b6e8:	4629      	mov	r1, r5
 810b6ea:	f7ff f991 	bl	810aa10 <_malloc_r>
 810b6ee:	4606      	mov	r6, r0
 810b6f0:	b928      	cbnz	r0, 810b6fe <_calloc_r+0x1e>
 810b6f2:	2600      	movs	r6, #0
 810b6f4:	4630      	mov	r0, r6
 810b6f6:	bd70      	pop	{r4, r5, r6, pc}
 810b6f8:	220c      	movs	r2, #12
 810b6fa:	6002      	str	r2, [r0, #0]
 810b6fc:	e7f9      	b.n	810b6f2 <_calloc_r+0x12>
 810b6fe:	462a      	mov	r2, r5
 810b700:	4621      	mov	r1, r4
 810b702:	f7fe fa44 	bl	8109b8e <memset>
 810b706:	e7f5      	b.n	810b6f4 <_calloc_r+0x14>

0810b708 <__ascii_mbtowc>:
 810b708:	b082      	sub	sp, #8
 810b70a:	b901      	cbnz	r1, 810b70e <__ascii_mbtowc+0x6>
 810b70c:	a901      	add	r1, sp, #4
 810b70e:	b142      	cbz	r2, 810b722 <__ascii_mbtowc+0x1a>
 810b710:	b14b      	cbz	r3, 810b726 <__ascii_mbtowc+0x1e>
 810b712:	7813      	ldrb	r3, [r2, #0]
 810b714:	600b      	str	r3, [r1, #0]
 810b716:	7812      	ldrb	r2, [r2, #0]
 810b718:	1e10      	subs	r0, r2, #0
 810b71a:	bf18      	it	ne
 810b71c:	2001      	movne	r0, #1
 810b71e:	b002      	add	sp, #8
 810b720:	4770      	bx	lr
 810b722:	4610      	mov	r0, r2
 810b724:	e7fb      	b.n	810b71e <__ascii_mbtowc+0x16>
 810b726:	f06f 0001 	mvn.w	r0, #1
 810b72a:	e7f8      	b.n	810b71e <__ascii_mbtowc+0x16>

0810b72c <_realloc_r>:
 810b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b730:	4680      	mov	r8, r0
 810b732:	4615      	mov	r5, r2
 810b734:	460c      	mov	r4, r1
 810b736:	b921      	cbnz	r1, 810b742 <_realloc_r+0x16>
 810b738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b73c:	4611      	mov	r1, r2
 810b73e:	f7ff b967 	b.w	810aa10 <_malloc_r>
 810b742:	b92a      	cbnz	r2, 810b750 <_realloc_r+0x24>
 810b744:	f7ff f8f0 	bl	810a928 <_free_r>
 810b748:	2400      	movs	r4, #0
 810b74a:	4620      	mov	r0, r4
 810b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b750:	f000 f841 	bl	810b7d6 <_malloc_usable_size_r>
 810b754:	4285      	cmp	r5, r0
 810b756:	4606      	mov	r6, r0
 810b758:	d802      	bhi.n	810b760 <_realloc_r+0x34>
 810b75a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810b75e:	d8f4      	bhi.n	810b74a <_realloc_r+0x1e>
 810b760:	4629      	mov	r1, r5
 810b762:	4640      	mov	r0, r8
 810b764:	f7ff f954 	bl	810aa10 <_malloc_r>
 810b768:	4607      	mov	r7, r0
 810b76a:	2800      	cmp	r0, #0
 810b76c:	d0ec      	beq.n	810b748 <_realloc_r+0x1c>
 810b76e:	42b5      	cmp	r5, r6
 810b770:	462a      	mov	r2, r5
 810b772:	4621      	mov	r1, r4
 810b774:	bf28      	it	cs
 810b776:	4632      	movcs	r2, r6
 810b778:	f7ff ff86 	bl	810b688 <memcpy>
 810b77c:	4621      	mov	r1, r4
 810b77e:	4640      	mov	r0, r8
 810b780:	f7ff f8d2 	bl	810a928 <_free_r>
 810b784:	463c      	mov	r4, r7
 810b786:	e7e0      	b.n	810b74a <_realloc_r+0x1e>

0810b788 <__ascii_wctomb>:
 810b788:	4603      	mov	r3, r0
 810b78a:	4608      	mov	r0, r1
 810b78c:	b141      	cbz	r1, 810b7a0 <__ascii_wctomb+0x18>
 810b78e:	2aff      	cmp	r2, #255	@ 0xff
 810b790:	d904      	bls.n	810b79c <__ascii_wctomb+0x14>
 810b792:	228a      	movs	r2, #138	@ 0x8a
 810b794:	601a      	str	r2, [r3, #0]
 810b796:	f04f 30ff 	mov.w	r0, #4294967295
 810b79a:	4770      	bx	lr
 810b79c:	700a      	strb	r2, [r1, #0]
 810b79e:	2001      	movs	r0, #1
 810b7a0:	4770      	bx	lr
	...

0810b7a4 <fiprintf>:
 810b7a4:	b40e      	push	{r1, r2, r3}
 810b7a6:	b503      	push	{r0, r1, lr}
 810b7a8:	4601      	mov	r1, r0
 810b7aa:	ab03      	add	r3, sp, #12
 810b7ac:	4805      	ldr	r0, [pc, #20]	@ (810b7c4 <fiprintf+0x20>)
 810b7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 810b7b2:	6800      	ldr	r0, [r0, #0]
 810b7b4:	9301      	str	r3, [sp, #4]
 810b7b6:	f000 f83f 	bl	810b838 <_vfiprintf_r>
 810b7ba:	b002      	add	sp, #8
 810b7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 810b7c0:	b003      	add	sp, #12
 810b7c2:	4770      	bx	lr
 810b7c4:	10000044 	.word	0x10000044

0810b7c8 <abort>:
 810b7c8:	b508      	push	{r3, lr}
 810b7ca:	2006      	movs	r0, #6
 810b7cc:	f000 fa08 	bl	810bbe0 <raise>
 810b7d0:	2001      	movs	r0, #1
 810b7d2:	f7f9 fe1f 	bl	8105414 <_exit>

0810b7d6 <_malloc_usable_size_r>:
 810b7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b7da:	1f18      	subs	r0, r3, #4
 810b7dc:	2b00      	cmp	r3, #0
 810b7de:	bfbc      	itt	lt
 810b7e0:	580b      	ldrlt	r3, [r1, r0]
 810b7e2:	18c0      	addlt	r0, r0, r3
 810b7e4:	4770      	bx	lr

0810b7e6 <__sfputc_r>:
 810b7e6:	6893      	ldr	r3, [r2, #8]
 810b7e8:	3b01      	subs	r3, #1
 810b7ea:	2b00      	cmp	r3, #0
 810b7ec:	b410      	push	{r4}
 810b7ee:	6093      	str	r3, [r2, #8]
 810b7f0:	da08      	bge.n	810b804 <__sfputc_r+0x1e>
 810b7f2:	6994      	ldr	r4, [r2, #24]
 810b7f4:	42a3      	cmp	r3, r4
 810b7f6:	db01      	blt.n	810b7fc <__sfputc_r+0x16>
 810b7f8:	290a      	cmp	r1, #10
 810b7fa:	d103      	bne.n	810b804 <__sfputc_r+0x1e>
 810b7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b800:	f000 b932 	b.w	810ba68 <__swbuf_r>
 810b804:	6813      	ldr	r3, [r2, #0]
 810b806:	1c58      	adds	r0, r3, #1
 810b808:	6010      	str	r0, [r2, #0]
 810b80a:	7019      	strb	r1, [r3, #0]
 810b80c:	4608      	mov	r0, r1
 810b80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b812:	4770      	bx	lr

0810b814 <__sfputs_r>:
 810b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b816:	4606      	mov	r6, r0
 810b818:	460f      	mov	r7, r1
 810b81a:	4614      	mov	r4, r2
 810b81c:	18d5      	adds	r5, r2, r3
 810b81e:	42ac      	cmp	r4, r5
 810b820:	d101      	bne.n	810b826 <__sfputs_r+0x12>
 810b822:	2000      	movs	r0, #0
 810b824:	e007      	b.n	810b836 <__sfputs_r+0x22>
 810b826:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b82a:	463a      	mov	r2, r7
 810b82c:	4630      	mov	r0, r6
 810b82e:	f7ff ffda 	bl	810b7e6 <__sfputc_r>
 810b832:	1c43      	adds	r3, r0, #1
 810b834:	d1f3      	bne.n	810b81e <__sfputs_r+0xa>
 810b836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0810b838 <_vfiprintf_r>:
 810b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b83c:	460d      	mov	r5, r1
 810b83e:	b09d      	sub	sp, #116	@ 0x74
 810b840:	4614      	mov	r4, r2
 810b842:	4698      	mov	r8, r3
 810b844:	4606      	mov	r6, r0
 810b846:	b118      	cbz	r0, 810b850 <_vfiprintf_r+0x18>
 810b848:	6a03      	ldr	r3, [r0, #32]
 810b84a:	b90b      	cbnz	r3, 810b850 <_vfiprintf_r+0x18>
 810b84c:	f7fe f906 	bl	8109a5c <__sinit>
 810b850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810b852:	07d9      	lsls	r1, r3, #31
 810b854:	d405      	bmi.n	810b862 <_vfiprintf_r+0x2a>
 810b856:	89ab      	ldrh	r3, [r5, #12]
 810b858:	059a      	lsls	r2, r3, #22
 810b85a:	d402      	bmi.n	810b862 <_vfiprintf_r+0x2a>
 810b85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810b85e:	f7fe fa14 	bl	8109c8a <__retarget_lock_acquire_recursive>
 810b862:	89ab      	ldrh	r3, [r5, #12]
 810b864:	071b      	lsls	r3, r3, #28
 810b866:	d501      	bpl.n	810b86c <_vfiprintf_r+0x34>
 810b868:	692b      	ldr	r3, [r5, #16]
 810b86a:	b99b      	cbnz	r3, 810b894 <_vfiprintf_r+0x5c>
 810b86c:	4629      	mov	r1, r5
 810b86e:	4630      	mov	r0, r6
 810b870:	f000 f938 	bl	810bae4 <__swsetup_r>
 810b874:	b170      	cbz	r0, 810b894 <_vfiprintf_r+0x5c>
 810b876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810b878:	07dc      	lsls	r4, r3, #31
 810b87a:	d504      	bpl.n	810b886 <_vfiprintf_r+0x4e>
 810b87c:	f04f 30ff 	mov.w	r0, #4294967295
 810b880:	b01d      	add	sp, #116	@ 0x74
 810b882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b886:	89ab      	ldrh	r3, [r5, #12]
 810b888:	0598      	lsls	r0, r3, #22
 810b88a:	d4f7      	bmi.n	810b87c <_vfiprintf_r+0x44>
 810b88c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810b88e:	f7fe f9fd 	bl	8109c8c <__retarget_lock_release_recursive>
 810b892:	e7f3      	b.n	810b87c <_vfiprintf_r+0x44>
 810b894:	2300      	movs	r3, #0
 810b896:	9309      	str	r3, [sp, #36]	@ 0x24
 810b898:	2320      	movs	r3, #32
 810b89a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810b89e:	f8cd 800c 	str.w	r8, [sp, #12]
 810b8a2:	2330      	movs	r3, #48	@ 0x30
 810b8a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810ba54 <_vfiprintf_r+0x21c>
 810b8a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810b8ac:	f04f 0901 	mov.w	r9, #1
 810b8b0:	4623      	mov	r3, r4
 810b8b2:	469a      	mov	sl, r3
 810b8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b8b8:	b10a      	cbz	r2, 810b8be <_vfiprintf_r+0x86>
 810b8ba:	2a25      	cmp	r2, #37	@ 0x25
 810b8bc:	d1f9      	bne.n	810b8b2 <_vfiprintf_r+0x7a>
 810b8be:	ebba 0b04 	subs.w	fp, sl, r4
 810b8c2:	d00b      	beq.n	810b8dc <_vfiprintf_r+0xa4>
 810b8c4:	465b      	mov	r3, fp
 810b8c6:	4622      	mov	r2, r4
 810b8c8:	4629      	mov	r1, r5
 810b8ca:	4630      	mov	r0, r6
 810b8cc:	f7ff ffa2 	bl	810b814 <__sfputs_r>
 810b8d0:	3001      	adds	r0, #1
 810b8d2:	f000 80a7 	beq.w	810ba24 <_vfiprintf_r+0x1ec>
 810b8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b8d8:	445a      	add	r2, fp
 810b8da:	9209      	str	r2, [sp, #36]	@ 0x24
 810b8dc:	f89a 3000 	ldrb.w	r3, [sl]
 810b8e0:	2b00      	cmp	r3, #0
 810b8e2:	f000 809f 	beq.w	810ba24 <_vfiprintf_r+0x1ec>
 810b8e6:	2300      	movs	r3, #0
 810b8e8:	f04f 32ff 	mov.w	r2, #4294967295
 810b8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b8f0:	f10a 0a01 	add.w	sl, sl, #1
 810b8f4:	9304      	str	r3, [sp, #16]
 810b8f6:	9307      	str	r3, [sp, #28]
 810b8f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810b8fc:	931a      	str	r3, [sp, #104]	@ 0x68
 810b8fe:	4654      	mov	r4, sl
 810b900:	2205      	movs	r2, #5
 810b902:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b906:	4853      	ldr	r0, [pc, #332]	@ (810ba54 <_vfiprintf_r+0x21c>)
 810b908:	f7f4 fcea 	bl	81002e0 <memchr>
 810b90c:	9a04      	ldr	r2, [sp, #16]
 810b90e:	b9d8      	cbnz	r0, 810b948 <_vfiprintf_r+0x110>
 810b910:	06d1      	lsls	r1, r2, #27
 810b912:	bf44      	itt	mi
 810b914:	2320      	movmi	r3, #32
 810b916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b91a:	0713      	lsls	r3, r2, #28
 810b91c:	bf44      	itt	mi
 810b91e:	232b      	movmi	r3, #43	@ 0x2b
 810b920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b924:	f89a 3000 	ldrb.w	r3, [sl]
 810b928:	2b2a      	cmp	r3, #42	@ 0x2a
 810b92a:	d015      	beq.n	810b958 <_vfiprintf_r+0x120>
 810b92c:	9a07      	ldr	r2, [sp, #28]
 810b92e:	4654      	mov	r4, sl
 810b930:	2000      	movs	r0, #0
 810b932:	f04f 0c0a 	mov.w	ip, #10
 810b936:	4621      	mov	r1, r4
 810b938:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b93c:	3b30      	subs	r3, #48	@ 0x30
 810b93e:	2b09      	cmp	r3, #9
 810b940:	d94b      	bls.n	810b9da <_vfiprintf_r+0x1a2>
 810b942:	b1b0      	cbz	r0, 810b972 <_vfiprintf_r+0x13a>
 810b944:	9207      	str	r2, [sp, #28]
 810b946:	e014      	b.n	810b972 <_vfiprintf_r+0x13a>
 810b948:	eba0 0308 	sub.w	r3, r0, r8
 810b94c:	fa09 f303 	lsl.w	r3, r9, r3
 810b950:	4313      	orrs	r3, r2
 810b952:	9304      	str	r3, [sp, #16]
 810b954:	46a2      	mov	sl, r4
 810b956:	e7d2      	b.n	810b8fe <_vfiprintf_r+0xc6>
 810b958:	9b03      	ldr	r3, [sp, #12]
 810b95a:	1d19      	adds	r1, r3, #4
 810b95c:	681b      	ldr	r3, [r3, #0]
 810b95e:	9103      	str	r1, [sp, #12]
 810b960:	2b00      	cmp	r3, #0
 810b962:	bfbb      	ittet	lt
 810b964:	425b      	neglt	r3, r3
 810b966:	f042 0202 	orrlt.w	r2, r2, #2
 810b96a:	9307      	strge	r3, [sp, #28]
 810b96c:	9307      	strlt	r3, [sp, #28]
 810b96e:	bfb8      	it	lt
 810b970:	9204      	strlt	r2, [sp, #16]
 810b972:	7823      	ldrb	r3, [r4, #0]
 810b974:	2b2e      	cmp	r3, #46	@ 0x2e
 810b976:	d10a      	bne.n	810b98e <_vfiprintf_r+0x156>
 810b978:	7863      	ldrb	r3, [r4, #1]
 810b97a:	2b2a      	cmp	r3, #42	@ 0x2a
 810b97c:	d132      	bne.n	810b9e4 <_vfiprintf_r+0x1ac>
 810b97e:	9b03      	ldr	r3, [sp, #12]
 810b980:	1d1a      	adds	r2, r3, #4
 810b982:	681b      	ldr	r3, [r3, #0]
 810b984:	9203      	str	r2, [sp, #12]
 810b986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810b98a:	3402      	adds	r4, #2
 810b98c:	9305      	str	r3, [sp, #20]
 810b98e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810ba64 <_vfiprintf_r+0x22c>
 810b992:	7821      	ldrb	r1, [r4, #0]
 810b994:	2203      	movs	r2, #3
 810b996:	4650      	mov	r0, sl
 810b998:	f7f4 fca2 	bl	81002e0 <memchr>
 810b99c:	b138      	cbz	r0, 810b9ae <_vfiprintf_r+0x176>
 810b99e:	9b04      	ldr	r3, [sp, #16]
 810b9a0:	eba0 000a 	sub.w	r0, r0, sl
 810b9a4:	2240      	movs	r2, #64	@ 0x40
 810b9a6:	4082      	lsls	r2, r0
 810b9a8:	4313      	orrs	r3, r2
 810b9aa:	3401      	adds	r4, #1
 810b9ac:	9304      	str	r3, [sp, #16]
 810b9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b9b2:	4829      	ldr	r0, [pc, #164]	@ (810ba58 <_vfiprintf_r+0x220>)
 810b9b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810b9b8:	2206      	movs	r2, #6
 810b9ba:	f7f4 fc91 	bl	81002e0 <memchr>
 810b9be:	2800      	cmp	r0, #0
 810b9c0:	d03f      	beq.n	810ba42 <_vfiprintf_r+0x20a>
 810b9c2:	4b26      	ldr	r3, [pc, #152]	@ (810ba5c <_vfiprintf_r+0x224>)
 810b9c4:	bb1b      	cbnz	r3, 810ba0e <_vfiprintf_r+0x1d6>
 810b9c6:	9b03      	ldr	r3, [sp, #12]
 810b9c8:	3307      	adds	r3, #7
 810b9ca:	f023 0307 	bic.w	r3, r3, #7
 810b9ce:	3308      	adds	r3, #8
 810b9d0:	9303      	str	r3, [sp, #12]
 810b9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b9d4:	443b      	add	r3, r7
 810b9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 810b9d8:	e76a      	b.n	810b8b0 <_vfiprintf_r+0x78>
 810b9da:	fb0c 3202 	mla	r2, ip, r2, r3
 810b9de:	460c      	mov	r4, r1
 810b9e0:	2001      	movs	r0, #1
 810b9e2:	e7a8      	b.n	810b936 <_vfiprintf_r+0xfe>
 810b9e4:	2300      	movs	r3, #0
 810b9e6:	3401      	adds	r4, #1
 810b9e8:	9305      	str	r3, [sp, #20]
 810b9ea:	4619      	mov	r1, r3
 810b9ec:	f04f 0c0a 	mov.w	ip, #10
 810b9f0:	4620      	mov	r0, r4
 810b9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b9f6:	3a30      	subs	r2, #48	@ 0x30
 810b9f8:	2a09      	cmp	r2, #9
 810b9fa:	d903      	bls.n	810ba04 <_vfiprintf_r+0x1cc>
 810b9fc:	2b00      	cmp	r3, #0
 810b9fe:	d0c6      	beq.n	810b98e <_vfiprintf_r+0x156>
 810ba00:	9105      	str	r1, [sp, #20]
 810ba02:	e7c4      	b.n	810b98e <_vfiprintf_r+0x156>
 810ba04:	fb0c 2101 	mla	r1, ip, r1, r2
 810ba08:	4604      	mov	r4, r0
 810ba0a:	2301      	movs	r3, #1
 810ba0c:	e7f0      	b.n	810b9f0 <_vfiprintf_r+0x1b8>
 810ba0e:	ab03      	add	r3, sp, #12
 810ba10:	9300      	str	r3, [sp, #0]
 810ba12:	462a      	mov	r2, r5
 810ba14:	4b12      	ldr	r3, [pc, #72]	@ (810ba60 <_vfiprintf_r+0x228>)
 810ba16:	a904      	add	r1, sp, #16
 810ba18:	4630      	mov	r0, r6
 810ba1a:	f7fd fbdb 	bl	81091d4 <_printf_float>
 810ba1e:	4607      	mov	r7, r0
 810ba20:	1c78      	adds	r0, r7, #1
 810ba22:	d1d6      	bne.n	810b9d2 <_vfiprintf_r+0x19a>
 810ba24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ba26:	07d9      	lsls	r1, r3, #31
 810ba28:	d405      	bmi.n	810ba36 <_vfiprintf_r+0x1fe>
 810ba2a:	89ab      	ldrh	r3, [r5, #12]
 810ba2c:	059a      	lsls	r2, r3, #22
 810ba2e:	d402      	bmi.n	810ba36 <_vfiprintf_r+0x1fe>
 810ba30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ba32:	f7fe f92b 	bl	8109c8c <__retarget_lock_release_recursive>
 810ba36:	89ab      	ldrh	r3, [r5, #12]
 810ba38:	065b      	lsls	r3, r3, #25
 810ba3a:	f53f af1f 	bmi.w	810b87c <_vfiprintf_r+0x44>
 810ba3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810ba40:	e71e      	b.n	810b880 <_vfiprintf_r+0x48>
 810ba42:	ab03      	add	r3, sp, #12
 810ba44:	9300      	str	r3, [sp, #0]
 810ba46:	462a      	mov	r2, r5
 810ba48:	4b05      	ldr	r3, [pc, #20]	@ (810ba60 <_vfiprintf_r+0x228>)
 810ba4a:	a904      	add	r1, sp, #16
 810ba4c:	4630      	mov	r0, r6
 810ba4e:	f7fd fe59 	bl	8109704 <_printf_i>
 810ba52:	e7e4      	b.n	810ba1e <_vfiprintf_r+0x1e6>
 810ba54:	0810bfd8 	.word	0x0810bfd8
 810ba58:	0810bfe2 	.word	0x0810bfe2
 810ba5c:	081091d5 	.word	0x081091d5
 810ba60:	0810b815 	.word	0x0810b815
 810ba64:	0810bfde 	.word	0x0810bfde

0810ba68 <__swbuf_r>:
 810ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ba6a:	460e      	mov	r6, r1
 810ba6c:	4614      	mov	r4, r2
 810ba6e:	4605      	mov	r5, r0
 810ba70:	b118      	cbz	r0, 810ba7a <__swbuf_r+0x12>
 810ba72:	6a03      	ldr	r3, [r0, #32]
 810ba74:	b90b      	cbnz	r3, 810ba7a <__swbuf_r+0x12>
 810ba76:	f7fd fff1 	bl	8109a5c <__sinit>
 810ba7a:	69a3      	ldr	r3, [r4, #24]
 810ba7c:	60a3      	str	r3, [r4, #8]
 810ba7e:	89a3      	ldrh	r3, [r4, #12]
 810ba80:	071a      	lsls	r2, r3, #28
 810ba82:	d501      	bpl.n	810ba88 <__swbuf_r+0x20>
 810ba84:	6923      	ldr	r3, [r4, #16]
 810ba86:	b943      	cbnz	r3, 810ba9a <__swbuf_r+0x32>
 810ba88:	4621      	mov	r1, r4
 810ba8a:	4628      	mov	r0, r5
 810ba8c:	f000 f82a 	bl	810bae4 <__swsetup_r>
 810ba90:	b118      	cbz	r0, 810ba9a <__swbuf_r+0x32>
 810ba92:	f04f 37ff 	mov.w	r7, #4294967295
 810ba96:	4638      	mov	r0, r7
 810ba98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ba9a:	6823      	ldr	r3, [r4, #0]
 810ba9c:	6922      	ldr	r2, [r4, #16]
 810ba9e:	1a98      	subs	r0, r3, r2
 810baa0:	6963      	ldr	r3, [r4, #20]
 810baa2:	b2f6      	uxtb	r6, r6
 810baa4:	4283      	cmp	r3, r0
 810baa6:	4637      	mov	r7, r6
 810baa8:	dc05      	bgt.n	810bab6 <__swbuf_r+0x4e>
 810baaa:	4621      	mov	r1, r4
 810baac:	4628      	mov	r0, r5
 810baae:	f7ff fd99 	bl	810b5e4 <_fflush_r>
 810bab2:	2800      	cmp	r0, #0
 810bab4:	d1ed      	bne.n	810ba92 <__swbuf_r+0x2a>
 810bab6:	68a3      	ldr	r3, [r4, #8]
 810bab8:	3b01      	subs	r3, #1
 810baba:	60a3      	str	r3, [r4, #8]
 810babc:	6823      	ldr	r3, [r4, #0]
 810babe:	1c5a      	adds	r2, r3, #1
 810bac0:	6022      	str	r2, [r4, #0]
 810bac2:	701e      	strb	r6, [r3, #0]
 810bac4:	6962      	ldr	r2, [r4, #20]
 810bac6:	1c43      	adds	r3, r0, #1
 810bac8:	429a      	cmp	r2, r3
 810baca:	d004      	beq.n	810bad6 <__swbuf_r+0x6e>
 810bacc:	89a3      	ldrh	r3, [r4, #12]
 810bace:	07db      	lsls	r3, r3, #31
 810bad0:	d5e1      	bpl.n	810ba96 <__swbuf_r+0x2e>
 810bad2:	2e0a      	cmp	r6, #10
 810bad4:	d1df      	bne.n	810ba96 <__swbuf_r+0x2e>
 810bad6:	4621      	mov	r1, r4
 810bad8:	4628      	mov	r0, r5
 810bada:	f7ff fd83 	bl	810b5e4 <_fflush_r>
 810bade:	2800      	cmp	r0, #0
 810bae0:	d0d9      	beq.n	810ba96 <__swbuf_r+0x2e>
 810bae2:	e7d6      	b.n	810ba92 <__swbuf_r+0x2a>

0810bae4 <__swsetup_r>:
 810bae4:	b538      	push	{r3, r4, r5, lr}
 810bae6:	4b29      	ldr	r3, [pc, #164]	@ (810bb8c <__swsetup_r+0xa8>)
 810bae8:	4605      	mov	r5, r0
 810baea:	6818      	ldr	r0, [r3, #0]
 810baec:	460c      	mov	r4, r1
 810baee:	b118      	cbz	r0, 810baf8 <__swsetup_r+0x14>
 810baf0:	6a03      	ldr	r3, [r0, #32]
 810baf2:	b90b      	cbnz	r3, 810baf8 <__swsetup_r+0x14>
 810baf4:	f7fd ffb2 	bl	8109a5c <__sinit>
 810baf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bafc:	0719      	lsls	r1, r3, #28
 810bafe:	d422      	bmi.n	810bb46 <__swsetup_r+0x62>
 810bb00:	06da      	lsls	r2, r3, #27
 810bb02:	d407      	bmi.n	810bb14 <__swsetup_r+0x30>
 810bb04:	2209      	movs	r2, #9
 810bb06:	602a      	str	r2, [r5, #0]
 810bb08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810bb0c:	81a3      	strh	r3, [r4, #12]
 810bb0e:	f04f 30ff 	mov.w	r0, #4294967295
 810bb12:	e033      	b.n	810bb7c <__swsetup_r+0x98>
 810bb14:	0758      	lsls	r0, r3, #29
 810bb16:	d512      	bpl.n	810bb3e <__swsetup_r+0x5a>
 810bb18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810bb1a:	b141      	cbz	r1, 810bb2e <__swsetup_r+0x4a>
 810bb1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810bb20:	4299      	cmp	r1, r3
 810bb22:	d002      	beq.n	810bb2a <__swsetup_r+0x46>
 810bb24:	4628      	mov	r0, r5
 810bb26:	f7fe feff 	bl	810a928 <_free_r>
 810bb2a:	2300      	movs	r3, #0
 810bb2c:	6363      	str	r3, [r4, #52]	@ 0x34
 810bb2e:	89a3      	ldrh	r3, [r4, #12]
 810bb30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810bb34:	81a3      	strh	r3, [r4, #12]
 810bb36:	2300      	movs	r3, #0
 810bb38:	6063      	str	r3, [r4, #4]
 810bb3a:	6923      	ldr	r3, [r4, #16]
 810bb3c:	6023      	str	r3, [r4, #0]
 810bb3e:	89a3      	ldrh	r3, [r4, #12]
 810bb40:	f043 0308 	orr.w	r3, r3, #8
 810bb44:	81a3      	strh	r3, [r4, #12]
 810bb46:	6923      	ldr	r3, [r4, #16]
 810bb48:	b94b      	cbnz	r3, 810bb5e <__swsetup_r+0x7a>
 810bb4a:	89a3      	ldrh	r3, [r4, #12]
 810bb4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810bb50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810bb54:	d003      	beq.n	810bb5e <__swsetup_r+0x7a>
 810bb56:	4621      	mov	r1, r4
 810bb58:	4628      	mov	r0, r5
 810bb5a:	f000 f883 	bl	810bc64 <__smakebuf_r>
 810bb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bb62:	f013 0201 	ands.w	r2, r3, #1
 810bb66:	d00a      	beq.n	810bb7e <__swsetup_r+0x9a>
 810bb68:	2200      	movs	r2, #0
 810bb6a:	60a2      	str	r2, [r4, #8]
 810bb6c:	6962      	ldr	r2, [r4, #20]
 810bb6e:	4252      	negs	r2, r2
 810bb70:	61a2      	str	r2, [r4, #24]
 810bb72:	6922      	ldr	r2, [r4, #16]
 810bb74:	b942      	cbnz	r2, 810bb88 <__swsetup_r+0xa4>
 810bb76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810bb7a:	d1c5      	bne.n	810bb08 <__swsetup_r+0x24>
 810bb7c:	bd38      	pop	{r3, r4, r5, pc}
 810bb7e:	0799      	lsls	r1, r3, #30
 810bb80:	bf58      	it	pl
 810bb82:	6962      	ldrpl	r2, [r4, #20]
 810bb84:	60a2      	str	r2, [r4, #8]
 810bb86:	e7f4      	b.n	810bb72 <__swsetup_r+0x8e>
 810bb88:	2000      	movs	r0, #0
 810bb8a:	e7f7      	b.n	810bb7c <__swsetup_r+0x98>
 810bb8c:	10000044 	.word	0x10000044

0810bb90 <_raise_r>:
 810bb90:	291f      	cmp	r1, #31
 810bb92:	b538      	push	{r3, r4, r5, lr}
 810bb94:	4605      	mov	r5, r0
 810bb96:	460c      	mov	r4, r1
 810bb98:	d904      	bls.n	810bba4 <_raise_r+0x14>
 810bb9a:	2316      	movs	r3, #22
 810bb9c:	6003      	str	r3, [r0, #0]
 810bb9e:	f04f 30ff 	mov.w	r0, #4294967295
 810bba2:	bd38      	pop	{r3, r4, r5, pc}
 810bba4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810bba6:	b112      	cbz	r2, 810bbae <_raise_r+0x1e>
 810bba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810bbac:	b94b      	cbnz	r3, 810bbc2 <_raise_r+0x32>
 810bbae:	4628      	mov	r0, r5
 810bbb0:	f000 f830 	bl	810bc14 <_getpid_r>
 810bbb4:	4622      	mov	r2, r4
 810bbb6:	4601      	mov	r1, r0
 810bbb8:	4628      	mov	r0, r5
 810bbba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810bbbe:	f000 b817 	b.w	810bbf0 <_kill_r>
 810bbc2:	2b01      	cmp	r3, #1
 810bbc4:	d00a      	beq.n	810bbdc <_raise_r+0x4c>
 810bbc6:	1c59      	adds	r1, r3, #1
 810bbc8:	d103      	bne.n	810bbd2 <_raise_r+0x42>
 810bbca:	2316      	movs	r3, #22
 810bbcc:	6003      	str	r3, [r0, #0]
 810bbce:	2001      	movs	r0, #1
 810bbd0:	e7e7      	b.n	810bba2 <_raise_r+0x12>
 810bbd2:	2100      	movs	r1, #0
 810bbd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810bbd8:	4620      	mov	r0, r4
 810bbda:	4798      	blx	r3
 810bbdc:	2000      	movs	r0, #0
 810bbde:	e7e0      	b.n	810bba2 <_raise_r+0x12>

0810bbe0 <raise>:
 810bbe0:	4b02      	ldr	r3, [pc, #8]	@ (810bbec <raise+0xc>)
 810bbe2:	4601      	mov	r1, r0
 810bbe4:	6818      	ldr	r0, [r3, #0]
 810bbe6:	f7ff bfd3 	b.w	810bb90 <_raise_r>
 810bbea:	bf00      	nop
 810bbec:	10000044 	.word	0x10000044

0810bbf0 <_kill_r>:
 810bbf0:	b538      	push	{r3, r4, r5, lr}
 810bbf2:	4d07      	ldr	r5, [pc, #28]	@ (810bc10 <_kill_r+0x20>)
 810bbf4:	2300      	movs	r3, #0
 810bbf6:	4604      	mov	r4, r0
 810bbf8:	4608      	mov	r0, r1
 810bbfa:	4611      	mov	r1, r2
 810bbfc:	602b      	str	r3, [r5, #0]
 810bbfe:	f7f9 fbf9 	bl	81053f4 <_kill>
 810bc02:	1c43      	adds	r3, r0, #1
 810bc04:	d102      	bne.n	810bc0c <_kill_r+0x1c>
 810bc06:	682b      	ldr	r3, [r5, #0]
 810bc08:	b103      	cbz	r3, 810bc0c <_kill_r+0x1c>
 810bc0a:	6023      	str	r3, [r4, #0]
 810bc0c:	bd38      	pop	{r3, r4, r5, pc}
 810bc0e:	bf00      	nop
 810bc10:	10000540 	.word	0x10000540

0810bc14 <_getpid_r>:
 810bc14:	f7f9 bbe6 	b.w	81053e4 <_getpid>

0810bc18 <__swhatbuf_r>:
 810bc18:	b570      	push	{r4, r5, r6, lr}
 810bc1a:	460c      	mov	r4, r1
 810bc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bc20:	2900      	cmp	r1, #0
 810bc22:	b096      	sub	sp, #88	@ 0x58
 810bc24:	4615      	mov	r5, r2
 810bc26:	461e      	mov	r6, r3
 810bc28:	da0d      	bge.n	810bc46 <__swhatbuf_r+0x2e>
 810bc2a:	89a3      	ldrh	r3, [r4, #12]
 810bc2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810bc30:	f04f 0100 	mov.w	r1, #0
 810bc34:	bf14      	ite	ne
 810bc36:	2340      	movne	r3, #64	@ 0x40
 810bc38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810bc3c:	2000      	movs	r0, #0
 810bc3e:	6031      	str	r1, [r6, #0]
 810bc40:	602b      	str	r3, [r5, #0]
 810bc42:	b016      	add	sp, #88	@ 0x58
 810bc44:	bd70      	pop	{r4, r5, r6, pc}
 810bc46:	466a      	mov	r2, sp
 810bc48:	f000 f848 	bl	810bcdc <_fstat_r>
 810bc4c:	2800      	cmp	r0, #0
 810bc4e:	dbec      	blt.n	810bc2a <__swhatbuf_r+0x12>
 810bc50:	9901      	ldr	r1, [sp, #4]
 810bc52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810bc56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810bc5a:	4259      	negs	r1, r3
 810bc5c:	4159      	adcs	r1, r3
 810bc5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810bc62:	e7eb      	b.n	810bc3c <__swhatbuf_r+0x24>

0810bc64 <__smakebuf_r>:
 810bc64:	898b      	ldrh	r3, [r1, #12]
 810bc66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810bc68:	079d      	lsls	r5, r3, #30
 810bc6a:	4606      	mov	r6, r0
 810bc6c:	460c      	mov	r4, r1
 810bc6e:	d507      	bpl.n	810bc80 <__smakebuf_r+0x1c>
 810bc70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810bc74:	6023      	str	r3, [r4, #0]
 810bc76:	6123      	str	r3, [r4, #16]
 810bc78:	2301      	movs	r3, #1
 810bc7a:	6163      	str	r3, [r4, #20]
 810bc7c:	b003      	add	sp, #12
 810bc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810bc80:	ab01      	add	r3, sp, #4
 810bc82:	466a      	mov	r2, sp
 810bc84:	f7ff ffc8 	bl	810bc18 <__swhatbuf_r>
 810bc88:	9f00      	ldr	r7, [sp, #0]
 810bc8a:	4605      	mov	r5, r0
 810bc8c:	4639      	mov	r1, r7
 810bc8e:	4630      	mov	r0, r6
 810bc90:	f7fe febe 	bl	810aa10 <_malloc_r>
 810bc94:	b948      	cbnz	r0, 810bcaa <__smakebuf_r+0x46>
 810bc96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bc9a:	059a      	lsls	r2, r3, #22
 810bc9c:	d4ee      	bmi.n	810bc7c <__smakebuf_r+0x18>
 810bc9e:	f023 0303 	bic.w	r3, r3, #3
 810bca2:	f043 0302 	orr.w	r3, r3, #2
 810bca6:	81a3      	strh	r3, [r4, #12]
 810bca8:	e7e2      	b.n	810bc70 <__smakebuf_r+0xc>
 810bcaa:	89a3      	ldrh	r3, [r4, #12]
 810bcac:	6020      	str	r0, [r4, #0]
 810bcae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810bcb2:	81a3      	strh	r3, [r4, #12]
 810bcb4:	9b01      	ldr	r3, [sp, #4]
 810bcb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810bcba:	b15b      	cbz	r3, 810bcd4 <__smakebuf_r+0x70>
 810bcbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810bcc0:	4630      	mov	r0, r6
 810bcc2:	f000 f81d 	bl	810bd00 <_isatty_r>
 810bcc6:	b128      	cbz	r0, 810bcd4 <__smakebuf_r+0x70>
 810bcc8:	89a3      	ldrh	r3, [r4, #12]
 810bcca:	f023 0303 	bic.w	r3, r3, #3
 810bcce:	f043 0301 	orr.w	r3, r3, #1
 810bcd2:	81a3      	strh	r3, [r4, #12]
 810bcd4:	89a3      	ldrh	r3, [r4, #12]
 810bcd6:	431d      	orrs	r5, r3
 810bcd8:	81a5      	strh	r5, [r4, #12]
 810bcda:	e7cf      	b.n	810bc7c <__smakebuf_r+0x18>

0810bcdc <_fstat_r>:
 810bcdc:	b538      	push	{r3, r4, r5, lr}
 810bcde:	4d07      	ldr	r5, [pc, #28]	@ (810bcfc <_fstat_r+0x20>)
 810bce0:	2300      	movs	r3, #0
 810bce2:	4604      	mov	r4, r0
 810bce4:	4608      	mov	r0, r1
 810bce6:	4611      	mov	r1, r2
 810bce8:	602b      	str	r3, [r5, #0]
 810bcea:	f7f9 fbe3 	bl	81054b4 <_fstat>
 810bcee:	1c43      	adds	r3, r0, #1
 810bcf0:	d102      	bne.n	810bcf8 <_fstat_r+0x1c>
 810bcf2:	682b      	ldr	r3, [r5, #0]
 810bcf4:	b103      	cbz	r3, 810bcf8 <_fstat_r+0x1c>
 810bcf6:	6023      	str	r3, [r4, #0]
 810bcf8:	bd38      	pop	{r3, r4, r5, pc}
 810bcfa:	bf00      	nop
 810bcfc:	10000540 	.word	0x10000540

0810bd00 <_isatty_r>:
 810bd00:	b538      	push	{r3, r4, r5, lr}
 810bd02:	4d06      	ldr	r5, [pc, #24]	@ (810bd1c <_isatty_r+0x1c>)
 810bd04:	2300      	movs	r3, #0
 810bd06:	4604      	mov	r4, r0
 810bd08:	4608      	mov	r0, r1
 810bd0a:	602b      	str	r3, [r5, #0]
 810bd0c:	f7f9 fbe2 	bl	81054d4 <_isatty>
 810bd10:	1c43      	adds	r3, r0, #1
 810bd12:	d102      	bne.n	810bd1a <_isatty_r+0x1a>
 810bd14:	682b      	ldr	r3, [r5, #0]
 810bd16:	b103      	cbz	r3, 810bd1a <_isatty_r+0x1a>
 810bd18:	6023      	str	r3, [r4, #0]
 810bd1a:	bd38      	pop	{r3, r4, r5, pc}
 810bd1c:	10000540 	.word	0x10000540

0810bd20 <_init>:
 810bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bd22:	bf00      	nop
 810bd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bd26:	bc08      	pop	{r3}
 810bd28:	469e      	mov	lr, r3
 810bd2a:	4770      	bx	lr

0810bd2c <_fini>:
 810bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bd2e:	bf00      	nop
 810bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bd32:	bc08      	pop	{r3}
 810bd34:	469e      	mov	lr, r3
 810bd36:	4770      	bx	lr
